<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonTitle" xml:space="preserve">
    <value>AtScale 多维数据集</value>
  </data>
  <data name="ButtonHelp" xml:space="preserve">
    <value>从 AtScale 导入/DirectQuery 多维数据集数据。</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>AtScale 多维数据集</value>
  </data>
  <data name="AtScaleCubes_Description" xml:space="preserve">
    <value>从 AtScale 中导入/DirectQuery 多维数据集数据。</value>
  </data>
  <data name="AtScaleCubes_LongDescription" xml:space="preserve">
    <value>
从服务器 &lt;code&gt;server&lt;/code&gt; 上的 AtScale 返回多维数据集数据。可以指定可选的记录参数 &lt;code&gt;options&lt;/code&gt; 来控制以下选项:
&lt;ul&gt;
        &lt;li&gt;&lt;code&gt;TypedMeasureColumns&lt;/code&gt;: 指示在多维模型或表格模型中指定的类型是否用于添加的度量值列类型的逻辑值。设置为 false 时，类型 "number" 将用于所有度量值列。此选项的默认值为 false。&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;CommandTimeout&lt;/code&gt;: 一个时间段(以秒为单位)，控制在取消服务器端查询前允许其运行的时间。默认值与驱动程序相关。&lt;/li&gt;
        &lt;li&gt;&lt;code&gt;ConnectionTimeout&lt;/code&gt;: 一个时间段(以秒为单位)，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。&lt;/li&gt;

&lt;/ul&gt;
记录参数指定为 [option1 = value1, option2 = value2...]。</value>
  </data>
  <data name="AtScaleCubes_ExampleDescription" xml:space="preserve">
    <value>列出 AtScale 多维数据集中的多维数据集数据。</value>
  </data>
  <data name="FormulaTitle" xml:space="preserve">
    <value>AtScale</value>
  </data>
  <data name="AuthenticationLabel" xml:space="preserve">
    <value>AtScale</value>
  </data>
  <data name="ServerParameterCaption" xml:space="preserve">
    <value>服务器</value>
  </data>
  <data name="ServerParameterDescription" xml:space="preserve">
    <value>指定 AtScale 服务器 URL</value>
  </data>
  <data name="OptionsParameterCaption" xml:space="preserve">
    <value>选项</value>
  </data>
  <data name="OptionsParameterDescription" xml:space="preserve">
    <value>指定要连接到 AtScale 服务器的选项</value>
  </data>
  <data name="InvalidServerNameError" xml:space="preserve">
    <value>指定的服务器名称无效。服务器名称必须使用 "http(s)://contoso.atscale.com:10502/xmla/..." 格式，其中端口号可选。</value>
  </data>
  <data name="InvalidOptionsKey" xml:space="preserve">
    <value>“#{0}”不是有效的 AtScale 选项。有效选项为:“#{1}”</value>
  </data>
  <data name="InvalidOptionsValue" xml:space="preserve">
    <value>此 AtScale 函数不支持值为“#{1}”的选项“#{0}”</value>
  </data>
</root>