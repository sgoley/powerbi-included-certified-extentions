let
    Utilities.ToNavigationTable = (
        table as table,
        keyColumns as list,
        nameColumn as text,
        dataColumn as text,
        itemKindColumn as text,
        itemNameColumn as text,
        isLeafColumn as text
    ) as table =>
        let
            tableType = Value.Type(table),
            newTableType = Type.AddTableKey(tableType, keyColumns, true) meta [
                NavigationTable.NameColumn = nameColumn,
                NavigationTable.DataColumn = dataColumn,
                NavigationTable.ItemKindColumn = itemKindColumn,
                Preview.DelayColumn = itemNameColumn,
                NavigationTable.IsLeafColumn = isLeafColumn
            ],
            navigationTable = Value.ReplaceType(table, newTableType)
        in
            navigationTable,
    Utilities.EscapeColName = (colName as text) as text =>
        let
            escapedOpeningSqBracket = Text.Replace(colName, "[", "\["),
            escapedClosingSqBracket = Text.Replace(escapedOpeningSqBracket, "]", "\]"),
            escapedColName = escapedClosingSqBracket
        in
            escapedColName,
    Utilities.HasQuery = (options as record) =>
        let
            query = if Record.HasFields(options, "Query") then options[Query] else null,
            hasQuery = if query <> null and Text.Length(query) > 0 then true else false
        in
            hasQuery
in
    [
        ToNavigationTable = Utilities.ToNavigationTable,
        EscapeColName = Utilities.EscapeColName,
        HasQuery = Utilities.HasQuery
    ]
