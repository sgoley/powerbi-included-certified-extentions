//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

let
  ElementDefinition_slicing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_base.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_type.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_constraint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_binding.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValueSet = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueSetUri", "valueSetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueSetUri", "valueSetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueSetUri", "uri"}, { "valueSetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ valueSet = null ] else choicesRemoved & [ valueSet = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValueSet(
          childrenReshaped),

  ElementDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Timing_repeat.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBounds = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "boundsQuantity", "boundsRange", "boundsPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "boundsQuantity", "boundsRange", "boundsPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "boundsQuantity", "Quantity"}, { "boundsRange", "Range"}, { "boundsPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ bounds = null ] else choicesRemoved & [ bounds = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeBounds(
          childrenReshaped),

  AllergyIntolerance_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?),
        #"manifestation" = if r[#"manifestation"]? = null then null else List.Transform(r[#"manifestation"]?, CodeableConcept.Reshape),
        #"exposureRoute" = CodeableConcept.Reshape(r[#"exposureRoute"]?),
        #"note" = Annotation.Reshape(r[#"note"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Appointment_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"subtype" = if r[#"subtype"]? = null then null else List.Transform(r[#"subtype"]?, Coding.Reshape),
        #"purposeOfEvent" = if r[#"purposeOfEvent"]? = null then null else List.Transform(r[#"purposeOfEvent"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"userId" = Identifier.Reshape(r[#"userId"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"media" = Coding.Reshape(r[#"media"]?),
        #"network" = AuditEvent_participant_network.Reshape(r[#"network"]?),
        #"purposeOfUse" = if r[#"purposeOfUse"]? = null then null else List.Transform(r[#"purposeOfUse"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_participant_network.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_object.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"role" = Coding.Reshape(r[#"role"]?),
        #"lifecycle" = Coding.Reshape(r[#"lifecycle"]?),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, AuditEvent_object_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_object_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"search" = Bundle_entry_search.Reshape(r[#"search"]?),
        #"request" = Bundle_entry_request.Reshape(r[#"request"]?),
        #"response" = Bundle_entry_response.Reshape(r[#"response"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_search.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_request.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_relatedPlan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"plan" = Reference.Reshape(r[#"plan"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"member" = Reference.Reshape(r[#"member"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actionResulting" = if r[#"actionResulting"]? = null then null else List.Transform(r[#"actionResulting"]?, Reference.Reshape),
        #"progress" = if r[#"progress"]? = null then null else List.Transform(r[#"progress"]?, Annotation.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"detail" = CarePlan_activity_detail.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity_detail.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeScheduled = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "scheduledTiming", "Timing"}, { "scheduledPeriod", "Period"}, { "scheduledString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ scheduled = null ] else choicesRemoved & [ scheduled = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productCodeableConcept", "productReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productCodeableConcept", "productReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productCodeableConcept", "CodeableConcept"}, { "productReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dailyAmount" = Quantity.Reshape(r[#"dailyAmount"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeScheduled(
            childrenReshaped)),

  Claim_payee.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"person" = Reference.Reshape(r[#"person"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"diagnosis" = Coding.Reshape(r[#"diagnosis"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"relationship" = Coding.Reshape(r[#"relationship"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"service" = Coding.Reshape(r[#"service"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Quantity.Reshape(r[#"unitPrice"]?),
        #"net" = Quantity.Reshape(r[#"net"]?),
        #"udi" = Coding.Reshape(r[#"udi"]?),
        #"bodySite" = Coding.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, Coding.Reshape),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, Coding.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Claim_item_detail.Reshape),
        #"prosthesis" = Claim_item_prosthesis.Reshape(r[#"prosthesis"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"service" = Coding.Reshape(r[#"service"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Quantity.Reshape(r[#"unitPrice"]?),
        #"net" = Quantity.Reshape(r[#"net"]?),
        #"udi" = Coding.Reshape(r[#"udi"]?),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, Claim_item_detail_subDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"service" = Coding.Reshape(r[#"service"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Quantity.Reshape(r[#"unitPrice"]?),
        #"net" = Quantity.Reshape(r[#"net"]?),
        #"udi" = Coding.Reshape(r[#"udi"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item_prosthesis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"priorMaterial" = Coding.Reshape(r[#"priorMaterial"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_missingTeeth.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"tooth" = Coding.Reshape(r[#"tooth"]?),
        #"reason" = Coding.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_detail_adjudication.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ClaimResponse_item_detail_subDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_detail_subDetail_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail_subDetail_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"service" = Coding.Reshape(r[#"service"]?),
        #"fee" = Quantity.Reshape(r[#"fee"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_addItem_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_addItem_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"service" = Coding.Reshape(r[#"service"]?),
        #"fee" = Quantity.Reshape(r[#"fee"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_addItem_detail_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem_detail_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_error.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_note.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"relationship" = Coding.Reshape(r[#"relationship"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_investigations.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_finding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = CodeableConcept.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_ruledOut.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = CodeableConcept.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Communication_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  CommunicationRequest_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Composition_attester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_section.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Reference.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, @Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, ConceptMap_element_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_element_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"dependsOn" = if r[#"dependsOn"]? = null then null else List.Transform(r[#"dependsOn"]?, ConceptMap_element_target_dependsOn.Reshape),
        #"product" = if r[#"product"]? = null then null else List.Transform(r[#"product"]?, ConceptMap_element_target_dependsOn.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_element_target_dependsOn.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_stage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"summary" = CodeableConcept.Reshape(r[#"summary"]?),
        #"assessment" = if r[#"assessment"]? = null then null else List.Transform(r[#"assessment"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_evidence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_software.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_implementation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"security" = Conformance_rest_security.Reshape(r[#"security"]?),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, Conformance_rest_resource.Reshape),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, Conformance_rest_interaction.Reshape),
        #"operation" = if r[#"operation"]? = null then null else List.Transform(r[#"operation"]?, Conformance_rest_operation.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, Conformance_rest_searchParam.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_security.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"service" = if r[#"service"]? = null then null else List.Transform(r[#"service"]?, CodeableConcept.Reshape),
        #"certificate" = if r[#"certificate"]? = null then null else List.Transform(r[#"certificate"]?, Conformance_rest_security_certificate.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_security_certificate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, Conformance_rest_resource_interaction.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, Conformance_rest_searchParam.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_resource_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_searchParam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_rest_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"definition" = Reference.Reshape(r[#"definition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_messaging.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Conformance_messaging_endpoint.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, Conformance_messaging_event.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_messaging_endpoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"protocol" = Coding.Reshape(r[#"protocol"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_messaging_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Conformance_document.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"entity" = Reference.Reshape(r[#"entity"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_valuedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEntity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "entityCodeableConcept", "entityReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "entityCodeableConcept", "entityReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "entityCodeableConcept", "CodeableConcept"}, { "entityReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ entity = null ] else choicesRemoved & [ entity = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Quantity.Reshape(r[#"unitPrice"]?),
        #"net" = Quantity.Reshape(r[#"net"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEntity(
          childrenReshaped),

  Contract_signer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"actionReason" = if r[#"actionReason"]? = null then null else List.Transform(r[#"actionReason"]?, CodeableConcept.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Contract_term_actor.Reshape),
        #"valuedItem" = if r[#"valuedItem"]? = null then null else List.Transform(r[#"valuedItem"]?, Contract_term_valuedItem.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, @Contract_term.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"entity" = Reference.Reshape(r[#"entity"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_valuedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEntity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "entityCodeableConcept", "entityReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "entityCodeableConcept", "entityReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "entityCodeableConcept", "CodeableConcept"}, { "entityReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ entity = null ] else choicesRemoved & [ entity = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Quantity.Reshape(r[#"unitPrice"]?),
        #"net" = Quantity.Reshape(r[#"net"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEntity(
          childrenReshaped),

  Contract_friendly.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_legal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_rule.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  DataElement_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataElement_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue_mitigation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceComponent_productionSpecification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"specType" = CodeableConcept.Reshape(r[#"specType"]?),
        #"componentId" = Identifier.Reshape(r[#"componentId"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceMetric_calibration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticOrder_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"description" = CodeableConcept.Reshape(r[#"description"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticOrder_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, DiagnosticOrder_event.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticReport_image.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = Reference.Reshape(r[#"link"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest_content.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeP = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "pAttachment", "pReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "pAttachment", "pReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "pAttachment", "Attachment"}, { "pReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ p = null ] else choicesRemoved & [ p = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeP(
          childrenReshaped),

  DocumentManifest_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"ref" = Reference.Reshape(r[#"ref"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_relatesTo.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_content.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"attachment" = Attachment.Reshape(r[#"attachment"]?),
        #"format" = if r[#"format"]? = null then null else List.Transform(r[#"format"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_context.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"facilityType" = CodeableConcept.Reshape(r[#"facilityType"]?),
        #"practiceSetting" = CodeableConcept.Reshape(r[#"practiceSetting"]?),
        #"sourcePatientInfo" = Reference.Reshape(r[#"sourcePatientInfo"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, DocumentReference_context_related.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_context_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"ref" = Reference.Reshape(r[#"ref"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"individual" = Reference.Reshape(r[#"individual"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_hospitalization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"preAdmissionIdentifier" = Identifier.Reshape(r[#"preAdmissionIdentifier"]?),
        #"origin" = Reference.Reshape(r[#"origin"]?),
        #"admitSource" = CodeableConcept.Reshape(r[#"admitSource"]?),
        #"admittingDiagnosis" = if r[#"admittingDiagnosis"]? = null then null else List.Transform(r[#"admittingDiagnosis"]?, Reference.Reshape),
        #"reAdmission" = CodeableConcept.Reshape(r[#"reAdmission"]?),
        #"dietPreference" = if r[#"dietPreference"]? = null then null else List.Transform(r[#"dietPreference"]?, CodeableConcept.Reshape),
        #"specialCourtesy" = if r[#"specialCourtesy"]? = null then null else List.Transform(r[#"specialCourtesy"]?, CodeableConcept.Reshape),
        #"specialArrangement" = if r[#"specialArrangement"]? = null then null else List.Transform(r[#"specialArrangement"]?, CodeableConcept.Reshape),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"dischargeDisposition" = CodeableConcept.Reshape(r[#"dischargeDisposition"]?),
        #"dischargeDiagnosis" = if r[#"dischargeDiagnosis"]? = null then null else List.Transform(r[#"dischargeDiagnosis"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_careTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"member" = Reference.Reshape(r[#"member"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  FamilyMemberHistory_condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetQuantity", "onsetRange", "onsetPeriod", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetQuantity", "onsetRange", "onsetPeriod", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetQuantity", "Quantity"}, { "onsetRange", "Range"}, { "onsetPeriod", "Period"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"note" = Annotation.Reshape(r[#"note"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnset(
          childrenReshaped),

  Goal_outcome.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeResult = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "resultCodeableConcept", "resultReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "resultCodeableConcept", "resultReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "resultCodeableConcept", "CodeableConcept"}, { "resultReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ result = null ] else choicesRemoved & [ result = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeResult(
          childrenReshaped),

  Group_characteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueBoolean", "boolean"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Group_member.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"entity" = Reference.Reshape(r[#"entity"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_serviceType.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_availableTime.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_notAvailable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"during" = Period.Reshape(r[#"during"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingObjectSelection_study.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"imagingStudy" = Reference.Reshape(r[#"imagingStudy"]?),
        #"series" = if r[#"series"]? = null then null else List.Transform(r[#"series"]?, ImagingObjectSelection_study_series.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingObjectSelection_study_series.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ImagingObjectSelection_study_series_instance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingObjectSelection_study_series_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"frames" = if r[#"frames"]? = null then null else List.Transform(r[#"frames"]?, ImagingObjectSelection_study_series_instance_frames.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingObjectSelection_study_series_instance_frames.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modality" = Coding.Reshape(r[#"modality"]?),
        #"bodySite" = Coding.Reshape(r[#"bodySite"]?),
        #"laterality" = Coding.Reshape(r[#"laterality"]?),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ImagingStudy_series_instance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_explanation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"reasonNotGiven" = if r[#"reasonNotGiven"]? = null then null else List.Transform(r[#"reasonNotGiven"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"detail" = Reference.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_vaccinationProtocol.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = Reference.Reshape(r[#"authority"]?),
        #"targetDisease" = if r[#"targetDisease"]? = null then null else List.Transform(r[#"targetDisease"]?, CodeableConcept.Reshape),
        #"doseStatus" = CodeableConcept.Reshape(r[#"doseStatus"]?),
        #"doseStatusReason" = CodeableConcept.Reshape(r[#"doseStatusReason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"vaccineCode" = CodeableConcept.Reshape(r[#"vaccineCode"]?),
        #"forecastStatus" = CodeableConcept.Reshape(r[#"forecastStatus"]?),
        #"dateCriterion" = if r[#"dateCriterion"]? = null then null else List.Transform(r[#"dateCriterion"]?, ImmunizationRecommendation_recommendation_dateCriterion.Reshape),
        #"protocol" = ImmunizationRecommendation_recommendation_protocol.Reshape(r[#"protocol"]?),
        #"supportingImmunization" = if r[#"supportingImmunization"]? = null then null else List.Transform(r[#"supportingImmunization"]?, Reference.Reshape),
        #"supportingPatientInformation" = if r[#"supportingPatientInformation"]? = null then null else List.Transform(r[#"supportingPatientInformation"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation_dateCriterion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation_protocol.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = Reference.Reshape(r[#"authority"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_dependency.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_package.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, ImplementationGuide_package_resource.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_package_resource.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceUri", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceUri", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceUri", "uri"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"exampleFor" = Reference.Reshape(r[#"exampleFor"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSource(
          childrenReshaped),

  ImplementationGuide_global.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_page.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"page" = if r[#"page"]? = null then null else List.Transform(r[#"page"]?, @ImplementationGuide_page.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"flag" = CodeableConcept.Reshape(r[#"flag"]?),
        #"item" = Reference.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location_position.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_product.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Medication_product_ingredient.Reshape),
        #"batch" = if r[#"batch"]? = null then null else List.Transform(r[#"batch"]?, Medication_product_batch.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_product_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = Reference.Reshape(r[#"item"]?),
        #"amount" = Ratio.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_product_batch.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_package.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"container" = CodeableConcept.Reshape(r[#"container"]?),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Medication_package_content.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_package_content.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = Reference.Reshape(r[#"item"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration_dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "siteCodeableConcept", "siteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "siteCodeableConcept", "siteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "siteCodeableConcept", "CodeableConcept"}, { "siteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ site = null ] else choicesRemoved & [ site = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeSite(
            childrenReshaped)),

  MedicationDispense_dosageInstruction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      ReshapeSite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "siteCodeableConcept", "siteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "siteCodeableConcept", "siteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "siteCodeableConcept", "CodeableConcept"}, { "siteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ site = null ] else choicesRemoved & [ site = choiceRecord ],
      ReshapeDose = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseRange", "doseQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseRange", "doseQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseRange", "Range"}, { "doseQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ dose = null ] else choicesRemoved & [ dose = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"additionalInstructions" = CodeableConcept.Reshape(r[#"additionalInstructions"]?),
        #"timing" = Timing.Reshape(r[#"timing"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"maxDosePerPeriod" = Ratio.Reshape(r[#"maxDosePerPeriod"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeDose(
            ReshapeSite(
              ReshapeAsNeeded(
                childrenReshaped)))),

  MedicationDispense_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"responsibleParty" = if r[#"responsibleParty"]? = null then null else List.Transform(r[#"responsibleParty"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationOrder_dosageInstruction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      ReshapeSite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "siteCodeableConcept", "siteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "siteCodeableConcept", "siteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "siteCodeableConcept", "CodeableConcept"}, { "siteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ site = null ] else choicesRemoved & [ site = choiceRecord ],
      ReshapeDose = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseRange", "doseQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseRange", "doseQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseRange", "Range"}, { "doseQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ dose = null ] else choicesRemoved & [ dose = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"additionalInstructions" = CodeableConcept.Reshape(r[#"additionalInstructions"]?),
        #"timing" = Timing.Reshape(r[#"timing"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"maxDosePerPeriod" = Ratio.Reshape(r[#"maxDosePerPeriod"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeDose(
            ReshapeSite(
              ReshapeAsNeeded(
                childrenReshaped)))),

  MedicationOrder_dispenseRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"expectedSupplyDuration" = Quantity.Reshape(r[#"expectedSupplyDuration"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          childrenReshaped),

  MedicationOrder_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationStatement_dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      ReshapeSite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "siteCodeableConcept", "siteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "siteCodeableConcept", "siteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "siteCodeableConcept", "CodeableConcept"}, { "siteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ site = null ] else choicesRemoved & [ site = choiceRecord ],
      ReshapeQuantity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "quantityQuantity", "quantityRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "quantityQuantity", "quantityRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "quantityQuantity", "Quantity"}, { "quantityRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ quantity = null ] else choicesRemoved & [ quantity = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"timing" = Timing.Reshape(r[#"timing"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"maxDosePerPeriod" = Ratio.Reshape(r[#"maxDosePerPeriod"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeQuantity(
            ReshapeSite(
              ReshapeAsNeeded(
                childrenReshaped)))),

  MessageHeader_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = Reference.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = ContactPoint.Reshape(r[#"contact"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_destination.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem_uniqueId.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"nutrient" = if r[#"nutrient"]? = null then null else List.Transform(r[#"nutrient"]?, NutritionOrder_oralDiet_nutrient.Reshape),
        #"texture" = if r[#"texture"]? = null then null else List.Transform(r[#"texture"]?, NutritionOrder_oralDiet_texture.Reshape),
        #"fluidConsistencyType" = if r[#"fluidConsistencyType"]? = null then null else List.Transform(r[#"fluidConsistencyType"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_nutrient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_texture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"foodType" = CodeableConcept.Reshape(r[#"foodType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_supplement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"baseFormulaType" = CodeableConcept.Reshape(r[#"baseFormulaType"]?),
        #"additiveType" = CodeableConcept.Reshape(r[#"additiveType"]?),
        #"caloricDensity" = Quantity.Reshape(r[#"caloricDensity"]?),
        #"routeofAdministration" = CodeableConcept.Reshape(r[#"routeofAdministration"]?),
        #"administration" = if r[#"administration"]? = null then null else List.Transform(r[#"administration"]?, NutritionOrder_enteralFormula_administration.Reshape),
        #"maxVolumeToDeliver" = Quantity.Reshape(r[#"maxVolumeToDeliver"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula_administration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateQuantity", "rateRatio"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateQuantity", "rateRatio" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateQuantity", "Quantity"}, { "rateRatio", "Ratio"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"schedule" = Timing.Reshape(r[#"schedule"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          childrenReshaped),

  Observation_referenceRange.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?),
        #"meaning" = CodeableConcept.Reshape(r[#"meaning"]?),
        #"age" = Range.Reshape(r[#"age"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation_component.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueAttachment", "Attachment"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  OperationDefinition_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?),
        #"binding" = OperationDefinition_parameter_binding.Reshape(r[#"binding"]?),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @OperationDefinition_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter_binding.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValueSet = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueSetUri", "valueSetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueSetUri", "valueSetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueSetUri", "uri"}, { "valueSetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ valueSet = null ] else choicesRemoved & [ valueSet = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValueSet(
          childrenReshaped),

  OperationOutcome_issue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = CodeableConcept.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Order_when.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"schedule" = Timing.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"purpose" = CodeableConcept.Reshape(r[#"purpose"]?),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueInteger", "valueDecimal", "valueBase64Binary", "valueInstant", "valueString", "valueUri", "valueDate", "valueDateTime", "valueTime", "valueCode", "valueOid", "valueId", "valueUnsignedInt", "valuePositiveInt", "valueMarkdown", "valueAnnotation", "valueAttachment", "valueIdentifier", "valueCodeableConcept", "valueCoding", "valueQuantity", "valueRange", "valuePeriod", "valueRatio", "valueSampledData", "valueSignature", "valueHumanName", "valueAddress", "valueContactPoint", "valueTiming", "valueReference", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueInteger", "valueDecimal", "valueBase64Binary", "valueInstant", "valueString", "valueUri", "valueDate", "valueDateTime", "valueTime", "valueCode", "valueOid", "valueId", "valueUnsignedInt", "valuePositiveInt", "valueMarkdown", "valueAnnotation", "valueAttachment", "valueIdentifier", "valueCodeableConcept", "valueCoding", "valueQuantity", "valueRange", "valuePeriod", "valueRatio", "valueSampledData", "valueSignature", "valueHumanName", "valueAddress", "valueContactPoint", "valueTiming", "valueReference", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"}, { "valueBase64Binary", "base64Binary"}, { "valueInstant", "instant"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueCode", "code"}, { "valueOid", "oid"}, { "valueId", "id"}, { "valueUnsignedInt", "unsignedInt"}, { "valuePositiveInt", "positiveInt"}, { "valueMarkdown", "markdown"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueIdentifier", "Identifier"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valuePeriod", "Period"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueHumanName", "HumanName"}, { "valueAddress", "Address"}, { "valueContactPoint", "ContactPoint"}, { "valueTiming", "Timing"}, { "valueReference", "Reference"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Patient_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"relationship" = if r[#"relationship"]? = null then null else List.Transform(r[#"relationship"]?, CodeableConcept.Reshape),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_animal.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"species" = CodeableConcept.Reshape(r[#"species"]?),
        #"breed" = CodeableConcept.Reshape(r[#"breed"]?),
        #"genderStatus" = CodeableConcept.Reshape(r[#"genderStatus"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"other" = Reference.Reshape(r[#"other"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"responce" = Reference.Reshape(r[#"responce"]?),
        #"submitter" = Reference.Reshape(r[#"submitter"]?),
        #"payee" = Reference.Reshape(r[#"payee"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_note.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner_practitionerRole.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"healthcareService" = if r[#"healthcareService"]? = null then null else List.Transform(r[#"healthcareService"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner_qualification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"issuer" = Reference.Reshape(r[#"issuer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_focalDevice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"manipulated" = Reference.Reshape(r[#"manipulated"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessRequest_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessResponse_notes.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = Coding.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"userId" = Identifier.Reshape(r[#"userId"]?),
        #"relatedAgent" = if r[#"relatedAgent"]? = null then null else List.Transform(r[#"relatedAgent"]?, Provenance_agent_relatedAgent.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_agent_relatedAgent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_entity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"agent" = Provenance_agent.Reshape(r[#"agent"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, Coding.Reshape),
        #"question" = if r[#"question"]? = null then null else List.Transform(r[#"question"]?, Questionnaire_group_question.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, @Questionnaire_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire_group_question.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, Coding.Reshape),
        #"options" = Reference.Reshape(r[#"options"]?),
        #"option" = if r[#"option"]? = null then null else List.Transform(r[#"option"]?, Coding.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, Questionnaire_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"question" = if r[#"question"]? = null then null else List.Transform(r[#"question"]?, QuestionnaireResponse_group_question.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, @QuestionnaireResponse_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse_group_question.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"answer" = if r[#"answer"]? = null then null else List.Transform(r[#"answer"]?, QuestionnaireResponse_group_question_answer.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse_group_question_answer.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueInstant", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueInstant", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueDecimal", "decimal"}, { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueInstant", "instant"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueAttachment", "Attachment"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, QuestionnaireResponse_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  RiskAssessment_prediction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProbability = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "probabilityDecimal", "probabilityRange", "probabilityCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "probabilityDecimal", "probabilityRange", "probabilityCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "probabilityDecimal", "decimal"}, { "probabilityRange", "Range"}, { "probabilityCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ probability = null ] else choicesRemoved & [ probability = choiceRecord ],
      ReshapeWhen = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whenPeriod", "whenRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whenPeriod", "whenRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whenPeriod", "Period"}, { "whenRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ when = null ] else choicesRemoved & [ when = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeWhen(
          ReshapeProbability(
            childrenReshaped)),

  SearchParameter_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen_collection.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCollected = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "collectedDateTime", "collectedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "collectedDateTime", "collectedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "collectedDateTime", "dateTime"}, { "collectedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ collected = null ] else choicesRemoved & [ collected = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"collector" = Reference.Reshape(r[#"collector"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeCollected(
          childrenReshaped),

  Specimen_treatment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"procedure" = CodeableConcept.Reshape(r[#"procedure"]?),
        #"additive" = if r[#"additive"]? = null then null else List.Transform(r[#"additive"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen_container.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAdditive = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "additiveCodeableConcept", "additiveReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "additiveCodeableConcept", "additiveReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "additiveCodeableConcept", "CodeableConcept"}, { "additiveReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ additive = null ] else choicesRemoved & [ additive = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"capacity" = Quantity.Reshape(r[#"capacity"]?),
        #"specimenQuantity" = Quantity.Reshape(r[#"specimenQuantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAdditive(
          childrenReshaped),

  StructureDefinition_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_snapshot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_differential.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription_channel.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Ratio.Reshape(r[#"quantity"]?),
        #"substance" = Reference.Reshape(r[#"substance"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SupplyRequest_when.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"schedule" = Timing.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, TestScript_metadata_link.Reshape),
        #"capability" = if r[#"capability"]? = null then null else List.Transform(r[#"capability"]?, TestScript_metadata_capability.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_capability.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"conformance" = Reference.Reshape(r[#"conformance"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_fixture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_variable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_setup_action.Reshape),
        #"metadata" = TestScript_metadata.Reshape(r[#"metadata"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"requestHeader" = if r[#"requestHeader"]? = null then null else List.Transform(r[#"requestHeader"]?, TestScript_setup_action_operation_requestHeader.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation_requestHeader.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_test_action.Reshape),
        #"metadata" = TestScript_metadata.Reshape(r[#"metadata"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_teardown_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_codeSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, ValueSet_codeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_codeSystem_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_codeSystem_concept_designation.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, @ValueSet_codeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_codeSystem_concept_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"include" = if r[#"include"]? = null then null else List.Transform(r[#"include"]?, ValueSet_compose_include.Reshape),
        #"exclude" = if r[#"exclude"]? = null then null else List.Transform(r[#"exclude"]?, ValueSet_compose_include.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, ValueSet_compose_include_concept.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, ValueSet_compose_include_filter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_codeSystem_concept_designation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ValueSet_expansion_parameter.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"}, { "valueUri", "uri"}, { "valueCode", "code"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ValueSet_expansion_contains.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, @ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription_dispense.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"product" = Coding.Reshape(r[#"product"]?),
        #"duration" = Quantity.Reshape(r[#"duration"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"activePeriod" = Period.Reshape(r[#"activePeriod"]?),
        #"currency" = Coding.Reshape(r[#"currency"]?),
        #"balance" = Quantity.Reshape(r[#"balance"]?),
        #"coveragePeriod" = Period.Reshape(r[#"coveragePeriod"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"owner" = Reference.Reshape(r[#"owner"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Address.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Age.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AllergyIntolerance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"reporter" = Reference.Reshape(r[#"reporter"]?),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?),
        #"note" = Annotation.Reshape(r[#"note"]?),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, AllergyIntolerance_reaction.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Annotation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAuthor = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "authorReference", "authorString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "authorReference", "authorString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "authorReference", "Reference"}, { "authorString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ author = null ] else choicesRemoved & [ author = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAuthor(
          childrenReshaped),

  Appointment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"slot" = if r[#"slot"]? = null then null else List.Transform(r[#"slot"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Appointment_participant.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AppointmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"appointment" = Reference.Reshape(r[#"appointment"]?),
        #"participantType" = if r[#"participantType"]? = null then null else List.Transform(r[#"participantType"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Attachment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"event" = AuditEvent_event.Reshape(r[#"event"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, AuditEvent_participant.Reshape),
        #"source" = AuditEvent_source.Reshape(r[#"source"]?),
        #"object" = if r[#"object"]? = null then null else List.Transform(r[#"object"]?, AuditEvent_object.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BackboneElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Basic.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Binary.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BodySite.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Bundle_entry.Reshape),
        #"signature" = Signature.Reshape(r[#"signature"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"support" = if r[#"support"]? = null then null else List.Transform(r[#"support"]?, Reference.Reshape),
        #"relatedPlan" = if r[#"relatedPlan"]? = null then null else List.Transform(r[#"relatedPlan"]?, CarePlan_relatedPlan.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, CarePlan_participant.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"activity" = if r[#"activity"]? = null then null else List.Transform(r[#"activity"]?, CarePlan_activity.Reshape),
        #"note" = Annotation.Reshape(r[#"note"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"priority" = Coding.Reshape(r[#"priority"]?),
        #"fundsReserve" = Coding.Reshape(r[#"fundsReserve"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"originalPrescription" = Reference.Reshape(r[#"originalPrescription"]?),
        #"payee" = Claim_payee.Reshape(r[#"payee"]?),
        #"referral" = Reference.Reshape(r[#"referral"]?),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, Claim_diagnosis.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, Coding.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"coverage" = if r[#"coverage"]? = null then null else List.Transform(r[#"coverage"]?, Claim_coverage.Reshape),
        #"exception" = if r[#"exception"]? = null then null else List.Transform(r[#"exception"]?, Coding.Reshape),
        #"accidentType" = Coding.Reshape(r[#"accidentType"]?),
        #"interventionException" = if r[#"interventionException"]? = null then null else List.Transform(r[#"interventionException"]?, Coding.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Claim_item.Reshape),
        #"additionalMaterials" = if r[#"additionalMaterials"]? = null then null else List.Transform(r[#"additionalMaterials"]?, Coding.Reshape),
        #"missingTeeth" = if r[#"missingTeeth"]? = null then null else List.Transform(r[#"missingTeeth"]?, Claim_missingTeeth.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"payeeType" = Coding.Reshape(r[#"payeeType"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ClaimResponse_item.Reshape),
        #"addItem" = if r[#"addItem"]? = null then null else List.Transform(r[#"addItem"]?, ClaimResponse_addItem.Reshape),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, ClaimResponse_error.Reshape),
        #"totalCost" = Quantity.Reshape(r[#"totalCost"]?),
        #"unallocDeductable" = Quantity.Reshape(r[#"unallocDeductable"]?),
        #"totalBenefit" = Quantity.Reshape(r[#"totalBenefit"]?),
        #"paymentAdjustment" = Quantity.Reshape(r[#"paymentAdjustment"]?),
        #"paymentAdjustmentReason" = Coding.Reshape(r[#"paymentAdjustmentReason"]?),
        #"paymentAmount" = Quantity.Reshape(r[#"paymentAmount"]?),
        #"paymentRef" = Identifier.Reshape(r[#"paymentRef"]?),
        #"reserved" = Coding.Reshape(r[#"reserved"]?),
        #"form" = Coding.Reshape(r[#"form"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, ClaimResponse_note.Reshape),
        #"coverage" = if r[#"coverage"]? = null then null else List.Transform(r[#"coverage"]?, ClaimResponse_coverage.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTrigger = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "triggerCodeableConcept", "triggerReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "triggerCodeableConcept", "triggerReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "triggerCodeableConcept", "CodeableConcept"}, { "triggerReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ trigger = null ] else choicesRemoved & [ trigger = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"assessor" = Reference.Reshape(r[#"assessor"]?),
        #"previous" = Reference.Reshape(r[#"previous"]?),
        #"problem" = if r[#"problem"]? = null then null else List.Transform(r[#"problem"]?, Reference.Reshape),
        #"investigations" = if r[#"investigations"]? = null then null else List.Transform(r[#"investigations"]?, ClinicalImpression_investigations.Reshape),
        #"finding" = if r[#"finding"]? = null then null else List.Transform(r[#"finding"]?, ClinicalImpression_finding.Reshape),
        #"resolved" = if r[#"resolved"]? = null then null else List.Transform(r[#"resolved"]?, CodeableConcept.Reshape),
        #"ruledOut" = if r[#"ruledOut"]? = null then null else List.Transform(r[#"ruledOut"]?, ClinicalImpression_ruledOut.Reshape),
        #"plan" = if r[#"plan"]? = null then null else List.Transform(r[#"plan"]?, Reference.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTrigger(
          childrenReshaped),

  CodeableConcept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"coding" = if r[#"coding"]? = null then null else List.Transform(r[#"coding"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, Communication_payload.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"requestDetail" = Reference.Reshape(r[#"requestDetail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CommunicationRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeScheduled = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "scheduledDateTime", "scheduledPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "scheduledDateTime", "scheduledPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "scheduledDateTime", "dateTime"}, { "scheduledPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ scheduled = null ] else choicesRemoved & [ scheduled = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, CommunicationRequest_payload.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeScheduled(
          childrenReshaped),

  Composition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"attester" = if r[#"attester"]? = null then null else List.Transform(r[#"attester"]?, Composition_attester.Reshape),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, Composition_event.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceUri", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceUri", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceUri", "uri"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetUri", "targetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetUri", "targetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetUri", "uri"}, { "targetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ConceptMap_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ConceptMap_element.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          ReshapeSource(
            childrenReshaped)),

  Condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetDateTime", "onsetQuantity", "onsetPeriod", "onsetRange", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetDateTime", "onsetQuantity", "onsetPeriod", "onsetRange", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetDateTime", "dateTime"}, { "onsetQuantity", "Quantity"}, { "onsetPeriod", "Period"}, { "onsetRange", "Range"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      ReshapeAbatement = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "abatementDateTime", "abatementQuantity", "abatementBoolean", "abatementPeriod", "abatementRange", "abatementString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "abatementDateTime", "abatementQuantity", "abatementBoolean", "abatementPeriod", "abatementRange", "abatementString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "abatementDateTime", "dateTime"}, { "abatementQuantity", "Quantity"}, { "abatementBoolean", "boolean"}, { "abatementPeriod", "Period"}, { "abatementRange", "Range"}, { "abatementString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ abatement = null ] else choicesRemoved & [ abatement = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"severity" = CodeableConcept.Reshape(r[#"severity"]?),
        #"stage" = Condition_stage.Reshape(r[#"stage"]?),
        #"evidence" = if r[#"evidence"]? = null then null else List.Transform(r[#"evidence"]?, Condition_evidence.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAbatement(
          ReshapeOnset(
            childrenReshaped)),

  Conformance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Conformance_contact.Reshape),
        #"software" = Conformance_software.Reshape(r[#"software"]?),
        #"implementation" = Conformance_implementation.Reshape(r[#"implementation"]?),
        #"profile" = if r[#"profile"]? = null then null else List.Transform(r[#"profile"]?, Reference.Reshape),
        #"rest" = if r[#"rest"]? = null then null else List.Transform(r[#"rest"]?, Conformance_rest.Reshape),
        #"messaging" = if r[#"messaging"]? = null then null else List.Transform(r[#"messaging"]?, Conformance_messaging.Reshape),
        #"document" = if r[#"document"]? = null then null else List.Transform(r[#"document"]?, Conformance_document.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ContactPoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contained.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"Account" = if r[#"Account"]? = null then null else List.Transform(r[#"Account"]?, Account.Reshape),
        #"AllergyIntolerance" = if r[#"AllergyIntolerance"]? = null then null else List.Transform(r[#"AllergyIntolerance"]?, AllergyIntolerance.Reshape),
        #"Appointment" = if r[#"Appointment"]? = null then null else List.Transform(r[#"Appointment"]?, Appointment.Reshape),
        #"AppointmentResponse" = if r[#"AppointmentResponse"]? = null then null else List.Transform(r[#"AppointmentResponse"]?, AppointmentResponse.Reshape),
        #"AuditEvent" = if r[#"AuditEvent"]? = null then null else List.Transform(r[#"AuditEvent"]?, AuditEvent.Reshape),
        #"Basic" = if r[#"Basic"]? = null then null else List.Transform(r[#"Basic"]?, Basic.Reshape),
        #"Binary" = if r[#"Binary"]? = null then null else List.Transform(r[#"Binary"]?, Binary.Reshape),
        #"BodySite" = if r[#"BodySite"]? = null then null else List.Transform(r[#"BodySite"]?, BodySite.Reshape),
        #"Bundle" = if r[#"Bundle"]? = null then null else List.Transform(r[#"Bundle"]?, Bundle.Reshape),
        #"CarePlan" = if r[#"CarePlan"]? = null then null else List.Transform(r[#"CarePlan"]?, CarePlan.Reshape),
        #"Claim" = if r[#"Claim"]? = null then null else List.Transform(r[#"Claim"]?, Claim.Reshape),
        #"ClaimResponse" = if r[#"ClaimResponse"]? = null then null else List.Transform(r[#"ClaimResponse"]?, ClaimResponse.Reshape),
        #"ClinicalImpression" = if r[#"ClinicalImpression"]? = null then null else List.Transform(r[#"ClinicalImpression"]?, ClinicalImpression.Reshape),
        #"Communication" = if r[#"Communication"]? = null then null else List.Transform(r[#"Communication"]?, Communication.Reshape),
        #"CommunicationRequest" = if r[#"CommunicationRequest"]? = null then null else List.Transform(r[#"CommunicationRequest"]?, CommunicationRequest.Reshape),
        #"Composition" = if r[#"Composition"]? = null then null else List.Transform(r[#"Composition"]?, Composition.Reshape),
        #"ConceptMap" = if r[#"ConceptMap"]? = null then null else List.Transform(r[#"ConceptMap"]?, ConceptMap.Reshape),
        #"Condition" = if r[#"Condition"]? = null then null else List.Transform(r[#"Condition"]?, Condition.Reshape),
        #"Conformance" = if r[#"Conformance"]? = null then null else List.Transform(r[#"Conformance"]?, Conformance.Reshape),
        #"Contract" = if r[#"Contract"]? = null then null else List.Transform(r[#"Contract"]?, Contract.Reshape),
        #"Coverage" = if r[#"Coverage"]? = null then null else List.Transform(r[#"Coverage"]?, Coverage.Reshape),
        #"DataElement" = if r[#"DataElement"]? = null then null else List.Transform(r[#"DataElement"]?, DataElement.Reshape),
        #"DetectedIssue" = if r[#"DetectedIssue"]? = null then null else List.Transform(r[#"DetectedIssue"]?, DetectedIssue.Reshape),
        #"Device" = if r[#"Device"]? = null then null else List.Transform(r[#"Device"]?, Device.Reshape),
        #"DeviceComponent" = if r[#"DeviceComponent"]? = null then null else List.Transform(r[#"DeviceComponent"]?, DeviceComponent.Reshape),
        #"DeviceMetric" = if r[#"DeviceMetric"]? = null then null else List.Transform(r[#"DeviceMetric"]?, DeviceMetric.Reshape),
        #"DeviceUseRequest" = if r[#"DeviceUseRequest"]? = null then null else List.Transform(r[#"DeviceUseRequest"]?, DeviceUseRequest.Reshape),
        #"DeviceUseStatement" = if r[#"DeviceUseStatement"]? = null then null else List.Transform(r[#"DeviceUseStatement"]?, DeviceUseStatement.Reshape),
        #"DiagnosticOrder" = if r[#"DiagnosticOrder"]? = null then null else List.Transform(r[#"DiagnosticOrder"]?, DiagnosticOrder.Reshape),
        #"DiagnosticReport" = if r[#"DiagnosticReport"]? = null then null else List.Transform(r[#"DiagnosticReport"]?, DiagnosticReport.Reshape),
        #"DocumentManifest" = if r[#"DocumentManifest"]? = null then null else List.Transform(r[#"DocumentManifest"]?, DocumentManifest.Reshape),
        #"DocumentReference" = if r[#"DocumentReference"]? = null then null else List.Transform(r[#"DocumentReference"]?, DocumentReference.Reshape),
        #"DomainResource" = if r[#"DomainResource"]? = null then null else List.Transform(r[#"DomainResource"]?, DomainResource.Reshape),
        #"EligibilityRequest" = if r[#"EligibilityRequest"]? = null then null else List.Transform(r[#"EligibilityRequest"]?, EligibilityRequest.Reshape),
        #"EligibilityResponse" = if r[#"EligibilityResponse"]? = null then null else List.Transform(r[#"EligibilityResponse"]?, EligibilityResponse.Reshape),
        #"Encounter" = if r[#"Encounter"]? = null then null else List.Transform(r[#"Encounter"]?, Encounter.Reshape),
        #"EnrollmentRequest" = if r[#"EnrollmentRequest"]? = null then null else List.Transform(r[#"EnrollmentRequest"]?, EnrollmentRequest.Reshape),
        #"EnrollmentResponse" = if r[#"EnrollmentResponse"]? = null then null else List.Transform(r[#"EnrollmentResponse"]?, EnrollmentResponse.Reshape),
        #"EpisodeOfCare" = if r[#"EpisodeOfCare"]? = null then null else List.Transform(r[#"EpisodeOfCare"]?, EpisodeOfCare.Reshape),
        #"ExplanationOfBenefit" = if r[#"ExplanationOfBenefit"]? = null then null else List.Transform(r[#"ExplanationOfBenefit"]?, ExplanationOfBenefit.Reshape),
        #"FamilyMemberHistory" = if r[#"FamilyMemberHistory"]? = null then null else List.Transform(r[#"FamilyMemberHistory"]?, FamilyMemberHistory.Reshape),
        #"Flag" = if r[#"Flag"]? = null then null else List.Transform(r[#"Flag"]?, Flag.Reshape),
        #"Goal" = if r[#"Goal"]? = null then null else List.Transform(r[#"Goal"]?, Goal.Reshape),
        #"Group" = if r[#"Group"]? = null then null else List.Transform(r[#"Group"]?, Group.Reshape),
        #"HealthcareService" = if r[#"HealthcareService"]? = null then null else List.Transform(r[#"HealthcareService"]?, HealthcareService.Reshape),
        #"ImagingObjectSelection" = if r[#"ImagingObjectSelection"]? = null then null else List.Transform(r[#"ImagingObjectSelection"]?, ImagingObjectSelection.Reshape),
        #"ImagingStudy" = if r[#"ImagingStudy"]? = null then null else List.Transform(r[#"ImagingStudy"]?, ImagingStudy.Reshape),
        #"Immunization" = if r[#"Immunization"]? = null then null else List.Transform(r[#"Immunization"]?, Immunization.Reshape),
        #"ImmunizationRecommendation" = if r[#"ImmunizationRecommendation"]? = null then null else List.Transform(r[#"ImmunizationRecommendation"]?, ImmunizationRecommendation.Reshape),
        #"ImplementationGuide" = if r[#"ImplementationGuide"]? = null then null else List.Transform(r[#"ImplementationGuide"]?, ImplementationGuide.Reshape),
        #"List" = if r[#"List"]? = null then null else List.Transform(r[#"List"]?, List.Reshape),
        #"Location" = if r[#"Location"]? = null then null else List.Transform(r[#"Location"]?, Location.Reshape),
        #"Media" = if r[#"Media"]? = null then null else List.Transform(r[#"Media"]?, Media.Reshape),
        #"Medication" = if r[#"Medication"]? = null then null else List.Transform(r[#"Medication"]?, Medication.Reshape),
        #"MedicationAdministration" = if r[#"MedicationAdministration"]? = null then null else List.Transform(r[#"MedicationAdministration"]?, MedicationAdministration.Reshape),
        #"MedicationDispense" = if r[#"MedicationDispense"]? = null then null else List.Transform(r[#"MedicationDispense"]?, MedicationDispense.Reshape),
        #"MedicationOrder" = if r[#"MedicationOrder"]? = null then null else List.Transform(r[#"MedicationOrder"]?, MedicationOrder.Reshape),
        #"MedicationStatement" = if r[#"MedicationStatement"]? = null then null else List.Transform(r[#"MedicationStatement"]?, MedicationStatement.Reshape),
        #"MessageHeader" = if r[#"MessageHeader"]? = null then null else List.Transform(r[#"MessageHeader"]?, MessageHeader.Reshape),
        #"NamingSystem" = if r[#"NamingSystem"]? = null then null else List.Transform(r[#"NamingSystem"]?, NamingSystem.Reshape),
        #"NutritionOrder" = if r[#"NutritionOrder"]? = null then null else List.Transform(r[#"NutritionOrder"]?, NutritionOrder.Reshape),
        #"Observation" = if r[#"Observation"]? = null then null else List.Transform(r[#"Observation"]?, Observation.Reshape),
        #"OperationDefinition" = if r[#"OperationDefinition"]? = null then null else List.Transform(r[#"OperationDefinition"]?, OperationDefinition.Reshape),
        #"OperationOutcome" = if r[#"OperationOutcome"]? = null then null else List.Transform(r[#"OperationOutcome"]?, OperationOutcome.Reshape),
        #"Order" = if r[#"Order"]? = null then null else List.Transform(r[#"Order"]?, Order.Reshape),
        #"OrderResponse" = if r[#"OrderResponse"]? = null then null else List.Transform(r[#"OrderResponse"]?, OrderResponse.Reshape),
        #"Organization" = if r[#"Organization"]? = null then null else List.Transform(r[#"Organization"]?, Organization.Reshape),
        #"Parameters" = if r[#"Parameters"]? = null then null else List.Transform(r[#"Parameters"]?, Parameters.Reshape),
        #"Patient" = if r[#"Patient"]? = null then null else List.Transform(r[#"Patient"]?, Patient.Reshape),
        #"PaymentNotice" = if r[#"PaymentNotice"]? = null then null else List.Transform(r[#"PaymentNotice"]?, PaymentNotice.Reshape),
        #"PaymentReconciliation" = if r[#"PaymentReconciliation"]? = null then null else List.Transform(r[#"PaymentReconciliation"]?, PaymentReconciliation.Reshape),
        #"Person" = if r[#"Person"]? = null then null else List.Transform(r[#"Person"]?, Person.Reshape),
        #"Practitioner" = if r[#"Practitioner"]? = null then null else List.Transform(r[#"Practitioner"]?, Practitioner.Reshape),
        #"Procedure" = if r[#"Procedure"]? = null then null else List.Transform(r[#"Procedure"]?, Procedure.Reshape),
        #"ProcedureRequest" = if r[#"ProcedureRequest"]? = null then null else List.Transform(r[#"ProcedureRequest"]?, ProcedureRequest.Reshape),
        #"ProcessRequest" = if r[#"ProcessRequest"]? = null then null else List.Transform(r[#"ProcessRequest"]?, ProcessRequest.Reshape),
        #"ProcessResponse" = if r[#"ProcessResponse"]? = null then null else List.Transform(r[#"ProcessResponse"]?, ProcessResponse.Reshape),
        #"Provenance" = if r[#"Provenance"]? = null then null else List.Transform(r[#"Provenance"]?, Provenance.Reshape),
        #"Questionnaire" = if r[#"Questionnaire"]? = null then null else List.Transform(r[#"Questionnaire"]?, Questionnaire.Reshape),
        #"QuestionnaireResponse" = if r[#"QuestionnaireResponse"]? = null then null else List.Transform(r[#"QuestionnaireResponse"]?, QuestionnaireResponse.Reshape),
        #"ReferralRequest" = if r[#"ReferralRequest"]? = null then null else List.Transform(r[#"ReferralRequest"]?, ReferralRequest.Reshape),
        #"RelatedPerson" = if r[#"RelatedPerson"]? = null then null else List.Transform(r[#"RelatedPerson"]?, RelatedPerson.Reshape),
        #"Resource" = if r[#"Resource"]? = null then null else List.Transform(r[#"Resource"]?, Resource.Reshape),
        #"RiskAssessment" = if r[#"RiskAssessment"]? = null then null else List.Transform(r[#"RiskAssessment"]?, RiskAssessment.Reshape),
        #"Schedule" = if r[#"Schedule"]? = null then null else List.Transform(r[#"Schedule"]?, Schedule.Reshape),
        #"SearchParameter" = if r[#"SearchParameter"]? = null then null else List.Transform(r[#"SearchParameter"]?, SearchParameter.Reshape),
        #"Slot" = if r[#"Slot"]? = null then null else List.Transform(r[#"Slot"]?, Slot.Reshape),
        #"Specimen" = if r[#"Specimen"]? = null then null else List.Transform(r[#"Specimen"]?, Specimen.Reshape),
        #"StructureDefinition" = if r[#"StructureDefinition"]? = null then null else List.Transform(r[#"StructureDefinition"]?, StructureDefinition.Reshape),
        #"Subscription" = if r[#"Subscription"]? = null then null else List.Transform(r[#"Subscription"]?, Subscription.Reshape),
        #"Substance" = if r[#"Substance"]? = null then null else List.Transform(r[#"Substance"]?, Substance.Reshape),
        #"SupplyDelivery" = if r[#"SupplyDelivery"]? = null then null else List.Transform(r[#"SupplyDelivery"]?, SupplyDelivery.Reshape),
        #"SupplyRequest" = if r[#"SupplyRequest"]? = null then null else List.Transform(r[#"SupplyRequest"]?, SupplyRequest.Reshape),
        #"TestScript" = if r[#"TestScript"]? = null then null else List.Transform(r[#"TestScript"]?, TestScript.Reshape),
        #"ValueSet" = if r[#"ValueSet"]? = null then null else List.Transform(r[#"ValueSet"]?, ValueSet.Reshape),
        #"VisionPrescription" = if r[#"VisionPrescription"]? = null then null else List.Transform(r[#"VisionPrescription"]?, VisionPrescription.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBinding = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bindingAttachment", "bindingReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bindingAttachment", "bindingReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bindingAttachment", "Attachment"}, { "bindingReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ binding = null ] else choicesRemoved & [ binding = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"authority" = if r[#"authority"]? = null then null else List.Transform(r[#"authority"]?, Reference.Reshape),
        #"domain" = if r[#"domain"]? = null then null else List.Transform(r[#"domain"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = if r[#"subType"]? = null then null else List.Transform(r[#"subType"]?, CodeableConcept.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"actionReason" = if r[#"actionReason"]? = null then null else List.Transform(r[#"actionReason"]?, CodeableConcept.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Contract_actor.Reshape),
        #"valuedItem" = if r[#"valuedItem"]? = null then null else List.Transform(r[#"valuedItem"]?, Contract_valuedItem.Reshape),
        #"signer" = if r[#"signer"]? = null then null else List.Transform(r[#"signer"]?, Contract_signer.Reshape),
        #"term" = if r[#"term"]? = null then null else List.Transform(r[#"term"]?, Contract_term.Reshape),
        #"friendly" = if r[#"friendly"]? = null then null else List.Transform(r[#"friendly"]?, Contract_friendly.Reshape),
        #"legal" = if r[#"legal"]? = null then null else List.Transform(r[#"legal"]?, Contract_legal.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, Contract_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeBinding(
          childrenReshaped),

  Count.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"issuer" = Reference.Reshape(r[#"issuer"]?),
        #"bin" = Identifier.Reshape(r[#"bin"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"subscriberId" = Identifier.Reshape(r[#"subscriberId"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subscriber" = Reference.Reshape(r[#"subscriber"]?),
        #"network" = Identifier.Reshape(r[#"network"]?),
        #"contract" = if r[#"contract"]? = null then null else List.Transform(r[#"contract"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, DataElement_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, DataElement_mapping.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"implicated" = if r[#"implicated"]? = null then null else List.Transform(r[#"implicated"]?, Reference.Reshape),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"mitigation" = if r[#"mitigation"]? = null then null else List.Transform(r[#"mitigation"]?, DetectedIssue_mitigation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceComponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"operationalStatus" = if r[#"operationalStatus"]? = null then null else List.Transform(r[#"operationalStatus"]?, CodeableConcept.Reshape),
        #"parameterGroup" = CodeableConcept.Reshape(r[#"parameterGroup"]?),
        #"productionSpecification" = if r[#"productionSpecification"]? = null then null else List.Transform(r[#"productionSpecification"]?, DeviceComponent_productionSpecification.Reshape),
        #"languageCode" = CodeableConcept.Reshape(r[#"languageCode"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceMetric.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"measurementPeriod" = Timing.Reshape(r[#"measurementPeriod"]?),
        #"calibration" = if r[#"calibration"]? = null then null else List.Transform(r[#"calibration"]?, DeviceMetric_calibration.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceUseRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBodySite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bodySiteCodeableConcept", "bodySiteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bodySiteCodeableConcept", "bodySiteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bodySiteCodeableConcept", "CodeableConcept"}, { "bodySiteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ bodySite = null ] else choicesRemoved & [ bodySite = choiceRecord ],
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingPeriod", "timingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingPeriod", "timingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingPeriod", "Period"}, { "timingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"indication" = if r[#"indication"]? = null then null else List.Transform(r[#"indication"]?, CodeableConcept.Reshape),
        #"prnReason" = if r[#"prnReason"]? = null then null else List.Transform(r[#"prnReason"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          ReshapeBodySite(
            childrenReshaped)),

  DeviceUseStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBodySite = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bodySiteCodeableConcept", "bodySiteReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bodySiteCodeableConcept", "bodySiteReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bodySiteCodeableConcept", "CodeableConcept"}, { "bodySiteReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ bodySite = null ] else choicesRemoved & [ bodySite = choiceRecord ],
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingPeriod", "timingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingPeriod", "timingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingPeriod", "Period"}, { "timingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"whenUsed" = Period.Reshape(r[#"whenUsed"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"indication" = if r[#"indication"]? = null then null else List.Transform(r[#"indication"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          ReshapeBodySite(
            childrenReshaped)),

  DiagnosticOrder.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"orderer" = Reference.Reshape(r[#"orderer"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, DiagnosticOrder_event.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, DiagnosticOrder_item.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticReport.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"request" = if r[#"request"]? = null then null else List.Transform(r[#"request"]?, Reference.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"result" = if r[#"result"]? = null then null else List.Transform(r[#"result"]?, Reference.Reshape),
        #"imagingStudy" = if r[#"imagingStudy"]? = null then null else List.Transform(r[#"imagingStudy"]?, Reference.Reshape),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, DiagnosticReport_image.Reshape),
        #"codedDiagnosis" = if r[#"codedDiagnosis"]? = null then null else List.Transform(r[#"codedDiagnosis"]?, CodeableConcept.Reshape),
        #"presentedForm" = if r[#"presentedForm"]? = null then null else List.Transform(r[#"presentedForm"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          childrenReshaped),

  Distance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, DocumentManifest_content.Reshape),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, DocumentManifest_related.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"authenticator" = Reference.Reshape(r[#"authenticator"]?),
        #"docStatus" = CodeableConcept.Reshape(r[#"docStatus"]?),
        #"relatesTo" = if r[#"relatesTo"]? = null then null else List.Transform(r[#"relatesTo"]?, DocumentReference_relatesTo.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, CodeableConcept.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, DocumentReference_content.Reshape),
        #"context" = DocumentReference_context.Reshape(r[#"context"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DomainResource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Duration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefaultValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "defaultValueBoolean", "defaultValueInteger", "defaultValueDecimal", "defaultValueBase64Binary", "defaultValueInstant", "defaultValueString", "defaultValueUri", "defaultValueDate", "defaultValueDateTime", "defaultValueTime", "defaultValueCode", "defaultValueOid", "defaultValueId", "defaultValueUnsignedInt", "defaultValuePositiveInt", "defaultValueMarkdown", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueIdentifier", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueQuantity", "defaultValueRange", "defaultValuePeriod", "defaultValueRatio", "defaultValueSampledData", "defaultValueSignature", "defaultValueHumanName", "defaultValueAddress", "defaultValueContactPoint", "defaultValueTiming", "defaultValueReference", "defaultValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "defaultValueBoolean", "defaultValueInteger", "defaultValueDecimal", "defaultValueBase64Binary", "defaultValueInstant", "defaultValueString", "defaultValueUri", "defaultValueDate", "defaultValueDateTime", "defaultValueTime", "defaultValueCode", "defaultValueOid", "defaultValueId", "defaultValueUnsignedInt", "defaultValuePositiveInt", "defaultValueMarkdown", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueIdentifier", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueQuantity", "defaultValueRange", "defaultValuePeriod", "defaultValueRatio", "defaultValueSampledData", "defaultValueSignature", "defaultValueHumanName", "defaultValueAddress", "defaultValueContactPoint", "defaultValueTiming", "defaultValueReference", "defaultValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "defaultValueBoolean", "boolean"}, { "defaultValueInteger", "integer"}, { "defaultValueDecimal", "decimal"}, { "defaultValueBase64Binary", "base64Binary"}, { "defaultValueInstant", "instant"}, { "defaultValueString", "string"}, { "defaultValueUri", "uri"}, { "defaultValueDate", "date"}, { "defaultValueDateTime", "dateTime"}, { "defaultValueTime", "time"}, { "defaultValueCode", "code"}, { "defaultValueOid", "oid"}, { "defaultValueId", "id"}, { "defaultValueUnsignedInt", "unsignedInt"}, { "defaultValuePositiveInt", "positiveInt"}, { "defaultValueMarkdown", "markdown"}, { "defaultValueAnnotation", "Annotation"}, { "defaultValueAttachment", "Attachment"}, { "defaultValueIdentifier", "Identifier"}, { "defaultValueCodeableConcept", "CodeableConcept"}, { "defaultValueCoding", "Coding"}, { "defaultValueQuantity", "Quantity"}, { "defaultValueRange", "Range"}, { "defaultValuePeriod", "Period"}, { "defaultValueRatio", "Ratio"}, { "defaultValueSampledData", "SampledData"}, { "defaultValueSignature", "Signature"}, { "defaultValueHumanName", "HumanName"}, { "defaultValueAddress", "Address"}, { "defaultValueContactPoint", "ContactPoint"}, { "defaultValueTiming", "Timing"}, { "defaultValueReference", "Reference"}, { "defaultValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ defaultValue = null ] else choicesRemoved & [ defaultValue = choiceRecord ],
      ReshapeFixed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "fixedBoolean", "fixedInteger", "fixedDecimal", "fixedBase64Binary", "fixedInstant", "fixedString", "fixedUri", "fixedDate", "fixedDateTime", "fixedTime", "fixedCode", "fixedOid", "fixedId", "fixedUnsignedInt", "fixedPositiveInt", "fixedMarkdown", "fixedAnnotation", "fixedAttachment", "fixedIdentifier", "fixedCodeableConcept", "fixedCoding", "fixedQuantity", "fixedRange", "fixedPeriod", "fixedRatio", "fixedSampledData", "fixedSignature", "fixedHumanName", "fixedAddress", "fixedContactPoint", "fixedTiming", "fixedReference", "fixedMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "fixedBoolean", "fixedInteger", "fixedDecimal", "fixedBase64Binary", "fixedInstant", "fixedString", "fixedUri", "fixedDate", "fixedDateTime", "fixedTime", "fixedCode", "fixedOid", "fixedId", "fixedUnsignedInt", "fixedPositiveInt", "fixedMarkdown", "fixedAnnotation", "fixedAttachment", "fixedIdentifier", "fixedCodeableConcept", "fixedCoding", "fixedQuantity", "fixedRange", "fixedPeriod", "fixedRatio", "fixedSampledData", "fixedSignature", "fixedHumanName", "fixedAddress", "fixedContactPoint", "fixedTiming", "fixedReference", "fixedMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "fixedBoolean", "boolean"}, { "fixedInteger", "integer"}, { "fixedDecimal", "decimal"}, { "fixedBase64Binary", "base64Binary"}, { "fixedInstant", "instant"}, { "fixedString", "string"}, { "fixedUri", "uri"}, { "fixedDate", "date"}, { "fixedDateTime", "dateTime"}, { "fixedTime", "time"}, { "fixedCode", "code"}, { "fixedOid", "oid"}, { "fixedId", "id"}, { "fixedUnsignedInt", "unsignedInt"}, { "fixedPositiveInt", "positiveInt"}, { "fixedMarkdown", "markdown"}, { "fixedAnnotation", "Annotation"}, { "fixedAttachment", "Attachment"}, { "fixedIdentifier", "Identifier"}, { "fixedCodeableConcept", "CodeableConcept"}, { "fixedCoding", "Coding"}, { "fixedQuantity", "Quantity"}, { "fixedRange", "Range"}, { "fixedPeriod", "Period"}, { "fixedRatio", "Ratio"}, { "fixedSampledData", "SampledData"}, { "fixedSignature", "Signature"}, { "fixedHumanName", "HumanName"}, { "fixedAddress", "Address"}, { "fixedContactPoint", "ContactPoint"}, { "fixedTiming", "Timing"}, { "fixedReference", "Reference"}, { "fixedMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ fixed = null ] else choicesRemoved & [ fixed = choiceRecord ],
      ReshapePattern = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "patternBoolean", "patternInteger", "patternDecimal", "patternBase64Binary", "patternInstant", "patternString", "patternUri", "patternDate", "patternDateTime", "patternTime", "patternCode", "patternOid", "patternId", "patternUnsignedInt", "patternPositiveInt", "patternMarkdown", "patternAnnotation", "patternAttachment", "patternIdentifier", "patternCodeableConcept", "patternCoding", "patternQuantity", "patternRange", "patternPeriod", "patternRatio", "patternSampledData", "patternSignature", "patternHumanName", "patternAddress", "patternContactPoint", "patternTiming", "patternReference", "patternMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "patternBoolean", "patternInteger", "patternDecimal", "patternBase64Binary", "patternInstant", "patternString", "patternUri", "patternDate", "patternDateTime", "patternTime", "patternCode", "patternOid", "patternId", "patternUnsignedInt", "patternPositiveInt", "patternMarkdown", "patternAnnotation", "patternAttachment", "patternIdentifier", "patternCodeableConcept", "patternCoding", "patternQuantity", "patternRange", "patternPeriod", "patternRatio", "patternSampledData", "patternSignature", "patternHumanName", "patternAddress", "patternContactPoint", "patternTiming", "patternReference", "patternMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "patternBoolean", "boolean"}, { "patternInteger", "integer"}, { "patternDecimal", "decimal"}, { "patternBase64Binary", "base64Binary"}, { "patternInstant", "instant"}, { "patternString", "string"}, { "patternUri", "uri"}, { "patternDate", "date"}, { "patternDateTime", "dateTime"}, { "patternTime", "time"}, { "patternCode", "code"}, { "patternOid", "oid"}, { "patternId", "id"}, { "patternUnsignedInt", "unsignedInt"}, { "patternPositiveInt", "positiveInt"}, { "patternMarkdown", "markdown"}, { "patternAnnotation", "Annotation"}, { "patternAttachment", "Attachment"}, { "patternIdentifier", "Identifier"}, { "patternCodeableConcept", "CodeableConcept"}, { "patternCoding", "Coding"}, { "patternQuantity", "Quantity"}, { "patternRange", "Range"}, { "patternPeriod", "Period"}, { "patternRatio", "Ratio"}, { "patternSampledData", "SampledData"}, { "patternSignature", "Signature"}, { "patternHumanName", "HumanName"}, { "patternAddress", "Address"}, { "patternContactPoint", "ContactPoint"}, { "patternTiming", "Timing"}, { "patternReference", "Reference"}, { "patternMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ pattern = null ] else choicesRemoved & [ pattern = choiceRecord ],
      ReshapeExample = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "exampleBoolean", "exampleInteger", "exampleDecimal", "exampleBase64Binary", "exampleInstant", "exampleString", "exampleUri", "exampleDate", "exampleDateTime", "exampleTime", "exampleCode", "exampleOid", "exampleId", "exampleUnsignedInt", "examplePositiveInt", "exampleMarkdown", "exampleAnnotation", "exampleAttachment", "exampleIdentifier", "exampleCodeableConcept", "exampleCoding", "exampleQuantity", "exampleRange", "examplePeriod", "exampleRatio", "exampleSampledData", "exampleSignature", "exampleHumanName", "exampleAddress", "exampleContactPoint", "exampleTiming", "exampleReference", "exampleMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "exampleBoolean", "exampleInteger", "exampleDecimal", "exampleBase64Binary", "exampleInstant", "exampleString", "exampleUri", "exampleDate", "exampleDateTime", "exampleTime", "exampleCode", "exampleOid", "exampleId", "exampleUnsignedInt", "examplePositiveInt", "exampleMarkdown", "exampleAnnotation", "exampleAttachment", "exampleIdentifier", "exampleCodeableConcept", "exampleCoding", "exampleQuantity", "exampleRange", "examplePeriod", "exampleRatio", "exampleSampledData", "exampleSignature", "exampleHumanName", "exampleAddress", "exampleContactPoint", "exampleTiming", "exampleReference", "exampleMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "exampleBoolean", "boolean"}, { "exampleInteger", "integer"}, { "exampleDecimal", "decimal"}, { "exampleBase64Binary", "base64Binary"}, { "exampleInstant", "instant"}, { "exampleString", "string"}, { "exampleUri", "uri"}, { "exampleDate", "date"}, { "exampleDateTime", "dateTime"}, { "exampleTime", "time"}, { "exampleCode", "code"}, { "exampleOid", "oid"}, { "exampleId", "id"}, { "exampleUnsignedInt", "unsignedInt"}, { "examplePositiveInt", "positiveInt"}, { "exampleMarkdown", "markdown"}, { "exampleAnnotation", "Annotation"}, { "exampleAttachment", "Attachment"}, { "exampleIdentifier", "Identifier"}, { "exampleCodeableConcept", "CodeableConcept"}, { "exampleCoding", "Coding"}, { "exampleQuantity", "Quantity"}, { "exampleRange", "Range"}, { "examplePeriod", "Period"}, { "exampleRatio", "Ratio"}, { "exampleSampledData", "SampledData"}, { "exampleSignature", "Signature"}, { "exampleHumanName", "HumanName"}, { "exampleAddress", "Address"}, { "exampleContactPoint", "ContactPoint"}, { "exampleTiming", "Timing"}, { "exampleReference", "Reference"}, { "exampleMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ example = null ] else choicesRemoved & [ example = choiceRecord ],
      ReshapeMinValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "minValueBoolean", "minValueInteger", "minValueDecimal", "minValueBase64Binary", "minValueInstant", "minValueString", "minValueUri", "minValueDate", "minValueDateTime", "minValueTime", "minValueCode", "minValueOid", "minValueId", "minValueUnsignedInt", "minValuePositiveInt", "minValueMarkdown", "minValueAnnotation", "minValueAttachment", "minValueIdentifier", "minValueCodeableConcept", "minValueCoding", "minValueQuantity", "minValueRange", "minValuePeriod", "minValueRatio", "minValueSampledData", "minValueSignature", "minValueHumanName", "minValueAddress", "minValueContactPoint", "minValueTiming", "minValueReference", "minValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "minValueBoolean", "minValueInteger", "minValueDecimal", "minValueBase64Binary", "minValueInstant", "minValueString", "minValueUri", "minValueDate", "minValueDateTime", "minValueTime", "minValueCode", "minValueOid", "minValueId", "minValueUnsignedInt", "minValuePositiveInt", "minValueMarkdown", "minValueAnnotation", "minValueAttachment", "minValueIdentifier", "minValueCodeableConcept", "minValueCoding", "minValueQuantity", "minValueRange", "minValuePeriod", "minValueRatio", "minValueSampledData", "minValueSignature", "minValueHumanName", "minValueAddress", "minValueContactPoint", "minValueTiming", "minValueReference", "minValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "minValueBoolean", "boolean"}, { "minValueInteger", "integer"}, { "minValueDecimal", "decimal"}, { "minValueBase64Binary", "base64Binary"}, { "minValueInstant", "instant"}, { "minValueString", "string"}, { "minValueUri", "uri"}, { "minValueDate", "date"}, { "minValueDateTime", "dateTime"}, { "minValueTime", "time"}, { "minValueCode", "code"}, { "minValueOid", "oid"}, { "minValueId", "id"}, { "minValueUnsignedInt", "unsignedInt"}, { "minValuePositiveInt", "positiveInt"}, { "minValueMarkdown", "markdown"}, { "minValueAnnotation", "Annotation"}, { "minValueAttachment", "Attachment"}, { "minValueIdentifier", "Identifier"}, { "minValueCodeableConcept", "CodeableConcept"}, { "minValueCoding", "Coding"}, { "minValueQuantity", "Quantity"}, { "minValueRange", "Range"}, { "minValuePeriod", "Period"}, { "minValueRatio", "Ratio"}, { "minValueSampledData", "SampledData"}, { "minValueSignature", "Signature"}, { "minValueHumanName", "HumanName"}, { "minValueAddress", "Address"}, { "minValueContactPoint", "ContactPoint"}, { "minValueTiming", "Timing"}, { "minValueReference", "Reference"}, { "minValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ minValue = null ] else choicesRemoved & [ minValue = choiceRecord ],
      ReshapeMaxValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "maxValueBoolean", "maxValueInteger", "maxValueDecimal", "maxValueBase64Binary", "maxValueInstant", "maxValueString", "maxValueUri", "maxValueDate", "maxValueDateTime", "maxValueTime", "maxValueCode", "maxValueOid", "maxValueId", "maxValueUnsignedInt", "maxValuePositiveInt", "maxValueMarkdown", "maxValueAnnotation", "maxValueAttachment", "maxValueIdentifier", "maxValueCodeableConcept", "maxValueCoding", "maxValueQuantity", "maxValueRange", "maxValuePeriod", "maxValueRatio", "maxValueSampledData", "maxValueSignature", "maxValueHumanName", "maxValueAddress", "maxValueContactPoint", "maxValueTiming", "maxValueReference", "maxValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "maxValueBoolean", "maxValueInteger", "maxValueDecimal", "maxValueBase64Binary", "maxValueInstant", "maxValueString", "maxValueUri", "maxValueDate", "maxValueDateTime", "maxValueTime", "maxValueCode", "maxValueOid", "maxValueId", "maxValueUnsignedInt", "maxValuePositiveInt", "maxValueMarkdown", "maxValueAnnotation", "maxValueAttachment", "maxValueIdentifier", "maxValueCodeableConcept", "maxValueCoding", "maxValueQuantity", "maxValueRange", "maxValuePeriod", "maxValueRatio", "maxValueSampledData", "maxValueSignature", "maxValueHumanName", "maxValueAddress", "maxValueContactPoint", "maxValueTiming", "maxValueReference", "maxValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "maxValueBoolean", "boolean"}, { "maxValueInteger", "integer"}, { "maxValueDecimal", "decimal"}, { "maxValueBase64Binary", "base64Binary"}, { "maxValueInstant", "instant"}, { "maxValueString", "string"}, { "maxValueUri", "uri"}, { "maxValueDate", "date"}, { "maxValueDateTime", "dateTime"}, { "maxValueTime", "time"}, { "maxValueCode", "code"}, { "maxValueOid", "oid"}, { "maxValueId", "id"}, { "maxValueUnsignedInt", "unsignedInt"}, { "maxValuePositiveInt", "positiveInt"}, { "maxValueMarkdown", "markdown"}, { "maxValueAnnotation", "Annotation"}, { "maxValueAttachment", "Attachment"}, { "maxValueIdentifier", "Identifier"}, { "maxValueCodeableConcept", "CodeableConcept"}, { "maxValueCoding", "Coding"}, { "maxValueQuantity", "Quantity"}, { "maxValueRange", "Range"}, { "maxValuePeriod", "Period"}, { "maxValueRatio", "Ratio"}, { "maxValueSampledData", "SampledData"}, { "maxValueSignature", "Signature"}, { "maxValueHumanName", "HumanName"}, { "maxValueAddress", "Address"}, { "maxValueContactPoint", "ContactPoint"}, { "maxValueTiming", "Timing"}, { "maxValueReference", "Reference"}, { "maxValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ maxValue = null ] else choicesRemoved & [ maxValue = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"slicing" = ElementDefinition_slicing.Reshape(r[#"slicing"]?),
        #"base" = ElementDefinition_base.Reshape(r[#"base"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, ElementDefinition_type.Reshape),
        #"constraint" = if r[#"constraint"]? = null then null else List.Transform(r[#"constraint"]?, ElementDefinition_constraint.Reshape),
        #"binding" = ElementDefinition_binding.Reshape(r[#"binding"]?),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, ElementDefinition_mapping.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMaxValue(
          ReshapeMinValue(
            ReshapeExample(
              ReshapePattern(
                ReshapeFixed(
                  ReshapeDefaultValue(
                    childrenReshaped)))))),

  EligibilityRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EligibilityResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, Encounter_statusHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"episodeOfCare" = if r[#"episodeOfCare"]? = null then null else List.Transform(r[#"episodeOfCare"]?, Reference.Reshape),
        #"incomingReferral" = if r[#"incomingReferral"]? = null then null else List.Transform(r[#"incomingReferral"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Encounter_participant.Reshape),
        #"appointment" = Reference.Reshape(r[#"appointment"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"length" = Quantity.Reshape(r[#"length"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"indication" = if r[#"indication"]? = null then null else List.Transform(r[#"indication"]?, Reference.Reshape),
        #"hospitalization" = Encounter_hospitalization.Reshape(r[#"hospitalization"]?),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Encounter_location.Reshape),
        #"serviceProvider" = Reference.Reshape(r[#"serviceProvider"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"relationship" = Coding.Reshape(r[#"relationship"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, EpisodeOfCare_statusHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, Reference.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"referralRequest" = if r[#"referralRequest"]? = null then null else List.Transform(r[#"referralRequest"]?, Reference.Reshape),
        #"careManager" = Reference.Reshape(r[#"careManager"]?),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, EpisodeOfCare_careTeam.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Extension.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueInteger", "valueDecimal", "valueBase64Binary", "valueInstant", "valueString", "valueUri", "valueDate", "valueDateTime", "valueTime", "valueCode", "valueOid", "valueId", "valueUnsignedInt", "valuePositiveInt", "valueMarkdown", "valueAnnotation", "valueAttachment", "valueIdentifier", "valueCodeableConcept", "valueCoding", "valueQuantity", "valueRange", "valuePeriod", "valueRatio", "valueSampledData", "valueSignature", "valueHumanName", "valueAddress", "valueContactPoint", "valueTiming", "valueReference", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueInteger", "valueDecimal", "valueBase64Binary", "valueInstant", "valueString", "valueUri", "valueDate", "valueDateTime", "valueTime", "valueCode", "valueOid", "valueId", "valueUnsignedInt", "valuePositiveInt", "valueMarkdown", "valueAnnotation", "valueAttachment", "valueIdentifier", "valueCodeableConcept", "valueCoding", "valueQuantity", "valueRange", "valuePeriod", "valueRatio", "valueSampledData", "valueSignature", "valueHumanName", "valueAddress", "valueContactPoint", "valueTiming", "valueReference", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"}, { "valueBase64Binary", "base64Binary"}, { "valueInstant", "instant"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueCode", "code"}, { "valueOid", "oid"}, { "valueId", "id"}, { "valueUnsignedInt", "unsignedInt"}, { "valuePositiveInt", "positiveInt"}, { "valueMarkdown", "markdown"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueIdentifier", "Identifier"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valuePeriod", "Period"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueHumanName", "HumanName"}, { "valueAddress", "Address"}, { "valueContactPoint", "ContactPoint"}, { "valueTiming", "Timing"}, { "valueReference", "Reference"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, @Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  FamilyMemberHistory.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBorn = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bornPeriod", "bornDate", "bornString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bornPeriod", "bornDate", "bornString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bornPeriod", "Period"}, { "bornDate", "date"}, { "bornString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ born = null ] else choicesRemoved & [ born = choiceRecord ],
      ReshapeAge = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "ageQuantity", "ageRange", "ageString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "ageQuantity", "ageRange", "ageString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "ageQuantity", "Quantity"}, { "ageRange", "Range"}, { "ageString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ age = null ] else choicesRemoved & [ age = choiceRecord ],
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedQuantity", "deceasedRange", "deceasedDate", "deceasedString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedQuantity", "deceasedRange", "deceasedDate", "deceasedString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedQuantity", "Quantity"}, { "deceasedRange", "Range"}, { "deceasedDate", "date"}, { "deceasedString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"note" = Annotation.Reshape(r[#"note"]?),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, FamilyMemberHistory_condition.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDeceased(
          ReshapeAge(
            ReshapeBorn(
              childrenReshaped))),

  Flag.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Goal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeStart = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "startDate", "startCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "startDate", "startCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "startDate", "date"}, { "startCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ start = null ] else choicesRemoved & [ start = choiceRecord ],
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetDate", "targetQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetDate", "targetQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetDate", "date"}, { "targetQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"outcome" = if r[#"outcome"]? = null then null else List.Transform(r[#"outcome"]?, Goal_outcome.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          ReshapeStart(
            childrenReshaped)),

  Group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, Group_characteristic.Reshape),
        #"member" = if r[#"member"]? = null then null else List.Transform(r[#"member"]?, Group_member.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"providedBy" = Reference.Reshape(r[#"providedBy"]?),
        #"serviceCategory" = CodeableConcept.Reshape(r[#"serviceCategory"]?),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, HealthcareService_serviceType.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"coverageArea" = if r[#"coverageArea"]? = null then null else List.Transform(r[#"coverageArea"]?, Reference.Reshape),
        #"serviceProvisionCode" = if r[#"serviceProvisionCode"]? = null then null else List.Transform(r[#"serviceProvisionCode"]?, CodeableConcept.Reshape),
        #"eligibility" = CodeableConcept.Reshape(r[#"eligibility"]?),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, CodeableConcept.Reshape),
        #"referralMethod" = if r[#"referralMethod"]? = null then null else List.Transform(r[#"referralMethod"]?, CodeableConcept.Reshape),
        #"availableTime" = if r[#"availableTime"]? = null then null else List.Transform(r[#"availableTime"]?, HealthcareService_availableTime.Reshape),
        #"notAvailable" = if r[#"notAvailable"]? = null then null else List.Transform(r[#"notAvailable"]?, HealthcareService_notAvailable.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HumanName.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Identifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"assigner" = Reference.Reshape(r[#"assigner"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingObjectSelection.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"title" = CodeableConcept.Reshape(r[#"title"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"study" = if r[#"study"]? = null then null else List.Transform(r[#"study"]?, ImagingObjectSelection_study.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"accession" = Identifier.Reshape(r[#"accession"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"order" = if r[#"order"]? = null then null else List.Transform(r[#"order"]?, Reference.Reshape),
        #"modalityList" = if r[#"modalityList"]? = null then null else List.Transform(r[#"modalityList"]?, Coding.Reshape),
        #"referrer" = Reference.Reshape(r[#"referrer"]?),
        #"procedure" = if r[#"procedure"]? = null then null else List.Transform(r[#"procedure"]?, Reference.Reshape),
        #"interpreter" = Reference.Reshape(r[#"interpreter"]?),
        #"series" = if r[#"series"]? = null then null else List.Transform(r[#"series"]?, ImagingStudy_series.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"vaccineCode" = CodeableConcept.Reshape(r[#"vaccineCode"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"doseQuantity" = Quantity.Reshape(r[#"doseQuantity"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"explanation" = Immunization_explanation.Reshape(r[#"explanation"]?),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, Immunization_reaction.Reshape),
        #"vaccinationProtocol" = if r[#"vaccinationProtocol"]? = null then null else List.Transform(r[#"vaccinationProtocol"]?, Immunization_vaccinationProtocol.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"recommendation" = if r[#"recommendation"]? = null then null else List.Transform(r[#"recommendation"]?, ImmunizationRecommendation_recommendation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ImplementationGuide_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"dependency" = if r[#"dependency"]? = null then null else List.Transform(r[#"dependency"]?, ImplementationGuide_dependency.Reshape),
        #"package" = if r[#"package"]? = null then null else List.Transform(r[#"package"]?, ImplementationGuide_package.Reshape),
        #"global" = if r[#"global"]? = null then null else List.Transform(r[#"global"]?, ImplementationGuide_global.Reshape),
        #"page" = ImplementationGuide_page.Reshape(r[#"page"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, List_entry.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"physicalType" = CodeableConcept.Reshape(r[#"physicalType"]?),
        #"position" = Location_position.Reshape(r[#"position"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Media.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subtype" = CodeableConcept.Reshape(r[#"subtype"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"operator" = Reference.Reshape(r[#"operator"]?),
        #"view" = CodeableConcept.Reshape(r[#"view"]?),
        #"content" = Attachment.Reshape(r[#"content"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"product" = Medication_product.Reshape(r[#"product"]?),
        #"package" = Medication_package.Reshape(r[#"package"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffectiveTime = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveTimeDateTime", "effectiveTimePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveTimeDateTime", "effectiveTimePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveTimeDateTime", "dateTime"}, { "effectiveTimePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effectiveTime = null ] else choicesRemoved & [ effectiveTime = choiceRecord ],
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"practitioner" = Reference.Reshape(r[#"practitioner"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"reasonNotGiven" = if r[#"reasonNotGiven"]? = null then null else List.Transform(r[#"reasonNotGiven"]?, CodeableConcept.Reshape),
        #"reasonGiven" = if r[#"reasonGiven"]? = null then null else List.Transform(r[#"reasonGiven"]?, CodeableConcept.Reshape),
        #"device" = if r[#"device"]? = null then null else List.Transform(r[#"device"]?, Reference.Reshape),
        #"dosage" = MedicationAdministration_dosage.Reshape(r[#"dosage"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          ReshapeEffectiveTime(
            childrenReshaped)),

  MedicationDispense.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"dispenser" = Reference.Reshape(r[#"dispenser"]?),
        #"authorizingPrescription" = if r[#"authorizingPrescription"]? = null then null else List.Transform(r[#"authorizingPrescription"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"daysSupply" = Quantity.Reshape(r[#"daysSupply"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, MedicationDispense_dosageInstruction.Reshape),
        #"substitution" = MedicationDispense_substitution.Reshape(r[#"substitution"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          childrenReshaped),

  MedicationOrder.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"reasonEnded" = CodeableConcept.Reshape(r[#"reasonEnded"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"prescriber" = Reference.Reshape(r[#"prescriber"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, MedicationOrder_dosageInstruction.Reshape),
        #"dispenseRequest" = MedicationOrder_dispenseRequest.Reshape(r[#"dispenseRequest"]?),
        #"substitution" = MedicationOrder_substitution.Reshape(r[#"substitution"]?),
        #"priorPrescription" = Reference.Reshape(r[#"priorPrescription"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          ReshapeReason(
            childrenReshaped)),

  MedicationStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReasonForUse = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonForUseCodeableConcept", "reasonForUseReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonForUseCodeableConcept", "reasonForUseReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonForUseCodeableConcept", "CodeableConcept"}, { "reasonForUseReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reasonForUse = null ] else choicesRemoved & [ reasonForUse = choiceRecord ],
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"informationSource" = Reference.Reshape(r[#"informationSource"]?),
        #"reasonNotTaken" = if r[#"reasonNotTaken"]? = null then null else List.Transform(r[#"reasonNotTaken"]?, CodeableConcept.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, MedicationStatement_dosage.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          ReshapeEffective(
            ReshapeReasonForUse(
              childrenReshaped))),

  MessageHeader.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"event" = Coding.Reshape(r[#"event"]?),
        #"response" = MessageHeader_response.Reshape(r[#"response"]?),
        #"source" = MessageHeader_source.Reshape(r[#"source"]?),
        #"destination" = if r[#"destination"]? = null then null else List.Transform(r[#"destination"]?, MessageHeader_destination.Reshape),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"receiver" = Reference.Reshape(r[#"receiver"]?),
        #"responsible" = Reference.Reshape(r[#"responsible"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"data" = if r[#"data"]? = null then null else List.Transform(r[#"data"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Meta.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"security" = if r[#"security"]? = null then null else List.Transform(r[#"security"]?, Coding.Reshape),
        #"tag" = if r[#"tag"]? = null then null else List.Transform(r[#"tag"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Money.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, NamingSystem_contact.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"uniqueId" = if r[#"uniqueId"]? = null then null else List.Transform(r[#"uniqueId"]?, NamingSystem_uniqueId.Reshape),
        #"replacedBy" = Reference.Reshape(r[#"replacedBy"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Narrative.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"orderer" = Reference.Reshape(r[#"orderer"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"allergyIntolerance" = if r[#"allergyIntolerance"]? = null then null else List.Transform(r[#"allergyIntolerance"]?, Reference.Reshape),
        #"foodPreferenceModifier" = if r[#"foodPreferenceModifier"]? = null then null else List.Transform(r[#"foodPreferenceModifier"]?, CodeableConcept.Reshape),
        #"excludeFoodModifier" = if r[#"excludeFoodModifier"]? = null then null else List.Transform(r[#"excludeFoodModifier"]?, CodeableConcept.Reshape),
        #"oralDiet" = NutritionOrder_oralDiet.Reshape(r[#"oralDiet"]?),
        #"supplement" = if r[#"supplement"]? = null then null else List.Transform(r[#"supplement"]?, NutritionOrder_supplement.Reshape),
        #"enteralFormula" = NutritionOrder_enteralFormula.Reshape(r[#"enteralFormula"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueAttachment", "Attachment"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"interpretation" = CodeableConcept.Reshape(r[#"interpretation"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"specimen" = Reference.Reshape(r[#"specimen"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, Observation_related.Reshape),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, Observation_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeEffective(
            childrenReshaped)),

  OperationDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, OperationDefinition_contact.Reshape),
        #"base" = Reference.Reshape(r[#"base"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, OperationDefinition_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationOutcome.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"issue" = if r[#"issue"]? = null then null else List.Transform(r[#"issue"]?, OperationOutcome_issue.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Order.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"when" = Order_when.Reshape(r[#"when"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped),

  OrderResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"fulfillment" = if r[#"fulfillment"]? = null then null else List.Transform(r[#"fulfillment"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"partOf" = Reference.Reshape(r[#"partOf"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Organization_contact.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      ReshapeMultipleBirth = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "multipleBirthBoolean", "multipleBirthInteger"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "multipleBirthBoolean", "multipleBirthInteger" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "multipleBirthBoolean", "boolean"}, { "multipleBirthInteger", "integer"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ multipleBirth = null ] else choicesRemoved & [ multipleBirth = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"maritalStatus" = CodeableConcept.Reshape(r[#"maritalStatus"]?),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Patient_contact.Reshape),
        #"animal" = Patient_animal.Reshape(r[#"animal"]?),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, Patient_communication.Reshape),
        #"careProvider" = if r[#"careProvider"]? = null then null else List.Transform(r[#"careProvider"]?, Reference.Reshape),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Patient_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMultipleBirth(
          ReshapeDeceased(
            childrenReshaped)),

  PaymentNotice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"paymentStatus" = Coding.Reshape(r[#"paymentStatus"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, PaymentReconciliation_detail.Reshape),
        #"form" = Coding.Reshape(r[#"form"]?),
        #"total" = Quantity.Reshape(r[#"total"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, PaymentReconciliation_note.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Period.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Person_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"practitionerRole" = if r[#"practitionerRole"]? = null then null else List.Transform(r[#"practitionerRole"]?, Practitioner_practitionerRole.Reshape),
        #"qualification" = if r[#"qualification"]? = null then null else List.Transform(r[#"qualification"]?, Practitioner_qualification.Reshape),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      ReshapePerformed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "performedDateTime", "performedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "performedDateTime", "performedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "performedDateTime", "dateTime"}, { "performedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ performed = null ] else choicesRemoved & [ performed = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reasonNotPerformed" = if r[#"reasonNotPerformed"]? = null then null else List.Transform(r[#"reasonNotPerformed"]?, CodeableConcept.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Procedure_performer.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"report" = if r[#"report"]? = null then null else List.Transform(r[#"report"]?, Reference.Reshape),
        #"complication" = if r[#"complication"]? = null then null else List.Transform(r[#"complication"]?, CodeableConcept.Reshape),
        #"followUp" = if r[#"followUp"]? = null then null else List.Transform(r[#"followUp"]?, CodeableConcept.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"notes" = if r[#"notes"]? = null then null else List.Transform(r[#"notes"]?, Annotation.Reshape),
        #"focalDevice" = if r[#"focalDevice"]? = null then null else List.Transform(r[#"focalDevice"]?, Procedure_focalDevice.Reshape),
        #"used" = if r[#"used"]? = null then null else List.Transform(r[#"used"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapePerformed(
          ReshapeReason(
            childrenReshaped)),

  ProcedureRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      ReshapeScheduled = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "scheduledDateTime", "scheduledPeriod", "scheduledTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "scheduledDateTime", "scheduledPeriod", "scheduledTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "scheduledDateTime", "dateTime"}, { "scheduledPeriod", "Period"}, { "scheduledTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ scheduled = null ] else choicesRemoved & [ scheduled = choiceRecord ],
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"notes" = if r[#"notes"]? = null then null else List.Transform(r[#"notes"]?, Annotation.Reshape),
        #"orderer" = Reference.Reshape(r[#"orderer"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAsNeeded(
          ReshapeScheduled(
            ReshapeReason(
              childrenReshaped))),

  ProcessRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ProcessRequest_item.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = Coding.Reshape(r[#"outcome"]?),
        #"ruleset" = Coding.Reshape(r[#"ruleset"]?),
        #"originalRuleset" = Coding.Reshape(r[#"originalRuleset"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"form" = Coding.Reshape(r[#"form"]?),
        #"notes" = if r[#"notes"]? = null then null else List.Transform(r[#"notes"]?, ProcessResponse_notes.Reshape),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, Reference.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"activity" = CodeableConcept.Reshape(r[#"activity"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Provenance_agent.Reshape),
        #"entity" = if r[#"entity"]? = null then null else List.Transform(r[#"entity"]?, Provenance_entity.Reshape),
        #"signature" = if r[#"signature"]? = null then null else List.Transform(r[#"signature"]?, Signature.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Quantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"group" = Questionnaire_group.Reshape(r[#"group"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"questionnaire" = Reference.Reshape(r[#"questionnaire"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"group" = QuestionnaireResponse_group.Reshape(r[#"group"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Range.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Ratio.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"numerator" = Quantity.Reshape(r[#"numerator"]?),
        #"denominator" = Quantity.Reshape(r[#"denominator"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Reference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ReferralRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"specialty" = CodeableConcept.Reshape(r[#"specialty"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"serviceRequested" = if r[#"serviceRequested"]? = null then null else List.Transform(r[#"serviceRequested"]?, CodeableConcept.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"fulfillmentTime" = Period.Reshape(r[#"fulfillmentTime"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RelatedPerson.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskAssessment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"basis" = if r[#"basis"]? = null then null else List.Transform(r[#"basis"]?, Reference.Reshape),
        #"prediction" = if r[#"prediction"]? = null then null else List.Transform(r[#"prediction"]?, RiskAssessment_prediction.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SampledData.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"origin" = Quantity.Reshape(r[#"origin"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Schedule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"planningHorizon" = Period.Reshape(r[#"planningHorizon"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SearchParameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, SearchParameter_contact.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Signature.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeWho = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whoUri", "whoReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whoUri", "whoReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whoUri", "uri"}, { "whoReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ who = null ] else choicesRemoved & [ who = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeWho(
          childrenReshaped),

  SimpleQuantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Slot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"schedule" = Reference.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"accessionIdentifier" = Identifier.Reshape(r[#"accessionIdentifier"]?),
        #"collection" = Specimen_collection.Reshape(r[#"collection"]?),
        #"treatment" = if r[#"treatment"]? = null then null else List.Transform(r[#"treatment"]?, Specimen_treatment.Reshape),
        #"container" = if r[#"container"]? = null then null else List.Transform(r[#"container"]?, Specimen_container.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, StructureDefinition_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, StructureDefinition_mapping.Reshape),
        #"snapshot" = StructureDefinition_snapshot.Reshape(r[#"snapshot"]?),
        #"differential" = StructureDefinition_differential.Reshape(r[#"differential"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"channel" = Subscription_channel.Reshape(r[#"channel"]?),
        #"tag" = if r[#"tag"]? = null then null else List.Transform(r[#"tag"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, Substance_instance.Reshape),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Substance_ingredient.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SupplyDelivery.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"suppliedItem" = Reference.Reshape(r[#"suppliedItem"]?),
        #"supplier" = Reference.Reshape(r[#"supplier"]?),
        #"whenPrepared" = Period.Reshape(r[#"whenPrepared"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SupplyRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"kind" = CodeableConcept.Reshape(r[#"kind"]?),
        #"orderedItem" = Reference.Reshape(r[#"orderedItem"]?),
        #"supplier" = if r[#"supplier"]? = null then null else List.Transform(r[#"supplier"]?, Reference.Reshape),
        #"when" = SupplyRequest_when.Reshape(r[#"when"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped),

  TestScript.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, TestScript_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"metadata" = TestScript_metadata.Reshape(r[#"metadata"]?),
        #"fixture" = if r[#"fixture"]? = null then null else List.Transform(r[#"fixture"]?, TestScript_fixture.Reshape),
        #"profile" = if r[#"profile"]? = null then null else List.Transform(r[#"profile"]?, Reference.Reshape),
        #"variable" = if r[#"variable"]? = null then null else List.Transform(r[#"variable"]?, TestScript_variable.Reshape),
        #"setup" = TestScript_setup.Reshape(r[#"setup"]?),
        #"test" = if r[#"test"]? = null then null else List.Transform(r[#"test"]?, TestScript_test.Reshape),
        #"teardown" = TestScript_teardown.Reshape(r[#"teardown"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Timing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"repeat" = Timing_repeat.Reshape(r[#"repeat"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ValueSet_contact.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, CodeableConcept.Reshape),
        #"codeSystem" = ValueSet_codeSystem.Reshape(r[#"codeSystem"]?),
        #"compose" = ValueSet_compose.Reshape(r[#"compose"]?),
        #"expansion" = ValueSet_expansion.Reshape(r[#"expansion"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"prescriber" = Reference.Reshape(r[#"prescriber"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"dispense" = if r[#"dispense"]? = null then null else List.Transform(r[#"dispense"]?, VisionPrescription_dispense.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped)
in
  #table(
    type table [ ResourceTypeName = text, Reshaper = function (r as nullable record) as nullable record ],
    {
      { "Account", Account.Reshape },
      { "AllergyIntolerance", AllergyIntolerance.Reshape },
      { "Appointment", Appointment.Reshape },
      { "AppointmentResponse", AppointmentResponse.Reshape },
      { "AuditEvent", AuditEvent.Reshape },
      { "Basic", Basic.Reshape },
      { "Binary", Binary.Reshape },
      { "BodySite", BodySite.Reshape },
      { "Bundle", Bundle.Reshape },
      { "CarePlan", CarePlan.Reshape },
      { "Claim", Claim.Reshape },
      { "ClaimResponse", ClaimResponse.Reshape },
      { "ClinicalImpression", ClinicalImpression.Reshape },
      { "Communication", Communication.Reshape },
      { "CommunicationRequest", CommunicationRequest.Reshape },
      { "Composition", Composition.Reshape },
      { "ConceptMap", ConceptMap.Reshape },
      { "Condition", Condition.Reshape },
      { "Conformance", Conformance.Reshape },
      { "Contract", Contract.Reshape },
      { "Coverage", Coverage.Reshape },
      { "DataElement", DataElement.Reshape },
      { "DetectedIssue", DetectedIssue.Reshape },
      { "Device", Device.Reshape },
      { "DeviceComponent", DeviceComponent.Reshape },
      { "DeviceMetric", DeviceMetric.Reshape },
      { "DeviceUseRequest", DeviceUseRequest.Reshape },
      { "DeviceUseStatement", DeviceUseStatement.Reshape },
      { "DiagnosticOrder", DiagnosticOrder.Reshape },
      { "DiagnosticReport", DiagnosticReport.Reshape },
      { "DocumentManifest", DocumentManifest.Reshape },
      { "DocumentReference", DocumentReference.Reshape },
      { "EligibilityRequest", EligibilityRequest.Reshape },
      { "EligibilityResponse", EligibilityResponse.Reshape },
      { "Encounter", Encounter.Reshape },
      { "EnrollmentRequest", EnrollmentRequest.Reshape },
      { "EnrollmentResponse", EnrollmentResponse.Reshape },
      { "EpisodeOfCare", EpisodeOfCare.Reshape },
      { "ExplanationOfBenefit", ExplanationOfBenefit.Reshape },
      { "FamilyMemberHistory", FamilyMemberHistory.Reshape },
      { "Flag", Flag.Reshape },
      { "Goal", Goal.Reshape },
      { "Group", Group.Reshape },
      { "HealthcareService", HealthcareService.Reshape },
      { "ImagingObjectSelection", ImagingObjectSelection.Reshape },
      { "ImagingStudy", ImagingStudy.Reshape },
      { "Immunization", Immunization.Reshape },
      { "ImmunizationRecommendation", ImmunizationRecommendation.Reshape },
      { "ImplementationGuide", ImplementationGuide.Reshape },
      { "List", List.Reshape },
      { "Location", Location.Reshape },
      { "Media", Media.Reshape },
      { "Medication", Medication.Reshape },
      { "MedicationAdministration", MedicationAdministration.Reshape },
      { "MedicationDispense", MedicationDispense.Reshape },
      { "MedicationOrder", MedicationOrder.Reshape },
      { "MedicationStatement", MedicationStatement.Reshape },
      { "MessageHeader", MessageHeader.Reshape },
      { "NamingSystem", NamingSystem.Reshape },
      { "NutritionOrder", NutritionOrder.Reshape },
      { "Observation", Observation.Reshape },
      { "OperationDefinition", OperationDefinition.Reshape },
      { "OperationOutcome", OperationOutcome.Reshape },
      { "Order", Order.Reshape },
      { "OrderResponse", OrderResponse.Reshape },
      { "Organization", Organization.Reshape },
      { "Parameters", Parameters.Reshape },
      { "Patient", Patient.Reshape },
      { "PaymentNotice", PaymentNotice.Reshape },
      { "PaymentReconciliation", PaymentReconciliation.Reshape },
      { "Person", Person.Reshape },
      { "Practitioner", Practitioner.Reshape },
      { "Procedure", Procedure.Reshape },
      { "ProcedureRequest", ProcedureRequest.Reshape },
      { "ProcessRequest", ProcessRequest.Reshape },
      { "ProcessResponse", ProcessResponse.Reshape },
      { "Provenance", Provenance.Reshape },
      { "Questionnaire", Questionnaire.Reshape },
      { "QuestionnaireResponse", QuestionnaireResponse.Reshape },
      { "ReferralRequest", ReferralRequest.Reshape },
      { "RelatedPerson", RelatedPerson.Reshape },
      { "RiskAssessment", RiskAssessment.Reshape },
      { "Schedule", Schedule.Reshape },
      { "SearchParameter", SearchParameter.Reshape },
      { "Slot", Slot.Reshape },
      { "Specimen", Specimen.Reshape },
      { "StructureDefinition", StructureDefinition.Reshape },
      { "Subscription", Subscription.Reshape },
      { "Substance", Substance.Reshape },
      { "SupplyDelivery", SupplyDelivery.Reshape },
      { "SupplyRequest", SupplyRequest.Reshape },
      { "TestScript", TestScript.Reshape },
      { "ValueSet", ValueSet.Reshape },
      { "VisionPrescription", VisionPrescription.Reshape }
    })

