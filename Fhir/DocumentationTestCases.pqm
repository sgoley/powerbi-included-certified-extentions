//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

let
  TestCases =
    {
      {
        "DOC: Folding Patient.date (date)",
        "birthdate=lt1980-01-01",
        Fold("Patient", each [birthDate] < #date(1980, 1, 1))
      },
      {
        "DOC: Folding Patient.date AND (date)",
        "birthdate=ge1970-01-01&birthdate=lt1980-01-01",
        Fold("Patient", each [birthDate] < #date(1980, 1, 1) and [birthDate] >= #date(1970, 1, 1))
      },
      {
        "DOC: Folding Patient.date OR (date)",
        "birthdate=ge1980-01-01,lt1970-01-01",
        Fold("Patient", each [birthDate] >= #date(1980, 1, 1) or [birthDate] < #date(1970, 1, 1))
      },
      {
        "DOC: Folding Patient.active (boolean) interpreted as true",
        "active=true",
        Fold("Patient", each [active])
      },
      {
        "DOC: Folding Patient.active (boolean) interpreted as true",
        "active:not=true",
        Fold("Patient", each [active] <> true)
      },
      {
        "DOC: Folding Patient.gender (code)",
        "gender=male",
        Fold("Patient", each [gender] = "male")
      },
      {
        "DOC: Folding Patient.gender not male (code)",
        "gender:not=male",
        Fold("Patient", each [gender] <> "male")
      },
      {
        "DOC: Folding Observation.status (code)",
        "status=final",
        Fold("Observation", each [status] = "final")
      },
      {
        "DOC: Folding Patient._lastUpdated (instant)",
        "_lastUpdated=2010-12-31T11:56:02.000+00:00",
        Fold("Patient", each [meta][lastUpdated] = #datetimezone(2010, 12, 31, 11, 56, 2, 0, 0))
      },
      {
        "DOC: Folding Encounter.class system and code (coding)",
        "class=s|c",
        Fold("Encounter", each [class][system] = "s" and [class][code] = "c")
      },
      {
        "DOC: Folding Encounter.class code only (coding)",
        "class=c",
        Fold("Encounter", each [class][code] = "c")
      },
      {
        "DOC: Folding Encounter.class (coding)",
        "class=s|",
        Fold("Encounter", each [class][system] = "s")
      },
      {
        "DOC: Folding Observation.subject.reference (reference)",
        "subject=Patient/1234",
        Fold("Observation", each [subject][reference] = "Patient/1234")
      },
      {
        "DOC: Folding Observation.subject.reference ORs (reference)",
        "subject=1234,Patient/1234,https://myfhirservice/Patient/1234",
        Fold("Observation", each [subject][reference] = "1234" or [subject][reference] = "Patient/1234" or [subject][reference] = "https://myfhirservice/Patient/1234")
      },
      {
        "DOC: Folding ChargeItem.quantity.value (quantity)",
        "quantity=1",
        Fold("ChargeItem", each [quantity][value] = 1)
      },
      {
        "DOC: Folding ChargeItem.quantity.value greater than (quantity)",
        "quantity=gt1.001",
        Fold("ChargeItem", each [quantity][value] > 1.001)
      },
      {
        "DOC: Folding ChargeItem.quantity.value value, system, code (quantity)",
        "quantity=lt1.001|s|c",
        Fold("ChargeItem", each [quantity][value] < 1.001 and [quantity][system] = "s" and [quantity][code] = "c")
      },
      {
        "DOC: Folding Consent.provision.period.start starts after (period)",
        "period=sa2010-01-01T00:00:00.000+00:00",
        Fold("Consent", each [provision][period][start] > #datetimezone(2010, 1, 1, 0, 0, 0, 0, 0))
      },
      {
        "DOC: Folding Consent.provision.period.start ends before (period)",
        "period=eb2010-01-01T00:00:00.000+00:00",
        Fold("Consent", each [provision][period][end] < #datetimezone(2010, 1, 1, 0, 0, 0, 0, 0))
      },
      {
        "DOC: Folding Observation.code.text, equal",
        "code:text=t",
        Fold("Observation", each [code][text] = "t")
      },
      {
        "DOC: Folding Observation.code.text, startsWith",
        "code:text=t",
        Fold("Observation", each Text.StartsWith([code][text], "t"))
      },
      {
        "DOC: Folding Patient.meta.profile",
        "_profile=http://myprofile",
        Fold("Patient", each List.MatchesAny([meta][profile], each _ = "http://myprofile"))
      },
      {
        "DOC: Folding AllergyIntolerance.category",
        "category=food",
        Fold("AllergyIntolerance", each List.MatchesAny([category], each _ = "food"))
      },
      {
        "DOC: Folding AllergyIntolerance.category missing",
        "category:missing=true",
        Fold("AllergyIntolerance", each List.MatchesAll([category], each _ = null))
      },
      {
        "DOC: Folding AllergyIntolerance.category missing ([category] = null)",
        "category:missing=true",
        Fold("AllergyIntolerance", each [category] = null)
      },
      {
        "DOC: Folding Patient.name.family (exact)",
        "family:exact=Johnson",
        Fold("Patient", each Table.MatchesAnyRows([name], each [family] = "Johnson"))
      },
      {
        "DOC: Folding Patient.name.family (startsWith)",
        "family=John",
        Fold("Patient", each Table.MatchesAnyRows([name], each Text.StartsWith([family], "John")))
      },
      {
        "DOC: Folding Patient.name.family (startsWith OR)",
        "family=John,Paul",
        Fold("Patient", each Table.MatchesAnyRows([name], each Text.StartsWith([family], "John") or Text.StartsWith([family], "Paul")))
      },
      {
        "DOC: Folding Patient.name.family and patient.name.given",
        "family=John&given=Paul",
        Fold("Patient", each
            Table.MatchesAnyRows([name], each Text.StartsWith([family], "John")) and
            Table.MatchesAnyRows([name], each List.MatchesAny([given], each Text.StartsWith(_, "Paul"))))
      },
      {
        "DOC: Folding Goal.target.due.date",
        "target-date=gt2020-03-01",
        Fold("Goal", each Table.MatchesAnyRows([target], each [due][date] > #date(2020,3,1)))
      },
      {
        "DOC: Folding Patient.identifier",
        "identifier=s|v",
        Fold("Patient", each Table.MatchesAnyRows([identifier], each [system] = "s" and _[value] = "v"))
      },
      {
        "DOC: Folding Observation.code.coding",
        "code=s|c",
        Fold("Observation", each Table.MatchesAnyRows([code][coding], each [system] = "s" and [code] = "c"))
      },
      {
        "DOC: Folding Observation.code.coding and Observation.code.text",
        "code:text=t&code=s|c",
        Fold("Observation", each Table.MatchesAnyRows([code][coding], each [system] = "s" and [code] = "c") and [code][text] = "t")
      },
      {
        "DOC: Folding Patient.name.family and patient.name.given",
        "family=John&given=Paul",
        Fold("Patient", each
                Table.MatchesAnyRows([name], each Text.StartsWith([family], "John")) and
                Table.MatchesAnyRows([name], each List.MatchesAny([given], each Text.StartsWith(_, "Paul"))))
      },
      {
        "DOC: Folding Observation.category.coding vital-signs",
        "category=vital-signs",
        Fold("Observation", each Table.MatchesAnyRows([category], each Table.MatchesAnyRows([coding], each [code] = "vital-signs")))
      },
      {
        "DOC: Folding Observation.category.coding with system and code",
        "category=s|c",
        Fold("Observation", each Table.MatchesAnyRows([category], each Table.MatchesAnyRows([coding], each [system] = "s" and [code] = "c")))
      },
      {
        "DOC: Folding Observation.category.coding with system and code (OR)",
        "category=s1|c1,s2|c2",
        Fold("Observation", each
                Table.MatchesAnyRows(
                    [category],
                    each
                        Table.MatchesAnyRows(
                            [coding],
                            each 
                                ([system] = "s1" and [code] = "c1") or
                                ([system] = "s2" and [code] = "c2"))))
      },
      {
        "DOC: Folding AuditEvent.agent.policy (nested list property)",
        "policy=http://mypolicy",
        Fold("AuditEvent", each Table.MatchesAnyRows([agent], each List.MatchesAny([policy], each _ = "http://mypolicy")))
      },
      {
        "DOC: Folding Observation code-value quantity",
        "code-value-quantity=http://loinc.org|8302-2$gt150",
        Fold("Observation", each Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8302-2") and [value][Quantity][value] > 150)
      },
      {
        "DOC: Folding Observation component-code-value-quantity",
        "component-code-value-quantity=http://loinc.org|8480-6$gt140",
        Fold("Observation", each Table.MatchesAnyRows([component], each Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8480-6") and [value][Quantity][value] > 140))
      },
      {
        "DOC: Folding Observation component-code-value-quantity (AND)",
        "component-code-value-quantity=http://loinc.org|8462-4$gt90&component-code-value-quantity=http://loinc.org|8480-6$gt140",
        Fold("Observation", each 
                Table.MatchesAnyRows(
                    [component],
                    each 
                        Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8462-4") and [value][Quantity][value] > 90) and 
                        Table.MatchesAnyRows([component], each Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8480-6") and [value][Quantity][value] > 140))
      },
      {
        "DOC: Folding Observation component-code-value-quantity (OR)",
        "component-code-value-quantity=http://loinc.org|8462-4$gt90,http://loinc.org|8480-6$gt140",
        Fold("Observation", each 
                Table.MatchesAnyRows(
                    [component], 
                    each 
                        (Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8462-4") and [value][Quantity][value] > 90) or
                         Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8480-6") and [value][Quantity][value] > 140 ))
      },
      {
        "DOC: Folding Observation combo-code-value-quantity",
        "combo-code-value-quantity=http://loinc.org|8302-2$gt150",
        Fold("Observation", each 
                (Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8302-2") and [value][Quantity][value] > 150) or
                (Table.MatchesAnyRows([component], each Table.MatchesAnyRows([code][coding], each [system] = "http://loinc.org" and [code] = "8302-2") and [value][Quantity][value] > 150)))
      }
    }
in
  TestCases

