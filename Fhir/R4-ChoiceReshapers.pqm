//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

let
  DataRequirement_codeFilter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataRequirement_dateFilter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueDateTime", "valuePeriod", "valueDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueDateTime", "valuePeriod", "valueDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"}, { "valueDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  DataRequirement_sort.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Timing_repeat.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBounds = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "boundsDuration", "boundsRange", "boundsPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "boundsDuration", "boundsRange", "boundsPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "boundsDuration", "Duration"}, { "boundsRange", "Range"}, { "boundsPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ bounds = null ] else choicesRemoved & [ bounds = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeBounds(
          childrenReshaped),

  Dosage_doseAndRate.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDose = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseRange", "doseQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseRange", "doseQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseRange", "Range"}, { "doseQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ dose = null ] else choicesRemoved & [ dose = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange", "rateQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange", "rateQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"}, { "rateQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeDose(
            childrenReshaped)),

  ElementDefinition_slicing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"discriminator" = if r[#"discriminator"]? = null then null else List.Transform(r[#"discriminator"]?, ElementDefinition_slicing_discriminator.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_slicing_discriminator.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_base.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_type.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_example.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCanonical", "canonical"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueUrl", "url"}, { "valueUuid", "uuid"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueContactDetail", "ContactDetail"}, { "valueContributor", "Contributor"}, { "valueDataRequirement", "DataRequirement"}, { "valueExpression", "Expression"}, { "valueParameterDefinition", "ParameterDefinition"}, { "valueRelatedArtifact", "RelatedArtifact"}, { "valueTriggerDefinition", "TriggerDefinition"}, { "valueUsageContext", "UsageContext"}, { "valueDosage", "Dosage"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ElementDefinition_constraint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_binding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceAmount_referenceRange.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"lowLimit" = Quantity.Reshape(r[#"lowLimit"]?),
        #"highLimit" = Quantity.Reshape(r[#"highLimit"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account_coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account_guarantor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"party" = Reference.Reshape(r[#"party"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition_dynamicValue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"expression" = Expression.Reshape(r[#"expression"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AdverseEvent_suspectEntity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"instance" = Reference.Reshape(r[#"instance"]?),
        #"causality" = if r[#"causality"]? = null then null else List.Transform(r[#"causality"]?, AdverseEvent_suspectEntity_causality.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AdverseEvent_suspectEntity_causality.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"assessment" = CodeableConcept.Reshape(r[#"assessment"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AllergyIntolerance_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?),
        #"manifestation" = if r[#"manifestation"]? = null then null else List.Transform(r[#"manifestation"]?, CodeableConcept.Reshape),
        #"exposureRoute" = CodeableConcept.Reshape(r[#"exposureRoute"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Appointment_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"media" = Coding.Reshape(r[#"media"]?),
        #"network" = AuditEvent_agent_network.Reshape(r[#"network"]?),
        #"purposeOfUse" = if r[#"purposeOfUse"]? = null then null else List.Transform(r[#"purposeOfUse"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_agent_network.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"observer" = Reference.Reshape(r[#"observer"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_entity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"what" = Reference.Reshape(r[#"what"]?),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"role" = Coding.Reshape(r[#"role"]?),
        #"lifecycle" = Coding.Reshape(r[#"lifecycle"]?),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, AuditEvent_entity_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_entity_detail.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueBase64Binary"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueBase64Binary" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueBase64Binary", "base64Binary"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  BiologicallyDerivedProduct_collection.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCollected = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "collectedDateTime", "collectedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "collectedDateTime", "collectedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "collectedDateTime", "dateTime"}, { "collectedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ collected = null ] else choicesRemoved & [ collected = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"collector" = Reference.Reshape(r[#"collector"]?),
        #"source" = Reference.Reshape(r[#"source"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeCollected(
          childrenReshaped),

  BiologicallyDerivedProduct_processing.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTime = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timeDateTime", "timePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timeDateTime", "timePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timeDateTime", "dateTime"}, { "timePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ time = null ] else choicesRemoved & [ time = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"procedure" = CodeableConcept.Reshape(r[#"procedure"]?),
        #"additive" = Reference.Reshape(r[#"additive"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeTime(
          childrenReshaped),

  BiologicallyDerivedProduct_manipulation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTime = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timeDateTime", "timePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timeDateTime", "timePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timeDateTime", "dateTime"}, { "timePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ time = null ] else choicesRemoved & [ time = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTime(
          childrenReshaped),

  BiologicallyDerivedProduct_storage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"duration" = Period.Reshape(r[#"duration"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"search" = Bundle_entry_search.Reshape(r[#"search"]?),
        #"request" = Bundle_entry_request.Reshape(r[#"request"]?),
        #"response" = Bundle_entry_response.Reshape(r[#"response"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_search.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_request.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcome" = Resource.Reshape(r[#"outcome"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_software.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_implementation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"custodian" = Reference.Reshape(r[#"custodian"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"security" = CapabilityStatement_rest_security.Reshape(r[#"security"]?),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, CapabilityStatement_rest_resource.Reshape),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, CapabilityStatement_rest_interaction.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, CapabilityStatement_rest_searchParam.Reshape),
        #"operation" = if r[#"operation"]? = null then null else List.Transform(r[#"operation"]?, CapabilityStatement_rest_operation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_security.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"service" = if r[#"service"]? = null then null else List.Transform(r[#"service"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, CapabilityStatement_rest_resource_interaction.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, CapabilityStatement_rest_searchParam.Reshape),
        #"operation" = if r[#"operation"]? = null then null else List.Transform(r[#"operation"]?, CapabilityStatement_rest_operation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_resource_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_searchParam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, CapabilityStatement_messaging_endpoint.Reshape),
        #"supportedMessage" = if r[#"supportedMessage"]? = null then null else List.Transform(r[#"supportedMessage"]?, CapabilityStatement_messaging_supportedMessage.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging_endpoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"protocol" = Coding.Reshape(r[#"protocol"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging_supportedMessage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_document.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcomeCodeableConcept" = if r[#"outcomeCodeableConcept"]? = null then null else List.Transform(r[#"outcomeCodeableConcept"]?, CodeableConcept.Reshape),
        #"outcomeReference" = if r[#"outcomeReference"]? = null then null else List.Transform(r[#"outcomeReference"]?, Reference.Reshape),
        #"progress" = if r[#"progress"]? = null then null else List.Transform(r[#"progress"]?, Annotation.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"detail" = CarePlan_activity_detail.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity_detail.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeScheduled = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "scheduledTiming", "Timing"}, { "scheduledPeriod", "Period"}, { "scheduledString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ scheduled = null ] else choicesRemoved & [ scheduled = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productCodeableConcept", "productReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productCodeableConcept", "productReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productCodeableConcept", "CodeableConcept"}, { "productReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dailyAmount" = Quantity.Reshape(r[#"dailyAmount"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeScheduled(
            childrenReshaped)),

  CareTeam_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"member" = Reference.Reshape(r[#"member"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CatalogEntry_relatedEntry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = Reference.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItem_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItemDefinition_applicability.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItemDefinition_propertyGroup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"priceComponent" = if r[#"priceComponent"]? = null then null else List.Transform(r[#"priceComponent"]?, ChargeItemDefinition_propertyGroup_priceComponent.Reshape),
        #"applicability" = if r[#"applicability"]? = null then null else List.Transform(r[#"applicability"]?, ChargeItemDefinition_applicability.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItemDefinition_propertyGroup_priceComponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"reference" = Identifier.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_payee.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_careTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"qualification" = CodeableConcept.Reshape(r[#"qualification"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_supportingInfo.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDate", "timingPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDate", "timingPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDate", "date"}, { "timingPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueString", "valueQuantity", "valueAttachment", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueString", "valueQuantity", "valueAttachment", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueString", "string"}, { "valueQuantity", "Quantity"}, { "valueAttachment", "Attachment"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeTiming(
            childrenReshaped)),

  Claim_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDiagnosis = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "diagnosisCodeableConcept", "diagnosisReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "diagnosisCodeableConcept", "diagnosisReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "diagnosisCodeableConcept", "CodeableConcept"}, { "diagnosisReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ diagnosis = null ] else choicesRemoved & [ diagnosis = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"onAdmission" = CodeableConcept.Reshape(r[#"onAdmission"]?),
        #"packageCode" = CodeableConcept.Reshape(r[#"packageCode"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDiagnosis(
          childrenReshaped),

  Claim_procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProcedure = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "procedureCodeableConcept", "procedureReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "procedureCodeableConcept", "procedureReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "procedureCodeableConcept", "CodeableConcept"}, { "procedureReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ procedure = null ] else choicesRemoved & [ procedure = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProcedure(
          childrenReshaped),

  Claim_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_accident.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          childrenReshaped),

  Claim_item.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"encounter" = if r[#"encounter"]? = null then null else List.Transform(r[#"encounter"]?, Reference.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Claim_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  Claim_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, Claim_item_detail_subDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ClaimResponse_item_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = if r[#"provider"]? = null then null else List.Transform(r[#"provider"]?, Reference.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_addItem_detail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  ClaimResponse_addItem_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ClaimResponse_addItem_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_total.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_payment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"adjustment" = Money.Reshape(r[#"adjustment"]?),
        #"adjustmentReason" = CodeableConcept.Reshape(r[#"adjustmentReason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_error.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_investigation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_finding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"itemCodeableConcept" = CodeableConcept.Reshape(r[#"itemCodeableConcept"]?),
        #"itemReference" = Reference.Reshape(r[#"itemReference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_property.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, CodeSystem_concept_designation.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, CodeSystem_concept_property.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, @CodeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept_property.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCode", "valueCoding", "valueString", "valueInteger", "valueBoolean", "valueDateTime", "valueDecimal"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCode", "valueCoding", "valueString", "valueInteger", "valueBoolean", "valueDateTime", "valueDecimal" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCode", "code"}, { "valueCoding", "Coding"}, { "valueString", "string"}, { "valueInteger", "integer"}, { "valueBoolean", "boolean"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Communication_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  CommunicationRequest_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  CompartmentDefinition_resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_attester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_relatesTo.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetIdentifier", "targetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetIdentifier", "targetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetIdentifier", "Identifier"}, { "targetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          childrenReshaped),

  Composition_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_section.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"focus" = Reference.Reshape(r[#"focus"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Reference.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, @Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ConceptMap_group_element.Reshape),
        #"unmapped" = ConceptMap_group_unmapped.Reshape(r[#"unmapped"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, ConceptMap_group_element_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"dependsOn" = if r[#"dependsOn"]? = null then null else List.Transform(r[#"dependsOn"]?, ConceptMap_group_element_target_dependsOn.Reshape),
        #"product" = if r[#"product"]? = null then null else List.Transform(r[#"product"]?, ConceptMap_group_element_target_dependsOn.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element_target_dependsOn.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_unmapped.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_stage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"summary" = CodeableConcept.Reshape(r[#"summary"]?),
        #"assessment" = if r[#"assessment"]? = null then null else List.Transform(r[#"assessment"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_evidence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_policy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_verification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"verifiedWith" = Reference.Reshape(r[#"verifiedWith"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_provision.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Consent_provision_actor.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"purpose" = if r[#"purpose"]? = null then null else List.Transform(r[#"purpose"]?, Coding.Reshape),
        #"class" = if r[#"class"]? = null then null else List.Transform(r[#"class"]?, Coding.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"dataPeriod" = Period.Reshape(r[#"dataPeriod"]?),
        #"data" = if r[#"data"]? = null then null else List.Transform(r[#"data"]?, Consent_provision_data.Reshape),
        #"provision" = if r[#"provision"]? = null then null else List.Transform(r[#"provision"]?, @Consent_provision.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_provision_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_provision_data.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_contentDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"publisher" = Reference.Reshape(r[#"publisher"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTopic = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "topicCodeableConcept", "topicReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "topicCodeableConcept", "topicReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "topicCodeableConcept", "CodeableConcept"}, { "topicReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ topic = null ] else choicesRemoved & [ topic = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Contract_term_securityLabel.Reshape),
        #"offer" = Contract_term_offer.Reshape(r[#"offer"]?),
        #"asset" = if r[#"asset"]? = null then null else List.Transform(r[#"asset"]?, Contract_term_asset.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, Contract_term_action.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, @Contract_term.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTopic(
          childrenReshaped),

  Contract_term_securityLabel.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"classification" = Coding.Reshape(r[#"classification"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, Coding.Reshape),
        #"control" = if r[#"control"]? = null then null else List.Transform(r[#"control"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_offer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"party" = if r[#"party"]? = null then null else List.Transform(r[#"party"]?, Contract_term_offer_party.Reshape),
        #"topic" = Reference.Reshape(r[#"topic"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"decision" = CodeableConcept.Reshape(r[#"decision"]?),
        #"decisionMode" = if r[#"decisionMode"]? = null then null else List.Transform(r[#"decisionMode"]?, CodeableConcept.Reshape),
        #"answer" = if r[#"answer"]? = null then null else List.Transform(r[#"answer"]?, Contract_term_offer_answer.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_offer_party.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = if r[#"reference"]? = null then null else List.Transform(r[#"reference"]?, Reference.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_offer_answer.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueDecimal", "decimal"}, { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueAttachment", "Attachment"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Contract_term_asset.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"scope" = CodeableConcept.Reshape(r[#"scope"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"typeReference" = if r[#"typeReference"]? = null then null else List.Transform(r[#"typeReference"]?, Reference.Reshape),
        #"subtype" = if r[#"subtype"]? = null then null else List.Transform(r[#"subtype"]?, CodeableConcept.Reshape),
        #"relationship" = Coding.Reshape(r[#"relationship"]?),
        #"context" = if r[#"context"]? = null then null else List.Transform(r[#"context"]?, Contract_term_asset_context.Reshape),
        #"periodType" = if r[#"periodType"]? = null then null else List.Transform(r[#"periodType"]?, CodeableConcept.Reshape),
        #"period" = if r[#"period"]? = null then null else List.Transform(r[#"period"]?, Period.Reshape),
        #"usePeriod" = if r[#"usePeriod"]? = null then null else List.Transform(r[#"usePeriod"]?, Period.Reshape),
        #"valuedItem" = if r[#"valuedItem"]? = null then null else List.Transform(r[#"valuedItem"]?, Contract_term_asset_valuedItem.Reshape),
        #"answer" = if r[#"answer"]? = null then null else List.Transform(r[#"answer"]?, Contract_term_offer_answer.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_asset_context.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_asset_valuedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEntity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "entityCodeableConcept", "entityReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "entityCodeableConcept", "entityReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "entityCodeableConcept", "CodeableConcept"}, { "entityReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ entity = null ] else choicesRemoved & [ entity = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"responsible" = Reference.Reshape(r[#"responsible"]?),
        #"recipient" = Reference.Reshape(r[#"recipient"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEntity(
          childrenReshaped),

  Contract_term_action.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Contract_term_action_subject.Reshape),
        #"intent" = CodeableConcept.Reshape(r[#"intent"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"requester" = if r[#"requester"]? = null then null else List.Transform(r[#"requester"]?, Reference.Reshape),
        #"performerType" = if r[#"performerType"]? = null then null else List.Transform(r[#"performerType"]?, CodeableConcept.Reshape),
        #"performerRole" = CodeableConcept.Reshape(r[#"performerRole"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  Contract_term_action_subject.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = if r[#"reference"]? = null then null else List.Transform(r[#"reference"]?, Reference.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_signer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"party" = Reference.Reshape(r[#"party"]?),
        #"signature" = if r[#"signature"]? = null then null else List.Transform(r[#"signature"]?, Signature.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_friendly.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_legal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_rule.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Coverage_class.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coverage_costToBeneficiary.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"exception" = if r[#"exception"]? = null then null else List.Transform(r[#"exception"]?, Coverage_costToBeneficiary_exception.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Coverage_costToBeneficiary_exception.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityRequest_supportingInfo.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"information" = Reference.Reshape(r[#"information"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityRequest_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityRequest_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, CoverageEligibilityRequest_item_diagnosis.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityRequest_item_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDiagnosis = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "diagnosisCodeableConcept", "diagnosisReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "diagnosisCodeableConcept", "diagnosisReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "diagnosisCodeableConcept", "CodeableConcept"}, { "diagnosisReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ diagnosis = null ] else choicesRemoved & [ diagnosis = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDiagnosis(
          childrenReshaped),

  CoverageEligibilityResponse_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"benefitPeriod" = Period.Reshape(r[#"benefitPeriod"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, CoverageEligibilityResponse_insurance_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityResponse_insurance_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"network" = CodeableConcept.Reshape(r[#"network"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"term" = CodeableConcept.Reshape(r[#"term"]?),
        #"benefit" = if r[#"benefit"]? = null then null else List.Transform(r[#"benefit"]?, CoverageEligibilityResponse_insurance_item_benefit.Reshape),
        #"authorizationSupporting" = if r[#"authorizationSupporting"]? = null then null else List.Transform(r[#"authorizationSupporting"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityResponse_insurance_item_benefit.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAllowed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "allowedUnsignedInt", "unsignedInt"}, { "allowedString", "string"}, { "allowedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ allowed = null ] else choicesRemoved & [ allowed = choiceRecord ],
      ReshapeUsed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "usedUnsignedInt", "usedString", "usedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "usedUnsignedInt", "usedString", "usedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "usedUnsignedInt", "unsignedInt"}, { "usedString", "string"}, { "usedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ used = null ] else choicesRemoved & [ used = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeUsed(
          ReshapeAllowed(
            childrenReshaped)),

  CoverageEligibilityResponse_error.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue_evidence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue_mitigation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_udiCarrier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_deviceName.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_specialization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"systemType" = CodeableConcept.Reshape(r[#"systemType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_version.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"component" = Identifier.Reshape(r[#"component"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_property.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"valueQuantity" = if r[#"valueQuantity"]? = null then null else List.Transform(r[#"valueQuantity"]?, Quantity.Reshape),
        #"valueCode" = if r[#"valueCode"]? = null then null else List.Transform(r[#"valueCode"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_udiDeviceIdentifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_deviceName.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_specialization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_capability.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"description" = if r[#"description"]? = null then null else List.Transform(r[#"description"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_property.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"valueQuantity" = if r[#"valueQuantity"]? = null then null else List.Transform(r[#"valueQuantity"]?, Quantity.Reshape),
        #"valueCode" = if r[#"valueCode"]? = null then null else List.Transform(r[#"valueCode"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition_material.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceMetric_calibration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceRequest_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueBoolean"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueBoolean" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueBoolean", "boolean"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  DiagnosticReport_media.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = Reference.Reshape(r[#"link"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"ref" = Reference.Reshape(r[#"ref"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_relatesTo.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_content.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"attachment" = Attachment.Reshape(r[#"attachment"]?),
        #"format" = Coding.Reshape(r[#"format"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_context.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"encounter" = if r[#"encounter"]? = null then null else List.Transform(r[#"encounter"]?, Reference.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"facilityType" = CodeableConcept.Reshape(r[#"facilityType"]?),
        #"practiceSetting" = CodeableConcept.Reshape(r[#"practiceSetting"]?),
        #"sourcePatientInfo" = Reference.Reshape(r[#"sourcePatientInfo"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_sampleSize.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_resultsByExposure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"variantState" = CodeableConcept.Reshape(r[#"variantState"]?),
        #"riskEvidenceSynthesis" = Reference.Reshape(r[#"riskEvidenceSynthesis"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_effectEstimate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"variantState" = CodeableConcept.Reshape(r[#"variantState"]?),
        #"unitOfMeasure" = CodeableConcept.Reshape(r[#"unitOfMeasure"]?),
        #"precisionEstimate" = if r[#"precisionEstimate"]? = null then null else List.Transform(r[#"precisionEstimate"]?, EffectEvidenceSynthesis_effectEstimate_precisionEstimate.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_effectEstimate_precisionEstimate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_certainty.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"rating" = if r[#"rating"]? = null then null else List.Transform(r[#"rating"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"certaintySubcomponent" = if r[#"certaintySubcomponent"]? = null then null else List.Transform(r[#"certaintySubcomponent"]?, EffectEvidenceSynthesis_certainty_certaintySubcomponent.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis_certainty_certaintySubcomponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"rating" = if r[#"rating"]? = null then null else List.Transform(r[#"rating"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_classHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"class" = Coding.Reshape(r[#"class"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"individual" = Reference.Reshape(r[#"individual"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"use" = CodeableConcept.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_hospitalization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"preAdmissionIdentifier" = Identifier.Reshape(r[#"preAdmissionIdentifier"]?),
        #"origin" = Reference.Reshape(r[#"origin"]?),
        #"admitSource" = CodeableConcept.Reshape(r[#"admitSource"]?),
        #"reAdmission" = CodeableConcept.Reshape(r[#"reAdmission"]?),
        #"dietPreference" = if r[#"dietPreference"]? = null then null else List.Transform(r[#"dietPreference"]?, CodeableConcept.Reshape),
        #"specialCourtesy" = if r[#"specialCourtesy"]? = null then null else List.Transform(r[#"specialCourtesy"]?, CodeableConcept.Reshape),
        #"specialArrangement" = if r[#"specialArrangement"]? = null then null else List.Transform(r[#"specialArrangement"]?, CodeableConcept.Reshape),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"dischargeDisposition" = CodeableConcept.Reshape(r[#"dischargeDisposition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"physicalType" = CodeableConcept.Reshape(r[#"physicalType"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EvidenceVariable_characteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefinition = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "definitionReference", "definitionCanonical", "definitionCodeableConcept", "definitionExpression", "definitionDataRequirement", "definitionTriggerDefinition"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "definitionReference", "definitionCanonical", "definitionCodeableConcept", "definitionExpression", "definitionDataRequirement", "definitionTriggerDefinition" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "definitionReference", "Reference"}, { "definitionCanonical", "canonical"}, { "definitionCodeableConcept", "CodeableConcept"}, { "definitionExpression", "Expression"}, { "definitionDataRequirement", "DataRequirement"}, { "definitionTriggerDefinition", "TriggerDefinition"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ definition = null ] else choicesRemoved & [ definition = choiceRecord ],
      ReshapeParticipantEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "participantEffectiveDateTime", "participantEffectivePeriod", "participantEffectiveDuration", "participantEffectiveTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "participantEffectiveDateTime", "participantEffectivePeriod", "participantEffectiveDuration", "participantEffectiveTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "participantEffectiveDateTime", "dateTime"}, { "participantEffectivePeriod", "Period"}, { "participantEffectiveDuration", "Duration"}, { "participantEffectiveTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ participantEffective = null ] else choicesRemoved & [ participantEffective = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"usageContext" = if r[#"usageContext"]? = null then null else List.Transform(r[#"usageContext"]?, UsageContext.Reshape),
        #"timeFromStart" = Duration.Reshape(r[#"timeFromStart"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeParticipantEffective(
          ReshapeDefinition(
            childrenReshaped)),

  ExampleScenario_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"version" = if r[#"version"]? = null then null else List.Transform(r[#"version"]?, ExampleScenario_instance_version.Reshape),
        #"containedInstance" = if r[#"containedInstance"]? = null then null else List.Transform(r[#"containedInstance"]?, ExampleScenario_instance_containedInstance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_instance_version.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_instance_containedInstance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_process.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"step" = if r[#"step"]? = null then null else List.Transform(r[#"step"]?, ExampleScenario_process_step.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_process_step.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = ExampleScenario_process_step_operation.Reshape(r[#"operation"]?),
        #"alternative" = if r[#"alternative"]? = null then null else List.Transform(r[#"alternative"]?, ExampleScenario_process_step_alternative.Reshape),
        #"process" = if r[#"process"]? = null then null else List.Transform(r[#"process"]?, ExampleScenario_process.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_process_step_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"request" = ExampleScenario_instance_containedInstance.Reshape(r[#"request"]?),
        #"response" = ExampleScenario_instance_containedInstance.Reshape(r[#"response"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario_process_step_alternative.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"step" = if r[#"step"]? = null then null else List.Transform(r[#"step"]?, ExampleScenario_process_step.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"reference" = Identifier.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_payee.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_careTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"qualification" = CodeableConcept.Reshape(r[#"qualification"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_supportingInfo.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDate", "timingPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDate", "timingPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDate", "date"}, { "timingPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueString", "valueQuantity", "valueAttachment", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueString", "valueQuantity", "valueAttachment", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueString", "string"}, { "valueQuantity", "Quantity"}, { "valueAttachment", "Attachment"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reason" = Coding.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeTiming(
            childrenReshaped)),

  ExplanationOfBenefit_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDiagnosis = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "diagnosisCodeableConcept", "diagnosisReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "diagnosisCodeableConcept", "diagnosisReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "diagnosisCodeableConcept", "CodeableConcept"}, { "diagnosisReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ diagnosis = null ] else choicesRemoved & [ diagnosis = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"onAdmission" = CodeableConcept.Reshape(r[#"onAdmission"]?),
        #"packageCode" = CodeableConcept.Reshape(r[#"packageCode"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDiagnosis(
          childrenReshaped),

  ExplanationOfBenefit_procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProcedure = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "procedureCodeableConcept", "procedureReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "procedureCodeableConcept", "procedureReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "procedureCodeableConcept", "CodeableConcept"}, { "procedureReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ procedure = null ] else choicesRemoved & [ procedure = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProcedure(
          childrenReshaped),

  ExplanationOfBenefit_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_accident.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          childrenReshaped),

  ExplanationOfBenefit_item.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"encounter" = if r[#"encounter"]? = null then null else List.Transform(r[#"encounter"]?, Reference.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ExplanationOfBenefit_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  ExplanationOfBenefit_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ExplanationOfBenefit_item_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_addItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = if r[#"provider"]? = null then null else List.Transform(r[#"provider"]?, Reference.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ExplanationOfBenefit_addItem_detail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  ExplanationOfBenefit_addItem_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ExplanationOfBenefit_addItem_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_addItem_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"productOrService" = CodeableConcept.Reshape(r[#"productOrService"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_total.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_payment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"adjustment" = Money.Reshape(r[#"adjustment"]?),
        #"adjustmentReason" = CodeableConcept.Reshape(r[#"adjustmentReason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_benefitBalance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"network" = CodeableConcept.Reshape(r[#"network"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"term" = CodeableConcept.Reshape(r[#"term"]?),
        #"financial" = if r[#"financial"]? = null then null else List.Transform(r[#"financial"]?, ExplanationOfBenefit_benefitBalance_financial.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_benefitBalance_financial.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAllowed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "allowedUnsignedInt", "unsignedInt"}, { "allowedString", "string"}, { "allowedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ allowed = null ] else choicesRemoved & [ allowed = choiceRecord ],
      ReshapeUsed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "usedUnsignedInt", "usedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "usedUnsignedInt", "usedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "usedUnsignedInt", "unsignedInt"}, { "usedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ used = null ] else choicesRemoved & [ used = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeUsed(
          ReshapeAllowed(
            childrenReshaped)),

  FamilyMemberHistory_condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetAge", "onsetRange", "onsetPeriod", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetAge", "onsetRange", "onsetPeriod", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetAge", "Age"}, { "onsetRange", "Range"}, { "onsetPeriod", "Period"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnset(
          childrenReshaped),

  Goal_target.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDetail = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept", "detailString", "detailBoolean", "detailInteger", "detailRatio"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept", "detailString", "detailBoolean", "detailInteger", "detailRatio" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "detailQuantity", "Quantity"}, { "detailRange", "Range"}, { "detailCodeableConcept", "CodeableConcept"}, { "detailString", "string"}, { "detailBoolean", "boolean"}, { "detailInteger", "integer"}, { "detailRatio", "Ratio"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ detail = null ] else choicesRemoved & [ detail = choiceRecord ],
      ReshapeDue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "dueDate", "dueDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "dueDate", "dueDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "dueDate", "date"}, { "dueDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ due = null ] else choicesRemoved & [ due = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"measure" = CodeableConcept.Reshape(r[#"measure"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDue(
          ReshapeDetail(
            childrenReshaped)),

  GraphDefinition_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, GraphDefinition_link_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GraphDefinition_link_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"compartment" = if r[#"compartment"]? = null then null else List.Transform(r[#"compartment"]?, GraphDefinition_link_target_compartment.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, GraphDefinition_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GraphDefinition_link_target_compartment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Group_characteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueBoolean", "boolean"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Group_member.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"entity" = Reference.Reshape(r[#"entity"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_eligibility.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_availableTime.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_notAvailable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"during" = Period.Reshape(r[#"during"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modality" = Coding.Reshape(r[#"modality"]?),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"bodySite" = Coding.Reshape(r[#"bodySite"]?),
        #"laterality" = Coding.Reshape(r[#"laterality"]?),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, ImagingStudy_series_performer.Reshape),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ImagingStudy_series_instance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sopClass" = Coding.Reshape(r[#"sopClass"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_education.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"detail" = Reference.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_protocolApplied.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDoseNumber = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseNumberPositiveInt", "doseNumberString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseNumberPositiveInt", "doseNumberString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseNumberPositiveInt", "positiveInt"}, { "doseNumberString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ doseNumber = null ] else choicesRemoved & [ doseNumber = choiceRecord ],
      ReshapeSeriesDoses = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "seriesDosesPositiveInt", "seriesDosesString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "seriesDosesPositiveInt", "seriesDosesString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "seriesDosesPositiveInt", "positiveInt"}, { "seriesDosesString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ seriesDoses = null ] else choicesRemoved & [ seriesDoses = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = Reference.Reshape(r[#"authority"]?),
        #"targetDisease" = if r[#"targetDisease"]? = null then null else List.Transform(r[#"targetDisease"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSeriesDoses(
          ReshapeDoseNumber(
            childrenReshaped)),

  ImmunizationRecommendation_recommendation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDoseNumber = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseNumberPositiveInt", "doseNumberString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseNumberPositiveInt", "doseNumberString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseNumberPositiveInt", "positiveInt"}, { "doseNumberString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ doseNumber = null ] else choicesRemoved & [ doseNumber = choiceRecord ],
      ReshapeSeriesDoses = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "seriesDosesPositiveInt", "seriesDosesString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "seriesDosesPositiveInt", "seriesDosesString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "seriesDosesPositiveInt", "positiveInt"}, { "seriesDosesString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ seriesDoses = null ] else choicesRemoved & [ seriesDoses = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"vaccineCode" = if r[#"vaccineCode"]? = null then null else List.Transform(r[#"vaccineCode"]?, CodeableConcept.Reshape),
        #"targetDisease" = CodeableConcept.Reshape(r[#"targetDisease"]?),
        #"contraindicatedVaccineCode" = if r[#"contraindicatedVaccineCode"]? = null then null else List.Transform(r[#"contraindicatedVaccineCode"]?, CodeableConcept.Reshape),
        #"forecastStatus" = CodeableConcept.Reshape(r[#"forecastStatus"]?),
        #"forecastReason" = if r[#"forecastReason"]? = null then null else List.Transform(r[#"forecastReason"]?, CodeableConcept.Reshape),
        #"dateCriterion" = if r[#"dateCriterion"]? = null then null else List.Transform(r[#"dateCriterion"]?, ImmunizationRecommendation_recommendation_dateCriterion.Reshape),
        #"supportingImmunization" = if r[#"supportingImmunization"]? = null then null else List.Transform(r[#"supportingImmunization"]?, Reference.Reshape),
        #"supportingPatientInformation" = if r[#"supportingPatientInformation"]? = null then null else List.Transform(r[#"supportingPatientInformation"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSeriesDoses(
          ReshapeDoseNumber(
            childrenReshaped)),

  ImmunizationRecommendation_recommendation_dateCriterion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_dependsOn.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_global.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_definition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"grouping" = if r[#"grouping"]? = null then null else List.Transform(r[#"grouping"]?, ImplementationGuide_definition_grouping.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, ImplementationGuide_definition_resource.Reshape),
        #"page" = ImplementationGuide_definition_page.Reshape(r[#"page"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ImplementationGuide_definition_parameter.Reshape),
        #"template" = if r[#"template"]? = null then null else List.Transform(r[#"template"]?, ImplementationGuide_definition_template.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_definition_grouping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_definition_resource.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeExample = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "exampleBoolean", "exampleCanonical"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "exampleBoolean", "exampleCanonical" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "exampleBoolean", "boolean"}, { "exampleCanonical", "canonical"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ example = null ] else choicesRemoved & [ example = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeExample(
          childrenReshaped),

  ImplementationGuide_definition_page.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeName = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "nameUrl", "nameReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "nameUrl", "nameReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "nameUrl", "url"}, { "nameReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ name = null ] else choicesRemoved & [ name = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"page" = if r[#"page"]? = null then null else List.Transform(r[#"page"]?, @ImplementationGuide_definition_page.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeName(
          childrenReshaped),

  ImplementationGuide_definition_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_definition_template.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_manifest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, ImplementationGuide_manifest_resource.Reshape),
        #"page" = if r[#"page"]? = null then null else List.Transform(r[#"page"]?, ImplementationGuide_manifest_page.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_manifest_resource.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeExample = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "exampleBoolean", "exampleCanonical"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "exampleBoolean", "exampleCanonical" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "exampleBoolean", "boolean"}, { "exampleCanonical", "canonical"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ example = null ] else choicesRemoved & [ example = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeExample(
          childrenReshaped),

  ImplementationGuide_manifest_page.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"purpose" = CodeableConcept.Reshape(r[#"purpose"]?),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"network" = if r[#"network"]? = null then null else List.Transform(r[#"network"]?, Reference.Reshape),
        #"benefit" = if r[#"benefit"]? = null then null else List.Transform(r[#"benefit"]?, InsurancePlan_coverage_benefit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_coverage_benefit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"limit" = if r[#"limit"]? = null then null else List.Transform(r[#"limit"]?, InsurancePlan_coverage_benefit_limit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_coverage_benefit_limit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"value" = Quantity.Reshape(r[#"value"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_plan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"coverageArea" = if r[#"coverageArea"]? = null then null else List.Transform(r[#"coverageArea"]?, Reference.Reshape),
        #"network" = if r[#"network"]? = null then null else List.Transform(r[#"network"]?, Reference.Reshape),
        #"generalCost" = if r[#"generalCost"]? = null then null else List.Transform(r[#"generalCost"]?, InsurancePlan_plan_generalCost.Reshape),
        #"specificCost" = if r[#"specificCost"]? = null then null else List.Transform(r[#"specificCost"]?, InsurancePlan_plan_specificCost.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_plan_generalCost.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"cost" = Money.Reshape(r[#"cost"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_plan_specificCost.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"benefit" = if r[#"benefit"]? = null then null else List.Transform(r[#"benefit"]?, InsurancePlan_plan_specificCost_benefit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_plan_specificCost_benefit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"cost" = if r[#"cost"]? = null then null else List.Transform(r[#"cost"]?, InsurancePlan_plan_specificCost_benefit_cost.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan_plan_specificCost_benefit_cost.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"applicability" = CodeableConcept.Reshape(r[#"applicability"]?),
        #"qualifiers" = if r[#"qualifiers"]? = null then null else List.Transform(r[#"qualifiers"]?, CodeableConcept.Reshape),
        #"value" = Quantity.Reshape(r[#"value"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Invoice_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Invoice_lineItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeChargeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "chargeItemReference", "chargeItemCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "chargeItemReference", "chargeItemCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "chargeItemReference", "Reference"}, { "chargeItemCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ chargeItem = null ] else choicesRemoved & [ chargeItem = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"priceComponent" = if r[#"priceComponent"]? = null then null else List.Transform(r[#"priceComponent"]?, Invoice_totalPriceComponent.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeChargeItem(
          childrenReshaped),

  Invoice_totalPriceComponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Linkage_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"flag" = CodeableConcept.Reshape(r[#"flag"]?),
        #"item" = Reference.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location_position.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location_hoursOfOperation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, Measure_group_population.Reshape),
        #"stratifier" = if r[#"stratifier"]? = null then null else List.Transform(r[#"stratifier"]?, Measure_group_stratifier.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"criteria" = Expression.Reshape(r[#"criteria"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group_stratifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"criteria" = Expression.Reshape(r[#"criteria"]?),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, Measure_group_stratifier_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group_stratifier_component.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"criteria" = Expression.Reshape(r[#"criteria"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_supplementalData.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"usage" = if r[#"usage"]? = null then null else List.Transform(r[#"usage"]?, CodeableConcept.Reshape),
        #"criteria" = Expression.Reshape(r[#"criteria"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, MeasureReport_group_population.Reshape),
        #"measureScore" = Quantity.Reshape(r[#"measureScore"]?),
        #"stratifier" = if r[#"stratifier"]? = null then null else List.Transform(r[#"stratifier"]?, MeasureReport_group_stratifier.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subjectResults" = Reference.Reshape(r[#"subjectResults"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"stratum" = if r[#"stratum"]? = null then null else List.Transform(r[#"stratum"]?, MeasureReport_group_stratifier_stratum.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier_stratum.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"value" = CodeableConcept.Reshape(r[#"value"]?),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, MeasureReport_group_stratifier_stratum_component.Reshape),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, MeasureReport_group_stratifier_stratum_population.Reshape),
        #"measureScore" = Quantity.Reshape(r[#"measureScore"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier_stratum_component.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"value" = CodeableConcept.Reshape(r[#"value"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier_stratum_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subjectResults" = Reference.Reshape(r[#"subjectResults"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"strength" = Ratio.Reshape(r[#"strength"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  Medication_batch.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration_dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"dose" = Quantity.Reshape(r[#"dose"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          childrenReshaped),

  MedicationDispense_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationDispense_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"responsibleParty" = if r[#"responsibleParty"]? = null then null else List.Transform(r[#"responsibleParty"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_relatedMedicationKnowledge.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reference" = if r[#"reference"]? = null then null else List.Transform(r[#"reference"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_monograph.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"source" = Reference.Reshape(r[#"source"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"strength" = Ratio.Reshape(r[#"strength"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  MedicationKnowledge_cost.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"cost" = Money.Reshape(r[#"cost"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_monitoringProgram.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_administrationGuidelines.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeIndication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "indicationCodeableConcept", "indicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "indicationCodeableConcept", "indicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "indicationCodeableConcept", "CodeableConcept"}, { "indicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ indication = null ] else choicesRemoved & [ indication = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, MedicationKnowledge_administrationGuidelines_dosage.Reshape),
        #"patientCharacteristics" = if r[#"patientCharacteristics"]? = null then null else List.Transform(r[#"patientCharacteristics"]?, MedicationKnowledge_administrationGuidelines_patientCharacteristics.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeIndication(
          childrenReshaped),

  MedicationKnowledge_administrationGuidelines_dosage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, Dosage.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_administrationGuidelines_patientCharacteristics.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCharacteristic = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "characteristicCodeableConcept", "characteristicQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "characteristicCodeableConcept", "characteristicQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "characteristicCodeableConcept", "CodeableConcept"}, { "characteristicQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ characteristic = null ] else choicesRemoved & [ characteristic = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeCharacteristic(
          childrenReshaped),

  MedicationKnowledge_medicineClassification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"classification" = if r[#"classification"]? = null then null else List.Transform(r[#"classification"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_packaging.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_drugCharacteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueString", "valueQuantity", "valueBase64Binary"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueString", "valueQuantity", "valueBase64Binary" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueQuantity", "Quantity"}, { "valueBase64Binary", "base64Binary"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  MedicationKnowledge_regulatory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"regulatoryAuthority" = Reference.Reshape(r[#"regulatoryAuthority"]?),
        #"substitution" = if r[#"substitution"]? = null then null else List.Transform(r[#"substitution"]?, MedicationKnowledge_regulatory_substitution.Reshape),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, MedicationKnowledge_regulatory_schedule.Reshape),
        #"maxDispense" = MedicationKnowledge_regulatory_maxDispense.Reshape(r[#"maxDispense"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_regulatory_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_regulatory_schedule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"schedule" = CodeableConcept.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_regulatory_maxDispense.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"period" = Duration.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationKnowledge_kinetics.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"areaUnderCurve" = if r[#"areaUnderCurve"]? = null then null else List.Transform(r[#"areaUnderCurve"]?, Quantity.Reshape),
        #"lethalDose50" = if r[#"lethalDose50"]? = null then null else List.Transform(r[#"lethalDose50"]?, Quantity.Reshape),
        #"halfLifePeriod" = Duration.Reshape(r[#"halfLifePeriod"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_dispenseRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"initialFill" = MedicationRequest_dispenseRequest_initialFill.Reshape(r[#"initialFill"]?),
        #"dispenseInterval" = Duration.Reshape(r[#"dispenseInterval"]?),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"expectedSupplyDuration" = Duration.Reshape(r[#"expectedSupplyDuration"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_dispenseRequest_initialFill.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"duration" = Duration.Reshape(r[#"duration"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAllowed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "allowedBoolean", "allowedCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "allowedBoolean", "allowedCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "allowedBoolean", "boolean"}, { "allowedCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ allowed = null ] else choicesRemoved & [ allowed = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAllowed(
          childrenReshaped),

  MedicinalProduct_name.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"namePart" = if r[#"namePart"]? = null then null else List.Transform(r[#"namePart"]?, MedicinalProduct_name_namePart.Reshape),
        #"countryLanguage" = if r[#"countryLanguage"]? = null then null else List.Transform(r[#"countryLanguage"]?, MedicinalProduct_name_countryLanguage.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProduct_name_namePart.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProduct_name_countryLanguage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"country" = CodeableConcept.Reshape(r[#"country"]?),
        #"jurisdiction" = CodeableConcept.Reshape(r[#"jurisdiction"]?),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProduct_manufacturingBusinessOperation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operationType" = CodeableConcept.Reshape(r[#"operationType"]?),
        #"authorisationReferenceNumber" = Identifier.Reshape(r[#"authorisationReferenceNumber"]?),
        #"confidentialityIndicator" = CodeableConcept.Reshape(r[#"confidentialityIndicator"]?),
        #"manufacturer" = if r[#"manufacturer"]? = null then null else List.Transform(r[#"manufacturer"]?, Reference.Reshape),
        #"regulator" = Reference.Reshape(r[#"regulator"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProduct_specialDesignation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeIndication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "indicationCodeableConcept", "indicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "indicationCodeableConcept", "indicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "indicationCodeableConcept", "CodeableConcept"}, { "indicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ indication = null ] else choicesRemoved & [ indication = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"intendedUse" = CodeableConcept.Reshape(r[#"intendedUse"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"species" = CodeableConcept.Reshape(r[#"species"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeIndication(
          childrenReshaped),

  MedicinalProductAuthorization_jurisdictionalAuthorization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"country" = CodeableConcept.Reshape(r[#"country"]?),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"legalStatusOfSupply" = CodeableConcept.Reshape(r[#"legalStatusOfSupply"]?),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductAuthorization_procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "datePeriod", "dateDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "datePeriod", "dateDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "datePeriod", "Period"}, { "dateDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ date = null ] else choicesRemoved & [ date = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"application" = if r[#"application"]? = null then null else List.Transform(r[#"application"]?, @MedicinalProductAuthorization_procedure.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDate(
          childrenReshaped),

  MedicinalProductContraindication_otherTherapy.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"therapyRelationshipType" = CodeableConcept.Reshape(r[#"therapyRelationshipType"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          childrenReshaped),

  MedicinalProductIndication_otherTherapy.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"therapyRelationshipType" = CodeableConcept.Reshape(r[#"therapyRelationshipType"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          childrenReshaped),

  MedicinalProductIngredient_specifiedSubstance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"group" = CodeableConcept.Reshape(r[#"group"]?),
        #"confidentiality" = CodeableConcept.Reshape(r[#"confidentiality"]?),
        #"strength" = if r[#"strength"]? = null then null else List.Transform(r[#"strength"]?, MedicinalProductIngredient_specifiedSubstance_strength.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductIngredient_specifiedSubstance_strength.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"presentation" = Ratio.Reshape(r[#"presentation"]?),
        #"presentationLowLimit" = Ratio.Reshape(r[#"presentationLowLimit"]?),
        #"concentration" = Ratio.Reshape(r[#"concentration"]?),
        #"concentrationLowLimit" = Ratio.Reshape(r[#"concentrationLowLimit"]?),
        #"country" = if r[#"country"]? = null then null else List.Transform(r[#"country"]?, CodeableConcept.Reshape),
        #"referenceStrength" = if r[#"referenceStrength"]? = null then null else List.Transform(r[#"referenceStrength"]?, MedicinalProductIngredient_specifiedSubstance_strength_referenceStrength.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductIngredient_specifiedSubstance_strength_referenceStrength.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?),
        #"strength" = Ratio.Reshape(r[#"strength"]?),
        #"strengthLowLimit" = Ratio.Reshape(r[#"strengthLowLimit"]?),
        #"country" = if r[#"country"]? = null then null else List.Transform(r[#"country"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductIngredient_substance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"strength" = if r[#"strength"]? = null then null else List.Transform(r[#"strength"]?, MedicinalProductIngredient_specifiedSubstance_strength.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductInteraction_interactant.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemReference", "itemCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemReference", "itemCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemReference", "Reference"}, { "itemCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  MedicinalProductPackaged_batchIdentifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outerPackaging" = Identifier.Reshape(r[#"outerPackaging"]?),
        #"immediatePackaging" = Identifier.Reshape(r[#"immediatePackaging"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPackaged_packageItem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"material" = if r[#"material"]? = null then null else List.Transform(r[#"material"]?, CodeableConcept.Reshape),
        #"alternateMaterial" = if r[#"alternateMaterial"]? = null then null else List.Transform(r[#"alternateMaterial"]?, CodeableConcept.Reshape),
        #"device" = if r[#"device"]? = null then null else List.Transform(r[#"device"]?, Reference.Reshape),
        #"manufacturedItem" = if r[#"manufacturedItem"]? = null then null else List.Transform(r[#"manufacturedItem"]?, Reference.Reshape),
        #"physicalCharacteristics" = ProdCharacteristic.Reshape(r[#"physicalCharacteristics"]?),
        #"otherCharacteristics" = if r[#"otherCharacteristics"]? = null then null else List.Transform(r[#"otherCharacteristics"]?, CodeableConcept.Reshape),
        #"shelfLifeStorage" = if r[#"shelfLifeStorage"]? = null then null else List.Transform(r[#"shelfLifeStorage"]?, ProductShelfLife.Reshape),
        #"manufacturer" = if r[#"manufacturer"]? = null then null else List.Transform(r[#"manufacturer"]?, Reference.Reshape),
        #"packageItem" = if r[#"packageItem"]? = null then null else List.Transform(r[#"packageItem"]?, @MedicinalProductPackaged_packageItem.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPharmaceutical_characteristics.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPharmaceutical_routeOfAdministration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"firstDose" = Quantity.Reshape(r[#"firstDose"]?),
        #"maxSingleDose" = Quantity.Reshape(r[#"maxSingleDose"]?),
        #"maxDosePerDay" = Quantity.Reshape(r[#"maxDosePerDay"]?),
        #"maxDosePerTreatmentPeriod" = Ratio.Reshape(r[#"maxDosePerTreatmentPeriod"]?),
        #"maxTreatmentPeriod" = Duration.Reshape(r[#"maxTreatmentPeriod"]?),
        #"targetSpecies" = if r[#"targetSpecies"]? = null then null else List.Transform(r[#"targetSpecies"]?, MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"withdrawalPeriod" = if r[#"withdrawalPeriod"]? = null then null else List.Transform(r[#"withdrawalPeriod"]?, MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies_withdrawalPeriod.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies_withdrawalPeriod.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"tissue" = CodeableConcept.Reshape(r[#"tissue"]?),
        #"value" = Quantity.Reshape(r[#"value"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageDefinition_focus.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageDefinition_allowedResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_destination.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"receiver" = Reference.Reshape(r[#"receiver"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = ContactPoint.Reshape(r[#"contact"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = Reference.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_referenceSeq.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"chromosome" = CodeableConcept.Reshape(r[#"chromosome"]?),
        #"referenceSeqId" = CodeableConcept.Reshape(r[#"referenceSeqId"]?),
        #"referenceSeqPointer" = Reference.Reshape(r[#"referenceSeqPointer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_variant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"variantPointer" = Reference.Reshape(r[#"variantPointer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_quality.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"standardSequence" = CodeableConcept.Reshape(r[#"standardSequence"]?),
        #"score" = Quantity.Reshape(r[#"score"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"roc" = MolecularSequence_quality_roc.Reshape(r[#"roc"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_quality_roc.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_repository.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_structureVariant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"variantType" = CodeableConcept.Reshape(r[#"variantType"]?),
        #"outer" = MolecularSequence_structureVariant_outer.Reshape(r[#"outer"]?),
        #"inner" = MolecularSequence_structureVariant_inner.Reshape(r[#"inner"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_structureVariant_outer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence_structureVariant_inner.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem_uniqueId.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"nutrient" = if r[#"nutrient"]? = null then null else List.Transform(r[#"nutrient"]?, NutritionOrder_oralDiet_nutrient.Reshape),
        #"texture" = if r[#"texture"]? = null then null else List.Transform(r[#"texture"]?, NutritionOrder_oralDiet_texture.Reshape),
        #"fluidConsistencyType" = if r[#"fluidConsistencyType"]? = null then null else List.Transform(r[#"fluidConsistencyType"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_nutrient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_texture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"foodType" = CodeableConcept.Reshape(r[#"foodType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_supplement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"baseFormulaType" = CodeableConcept.Reshape(r[#"baseFormulaType"]?),
        #"additiveType" = CodeableConcept.Reshape(r[#"additiveType"]?),
        #"caloricDensity" = Quantity.Reshape(r[#"caloricDensity"]?),
        #"routeofAdministration" = CodeableConcept.Reshape(r[#"routeofAdministration"]?),
        #"administration" = if r[#"administration"]? = null then null else List.Transform(r[#"administration"]?, NutritionOrder_enteralFormula_administration.Reshape),
        #"maxVolumeToDeliver" = Quantity.Reshape(r[#"maxVolumeToDeliver"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula_administration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateQuantity", "rateRatio"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateQuantity", "rateRatio" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateQuantity", "Quantity"}, { "rateRatio", "Ratio"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"schedule" = Timing.Reshape(r[#"schedule"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          childrenReshaped),

  Observation_referenceRange.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"appliesTo" = if r[#"appliesTo"]? = null then null else List.Transform(r[#"appliesTo"]?, CodeableConcept.Reshape),
        #"age" = Range.Reshape(r[#"age"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation_component.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueInteger", "valueRange", "valueRatio", "valueSampledData", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueInteger", "valueRange", "valueRatio", "valueSampledData", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"interpretation" = if r[#"interpretation"]? = null then null else List.Transform(r[#"interpretation"]?, CodeableConcept.Reshape),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ObservationDefinition_quantitativeDetails.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"customaryUnit" = CodeableConcept.Reshape(r[#"customaryUnit"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ObservationDefinition_qualifiedInterval.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"range" = Range.Reshape(r[#"range"]?),
        #"context" = CodeableConcept.Reshape(r[#"context"]?),
        #"appliesTo" = if r[#"appliesTo"]? = null then null else List.Transform(r[#"appliesTo"]?, CodeableConcept.Reshape),
        #"age" = Range.Reshape(r[#"age"]?),
        #"gestationalAge" = Range.Reshape(r[#"gestationalAge"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"binding" = OperationDefinition_parameter_binding.Reshape(r[#"binding"]?),
        #"referencedFrom" = if r[#"referencedFrom"]? = null then null else List.Transform(r[#"referencedFrom"]?, OperationDefinition_parameter_referencedFrom.Reshape),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @OperationDefinition_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter_binding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter_referencedFrom.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_overload.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationOutcome_issue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = CodeableConcept.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"purpose" = CodeableConcept.Reshape(r[#"purpose"]?),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCanonical", "canonical"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueUrl", "url"}, { "valueUuid", "uuid"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueContactDetail", "ContactDetail"}, { "valueContributor", "Contributor"}, { "valueDataRequirement", "DataRequirement"}, { "valueExpression", "Expression"}, { "valueParameterDefinition", "ParameterDefinition"}, { "valueRelatedArtifact", "RelatedArtifact"}, { "valueTriggerDefinition", "TriggerDefinition"}, { "valueUsageContext", "UsageContext"}, { "valueDosage", "Dosage"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Patient_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"relationship" = if r[#"relationship"]? = null then null else List.Transform(r[#"relationship"]?, CodeableConcept.Reshape),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"other" = Reference.Reshape(r[#"other"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"predecessor" = Identifier.Reshape(r[#"predecessor"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"submitter" = Reference.Reshape(r[#"submitter"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"responsible" = Reference.Reshape(r[#"responsible"]?),
        #"payee" = Reference.Reshape(r[#"payee"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_goal.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"description" = CodeableConcept.Reshape(r[#"description"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"start" = CodeableConcept.Reshape(r[#"start"]?),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, PlanDefinition_goal_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_goal_target.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDetail = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "detailQuantity", "Quantity"}, { "detailRange", "Range"}, { "detailCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ detail = null ] else choicesRemoved & [ detail = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"measure" = CodeableConcept.Reshape(r[#"measure"]?),
        #"due" = Duration.Reshape(r[#"due"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDetail(
          childrenReshaped),

  PlanDefinition_action.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDateTime", "timingAge", "timingPeriod", "timingDuration", "timingRange", "timingTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDateTime", "timingAge", "timingPeriod", "timingDuration", "timingRange", "timingTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDateTime", "dateTime"}, { "timingAge", "Age"}, { "timingPeriod", "Period"}, { "timingDuration", "Duration"}, { "timingRange", "Range"}, { "timingTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeDefinition = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "definitionCanonical", "definitionUri"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "definitionCanonical", "definitionUri" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "definitionCanonical", "canonical"}, { "definitionUri", "uri"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ definition = null ] else choicesRemoved & [ definition = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"trigger" = if r[#"trigger"]? = null then null else List.Transform(r[#"trigger"]?, TriggerDefinition.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, PlanDefinition_action_condition.Reshape),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, DataRequirement.Reshape),
        #"output" = if r[#"output"]? = null then null else List.Transform(r[#"output"]?, DataRequirement.Reshape),
        #"relatedAction" = if r[#"relatedAction"]? = null then null else List.Transform(r[#"relatedAction"]?, PlanDefinition_action_relatedAction.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, PlanDefinition_action_participant.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"dynamicValue" = if r[#"dynamicValue"]? = null then null else List.Transform(r[#"dynamicValue"]?, PlanDefinition_action_dynamicValue.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, @PlanDefinition_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDefinition(
          ReshapeTiming(
            ReshapeSubject(
              childrenReshaped))),

  PlanDefinition_action_condition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"expression" = Expression.Reshape(r[#"expression"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_action_relatedAction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOffset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "offsetDuration", "offsetRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "offsetDuration", "offsetRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "offsetDuration", "Duration"}, { "offsetRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ offset = null ] else choicesRemoved & [ offset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOffset(
          childrenReshaped),

  PlanDefinition_action_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_action_dynamicValue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"expression" = Expression.Reshape(r[#"expression"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner_qualification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"issuer" = Reference.Reshape(r[#"issuer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole_availableTime.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole_notAvailable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"during" = Period.Reshape(r[#"during"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"function" = CodeableConcept.Reshape(r[#"function"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_focalDevice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"manipulated" = Reference.Reshape(r[#"manipulated"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_entity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"what" = Reference.Reshape(r[#"what"]?),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Provenance_agent.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"enableWhen" = if r[#"enableWhen"]? = null then null else List.Transform(r[#"enableWhen"]?, Questionnaire_item_enableWhen.Reshape),
        #"answerOption" = if r[#"answerOption"]? = null then null else List.Transform(r[#"answerOption"]?, Questionnaire_item_answerOption.Reshape),
        #"initial" = if r[#"initial"]? = null then null else List.Transform(r[#"initial"]?, Questionnaire_item_initial.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, @Questionnaire_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire_item_enableWhen.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAnswer = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "answerBoolean", "answerDecimal", "answerInteger", "answerDate", "answerDateTime", "answerTime", "answerString", "answerCoding", "answerQuantity", "answerReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "answerBoolean", "answerDecimal", "answerInteger", "answerDate", "answerDateTime", "answerTime", "answerString", "answerCoding", "answerQuantity", "answerReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "answerBoolean", "boolean"}, { "answerDecimal", "decimal"}, { "answerInteger", "integer"}, { "answerDate", "date"}, { "answerDateTime", "dateTime"}, { "answerTime", "time"}, { "answerString", "string"}, { "answerCoding", "Coding"}, { "answerQuantity", "Quantity"}, { "answerReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ answer = null ] else choicesRemoved & [ answer = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAnswer(
          childrenReshaped),

  Questionnaire_item_answerOption.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueInteger", "valueDate", "valueTime", "valueString", "valueCoding", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueInteger", "valueDate", "valueTime", "valueString", "valueCoding", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueCoding", "Coding"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Questionnaire_item_initial.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueDecimal", "decimal"}, { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueAttachment", "Attachment"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  QuestionnaireResponse_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"answer" = if r[#"answer"]? = null then null else List.Transform(r[#"answer"]?, QuestionnaireResponse_item_answer.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, @QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse_item_answer.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueDecimal", "decimal"}, { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueAttachment", "Attachment"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  RelatedPerson_communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup_action.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDateTime", "timingAge", "timingPeriod", "timingDuration", "timingRange", "timingTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDateTime", "timingAge", "timingPeriod", "timingDuration", "timingRange", "timingTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDateTime", "dateTime"}, { "timingAge", "Age"}, { "timingPeriod", "Period"}, { "timingDuration", "Duration"}, { "timingRange", "Range"}, { "timingTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, RequestGroup_action_condition.Reshape),
        #"relatedAction" = if r[#"relatedAction"]? = null then null else List.Transform(r[#"relatedAction"]?, RequestGroup_action_relatedAction.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"resource" = Reference.Reshape(r[#"resource"]?),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, @RequestGroup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  RequestGroup_action_condition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"expression" = Expression.Reshape(r[#"expression"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup_action_relatedAction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOffset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "offsetDuration", "offsetRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "offsetDuration", "offsetRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "offsetDuration", "Duration"}, { "offsetRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ offset = null ] else choicesRemoved & [ offset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOffset(
          childrenReshaped),

  ResearchElementDefinition_characteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefinition = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "definitionCodeableConcept", "definitionCanonical", "definitionExpression", "definitionDataRequirement"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "definitionCodeableConcept", "definitionCanonical", "definitionExpression", "definitionDataRequirement" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "definitionCodeableConcept", "CodeableConcept"}, { "definitionCanonical", "canonical"}, { "definitionExpression", "Expression"}, { "definitionDataRequirement", "DataRequirement"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ definition = null ] else choicesRemoved & [ definition = choiceRecord ],
      ReshapeStudyEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "studyEffectiveDateTime", "studyEffectivePeriod", "studyEffectiveDuration", "studyEffectiveTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "studyEffectiveDateTime", "studyEffectivePeriod", "studyEffectiveDuration", "studyEffectiveTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "studyEffectiveDateTime", "dateTime"}, { "studyEffectivePeriod", "Period"}, { "studyEffectiveDuration", "Duration"}, { "studyEffectiveTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ studyEffective = null ] else choicesRemoved & [ studyEffective = choiceRecord ],
      ReshapeParticipantEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "participantEffectiveDateTime", "participantEffectivePeriod", "participantEffectiveDuration", "participantEffectiveTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "participantEffectiveDateTime", "participantEffectivePeriod", "participantEffectiveDuration", "participantEffectiveTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "participantEffectiveDateTime", "dateTime"}, { "participantEffectivePeriod", "Period"}, { "participantEffectiveDuration", "Duration"}, { "participantEffectiveTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ participantEffective = null ] else choicesRemoved & [ participantEffective = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"usageContext" = if r[#"usageContext"]? = null then null else List.Transform(r[#"usageContext"]?, UsageContext.Reshape),
        #"unitOfMeasure" = CodeableConcept.Reshape(r[#"unitOfMeasure"]?),
        #"studyEffectiveTimeFromStart" = Duration.Reshape(r[#"studyEffectiveTimeFromStart"]?),
        #"participantEffectiveTimeFromStart" = Duration.Reshape(r[#"participantEffectiveTimeFromStart"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeParticipantEffective(
          ReshapeStudyEffective(
            ReshapeDefinition(
              childrenReshaped))),

  ResearchStudy_arm.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ResearchStudy_objective.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskAssessment_prediction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProbability = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "probabilityDecimal", "probabilityRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "probabilityDecimal", "probabilityRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "probabilityDecimal", "decimal"}, { "probabilityRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ probability = null ] else choicesRemoved & [ probability = choiceRecord ],
      ReshapeWhen = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whenPeriod", "whenRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whenPeriod", "whenRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whenPeriod", "Period"}, { "whenRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ when = null ] else choicesRemoved & [ when = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"qualitativeRisk" = CodeableConcept.Reshape(r[#"qualitativeRisk"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeWhen(
          ReshapeProbability(
            childrenReshaped)),

  RiskEvidenceSynthesis_sampleSize.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskEvidenceSynthesis_riskEstimate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"unitOfMeasure" = CodeableConcept.Reshape(r[#"unitOfMeasure"]?),
        #"precisionEstimate" = if r[#"precisionEstimate"]? = null then null else List.Transform(r[#"precisionEstimate"]?, RiskEvidenceSynthesis_riskEstimate_precisionEstimate.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskEvidenceSynthesis_riskEstimate_precisionEstimate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskEvidenceSynthesis_certainty.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"rating" = if r[#"rating"]? = null then null else List.Transform(r[#"rating"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"certaintySubcomponent" = if r[#"certaintySubcomponent"]? = null then null else List.Transform(r[#"certaintySubcomponent"]?, RiskEvidenceSynthesis_certainty_certaintySubcomponent.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskEvidenceSynthesis_certainty_certaintySubcomponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"rating" = if r[#"rating"]? = null then null else List.Transform(r[#"rating"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SearchParameter_component.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen_collection.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCollected = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "collectedDateTime", "collectedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "collectedDateTime", "collectedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "collectedDateTime", "dateTime"}, { "collectedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ collected = null ] else choicesRemoved & [ collected = choiceRecord ],
      ReshapeFastingStatus = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "fastingStatusCodeableConcept", "fastingStatusDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "fastingStatusCodeableConcept", "fastingStatusDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "fastingStatusCodeableConcept", "CodeableConcept"}, { "fastingStatusDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ fastingStatus = null ] else choicesRemoved & [ fastingStatus = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"collector" = Reference.Reshape(r[#"collector"]?),
        #"duration" = Duration.Reshape(r[#"duration"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeFastingStatus(
          ReshapeCollected(
            childrenReshaped)),

  Specimen_processing.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTime = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timeDateTime", "timePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timeDateTime", "timePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timeDateTime", "dateTime"}, { "timePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ time = null ] else choicesRemoved & [ time = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"procedure" = CodeableConcept.Reshape(r[#"procedure"]?),
        #"additive" = if r[#"additive"]? = null then null else List.Transform(r[#"additive"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTime(
          childrenReshaped),

  Specimen_container.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAdditive = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "additiveCodeableConcept", "additiveReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "additiveCodeableConcept", "additiveReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "additiveCodeableConcept", "CodeableConcept"}, { "additiveReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ additive = null ] else choicesRemoved & [ additive = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"capacity" = Quantity.Reshape(r[#"capacity"]?),
        #"specimenQuantity" = Quantity.Reshape(r[#"specimenQuantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAdditive(
          childrenReshaped),

  SpecimenDefinition_typeTested.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"container" = SpecimenDefinition_typeTested_container.Reshape(r[#"container"]?),
        #"retentionTime" = Duration.Reshape(r[#"retentionTime"]?),
        #"rejectionCriterion" = if r[#"rejectionCriterion"]? = null then null else List.Transform(r[#"rejectionCriterion"]?, CodeableConcept.Reshape),
        #"handling" = if r[#"handling"]? = null then null else List.Transform(r[#"handling"]?, SpecimenDefinition_typeTested_handling.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SpecimenDefinition_typeTested_container.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMinimumVolume = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "minimumVolumeQuantity", "minimumVolumeString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "minimumVolumeQuantity", "minimumVolumeString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "minimumVolumeQuantity", "Quantity"}, { "minimumVolumeString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ minimumVolume = null ] else choicesRemoved & [ minimumVolume = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"material" = CodeableConcept.Reshape(r[#"material"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"cap" = CodeableConcept.Reshape(r[#"cap"]?),
        #"capacity" = Quantity.Reshape(r[#"capacity"]?),
        #"additive" = if r[#"additive"]? = null then null else List.Transform(r[#"additive"]?, SpecimenDefinition_typeTested_container_additive.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMinimumVolume(
          childrenReshaped),

  SpecimenDefinition_typeTested_container_additive.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAdditive = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "additiveCodeableConcept", "additiveReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "additiveCodeableConcept", "additiveReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "additiveCodeableConcept", "CodeableConcept"}, { "additiveReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ additive = null ] else choicesRemoved & [ additive = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAdditive(
          childrenReshaped),

  SpecimenDefinition_typeTested_handling.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"temperatureQualifier" = CodeableConcept.Reshape(r[#"temperatureQualifier"]?),
        #"temperatureRange" = Range.Reshape(r[#"temperatureRange"]?),
        #"maxDuration" = Duration.Reshape(r[#"maxDuration"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_context.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_snapshot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_differential.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_structure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, StructureMap_group_input.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, StructureMap_group_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_input.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, StructureMap_group_rule_source.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, StructureMap_group_rule_target.Reshape),
        #"dependent" = if r[#"dependent"]? = null then null else List.Transform(r[#"dependent"]?, StructureMap_group_rule_dependent.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, @StructureMap_group_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule_source.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefaultValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCanonical", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueUrl", "defaultValueUuid", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueContactDetail", "defaultValueContributor", "defaultValueDataRequirement", "defaultValueExpression", "defaultValueParameterDefinition", "defaultValueRelatedArtifact", "defaultValueTriggerDefinition", "defaultValueUsageContext", "defaultValueDosage", "defaultValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCanonical", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueUrl", "defaultValueUuid", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueContactDetail", "defaultValueContributor", "defaultValueDataRequirement", "defaultValueExpression", "defaultValueParameterDefinition", "defaultValueRelatedArtifact", "defaultValueTriggerDefinition", "defaultValueUsageContext", "defaultValueDosage", "defaultValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "defaultValueBase64Binary", "base64Binary"}, { "defaultValueBoolean", "boolean"}, { "defaultValueCanonical", "canonical"}, { "defaultValueCode", "code"}, { "defaultValueDate", "date"}, { "defaultValueDateTime", "dateTime"}, { "defaultValueDecimal", "decimal"}, { "defaultValueId", "id"}, { "defaultValueInstant", "instant"}, { "defaultValueInteger", "integer"}, { "defaultValueMarkdown", "markdown"}, { "defaultValueOid", "oid"}, { "defaultValuePositiveInt", "positiveInt"}, { "defaultValueString", "string"}, { "defaultValueTime", "time"}, { "defaultValueUnsignedInt", "unsignedInt"}, { "defaultValueUri", "uri"}, { "defaultValueUrl", "url"}, { "defaultValueUuid", "uuid"}, { "defaultValueAddress", "Address"}, { "defaultValueAge", "Age"}, { "defaultValueAnnotation", "Annotation"}, { "defaultValueAttachment", "Attachment"}, { "defaultValueCodeableConcept", "CodeableConcept"}, { "defaultValueCoding", "Coding"}, { "defaultValueContactPoint", "ContactPoint"}, { "defaultValueCount", "Count"}, { "defaultValueDistance", "Distance"}, { "defaultValueDuration", "Duration"}, { "defaultValueHumanName", "HumanName"}, { "defaultValueIdentifier", "Identifier"}, { "defaultValueMoney", "Money"}, { "defaultValuePeriod", "Period"}, { "defaultValueQuantity", "Quantity"}, { "defaultValueRange", "Range"}, { "defaultValueRatio", "Ratio"}, { "defaultValueReference", "Reference"}, { "defaultValueSampledData", "SampledData"}, { "defaultValueSignature", "Signature"}, { "defaultValueTiming", "Timing"}, { "defaultValueContactDetail", "ContactDetail"}, { "defaultValueContributor", "Contributor"}, { "defaultValueDataRequirement", "DataRequirement"}, { "defaultValueExpression", "Expression"}, { "defaultValueParameterDefinition", "ParameterDefinition"}, { "defaultValueRelatedArtifact", "RelatedArtifact"}, { "defaultValueTriggerDefinition", "TriggerDefinition"}, { "defaultValueUsageContext", "UsageContext"}, { "defaultValueDosage", "Dosage"}, { "defaultValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ defaultValue = null ] else choicesRemoved & [ defaultValue = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDefaultValue(
          childrenReshaped),

  StructureMap_group_rule_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, StructureMap_group_rule_target_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule_target_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueId", "valueString", "valueBoolean", "valueInteger", "valueDecimal"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueId", "valueString", "valueBoolean", "valueInteger", "valueDecimal" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueId", "id"}, { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  StructureMap_group_rule_dependent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription_channel.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubstance = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "substanceCodeableConcept", "substanceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "substanceCodeableConcept", "substanceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "substanceCodeableConcept", "CodeableConcept"}, { "substanceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ substance = null ] else choicesRemoved & [ substance = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Ratio.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubstance(
          childrenReshaped),

  SubstanceNucleicAcid_subunit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sequenceAttachment" = Attachment.Reshape(r[#"sequenceAttachment"]?),
        #"fivePrime" = CodeableConcept.Reshape(r[#"fivePrime"]?),
        #"threePrime" = CodeableConcept.Reshape(r[#"threePrime"]?),
        #"linkage" = if r[#"linkage"]? = null then null else List.Transform(r[#"linkage"]?, SubstanceNucleicAcid_subunit_linkage.Reshape),
        #"sugar" = if r[#"sugar"]? = null then null else List.Transform(r[#"sugar"]?, SubstanceNucleicAcid_subunit_sugar.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceNucleicAcid_subunit_linkage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceNucleicAcid_subunit_sugar.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_monomerSet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"ratioType" = CodeableConcept.Reshape(r[#"ratioType"]?),
        #"startingMaterial" = if r[#"startingMaterial"]? = null then null else List.Transform(r[#"startingMaterial"]?, SubstancePolymer_monomerSet_startingMaterial.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_monomerSet_startingMaterial.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"material" = CodeableConcept.Reshape(r[#"material"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"amount" = SubstanceAmount.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_repeat.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"repeatUnitAmountType" = CodeableConcept.Reshape(r[#"repeatUnitAmountType"]?),
        #"repeatUnit" = if r[#"repeatUnit"]? = null then null else List.Transform(r[#"repeatUnit"]?, SubstancePolymer_repeat_repeatUnit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_repeat_repeatUnit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"orientationOfPolymerisation" = CodeableConcept.Reshape(r[#"orientationOfPolymerisation"]?),
        #"amount" = SubstanceAmount.Reshape(r[#"amount"]?),
        #"degreeOfPolymerisation" = if r[#"degreeOfPolymerisation"]? = null then null else List.Transform(r[#"degreeOfPolymerisation"]?, SubstancePolymer_repeat_repeatUnit_degreeOfPolymerisation.Reshape),
        #"structuralRepresentation" = if r[#"structuralRepresentation"]? = null then null else List.Transform(r[#"structuralRepresentation"]?, SubstancePolymer_repeat_repeatUnit_structuralRepresentation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_repeat_repeatUnit_degreeOfPolymerisation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"degree" = CodeableConcept.Reshape(r[#"degree"]?),
        #"amount" = SubstanceAmount.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer_repeat_repeatUnit_structuralRepresentation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"attachment" = Attachment.Reshape(r[#"attachment"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceProtein_subunit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sequenceAttachment" = Attachment.Reshape(r[#"sequenceAttachment"]?),
        #"nTerminalModificationId" = Identifier.Reshape(r[#"nTerminalModificationId"]?),
        #"cTerminalModificationId" = Identifier.Reshape(r[#"cTerminalModificationId"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceReferenceInformation_gene.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"geneSequenceOrigin" = CodeableConcept.Reshape(r[#"geneSequenceOrigin"]?),
        #"gene" = CodeableConcept.Reshape(r[#"gene"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceReferenceInformation_geneElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"element" = Identifier.Reshape(r[#"element"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceReferenceInformation_classification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"domain" = CodeableConcept.Reshape(r[#"domain"]?),
        #"classification" = CodeableConcept.Reshape(r[#"classification"]?),
        #"subtype" = if r[#"subtype"]? = null then null else List.Transform(r[#"subtype"]?, CodeableConcept.Reshape),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceReferenceInformation_target.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAmount = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "amountQuantity", "amountRange", "amountString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "amountQuantity", "amountRange", "amountString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "amountQuantity", "Quantity"}, { "amountRange", "Range"}, { "amountString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ amount = null ] else choicesRemoved & [ amount = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Identifier.Reshape(r[#"target"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"interaction" = CodeableConcept.Reshape(r[#"interaction"]?),
        #"organism" = CodeableConcept.Reshape(r[#"organism"]?),
        #"organismType" = CodeableConcept.Reshape(r[#"organismType"]?),
        #"amountType" = CodeableConcept.Reshape(r[#"amountType"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAmount(
          childrenReshaped),

  SubstanceSourceMaterial_fractionDescription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"materialType" = CodeableConcept.Reshape(r[#"materialType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial_organism.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"family" = CodeableConcept.Reshape(r[#"family"]?),
        #"genus" = CodeableConcept.Reshape(r[#"genus"]?),
        #"species" = CodeableConcept.Reshape(r[#"species"]?),
        #"intraspecificType" = CodeableConcept.Reshape(r[#"intraspecificType"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, SubstanceSourceMaterial_organism_author.Reshape),
        #"hybrid" = SubstanceSourceMaterial_organism_hybrid.Reshape(r[#"hybrid"]?),
        #"organismGeneral" = SubstanceSourceMaterial_organism_organismGeneral.Reshape(r[#"organismGeneral"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial_organism_author.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authorType" = CodeableConcept.Reshape(r[#"authorType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial_organism_hybrid.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"hybridType" = CodeableConcept.Reshape(r[#"hybridType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial_organism_organismGeneral.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"kingdom" = CodeableConcept.Reshape(r[#"kingdom"]?),
        #"phylum" = CodeableConcept.Reshape(r[#"phylum"]?),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"order" = CodeableConcept.Reshape(r[#"order"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial_partDescription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"part" = CodeableConcept.Reshape(r[#"part"]?),
        #"partLocation" = CodeableConcept.Reshape(r[#"partLocation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_moiety.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAmount = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "amountQuantity", "amountString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "amountQuantity", "amountString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "amountQuantity", "Quantity"}, { "amountString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ amount = null ] else choicesRemoved & [ amount = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"stereochemistry" = CodeableConcept.Reshape(r[#"stereochemistry"]?),
        #"opticalActivity" = CodeableConcept.Reshape(r[#"opticalActivity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAmount(
          childrenReshaped),

  SubstanceSpecification_property.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefiningSubstance = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "definingSubstanceReference", "definingSubstanceCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "definingSubstanceReference", "definingSubstanceCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "definingSubstanceReference", "Reference"}, { "definingSubstanceCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ definingSubstance = null ] else choicesRemoved & [ definingSubstance = choiceRecord ],
      ReshapeAmount = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "amountQuantity", "amountString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "amountQuantity", "amountString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "amountQuantity", "Quantity"}, { "amountString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ amount = null ] else choicesRemoved & [ amount = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAmount(
          ReshapeDefiningSubstance(
            childrenReshaped)),

  SubstanceSpecification_structure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"stereochemistry" = CodeableConcept.Reshape(r[#"stereochemistry"]?),
        #"opticalActivity" = CodeableConcept.Reshape(r[#"opticalActivity"]?),
        #"isotope" = if r[#"isotope"]? = null then null else List.Transform(r[#"isotope"]?, SubstanceSpecification_structure_isotope.Reshape),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape),
        #"representation" = if r[#"representation"]? = null then null else List.Transform(r[#"representation"]?, SubstanceSpecification_structure_representation.Reshape),
        #"molecularWeight" = SubstanceSpecification_molecularWeight.Reshape(r[#"molecularWeight"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_structure_isotope.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"name" = CodeableConcept.Reshape(r[#"name"]?),
        #"substitution" = CodeableConcept.Reshape(r[#"substitution"]?),
        #"halfLife" = Quantity.Reshape(r[#"halfLife"]?),
        #"molecularWeight" = SubstanceSpecification_molecularWeight.Reshape(r[#"molecularWeight"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_molecularWeight.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_structure_representation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"attachment" = Attachment.Reshape(r[#"attachment"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_code.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_name.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"language" = if r[#"language"]? = null then null else List.Transform(r[#"language"]?, CodeableConcept.Reshape),
        #"domain" = if r[#"domain"]? = null then null else List.Transform(r[#"domain"]?, CodeableConcept.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"official" = if r[#"official"]? = null then null else List.Transform(r[#"official"]?, SubstanceSpecification_name_official.Reshape),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape),
        #"synonym" = if r[#"synonym"]? = null then null else List.Transform(r[#"synonym"]?, @SubstanceSpecification_name.Reshape),
        #"translation" = if r[#"translation"]? = null then null else List.Transform(r[#"translation"]?, @SubstanceSpecification_name.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_name_official.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = CodeableConcept.Reshape(r[#"authority"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification_relationship.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubstance = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "substanceReference", "substanceCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "substanceReference", "substanceCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "substanceReference", "Reference"}, { "substanceCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ substance = null ] else choicesRemoved & [ substance = choiceRecord ],
      ReshapeAmount = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "amountQuantity", "amountRange", "amountRatio", "amountString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "amountQuantity", "amountRange", "amountRatio", "amountString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "amountQuantity", "Quantity"}, { "amountRange", "Range"}, { "amountRatio", "Ratio"}, { "amountString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ amount = null ] else choicesRemoved & [ amount = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"amountRatioLowLimit" = Ratio.Reshape(r[#"amountRatioLowLimit"]?),
        #"amountType" = CodeableConcept.Reshape(r[#"amountType"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAmount(
          ReshapeSubstance(
            childrenReshaped)),

  SupplyDelivery_suppliedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  SupplyRequest_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueBoolean"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueBoolean" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueBoolean", "boolean"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Task_restriction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Task_input.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCanonical", "canonical"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueUrl", "url"}, { "valueUuid", "uuid"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueContactDetail", "ContactDetail"}, { "valueContributor", "Contributor"}, { "valueDataRequirement", "DataRequirement"}, { "valueExpression", "Expression"}, { "valueParameterDefinition", "ParameterDefinition"}, { "valueRelatedArtifact", "RelatedArtifact"}, { "valueTriggerDefinition", "TriggerDefinition"}, { "valueUsageContext", "UsageContext"}, { "valueDosage", "Dosage"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Task_output.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCanonical", "canonical"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueUrl", "url"}, { "valueUuid", "uuid"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueContactDetail", "ContactDetail"}, { "valueContributor", "Contributor"}, { "valueDataRequirement", "DataRequirement"}, { "valueExpression", "Expression"}, { "valueParameterDefinition", "ParameterDefinition"}, { "valueRelatedArtifact", "RelatedArtifact"}, { "valueTriggerDefinition", "TriggerDefinition"}, { "valueUsageContext", "UsageContext"}, { "valueDosage", "Dosage"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  TerminologyCapabilities_software.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_implementation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_codeSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"version" = if r[#"version"]? = null then null else List.Transform(r[#"version"]?, TerminologyCapabilities_codeSystem_version.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_codeSystem_version.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, TerminologyCapabilities_codeSystem_version_filter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_codeSystem_version_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_expansion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, TerminologyCapabilities_expansion_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_expansion_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_validateCode.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_translation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities_closure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_setup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestReport_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action_assert.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_test.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_test_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_test_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestReport_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_teardown.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_teardown_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_teardown_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_origin.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Coding.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_destination.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Coding.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, TestScript_metadata_link.Reshape),
        #"capability" = if r[#"capability"]? = null then null else List.Transform(r[#"capability"]?, TestScript_metadata_capability.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_capability.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_fixture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_variable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_setup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"requestHeader" = if r[#"requestHeader"]? = null then null else List.Transform(r[#"requestHeader"]?, TestScript_setup_action_operation_requestHeader.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation_requestHeader.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_test_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_teardown_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"include" = if r[#"include"]? = null then null else List.Transform(r[#"include"]?, ValueSet_compose_include.Reshape),
        #"exclude" = if r[#"exclude"]? = null then null else List.Transform(r[#"exclude"]?, ValueSet_compose_include.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, ValueSet_compose_include_concept.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, ValueSet_compose_include_filter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_expansion_contains_designation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion_contains_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ValueSet_expansion_parameter.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode", "valueDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode", "valueDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"}, { "valueUri", "uri"}, { "valueCode", "code"}, { "valueDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ValueSet_expansion_contains.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_expansion_contains_designation.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, @ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VerificationResult_primarySource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"communicationMethod" = if r[#"communicationMethod"]? = null then null else List.Transform(r[#"communicationMethod"]?, CodeableConcept.Reshape),
        #"validationStatus" = CodeableConcept.Reshape(r[#"validationStatus"]?),
        #"canPushUpdates" = CodeableConcept.Reshape(r[#"canPushUpdates"]?),
        #"pushTypeAvailable" = if r[#"pushTypeAvailable"]? = null then null else List.Transform(r[#"pushTypeAvailable"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VerificationResult_attestation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?),
        #"communicationMethod" = CodeableConcept.Reshape(r[#"communicationMethod"]?),
        #"proxySignature" = Signature.Reshape(r[#"proxySignature"]?),
        #"sourceSignature" = Signature.Reshape(r[#"sourceSignature"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VerificationResult_validator.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"attestationSignature" = Signature.Reshape(r[#"attestationSignature"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription_lensSpecification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"product" = CodeableConcept.Reshape(r[#"product"]?),
        #"prism" = if r[#"prism"]? = null then null else List.Transform(r[#"prism"]?, VisionPrescription_lensSpecification_prism.Reshape),
        #"duration" = Quantity.Reshape(r[#"duration"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription_lensSpecification_prism.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"servicePeriod" = Period.Reshape(r[#"servicePeriod"]?),
        #"coverage" = if r[#"coverage"]? = null then null else List.Transform(r[#"coverage"]?, Account_coverage.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"guarantor" = if r[#"guarantor"]? = null then null else List.Transform(r[#"guarantor"]?, Account_guarantor.Reshape),
        #"partOf" = Reference.Reshape(r[#"partOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingDateTime", "timingAge", "timingPeriod", "timingRange", "timingDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingDateTime", "timingAge", "timingPeriod", "timingRange", "timingDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingDateTime", "dateTime"}, { "timingAge", "Age"}, { "timingPeriod", "Period"}, { "timingRange", "Range"}, { "timingDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productReference", "productCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productReference", "productCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productReference", "Reference"}, { "productCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, ActivityDefinition_participant.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, Dosage.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"specimenRequirement" = if r[#"specimenRequirement"]? = null then null else List.Transform(r[#"specimenRequirement"]?, Reference.Reshape),
        #"observationRequirement" = if r[#"observationRequirement"]? = null then null else List.Transform(r[#"observationRequirement"]?, Reference.Reshape),
        #"observationResultRequirement" = if r[#"observationResultRequirement"]? = null then null else List.Transform(r[#"observationResultRequirement"]?, Reference.Reshape),
        #"dynamicValue" = if r[#"dynamicValue"]? = null then null else List.Transform(r[#"dynamicValue"]?, ActivityDefinition_dynamicValue.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeTiming(
            ReshapeSubject(
              childrenReshaped))),

  Address.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AdverseEvent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"event" = CodeableConcept.Reshape(r[#"event"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"resultingCondition" = if r[#"resultingCondition"]? = null then null else List.Transform(r[#"resultingCondition"]?, Reference.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"seriousness" = CodeableConcept.Reshape(r[#"seriousness"]?),
        #"severity" = CodeableConcept.Reshape(r[#"severity"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Reference.Reshape),
        #"suspectEntity" = if r[#"suspectEntity"]? = null then null else List.Transform(r[#"suspectEntity"]?, AdverseEvent_suspectEntity.Reshape),
        #"subjectMedicalHistory" = if r[#"subjectMedicalHistory"]? = null then null else List.Transform(r[#"subjectMedicalHistory"]?, Reference.Reshape),
        #"referenceDocument" = if r[#"referenceDocument"]? = null then null else List.Transform(r[#"referenceDocument"]?, Reference.Reshape),
        #"study" = if r[#"study"]? = null then null else List.Transform(r[#"study"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Age.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AllergyIntolerance.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetDateTime", "dateTime"}, { "onsetAge", "Age"}, { "onsetPeriod", "Period"}, { "onsetRange", "Range"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"clinicalStatus" = CodeableConcept.Reshape(r[#"clinicalStatus"]?),
        #"verificationStatus" = CodeableConcept.Reshape(r[#"verificationStatus"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, AllergyIntolerance_reaction.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnset(
          childrenReshaped),

  Annotation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAuthor = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "authorReference", "authorString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "authorReference", "authorString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "authorReference", "Reference"}, { "authorString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ author = null ] else choicesRemoved & [ author = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAuthor(
          childrenReshaped),

  Appointment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"cancelationReason" = CodeableConcept.Reshape(r[#"cancelationReason"]?),
        #"serviceCategory" = if r[#"serviceCategory"]? = null then null else List.Transform(r[#"serviceCategory"]?, CodeableConcept.Reshape),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"appointmentType" = CodeableConcept.Reshape(r[#"appointmentType"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"slot" = if r[#"slot"]? = null then null else List.Transform(r[#"slot"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Appointment_participant.Reshape),
        #"requestedPeriod" = if r[#"requestedPeriod"]? = null then null else List.Transform(r[#"requestedPeriod"]?, Period.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AppointmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"appointment" = Reference.Reshape(r[#"appointment"]?),
        #"participantType" = if r[#"participantType"]? = null then null else List.Transform(r[#"participantType"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Attachment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"subtype" = if r[#"subtype"]? = null then null else List.Transform(r[#"subtype"]?, Coding.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"purposeOfEvent" = if r[#"purposeOfEvent"]? = null then null else List.Transform(r[#"purposeOfEvent"]?, CodeableConcept.Reshape),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, AuditEvent_agent.Reshape),
        #"source" = AuditEvent_source.Reshape(r[#"source"]?),
        #"entity" = if r[#"entity"]? = null then null else List.Transform(r[#"entity"]?, AuditEvent_entity.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BackboneElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Basic.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Binary.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"securityContext" = Reference.Reshape(r[#"securityContext"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BiologicallyDerivedProduct.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"productCode" = CodeableConcept.Reshape(r[#"productCode"]?),
        #"request" = if r[#"request"]? = null then null else List.Transform(r[#"request"]?, Reference.Reshape),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"collection" = BiologicallyDerivedProduct_collection.Reshape(r[#"collection"]?),
        #"processing" = if r[#"processing"]? = null then null else List.Transform(r[#"processing"]?, BiologicallyDerivedProduct_processing.Reshape),
        #"manipulation" = BiologicallyDerivedProduct_manipulation.Reshape(r[#"manipulation"]?),
        #"storage" = if r[#"storage"]? = null then null else List.Transform(r[#"storage"]?, BiologicallyDerivedProduct_storage.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BodyStructure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"morphology" = CodeableConcept.Reshape(r[#"morphology"]?),
        #"location" = CodeableConcept.Reshape(r[#"location"]?),
        #"locationQualifier" = if r[#"locationQualifier"]? = null then null else List.Transform(r[#"locationQualifier"]?, CodeableConcept.Reshape),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, Attachment.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Bundle_entry.Reshape),
        #"signature" = Signature.Reshape(r[#"signature"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"software" = CapabilityStatement_software.Reshape(r[#"software"]?),
        #"implementation" = CapabilityStatement_implementation.Reshape(r[#"implementation"]?),
        #"rest" = if r[#"rest"]? = null then null else List.Transform(r[#"rest"]?, CapabilityStatement_rest.Reshape),
        #"messaging" = if r[#"messaging"]? = null then null else List.Transform(r[#"messaging"]?, CapabilityStatement_messaging.Reshape),
        #"document" = if r[#"document"]? = null then null else List.Transform(r[#"document"]?, CapabilityStatement_document.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Reference.Reshape),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, Reference.Reshape),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"activity" = if r[#"activity"]? = null then null else List.Transform(r[#"activity"]?, CarePlan_activity.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CareTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, CareTeam_participant.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"managingOrganization" = if r[#"managingOrganization"]? = null then null else List.Transform(r[#"managingOrganization"]?, Reference.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CatalogEntry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"referencedItem" = Reference.Reshape(r[#"referencedItem"]?),
        #"additionalIdentifier" = if r[#"additionalIdentifier"]? = null then null else List.Transform(r[#"additionalIdentifier"]?, Identifier.Reshape),
        #"classification" = if r[#"classification"]? = null then null else List.Transform(r[#"classification"]?, CodeableConcept.Reshape),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?),
        #"additionalCharacteristic" = if r[#"additionalCharacteristic"]? = null then null else List.Transform(r[#"additionalCharacteristic"]?, CodeableConcept.Reshape),
        #"additionalClassification" = if r[#"additionalClassification"]? = null then null else List.Transform(r[#"additionalClassification"]?, CodeableConcept.Reshape),
        #"relatedEntry" = if r[#"relatedEntry"]? = null then null else List.Transform(r[#"relatedEntry"]?, CatalogEntry_relatedEntry.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productReference", "productCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productReference", "productCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productReference", "Reference"}, { "productCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, ChargeItem_performer.Reshape),
        #"performingOrganization" = Reference.Reshape(r[#"performingOrganization"]?),
        #"requestingOrganization" = Reference.Reshape(r[#"requestingOrganization"]?),
        #"costCenter" = Reference.Reshape(r[#"costCenter"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"bodysite" = if r[#"bodysite"]? = null then null else List.Transform(r[#"bodysite"]?, CodeableConcept.Reshape),
        #"priceOverride" = Money.Reshape(r[#"priceOverride"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"service" = if r[#"service"]? = null then null else List.Transform(r[#"service"]?, Reference.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeOccurrence(
            childrenReshaped)),

  ChargeItemDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, Reference.Reshape),
        #"applicability" = if r[#"applicability"]? = null then null else List.Transform(r[#"applicability"]?, ChargeItemDefinition_applicability.Reshape),
        #"propertyGroup" = if r[#"propertyGroup"]? = null then null else List.Transform(r[#"propertyGroup"]?, ChargeItemDefinition_propertyGroup.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"billablePeriod" = Period.Reshape(r[#"billablePeriod"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"fundsReserve" = CodeableConcept.Reshape(r[#"fundsReserve"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, Claim_related.Reshape),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"originalPrescription" = Reference.Reshape(r[#"originalPrescription"]?),
        #"payee" = Claim_payee.Reshape(r[#"payee"]?),
        #"referral" = Reference.Reshape(r[#"referral"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, Claim_careTeam.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Claim_supportingInfo.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, Claim_diagnosis.Reshape),
        #"procedure" = if r[#"procedure"]? = null then null else List.Transform(r[#"procedure"]?, Claim_procedure.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Claim_insurance.Reshape),
        #"accident" = Claim_accident.Reshape(r[#"accident"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Claim_item.Reshape),
        #"total" = Money.Reshape(r[#"total"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"requestor" = Reference.Reshape(r[#"requestor"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"preAuthPeriod" = Period.Reshape(r[#"preAuthPeriod"]?),
        #"payeeType" = CodeableConcept.Reshape(r[#"payeeType"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ClaimResponse_item.Reshape),
        #"addItem" = if r[#"addItem"]? = null then null else List.Transform(r[#"addItem"]?, ClaimResponse_addItem.Reshape),
        #"total" = if r[#"total"]? = null then null else List.Transform(r[#"total"]?, ClaimResponse_total.Reshape),
        #"payment" = ClaimResponse_payment.Reshape(r[#"payment"]?),
        #"fundsReserve" = CodeableConcept.Reshape(r[#"fundsReserve"]?),
        #"formCode" = CodeableConcept.Reshape(r[#"formCode"]?),
        #"form" = Attachment.Reshape(r[#"form"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, ClaimResponse_processNote.Reshape),
        #"communicationRequest" = if r[#"communicationRequest"]? = null then null else List.Transform(r[#"communicationRequest"]?, Reference.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, ClaimResponse_insurance.Reshape),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, ClaimResponse_error.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"assessor" = Reference.Reshape(r[#"assessor"]?),
        #"previous" = Reference.Reshape(r[#"previous"]?),
        #"problem" = if r[#"problem"]? = null then null else List.Transform(r[#"problem"]?, Reference.Reshape),
        #"investigation" = if r[#"investigation"]? = null then null else List.Transform(r[#"investigation"]?, ClinicalImpression_investigation.Reshape),
        #"finding" = if r[#"finding"]? = null then null else List.Transform(r[#"finding"]?, ClinicalImpression_finding.Reshape),
        #"prognosisCodeableConcept" = if r[#"prognosisCodeableConcept"]? = null then null else List.Transform(r[#"prognosisCodeableConcept"]?, CodeableConcept.Reshape),
        #"prognosisReference" = if r[#"prognosisReference"]? = null then null else List.Transform(r[#"prognosisReference"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          childrenReshaped),

  CodeableConcept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"coding" = if r[#"coding"]? = null then null else List.Transform(r[#"coding"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, CodeSystem_filter.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, CodeSystem_property.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, CodeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"inResponseTo" = if r[#"inResponseTo"]? = null then null else List.Transform(r[#"inResponseTo"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"topic" = CodeableConcept.Reshape(r[#"topic"]?),
        #"about" = if r[#"about"]? = null then null else List.Transform(r[#"about"]?, Reference.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, Communication_payload.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CommunicationRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"about" = if r[#"about"]? = null then null else List.Transform(r[#"about"]?, Reference.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, CommunicationRequest_payload.Reshape),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  CompartmentDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, CompartmentDefinition_resource.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"attester" = if r[#"attester"]? = null then null else List.Transform(r[#"attester"]?, Composition_attester.Reshape),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"relatesTo" = if r[#"relatesTo"]? = null then null else List.Transform(r[#"relatesTo"]?, Composition_relatesTo.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, Composition_event.Reshape),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceUri", "sourceCanonical"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceUri", "sourceCanonical" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceUri", "uri"}, { "sourceCanonical", "canonical"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetUri", "targetCanonical"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetUri", "targetCanonical" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetUri", "uri"}, { "targetCanonical", "canonical"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, ConceptMap_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          ReshapeSource(
            childrenReshaped)),

  Condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetDateTime", "dateTime"}, { "onsetAge", "Age"}, { "onsetPeriod", "Period"}, { "onsetRange", "Range"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      ReshapeAbatement = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "abatementDateTime", "abatementAge", "abatementPeriod", "abatementRange", "abatementString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "abatementDateTime", "abatementAge", "abatementPeriod", "abatementRange", "abatementString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "abatementDateTime", "dateTime"}, { "abatementAge", "Age"}, { "abatementPeriod", "Period"}, { "abatementRange", "Range"}, { "abatementString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ abatement = null ] else choicesRemoved & [ abatement = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"clinicalStatus" = CodeableConcept.Reshape(r[#"clinicalStatus"]?),
        #"verificationStatus" = CodeableConcept.Reshape(r[#"verificationStatus"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"severity" = CodeableConcept.Reshape(r[#"severity"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"stage" = if r[#"stage"]? = null then null else List.Transform(r[#"stage"]?, Condition_stage.Reshape),
        #"evidence" = if r[#"evidence"]? = null then null else List.Transform(r[#"evidence"]?, Condition_evidence.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAbatement(
          ReshapeOnset(
            childrenReshaped)),

  Consent.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceAttachment", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceAttachment", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceAttachment", "Attachment"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"scope" = CodeableConcept.Reshape(r[#"scope"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"organization" = if r[#"organization"]? = null then null else List.Transform(r[#"organization"]?, Reference.Reshape),
        #"policy" = if r[#"policy"]? = null then null else List.Transform(r[#"policy"]?, Consent_policy.Reshape),
        #"policyRule" = CodeableConcept.Reshape(r[#"policyRule"]?),
        #"verification" = if r[#"verification"]? = null then null else List.Transform(r[#"verification"]?, Consent_verification.Reshape),
        #"provision" = Consent_provision.Reshape(r[#"provision"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSource(
          childrenReshaped),

  ContactDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ContactPoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contained.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"Account" = if r[#"Account"]? = null then null else List.Transform(r[#"Account"]?, Account.Reshape),
        #"ActivityDefinition" = if r[#"ActivityDefinition"]? = null then null else List.Transform(r[#"ActivityDefinition"]?, ActivityDefinition.Reshape),
        #"AdverseEvent" = if r[#"AdverseEvent"]? = null then null else List.Transform(r[#"AdverseEvent"]?, AdverseEvent.Reshape),
        #"AllergyIntolerance" = if r[#"AllergyIntolerance"]? = null then null else List.Transform(r[#"AllergyIntolerance"]?, AllergyIntolerance.Reshape),
        #"Appointment" = if r[#"Appointment"]? = null then null else List.Transform(r[#"Appointment"]?, Appointment.Reshape),
        #"AppointmentResponse" = if r[#"AppointmentResponse"]? = null then null else List.Transform(r[#"AppointmentResponse"]?, AppointmentResponse.Reshape),
        #"AuditEvent" = if r[#"AuditEvent"]? = null then null else List.Transform(r[#"AuditEvent"]?, AuditEvent.Reshape),
        #"Basic" = if r[#"Basic"]? = null then null else List.Transform(r[#"Basic"]?, Basic.Reshape),
        #"Binary" = if r[#"Binary"]? = null then null else List.Transform(r[#"Binary"]?, Binary.Reshape),
        #"BiologicallyDerivedProduct" = if r[#"BiologicallyDerivedProduct"]? = null then null else List.Transform(r[#"BiologicallyDerivedProduct"]?, BiologicallyDerivedProduct.Reshape),
        #"BodyStructure" = if r[#"BodyStructure"]? = null then null else List.Transform(r[#"BodyStructure"]?, BodyStructure.Reshape),
        #"Bundle" = if r[#"Bundle"]? = null then null else List.Transform(r[#"Bundle"]?, Bundle.Reshape),
        #"CapabilityStatement" = if r[#"CapabilityStatement"]? = null then null else List.Transform(r[#"CapabilityStatement"]?, CapabilityStatement.Reshape),
        #"CarePlan" = if r[#"CarePlan"]? = null then null else List.Transform(r[#"CarePlan"]?, CarePlan.Reshape),
        #"CareTeam" = if r[#"CareTeam"]? = null then null else List.Transform(r[#"CareTeam"]?, CareTeam.Reshape),
        #"CatalogEntry" = if r[#"CatalogEntry"]? = null then null else List.Transform(r[#"CatalogEntry"]?, CatalogEntry.Reshape),
        #"ChargeItem" = if r[#"ChargeItem"]? = null then null else List.Transform(r[#"ChargeItem"]?, ChargeItem.Reshape),
        #"ChargeItemDefinition" = if r[#"ChargeItemDefinition"]? = null then null else List.Transform(r[#"ChargeItemDefinition"]?, ChargeItemDefinition.Reshape),
        #"Claim" = if r[#"Claim"]? = null then null else List.Transform(r[#"Claim"]?, Claim.Reshape),
        #"ClaimResponse" = if r[#"ClaimResponse"]? = null then null else List.Transform(r[#"ClaimResponse"]?, ClaimResponse.Reshape),
        #"ClinicalImpression" = if r[#"ClinicalImpression"]? = null then null else List.Transform(r[#"ClinicalImpression"]?, ClinicalImpression.Reshape),
        #"CodeSystem" = if r[#"CodeSystem"]? = null then null else List.Transform(r[#"CodeSystem"]?, CodeSystem.Reshape),
        #"Communication" = if r[#"Communication"]? = null then null else List.Transform(r[#"Communication"]?, Communication.Reshape),
        #"CommunicationRequest" = if r[#"CommunicationRequest"]? = null then null else List.Transform(r[#"CommunicationRequest"]?, CommunicationRequest.Reshape),
        #"CompartmentDefinition" = if r[#"CompartmentDefinition"]? = null then null else List.Transform(r[#"CompartmentDefinition"]?, CompartmentDefinition.Reshape),
        #"Composition" = if r[#"Composition"]? = null then null else List.Transform(r[#"Composition"]?, Composition.Reshape),
        #"ConceptMap" = if r[#"ConceptMap"]? = null then null else List.Transform(r[#"ConceptMap"]?, ConceptMap.Reshape),
        #"Condition" = if r[#"Condition"]? = null then null else List.Transform(r[#"Condition"]?, Condition.Reshape),
        #"Consent" = if r[#"Consent"]? = null then null else List.Transform(r[#"Consent"]?, Consent.Reshape),
        #"Contract" = if r[#"Contract"]? = null then null else List.Transform(r[#"Contract"]?, Contract.Reshape),
        #"Coverage" = if r[#"Coverage"]? = null then null else List.Transform(r[#"Coverage"]?, Coverage.Reshape),
        #"CoverageEligibilityRequest" = if r[#"CoverageEligibilityRequest"]? = null then null else List.Transform(r[#"CoverageEligibilityRequest"]?, CoverageEligibilityRequest.Reshape),
        #"CoverageEligibilityResponse" = if r[#"CoverageEligibilityResponse"]? = null then null else List.Transform(r[#"CoverageEligibilityResponse"]?, CoverageEligibilityResponse.Reshape),
        #"DetectedIssue" = if r[#"DetectedIssue"]? = null then null else List.Transform(r[#"DetectedIssue"]?, DetectedIssue.Reshape),
        #"Device" = if r[#"Device"]? = null then null else List.Transform(r[#"Device"]?, Device.Reshape),
        #"DeviceDefinition" = if r[#"DeviceDefinition"]? = null then null else List.Transform(r[#"DeviceDefinition"]?, DeviceDefinition.Reshape),
        #"DeviceMetric" = if r[#"DeviceMetric"]? = null then null else List.Transform(r[#"DeviceMetric"]?, DeviceMetric.Reshape),
        #"DeviceRequest" = if r[#"DeviceRequest"]? = null then null else List.Transform(r[#"DeviceRequest"]?, DeviceRequest.Reshape),
        #"DeviceUseStatement" = if r[#"DeviceUseStatement"]? = null then null else List.Transform(r[#"DeviceUseStatement"]?, DeviceUseStatement.Reshape),
        #"DiagnosticReport" = if r[#"DiagnosticReport"]? = null then null else List.Transform(r[#"DiagnosticReport"]?, DiagnosticReport.Reshape),
        #"DocumentManifest" = if r[#"DocumentManifest"]? = null then null else List.Transform(r[#"DocumentManifest"]?, DocumentManifest.Reshape),
        #"DocumentReference" = if r[#"DocumentReference"]? = null then null else List.Transform(r[#"DocumentReference"]?, DocumentReference.Reshape),
        #"DomainResource" = if r[#"DomainResource"]? = null then null else List.Transform(r[#"DomainResource"]?, DomainResource.Reshape),
        #"EffectEvidenceSynthesis" = if r[#"EffectEvidenceSynthesis"]? = null then null else List.Transform(r[#"EffectEvidenceSynthesis"]?, EffectEvidenceSynthesis.Reshape),
        #"Encounter" = if r[#"Encounter"]? = null then null else List.Transform(r[#"Encounter"]?, Encounter.Reshape),
        #"Endpoint" = if r[#"Endpoint"]? = null then null else List.Transform(r[#"Endpoint"]?, Endpoint.Reshape),
        #"EnrollmentRequest" = if r[#"EnrollmentRequest"]? = null then null else List.Transform(r[#"EnrollmentRequest"]?, EnrollmentRequest.Reshape),
        #"EnrollmentResponse" = if r[#"EnrollmentResponse"]? = null then null else List.Transform(r[#"EnrollmentResponse"]?, EnrollmentResponse.Reshape),
        #"EpisodeOfCare" = if r[#"EpisodeOfCare"]? = null then null else List.Transform(r[#"EpisodeOfCare"]?, EpisodeOfCare.Reshape),
        #"EventDefinition" = if r[#"EventDefinition"]? = null then null else List.Transform(r[#"EventDefinition"]?, EventDefinition.Reshape),
        #"Evidence" = if r[#"Evidence"]? = null then null else List.Transform(r[#"Evidence"]?, Evidence.Reshape),
        #"EvidenceVariable" = if r[#"EvidenceVariable"]? = null then null else List.Transform(r[#"EvidenceVariable"]?, EvidenceVariable.Reshape),
        #"ExampleScenario" = if r[#"ExampleScenario"]? = null then null else List.Transform(r[#"ExampleScenario"]?, ExampleScenario.Reshape),
        #"ExplanationOfBenefit" = if r[#"ExplanationOfBenefit"]? = null then null else List.Transform(r[#"ExplanationOfBenefit"]?, ExplanationOfBenefit.Reshape),
        #"FamilyMemberHistory" = if r[#"FamilyMemberHistory"]? = null then null else List.Transform(r[#"FamilyMemberHistory"]?, FamilyMemberHistory.Reshape),
        #"Flag" = if r[#"Flag"]? = null then null else List.Transform(r[#"Flag"]?, Flag.Reshape),
        #"Goal" = if r[#"Goal"]? = null then null else List.Transform(r[#"Goal"]?, Goal.Reshape),
        #"GraphDefinition" = if r[#"GraphDefinition"]? = null then null else List.Transform(r[#"GraphDefinition"]?, GraphDefinition.Reshape),
        #"Group" = if r[#"Group"]? = null then null else List.Transform(r[#"Group"]?, Group.Reshape),
        #"GuidanceResponse" = if r[#"GuidanceResponse"]? = null then null else List.Transform(r[#"GuidanceResponse"]?, GuidanceResponse.Reshape),
        #"HealthcareService" = if r[#"HealthcareService"]? = null then null else List.Transform(r[#"HealthcareService"]?, HealthcareService.Reshape),
        #"ImagingStudy" = if r[#"ImagingStudy"]? = null then null else List.Transform(r[#"ImagingStudy"]?, ImagingStudy.Reshape),
        #"Immunization" = if r[#"Immunization"]? = null then null else List.Transform(r[#"Immunization"]?, Immunization.Reshape),
        #"ImmunizationEvaluation" = if r[#"ImmunizationEvaluation"]? = null then null else List.Transform(r[#"ImmunizationEvaluation"]?, ImmunizationEvaluation.Reshape),
        #"ImmunizationRecommendation" = if r[#"ImmunizationRecommendation"]? = null then null else List.Transform(r[#"ImmunizationRecommendation"]?, ImmunizationRecommendation.Reshape),
        #"ImplementationGuide" = if r[#"ImplementationGuide"]? = null then null else List.Transform(r[#"ImplementationGuide"]?, ImplementationGuide.Reshape),
        #"InsurancePlan" = if r[#"InsurancePlan"]? = null then null else List.Transform(r[#"InsurancePlan"]?, InsurancePlan.Reshape),
        #"Invoice" = if r[#"Invoice"]? = null then null else List.Transform(r[#"Invoice"]?, Invoice.Reshape),
        #"Library" = if r[#"Library"]? = null then null else List.Transform(r[#"Library"]?, Library.Reshape),
        #"Linkage" = if r[#"Linkage"]? = null then null else List.Transform(r[#"Linkage"]?, Linkage.Reshape),
        #"List" = if r[#"List"]? = null then null else List.Transform(r[#"List"]?, List.Reshape),
        #"Location" = if r[#"Location"]? = null then null else List.Transform(r[#"Location"]?, Location.Reshape),
        #"Measure" = if r[#"Measure"]? = null then null else List.Transform(r[#"Measure"]?, Measure.Reshape),
        #"MeasureReport" = if r[#"MeasureReport"]? = null then null else List.Transform(r[#"MeasureReport"]?, MeasureReport.Reshape),
        #"Media" = if r[#"Media"]? = null then null else List.Transform(r[#"Media"]?, Media.Reshape),
        #"Medication" = if r[#"Medication"]? = null then null else List.Transform(r[#"Medication"]?, Medication.Reshape),
        #"MedicationAdministration" = if r[#"MedicationAdministration"]? = null then null else List.Transform(r[#"MedicationAdministration"]?, MedicationAdministration.Reshape),
        #"MedicationDispense" = if r[#"MedicationDispense"]? = null then null else List.Transform(r[#"MedicationDispense"]?, MedicationDispense.Reshape),
        #"MedicationKnowledge" = if r[#"MedicationKnowledge"]? = null then null else List.Transform(r[#"MedicationKnowledge"]?, MedicationKnowledge.Reshape),
        #"MedicationRequest" = if r[#"MedicationRequest"]? = null then null else List.Transform(r[#"MedicationRequest"]?, MedicationRequest.Reshape),
        #"MedicationStatement" = if r[#"MedicationStatement"]? = null then null else List.Transform(r[#"MedicationStatement"]?, MedicationStatement.Reshape),
        #"MedicinalProduct" = if r[#"MedicinalProduct"]? = null then null else List.Transform(r[#"MedicinalProduct"]?, MedicinalProduct.Reshape),
        #"MedicinalProductAuthorization" = if r[#"MedicinalProductAuthorization"]? = null then null else List.Transform(r[#"MedicinalProductAuthorization"]?, MedicinalProductAuthorization.Reshape),
        #"MedicinalProductContraindication" = if r[#"MedicinalProductContraindication"]? = null then null else List.Transform(r[#"MedicinalProductContraindication"]?, MedicinalProductContraindication.Reshape),
        #"MedicinalProductIndication" = if r[#"MedicinalProductIndication"]? = null then null else List.Transform(r[#"MedicinalProductIndication"]?, MedicinalProductIndication.Reshape),
        #"MedicinalProductIngredient" = if r[#"MedicinalProductIngredient"]? = null then null else List.Transform(r[#"MedicinalProductIngredient"]?, MedicinalProductIngredient.Reshape),
        #"MedicinalProductInteraction" = if r[#"MedicinalProductInteraction"]? = null then null else List.Transform(r[#"MedicinalProductInteraction"]?, MedicinalProductInteraction.Reshape),
        #"MedicinalProductManufactured" = if r[#"MedicinalProductManufactured"]? = null then null else List.Transform(r[#"MedicinalProductManufactured"]?, MedicinalProductManufactured.Reshape),
        #"MedicinalProductPackaged" = if r[#"MedicinalProductPackaged"]? = null then null else List.Transform(r[#"MedicinalProductPackaged"]?, MedicinalProductPackaged.Reshape),
        #"MedicinalProductPharmaceutical" = if r[#"MedicinalProductPharmaceutical"]? = null then null else List.Transform(r[#"MedicinalProductPharmaceutical"]?, MedicinalProductPharmaceutical.Reshape),
        #"MedicinalProductUndesirableEffect" = if r[#"MedicinalProductUndesirableEffect"]? = null then null else List.Transform(r[#"MedicinalProductUndesirableEffect"]?, MedicinalProductUndesirableEffect.Reshape),
        #"MessageDefinition" = if r[#"MessageDefinition"]? = null then null else List.Transform(r[#"MessageDefinition"]?, MessageDefinition.Reshape),
        #"MessageHeader" = if r[#"MessageHeader"]? = null then null else List.Transform(r[#"MessageHeader"]?, MessageHeader.Reshape),
        #"MolecularSequence" = if r[#"MolecularSequence"]? = null then null else List.Transform(r[#"MolecularSequence"]?, MolecularSequence.Reshape),
        #"NamingSystem" = if r[#"NamingSystem"]? = null then null else List.Transform(r[#"NamingSystem"]?, NamingSystem.Reshape),
        #"NutritionOrder" = if r[#"NutritionOrder"]? = null then null else List.Transform(r[#"NutritionOrder"]?, NutritionOrder.Reshape),
        #"Observation" = if r[#"Observation"]? = null then null else List.Transform(r[#"Observation"]?, Observation.Reshape),
        #"ObservationDefinition" = if r[#"ObservationDefinition"]? = null then null else List.Transform(r[#"ObservationDefinition"]?, ObservationDefinition.Reshape),
        #"OperationDefinition" = if r[#"OperationDefinition"]? = null then null else List.Transform(r[#"OperationDefinition"]?, OperationDefinition.Reshape),
        #"OperationOutcome" = if r[#"OperationOutcome"]? = null then null else List.Transform(r[#"OperationOutcome"]?, OperationOutcome.Reshape),
        #"Organization" = if r[#"Organization"]? = null then null else List.Transform(r[#"Organization"]?, Organization.Reshape),
        #"OrganizationAffiliation" = if r[#"OrganizationAffiliation"]? = null then null else List.Transform(r[#"OrganizationAffiliation"]?, OrganizationAffiliation.Reshape),
        #"Parameters" = if r[#"Parameters"]? = null then null else List.Transform(r[#"Parameters"]?, Parameters.Reshape),
        #"Patient" = if r[#"Patient"]? = null then null else List.Transform(r[#"Patient"]?, Patient.Reshape),
        #"PaymentNotice" = if r[#"PaymentNotice"]? = null then null else List.Transform(r[#"PaymentNotice"]?, PaymentNotice.Reshape),
        #"PaymentReconciliation" = if r[#"PaymentReconciliation"]? = null then null else List.Transform(r[#"PaymentReconciliation"]?, PaymentReconciliation.Reshape),
        #"Person" = if r[#"Person"]? = null then null else List.Transform(r[#"Person"]?, Person.Reshape),
        #"PlanDefinition" = if r[#"PlanDefinition"]? = null then null else List.Transform(r[#"PlanDefinition"]?, PlanDefinition.Reshape),
        #"Practitioner" = if r[#"Practitioner"]? = null then null else List.Transform(r[#"Practitioner"]?, Practitioner.Reshape),
        #"PractitionerRole" = if r[#"PractitionerRole"]? = null then null else List.Transform(r[#"PractitionerRole"]?, PractitionerRole.Reshape),
        #"Procedure" = if r[#"Procedure"]? = null then null else List.Transform(r[#"Procedure"]?, Procedure.Reshape),
        #"Provenance" = if r[#"Provenance"]? = null then null else List.Transform(r[#"Provenance"]?, Provenance.Reshape),
        #"Questionnaire" = if r[#"Questionnaire"]? = null then null else List.Transform(r[#"Questionnaire"]?, Questionnaire.Reshape),
        #"QuestionnaireResponse" = if r[#"QuestionnaireResponse"]? = null then null else List.Transform(r[#"QuestionnaireResponse"]?, QuestionnaireResponse.Reshape),
        #"RelatedPerson" = if r[#"RelatedPerson"]? = null then null else List.Transform(r[#"RelatedPerson"]?, RelatedPerson.Reshape),
        #"RequestGroup" = if r[#"RequestGroup"]? = null then null else List.Transform(r[#"RequestGroup"]?, RequestGroup.Reshape),
        #"ResearchDefinition" = if r[#"ResearchDefinition"]? = null then null else List.Transform(r[#"ResearchDefinition"]?, ResearchDefinition.Reshape),
        #"ResearchElementDefinition" = if r[#"ResearchElementDefinition"]? = null then null else List.Transform(r[#"ResearchElementDefinition"]?, ResearchElementDefinition.Reshape),
        #"ResearchStudy" = if r[#"ResearchStudy"]? = null then null else List.Transform(r[#"ResearchStudy"]?, ResearchStudy.Reshape),
        #"ResearchSubject" = if r[#"ResearchSubject"]? = null then null else List.Transform(r[#"ResearchSubject"]?, ResearchSubject.Reshape),
        #"Resource" = if r[#"Resource"]? = null then null else List.Transform(r[#"Resource"]?, Resource.Reshape),
        #"RiskAssessment" = if r[#"RiskAssessment"]? = null then null else List.Transform(r[#"RiskAssessment"]?, RiskAssessment.Reshape),
        #"RiskEvidenceSynthesis" = if r[#"RiskEvidenceSynthesis"]? = null then null else List.Transform(r[#"RiskEvidenceSynthesis"]?, RiskEvidenceSynthesis.Reshape),
        #"Schedule" = if r[#"Schedule"]? = null then null else List.Transform(r[#"Schedule"]?, Schedule.Reshape),
        #"SearchParameter" = if r[#"SearchParameter"]? = null then null else List.Transform(r[#"SearchParameter"]?, SearchParameter.Reshape),
        #"ServiceRequest" = if r[#"ServiceRequest"]? = null then null else List.Transform(r[#"ServiceRequest"]?, ServiceRequest.Reshape),
        #"Slot" = if r[#"Slot"]? = null then null else List.Transform(r[#"Slot"]?, Slot.Reshape),
        #"Specimen" = if r[#"Specimen"]? = null then null else List.Transform(r[#"Specimen"]?, Specimen.Reshape),
        #"SpecimenDefinition" = if r[#"SpecimenDefinition"]? = null then null else List.Transform(r[#"SpecimenDefinition"]?, SpecimenDefinition.Reshape),
        #"StructureDefinition" = if r[#"StructureDefinition"]? = null then null else List.Transform(r[#"StructureDefinition"]?, StructureDefinition.Reshape),
        #"StructureMap" = if r[#"StructureMap"]? = null then null else List.Transform(r[#"StructureMap"]?, StructureMap.Reshape),
        #"Subscription" = if r[#"Subscription"]? = null then null else List.Transform(r[#"Subscription"]?, Subscription.Reshape),
        #"Substance" = if r[#"Substance"]? = null then null else List.Transform(r[#"Substance"]?, Substance.Reshape),
        #"SubstanceNucleicAcid" = if r[#"SubstanceNucleicAcid"]? = null then null else List.Transform(r[#"SubstanceNucleicAcid"]?, SubstanceNucleicAcid.Reshape),
        #"SubstancePolymer" = if r[#"SubstancePolymer"]? = null then null else List.Transform(r[#"SubstancePolymer"]?, SubstancePolymer.Reshape),
        #"SubstanceProtein" = if r[#"SubstanceProtein"]? = null then null else List.Transform(r[#"SubstanceProtein"]?, SubstanceProtein.Reshape),
        #"SubstanceReferenceInformation" = if r[#"SubstanceReferenceInformation"]? = null then null else List.Transform(r[#"SubstanceReferenceInformation"]?, SubstanceReferenceInformation.Reshape),
        #"SubstanceSourceMaterial" = if r[#"SubstanceSourceMaterial"]? = null then null else List.Transform(r[#"SubstanceSourceMaterial"]?, SubstanceSourceMaterial.Reshape),
        #"SubstanceSpecification" = if r[#"SubstanceSpecification"]? = null then null else List.Transform(r[#"SubstanceSpecification"]?, SubstanceSpecification.Reshape),
        #"SupplyDelivery" = if r[#"SupplyDelivery"]? = null then null else List.Transform(r[#"SupplyDelivery"]?, SupplyDelivery.Reshape),
        #"SupplyRequest" = if r[#"SupplyRequest"]? = null then null else List.Transform(r[#"SupplyRequest"]?, SupplyRequest.Reshape),
        #"Task" = if r[#"Task"]? = null then null else List.Transform(r[#"Task"]?, Task.Reshape),
        #"TerminologyCapabilities" = if r[#"TerminologyCapabilities"]? = null then null else List.Transform(r[#"TerminologyCapabilities"]?, TerminologyCapabilities.Reshape),
        #"TestReport" = if r[#"TestReport"]? = null then null else List.Transform(r[#"TestReport"]?, TestReport.Reshape),
        #"TestScript" = if r[#"TestScript"]? = null then null else List.Transform(r[#"TestScript"]?, TestScript.Reshape),
        #"ValueSet" = if r[#"ValueSet"]? = null then null else List.Transform(r[#"ValueSet"]?, ValueSet.Reshape),
        #"VerificationResult" = if r[#"VerificationResult"]? = null then null else List.Transform(r[#"VerificationResult"]?, VerificationResult.Reshape),
        #"VisionPrescription" = if r[#"VisionPrescription"]? = null then null else List.Transform(r[#"VisionPrescription"]?, VisionPrescription.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTopic = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "topicCodeableConcept", "topicReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "topicCodeableConcept", "topicReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "topicCodeableConcept", "CodeableConcept"}, { "topicReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ topic = null ] else choicesRemoved & [ topic = choiceRecord ],
      ReshapeLegallyBinding = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "legallyBindingAttachment", "legallyBindingReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "legallyBindingAttachment", "legallyBindingReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "legallyBindingAttachment", "Attachment"}, { "legallyBindingReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ legallyBinding = null ] else choicesRemoved & [ legallyBinding = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"legalState" = CodeableConcept.Reshape(r[#"legalState"]?),
        #"instantiatesCanonical" = Reference.Reshape(r[#"instantiatesCanonical"]?),
        #"contentDerivative" = CodeableConcept.Reshape(r[#"contentDerivative"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"expirationType" = CodeableConcept.Reshape(r[#"expirationType"]?),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"authority" = if r[#"authority"]? = null then null else List.Transform(r[#"authority"]?, Reference.Reshape),
        #"domain" = if r[#"domain"]? = null then null else List.Transform(r[#"domain"]?, Reference.Reshape),
        #"site" = if r[#"site"]? = null then null else List.Transform(r[#"site"]?, Reference.Reshape),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"scope" = CodeableConcept.Reshape(r[#"scope"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = if r[#"subType"]? = null then null else List.Transform(r[#"subType"]?, CodeableConcept.Reshape),
        #"contentDefinition" = Contract_contentDefinition.Reshape(r[#"contentDefinition"]?),
        #"term" = if r[#"term"]? = null then null else List.Transform(r[#"term"]?, Contract_term.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape),
        #"signer" = if r[#"signer"]? = null then null else List.Transform(r[#"signer"]?, Contract_signer.Reshape),
        #"friendly" = if r[#"friendly"]? = null then null else List.Transform(r[#"friendly"]?, Contract_friendly.Reshape),
        #"legal" = if r[#"legal"]? = null then null else List.Transform(r[#"legal"]?, Contract_legal.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, Contract_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLegallyBinding(
          ReshapeTopic(
            childrenReshaped)),

  Contributor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Count.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"policyHolder" = Reference.Reshape(r[#"policyHolder"]?),
        #"subscriber" = Reference.Reshape(r[#"subscriber"]?),
        #"beneficiary" = Reference.Reshape(r[#"beneficiary"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"payor" = if r[#"payor"]? = null then null else List.Transform(r[#"payor"]?, Reference.Reshape),
        #"class" = if r[#"class"]? = null then null else List.Transform(r[#"class"]?, Coverage_class.Reshape),
        #"costToBeneficiary" = if r[#"costToBeneficiary"]? = null then null else List.Transform(r[#"costToBeneficiary"]?, Coverage_costToBeneficiary.Reshape),
        #"contract" = if r[#"contract"]? = null then null else List.Transform(r[#"contract"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CoverageEligibilityRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, CoverageEligibilityRequest_supportingInfo.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, CoverageEligibilityRequest_insurance.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, CoverageEligibilityRequest_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeServiced(
          childrenReshaped),

  CoverageEligibilityResponse.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"requestor" = Reference.Reshape(r[#"requestor"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, CoverageEligibilityResponse_insurance.Reshape),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, CoverageEligibilityResponse_error.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeServiced(
          childrenReshaped),

  DataRequirement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"codeFilter" = if r[#"codeFilter"]? = null then null else List.Transform(r[#"codeFilter"]?, DataRequirement_codeFilter.Reshape),
        #"dateFilter" = if r[#"dateFilter"]? = null then null else List.Transform(r[#"dateFilter"]?, DataRequirement_dateFilter.Reshape),
        #"sort" = if r[#"sort"]? = null then null else List.Transform(r[#"sort"]?, DataRequirement_sort.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  DetectedIssue.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeIdentified = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "identifiedDateTime", "identifiedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "identifiedDateTime", "identifiedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "identifiedDateTime", "dateTime"}, { "identifiedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ identified = null ] else choicesRemoved & [ identified = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"implicated" = if r[#"implicated"]? = null then null else List.Transform(r[#"implicated"]?, Reference.Reshape),
        #"evidence" = if r[#"evidence"]? = null then null else List.Transform(r[#"evidence"]?, DetectedIssue_evidence.Reshape),
        #"mitigation" = if r[#"mitigation"]? = null then null else List.Transform(r[#"mitigation"]?, DetectedIssue_mitigation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeIdentified(
          childrenReshaped),

  Device.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = Reference.Reshape(r[#"definition"]?),
        #"udiCarrier" = if r[#"udiCarrier"]? = null then null else List.Transform(r[#"udiCarrier"]?, Device_udiCarrier.Reshape),
        #"statusReason" = if r[#"statusReason"]? = null then null else List.Transform(r[#"statusReason"]?, CodeableConcept.Reshape),
        #"deviceName" = if r[#"deviceName"]? = null then null else List.Transform(r[#"deviceName"]?, Device_deviceName.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"specialization" = if r[#"specialization"]? = null then null else List.Transform(r[#"specialization"]?, Device_specialization.Reshape),
        #"version" = if r[#"version"]? = null then null else List.Transform(r[#"version"]?, Device_version.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, Device_property.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"safety" = if r[#"safety"]? = null then null else List.Transform(r[#"safety"]?, CodeableConcept.Reshape),
        #"parent" = Reference.Reshape(r[#"parent"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeManufacturer = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "manufacturerString", "manufacturerReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "manufacturerString", "manufacturerReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "manufacturerString", "string"}, { "manufacturerReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ manufacturer = null ] else choicesRemoved & [ manufacturer = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"udiDeviceIdentifier" = if r[#"udiDeviceIdentifier"]? = null then null else List.Transform(r[#"udiDeviceIdentifier"]?, DeviceDefinition_udiDeviceIdentifier.Reshape),
        #"deviceName" = if r[#"deviceName"]? = null then null else List.Transform(r[#"deviceName"]?, DeviceDefinition_deviceName.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"specialization" = if r[#"specialization"]? = null then null else List.Transform(r[#"specialization"]?, DeviceDefinition_specialization.Reshape),
        #"safety" = if r[#"safety"]? = null then null else List.Transform(r[#"safety"]?, CodeableConcept.Reshape),
        #"shelfLifeStorage" = if r[#"shelfLifeStorage"]? = null then null else List.Transform(r[#"shelfLifeStorage"]?, ProductShelfLife.Reshape),
        #"physicalCharacteristics" = ProdCharacteristic.Reshape(r[#"physicalCharacteristics"]?),
        #"languageCode" = if r[#"languageCode"]? = null then null else List.Transform(r[#"languageCode"]?, CodeableConcept.Reshape),
        #"capability" = if r[#"capability"]? = null then null else List.Transform(r[#"capability"]?, DeviceDefinition_capability.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, DeviceDefinition_property.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"parentDevice" = Reference.Reshape(r[#"parentDevice"]?),
        #"material" = if r[#"material"]? = null then null else List.Transform(r[#"material"]?, DeviceDefinition_material.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeManufacturer(
          childrenReshaped),

  DeviceMetric.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"measurementPeriod" = Timing.Reshape(r[#"measurementPeriod"]?),
        #"calibration" = if r[#"calibration"]? = null then null else List.Transform(r[#"calibration"]?, DeviceMetric_calibration.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCode = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "codeReference", "codeCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "codeReference", "codeCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "codeReference", "Reference"}, { "codeCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ code = null ] else choicesRemoved & [ code = choiceRecord ],
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"priorRequest" = if r[#"priorRequest"]? = null then null else List.Transform(r[#"priorRequest"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, DeviceRequest_parameter.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"performerType" = CodeableConcept.Reshape(r[#"performerType"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          ReshapeCode(
            childrenReshaped)),

  DeviceUseStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingPeriod", "timingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingPeriod", "timingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingPeriod", "Period"}, { "timingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"derivedFrom" = if r[#"derivedFrom"]? = null then null else List.Transform(r[#"derivedFrom"]?, Reference.Reshape),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  DiagnosticReport.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"resultsInterpreter" = if r[#"resultsInterpreter"]? = null then null else List.Transform(r[#"resultsInterpreter"]?, Reference.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"result" = if r[#"result"]? = null then null else List.Transform(r[#"result"]?, Reference.Reshape),
        #"imagingStudy" = if r[#"imagingStudy"]? = null then null else List.Transform(r[#"imagingStudy"]?, Reference.Reshape),
        #"media" = if r[#"media"]? = null then null else List.Transform(r[#"media"]?, DiagnosticReport_media.Reshape),
        #"conclusionCode" = if r[#"conclusionCode"]? = null then null else List.Transform(r[#"conclusionCode"]?, CodeableConcept.Reshape),
        #"presentedForm" = if r[#"presentedForm"]? = null then null else List.Transform(r[#"presentedForm"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          childrenReshaped),

  Distance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Reference.Reshape),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, DocumentManifest_related.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"authenticator" = Reference.Reshape(r[#"authenticator"]?),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"relatesTo" = if r[#"relatesTo"]? = null then null else List.Transform(r[#"relatesTo"]?, DocumentReference_relatesTo.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, CodeableConcept.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, DocumentReference_content.Reshape),
        #"context" = DocumentReference_context.Reshape(r[#"context"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DomainResource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"additionalInstruction" = if r[#"additionalInstruction"]? = null then null else List.Transform(r[#"additionalInstruction"]?, CodeableConcept.Reshape),
        #"timing" = Timing.Reshape(r[#"timing"]?),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"doseAndRate" = if r[#"doseAndRate"]? = null then null else List.Transform(r[#"doseAndRate"]?, Dosage_doseAndRate.Reshape),
        #"maxDosePerPeriod" = Ratio.Reshape(r[#"maxDosePerPeriod"]?),
        #"maxDosePerAdministration" = Quantity.Reshape(r[#"maxDosePerAdministration"]?),
        #"maxDosePerLifetime" = Quantity.Reshape(r[#"maxDosePerLifetime"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAsNeeded(
          childrenReshaped),

  Duration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EffectEvidenceSynthesis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"synthesisType" = CodeableConcept.Reshape(r[#"synthesisType"]?),
        #"studyType" = CodeableConcept.Reshape(r[#"studyType"]?),
        #"population" = Reference.Reshape(r[#"population"]?),
        #"exposure" = Reference.Reshape(r[#"exposure"]?),
        #"exposureAlternative" = Reference.Reshape(r[#"exposureAlternative"]?),
        #"outcome" = Reference.Reshape(r[#"outcome"]?),
        #"sampleSize" = EffectEvidenceSynthesis_sampleSize.Reshape(r[#"sampleSize"]?),
        #"resultsByExposure" = if r[#"resultsByExposure"]? = null then null else List.Transform(r[#"resultsByExposure"]?, EffectEvidenceSynthesis_resultsByExposure.Reshape),
        #"effectEstimate" = if r[#"effectEstimate"]? = null then null else List.Transform(r[#"effectEstimate"]?, EffectEvidenceSynthesis_effectEstimate.Reshape),
        #"certainty" = if r[#"certainty"]? = null then null else List.Transform(r[#"certainty"]?, EffectEvidenceSynthesis_certainty.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefaultValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCanonical", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueUrl", "defaultValueUuid", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueContactDetail", "defaultValueContributor", "defaultValueDataRequirement", "defaultValueExpression", "defaultValueParameterDefinition", "defaultValueRelatedArtifact", "defaultValueTriggerDefinition", "defaultValueUsageContext", "defaultValueDosage", "defaultValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCanonical", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueUrl", "defaultValueUuid", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueContactDetail", "defaultValueContributor", "defaultValueDataRequirement", "defaultValueExpression", "defaultValueParameterDefinition", "defaultValueRelatedArtifact", "defaultValueTriggerDefinition", "defaultValueUsageContext", "defaultValueDosage", "defaultValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "defaultValueBase64Binary", "base64Binary"}, { "defaultValueBoolean", "boolean"}, { "defaultValueCanonical", "canonical"}, { "defaultValueCode", "code"}, { "defaultValueDate", "date"}, { "defaultValueDateTime", "dateTime"}, { "defaultValueDecimal", "decimal"}, { "defaultValueId", "id"}, { "defaultValueInstant", "instant"}, { "defaultValueInteger", "integer"}, { "defaultValueMarkdown", "markdown"}, { "defaultValueOid", "oid"}, { "defaultValuePositiveInt", "positiveInt"}, { "defaultValueString", "string"}, { "defaultValueTime", "time"}, { "defaultValueUnsignedInt", "unsignedInt"}, { "defaultValueUri", "uri"}, { "defaultValueUrl", "url"}, { "defaultValueUuid", "uuid"}, { "defaultValueAddress", "Address"}, { "defaultValueAge", "Age"}, { "defaultValueAnnotation", "Annotation"}, { "defaultValueAttachment", "Attachment"}, { "defaultValueCodeableConcept", "CodeableConcept"}, { "defaultValueCoding", "Coding"}, { "defaultValueContactPoint", "ContactPoint"}, { "defaultValueCount", "Count"}, { "defaultValueDistance", "Distance"}, { "defaultValueDuration", "Duration"}, { "defaultValueHumanName", "HumanName"}, { "defaultValueIdentifier", "Identifier"}, { "defaultValueMoney", "Money"}, { "defaultValuePeriod", "Period"}, { "defaultValueQuantity", "Quantity"}, { "defaultValueRange", "Range"}, { "defaultValueRatio", "Ratio"}, { "defaultValueReference", "Reference"}, { "defaultValueSampledData", "SampledData"}, { "defaultValueSignature", "Signature"}, { "defaultValueTiming", "Timing"}, { "defaultValueContactDetail", "ContactDetail"}, { "defaultValueContributor", "Contributor"}, { "defaultValueDataRequirement", "DataRequirement"}, { "defaultValueExpression", "Expression"}, { "defaultValueParameterDefinition", "ParameterDefinition"}, { "defaultValueRelatedArtifact", "RelatedArtifact"}, { "defaultValueTriggerDefinition", "TriggerDefinition"}, { "defaultValueUsageContext", "UsageContext"}, { "defaultValueDosage", "Dosage"}, { "defaultValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ defaultValue = null ] else choicesRemoved & [ defaultValue = choiceRecord ],
      ReshapeFixed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "fixedBase64Binary", "fixedBoolean", "fixedCanonical", "fixedCode", "fixedDate", "fixedDateTime", "fixedDecimal", "fixedId", "fixedInstant", "fixedInteger", "fixedMarkdown", "fixedOid", "fixedPositiveInt", "fixedString", "fixedTime", "fixedUnsignedInt", "fixedUri", "fixedUrl", "fixedUuid", "fixedAddress", "fixedAge", "fixedAnnotation", "fixedAttachment", "fixedCodeableConcept", "fixedCoding", "fixedContactPoint", "fixedCount", "fixedDistance", "fixedDuration", "fixedHumanName", "fixedIdentifier", "fixedMoney", "fixedPeriod", "fixedQuantity", "fixedRange", "fixedRatio", "fixedReference", "fixedSampledData", "fixedSignature", "fixedTiming", "fixedContactDetail", "fixedContributor", "fixedDataRequirement", "fixedExpression", "fixedParameterDefinition", "fixedRelatedArtifact", "fixedTriggerDefinition", "fixedUsageContext", "fixedDosage", "fixedMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "fixedBase64Binary", "fixedBoolean", "fixedCanonical", "fixedCode", "fixedDate", "fixedDateTime", "fixedDecimal", "fixedId", "fixedInstant", "fixedInteger", "fixedMarkdown", "fixedOid", "fixedPositiveInt", "fixedString", "fixedTime", "fixedUnsignedInt", "fixedUri", "fixedUrl", "fixedUuid", "fixedAddress", "fixedAge", "fixedAnnotation", "fixedAttachment", "fixedCodeableConcept", "fixedCoding", "fixedContactPoint", "fixedCount", "fixedDistance", "fixedDuration", "fixedHumanName", "fixedIdentifier", "fixedMoney", "fixedPeriod", "fixedQuantity", "fixedRange", "fixedRatio", "fixedReference", "fixedSampledData", "fixedSignature", "fixedTiming", "fixedContactDetail", "fixedContributor", "fixedDataRequirement", "fixedExpression", "fixedParameterDefinition", "fixedRelatedArtifact", "fixedTriggerDefinition", "fixedUsageContext", "fixedDosage", "fixedMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "fixedBase64Binary", "base64Binary"}, { "fixedBoolean", "boolean"}, { "fixedCanonical", "canonical"}, { "fixedCode", "code"}, { "fixedDate", "date"}, { "fixedDateTime", "dateTime"}, { "fixedDecimal", "decimal"}, { "fixedId", "id"}, { "fixedInstant", "instant"}, { "fixedInteger", "integer"}, { "fixedMarkdown", "markdown"}, { "fixedOid", "oid"}, { "fixedPositiveInt", "positiveInt"}, { "fixedString", "string"}, { "fixedTime", "time"}, { "fixedUnsignedInt", "unsignedInt"}, { "fixedUri", "uri"}, { "fixedUrl", "url"}, { "fixedUuid", "uuid"}, { "fixedAddress", "Address"}, { "fixedAge", "Age"}, { "fixedAnnotation", "Annotation"}, { "fixedAttachment", "Attachment"}, { "fixedCodeableConcept", "CodeableConcept"}, { "fixedCoding", "Coding"}, { "fixedContactPoint", "ContactPoint"}, { "fixedCount", "Count"}, { "fixedDistance", "Distance"}, { "fixedDuration", "Duration"}, { "fixedHumanName", "HumanName"}, { "fixedIdentifier", "Identifier"}, { "fixedMoney", "Money"}, { "fixedPeriod", "Period"}, { "fixedQuantity", "Quantity"}, { "fixedRange", "Range"}, { "fixedRatio", "Ratio"}, { "fixedReference", "Reference"}, { "fixedSampledData", "SampledData"}, { "fixedSignature", "Signature"}, { "fixedTiming", "Timing"}, { "fixedContactDetail", "ContactDetail"}, { "fixedContributor", "Contributor"}, { "fixedDataRequirement", "DataRequirement"}, { "fixedExpression", "Expression"}, { "fixedParameterDefinition", "ParameterDefinition"}, { "fixedRelatedArtifact", "RelatedArtifact"}, { "fixedTriggerDefinition", "TriggerDefinition"}, { "fixedUsageContext", "UsageContext"}, { "fixedDosage", "Dosage"}, { "fixedMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ fixed = null ] else choicesRemoved & [ fixed = choiceRecord ],
      ReshapePattern = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "patternBase64Binary", "patternBoolean", "patternCanonical", "patternCode", "patternDate", "patternDateTime", "patternDecimal", "patternId", "patternInstant", "patternInteger", "patternMarkdown", "patternOid", "patternPositiveInt", "patternString", "patternTime", "patternUnsignedInt", "patternUri", "patternUrl", "patternUuid", "patternAddress", "patternAge", "patternAnnotation", "patternAttachment", "patternCodeableConcept", "patternCoding", "patternContactPoint", "patternCount", "patternDistance", "patternDuration", "patternHumanName", "patternIdentifier", "patternMoney", "patternPeriod", "patternQuantity", "patternRange", "patternRatio", "patternReference", "patternSampledData", "patternSignature", "patternTiming", "patternContactDetail", "patternContributor", "patternDataRequirement", "patternExpression", "patternParameterDefinition", "patternRelatedArtifact", "patternTriggerDefinition", "patternUsageContext", "patternDosage", "patternMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "patternBase64Binary", "patternBoolean", "patternCanonical", "patternCode", "patternDate", "patternDateTime", "patternDecimal", "patternId", "patternInstant", "patternInteger", "patternMarkdown", "patternOid", "patternPositiveInt", "patternString", "patternTime", "patternUnsignedInt", "patternUri", "patternUrl", "patternUuid", "patternAddress", "patternAge", "patternAnnotation", "patternAttachment", "patternCodeableConcept", "patternCoding", "patternContactPoint", "patternCount", "patternDistance", "patternDuration", "patternHumanName", "patternIdentifier", "patternMoney", "patternPeriod", "patternQuantity", "patternRange", "patternRatio", "patternReference", "patternSampledData", "patternSignature", "patternTiming", "patternContactDetail", "patternContributor", "patternDataRequirement", "patternExpression", "patternParameterDefinition", "patternRelatedArtifact", "patternTriggerDefinition", "patternUsageContext", "patternDosage", "patternMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "patternBase64Binary", "base64Binary"}, { "patternBoolean", "boolean"}, { "patternCanonical", "canonical"}, { "patternCode", "code"}, { "patternDate", "date"}, { "patternDateTime", "dateTime"}, { "patternDecimal", "decimal"}, { "patternId", "id"}, { "patternInstant", "instant"}, { "patternInteger", "integer"}, { "patternMarkdown", "markdown"}, { "patternOid", "oid"}, { "patternPositiveInt", "positiveInt"}, { "patternString", "string"}, { "patternTime", "time"}, { "patternUnsignedInt", "unsignedInt"}, { "patternUri", "uri"}, { "patternUrl", "url"}, { "patternUuid", "uuid"}, { "patternAddress", "Address"}, { "patternAge", "Age"}, { "patternAnnotation", "Annotation"}, { "patternAttachment", "Attachment"}, { "patternCodeableConcept", "CodeableConcept"}, { "patternCoding", "Coding"}, { "patternContactPoint", "ContactPoint"}, { "patternCount", "Count"}, { "patternDistance", "Distance"}, { "patternDuration", "Duration"}, { "patternHumanName", "HumanName"}, { "patternIdentifier", "Identifier"}, { "patternMoney", "Money"}, { "patternPeriod", "Period"}, { "patternQuantity", "Quantity"}, { "patternRange", "Range"}, { "patternRatio", "Ratio"}, { "patternReference", "Reference"}, { "patternSampledData", "SampledData"}, { "patternSignature", "Signature"}, { "patternTiming", "Timing"}, { "patternContactDetail", "ContactDetail"}, { "patternContributor", "Contributor"}, { "patternDataRequirement", "DataRequirement"}, { "patternExpression", "Expression"}, { "patternParameterDefinition", "ParameterDefinition"}, { "patternRelatedArtifact", "RelatedArtifact"}, { "patternTriggerDefinition", "TriggerDefinition"}, { "patternUsageContext", "UsageContext"}, { "patternDosage", "Dosage"}, { "patternMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ pattern = null ] else choicesRemoved & [ pattern = choiceRecord ],
      ReshapeMinValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "minValueDate", "minValueDateTime", "minValueInstant", "minValueTime", "minValueDecimal", "minValueInteger", "minValuePositiveInt", "minValueUnsignedInt", "minValueQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "minValueDate", "minValueDateTime", "minValueInstant", "minValueTime", "minValueDecimal", "minValueInteger", "minValuePositiveInt", "minValueUnsignedInt", "minValueQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "minValueDate", "date"}, { "minValueDateTime", "dateTime"}, { "minValueInstant", "instant"}, { "minValueTime", "time"}, { "minValueDecimal", "decimal"}, { "minValueInteger", "integer"}, { "minValuePositiveInt", "positiveInt"}, { "minValueUnsignedInt", "unsignedInt"}, { "minValueQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ minValue = null ] else choicesRemoved & [ minValue = choiceRecord ],
      ReshapeMaxValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "maxValueDate", "maxValueDateTime", "maxValueInstant", "maxValueTime", "maxValueDecimal", "maxValueInteger", "maxValuePositiveInt", "maxValueUnsignedInt", "maxValueQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "maxValueDate", "maxValueDateTime", "maxValueInstant", "maxValueTime", "maxValueDecimal", "maxValueInteger", "maxValuePositiveInt", "maxValueUnsignedInt", "maxValueQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "maxValueDate", "date"}, { "maxValueDateTime", "dateTime"}, { "maxValueInstant", "instant"}, { "maxValueTime", "time"}, { "maxValueDecimal", "decimal"}, { "maxValueInteger", "integer"}, { "maxValuePositiveInt", "positiveInt"}, { "maxValueUnsignedInt", "unsignedInt"}, { "maxValueQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ maxValue = null ] else choicesRemoved & [ maxValue = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"slicing" = ElementDefinition_slicing.Reshape(r[#"slicing"]?),
        #"base" = ElementDefinition_base.Reshape(r[#"base"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, ElementDefinition_type.Reshape),
        #"example" = if r[#"example"]? = null then null else List.Transform(r[#"example"]?, ElementDefinition_example.Reshape),
        #"constraint" = if r[#"constraint"]? = null then null else List.Transform(r[#"constraint"]?, ElementDefinition_constraint.Reshape),
        #"binding" = ElementDefinition_binding.Reshape(r[#"binding"]?),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, ElementDefinition_mapping.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMaxValue(
          ReshapeMinValue(
            ReshapePattern(
              ReshapeFixed(
                ReshapeDefaultValue(
                  childrenReshaped))))),

  Encounter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, Encounter_statusHistory.Reshape),
        #"class" = Coding.Reshape(r[#"class"]?),
        #"classHistory" = if r[#"classHistory"]? = null then null else List.Transform(r[#"classHistory"]?, Encounter_classHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"serviceType" = CodeableConcept.Reshape(r[#"serviceType"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"episodeOfCare" = if r[#"episodeOfCare"]? = null then null else List.Transform(r[#"episodeOfCare"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Encounter_participant.Reshape),
        #"appointment" = if r[#"appointment"]? = null then null else List.Transform(r[#"appointment"]?, Reference.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"length" = Duration.Reshape(r[#"length"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, Encounter_diagnosis.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape),
        #"hospitalization" = Encounter_hospitalization.Reshape(r[#"hospitalization"]?),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Encounter_location.Reshape),
        #"serviceProvider" = Reference.Reshape(r[#"serviceProvider"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Endpoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"connectionType" = Coding.Reshape(r[#"connectionType"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"payloadType" = if r[#"payloadType"]? = null then null else List.Transform(r[#"payloadType"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"candidate" = Reference.Reshape(r[#"candidate"]?),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, EpisodeOfCare_statusHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, EpisodeOfCare_diagnosis.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"referralRequest" = if r[#"referralRequest"]? = null then null else List.Transform(r[#"referralRequest"]?, Reference.Reshape),
        #"careManager" = Reference.Reshape(r[#"careManager"]?),
        #"team" = if r[#"team"]? = null then null else List.Transform(r[#"team"]?, Reference.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EventDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"trigger" = if r[#"trigger"]? = null then null else List.Transform(r[#"trigger"]?, TriggerDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  Evidence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"exposureBackground" = Reference.Reshape(r[#"exposureBackground"]?),
        #"exposureVariant" = if r[#"exposureVariant"]? = null then null else List.Transform(r[#"exposureVariant"]?, Reference.Reshape),
        #"outcome" = if r[#"outcome"]? = null then null else List.Transform(r[#"outcome"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EvidenceVariable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, EvidenceVariable_characteristic.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExampleScenario.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, ExampleScenario_actor.Reshape),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ExampleScenario_instance.Reshape),
        #"process" = if r[#"process"]? = null then null else List.Transform(r[#"process"]?, ExampleScenario_process.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"billablePeriod" = Period.Reshape(r[#"billablePeriod"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"fundsReserveRequested" = CodeableConcept.Reshape(r[#"fundsReserveRequested"]?),
        #"fundsReserve" = CodeableConcept.Reshape(r[#"fundsReserve"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, ExplanationOfBenefit_related.Reshape),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"originalPrescription" = Reference.Reshape(r[#"originalPrescription"]?),
        #"payee" = ExplanationOfBenefit_payee.Reshape(r[#"payee"]?),
        #"referral" = Reference.Reshape(r[#"referral"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?),
        #"preAuthRefPeriod" = if r[#"preAuthRefPeriod"]? = null then null else List.Transform(r[#"preAuthRefPeriod"]?, Period.Reshape),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, ExplanationOfBenefit_careTeam.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, ExplanationOfBenefit_supportingInfo.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, ExplanationOfBenefit_diagnosis.Reshape),
        #"procedure" = if r[#"procedure"]? = null then null else List.Transform(r[#"procedure"]?, ExplanationOfBenefit_procedure.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, ExplanationOfBenefit_insurance.Reshape),
        #"accident" = ExplanationOfBenefit_accident.Reshape(r[#"accident"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ExplanationOfBenefit_item.Reshape),
        #"addItem" = if r[#"addItem"]? = null then null else List.Transform(r[#"addItem"]?, ExplanationOfBenefit_addItem.Reshape),
        #"total" = if r[#"total"]? = null then null else List.Transform(r[#"total"]?, ExplanationOfBenefit_total.Reshape),
        #"payment" = ExplanationOfBenefit_payment.Reshape(r[#"payment"]?),
        #"formCode" = CodeableConcept.Reshape(r[#"formCode"]?),
        #"form" = Attachment.Reshape(r[#"form"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, ExplanationOfBenefit_processNote.Reshape),
        #"benefitPeriod" = Period.Reshape(r[#"benefitPeriod"]?),
        #"benefitBalance" = if r[#"benefitBalance"]? = null then null else List.Transform(r[#"benefitBalance"]?, ExplanationOfBenefit_benefitBalance.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Expression.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Extension.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCanonical", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueUrl", "valueUuid", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueContactDetail", "valueContributor", "valueDataRequirement", "valueExpression", "valueParameterDefinition", "valueRelatedArtifact", "valueTriggerDefinition", "valueUsageContext", "valueDosage", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCanonical", "canonical"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueUrl", "url"}, { "valueUuid", "uuid"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueContactDetail", "ContactDetail"}, { "valueContributor", "Contributor"}, { "valueDataRequirement", "DataRequirement"}, { "valueExpression", "Expression"}, { "valueParameterDefinition", "ParameterDefinition"}, { "valueRelatedArtifact", "RelatedArtifact"}, { "valueTriggerDefinition", "TriggerDefinition"}, { "valueUsageContext", "UsageContext"}, { "valueDosage", "Dosage"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, @Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  FamilyMemberHistory.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBorn = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bornPeriod", "bornDate", "bornString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bornPeriod", "bornDate", "bornString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bornPeriod", "Period"}, { "bornDate", "date"}, { "bornString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ born = null ] else choicesRemoved & [ born = choiceRecord ],
      ReshapeAge = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "ageAge", "ageRange", "ageString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "ageAge", "ageRange", "ageString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "ageAge", "Age"}, { "ageRange", "Range"}, { "ageString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ age = null ] else choicesRemoved & [ age = choiceRecord ],
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedAge", "deceasedRange", "deceasedDate", "deceasedString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedAge", "deceasedRange", "deceasedDate", "deceasedString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedAge", "Age"}, { "deceasedRange", "Range"}, { "deceasedDate", "date"}, { "deceasedString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"sex" = CodeableConcept.Reshape(r[#"sex"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, FamilyMemberHistory_condition.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDeceased(
          ReshapeAge(
            ReshapeBorn(
              childrenReshaped))),

  Flag.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Goal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeStart = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "startDate", "startCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "startDate", "startCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "startDate", "date"}, { "startCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ start = null ] else choicesRemoved & [ start = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"achievementStatus" = CodeableConcept.Reshape(r[#"achievementStatus"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"description" = CodeableConcept.Reshape(r[#"description"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, Goal_target.Reshape),
        #"expressedBy" = Reference.Reshape(r[#"expressedBy"]?),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"outcomeCode" = if r[#"outcomeCode"]? = null then null else List.Transform(r[#"outcomeCode"]?, CodeableConcept.Reshape),
        #"outcomeReference" = if r[#"outcomeReference"]? = null then null else List.Transform(r[#"outcomeReference"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeStart(
          childrenReshaped),

  GraphDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, GraphDefinition_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"managingEntity" = Reference.Reshape(r[#"managingEntity"]?),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, Group_characteristic.Reshape),
        #"member" = if r[#"member"]? = null then null else List.Transform(r[#"member"]?, Group_member.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GuidanceResponse.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeModule = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "moduleUri", "moduleCanonical", "moduleCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "moduleUri", "moduleCanonical", "moduleCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "moduleUri", "uri"}, { "moduleCanonical", "canonical"}, { "moduleCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ module = null ] else choicesRemoved & [ module = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"requestIdentifier" = Identifier.Reshape(r[#"requestIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"evaluationMessage" = if r[#"evaluationMessage"]? = null then null else List.Transform(r[#"evaluationMessage"]?, Reference.Reshape),
        #"outputParameters" = Reference.Reshape(r[#"outputParameters"]?),
        #"result" = Reference.Reshape(r[#"result"]?),
        #"dataRequirement" = if r[#"dataRequirement"]? = null then null else List.Transform(r[#"dataRequirement"]?, DataRequirement.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeModule(
          childrenReshaped),

  HealthcareService.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"providedBy" = Reference.Reshape(r[#"providedBy"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"coverageArea" = if r[#"coverageArea"]? = null then null else List.Transform(r[#"coverageArea"]?, Reference.Reshape),
        #"serviceProvisionCode" = if r[#"serviceProvisionCode"]? = null then null else List.Transform(r[#"serviceProvisionCode"]?, CodeableConcept.Reshape),
        #"eligibility" = if r[#"eligibility"]? = null then null else List.Transform(r[#"eligibility"]?, HealthcareService_eligibility.Reshape),
        #"program" = if r[#"program"]? = null then null else List.Transform(r[#"program"]?, CodeableConcept.Reshape),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, CodeableConcept.Reshape),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, CodeableConcept.Reshape),
        #"referralMethod" = if r[#"referralMethod"]? = null then null else List.Transform(r[#"referralMethod"]?, CodeableConcept.Reshape),
        #"availableTime" = if r[#"availableTime"]? = null then null else List.Transform(r[#"availableTime"]?, HealthcareService_availableTime.Reshape),
        #"notAvailable" = if r[#"notAvailable"]? = null then null else List.Transform(r[#"notAvailable"]?, HealthcareService_notAvailable.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HumanName.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Identifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"assigner" = Reference.Reshape(r[#"assigner"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"modality" = if r[#"modality"]? = null then null else List.Transform(r[#"modality"]?, Coding.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"referrer" = Reference.Reshape(r[#"referrer"]?),
        #"interpreter" = if r[#"interpreter"]? = null then null else List.Transform(r[#"interpreter"]?, Reference.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"procedureReference" = Reference.Reshape(r[#"procedureReference"]?),
        #"procedureCode" = if r[#"procedureCode"]? = null then null else List.Transform(r[#"procedureCode"]?, CodeableConcept.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"series" = if r[#"series"]? = null then null else List.Transform(r[#"series"]?, ImagingStudy_series.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrenceString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrenceString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrenceString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"vaccineCode" = CodeableConcept.Reshape(r[#"vaccineCode"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reportOrigin" = CodeableConcept.Reshape(r[#"reportOrigin"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"doseQuantity" = Quantity.Reshape(r[#"doseQuantity"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Immunization_performer.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"subpotentReason" = if r[#"subpotentReason"]? = null then null else List.Transform(r[#"subpotentReason"]?, CodeableConcept.Reshape),
        #"education" = if r[#"education"]? = null then null else List.Transform(r[#"education"]?, Immunization_education.Reshape),
        #"programEligibility" = if r[#"programEligibility"]? = null then null else List.Transform(r[#"programEligibility"]?, CodeableConcept.Reshape),
        #"fundingSource" = CodeableConcept.Reshape(r[#"fundingSource"]?),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, Immunization_reaction.Reshape),
        #"protocolApplied" = if r[#"protocolApplied"]? = null then null else List.Transform(r[#"protocolApplied"]?, Immunization_protocolApplied.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  ImmunizationEvaluation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDoseNumber = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseNumberPositiveInt", "doseNumberString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseNumberPositiveInt", "doseNumberString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseNumberPositiveInt", "positiveInt"}, { "doseNumberString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ doseNumber = null ] else choicesRemoved & [ doseNumber = choiceRecord ],
      ReshapeSeriesDoses = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "seriesDosesPositiveInt", "seriesDosesString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "seriesDosesPositiveInt", "seriesDosesString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "seriesDosesPositiveInt", "positiveInt"}, { "seriesDosesString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ seriesDoses = null ] else choicesRemoved & [ seriesDoses = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"authority" = Reference.Reshape(r[#"authority"]?),
        #"targetDisease" = CodeableConcept.Reshape(r[#"targetDisease"]?),
        #"immunizationEvent" = Reference.Reshape(r[#"immunizationEvent"]?),
        #"doseStatus" = CodeableConcept.Reshape(r[#"doseStatus"]?),
        #"doseStatusReason" = if r[#"doseStatusReason"]? = null then null else List.Transform(r[#"doseStatusReason"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSeriesDoses(
          ReshapeDoseNumber(
            childrenReshaped)),

  ImmunizationRecommendation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"authority" = Reference.Reshape(r[#"authority"]?),
        #"recommendation" = if r[#"recommendation"]? = null then null else List.Transform(r[#"recommendation"]?, ImmunizationRecommendation_recommendation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"dependsOn" = if r[#"dependsOn"]? = null then null else List.Transform(r[#"dependsOn"]?, ImplementationGuide_dependsOn.Reshape),
        #"global" = if r[#"global"]? = null then null else List.Transform(r[#"global"]?, ImplementationGuide_global.Reshape),
        #"definition" = ImplementationGuide_definition.Reshape(r[#"definition"]?),
        #"manifest" = ImplementationGuide_manifest.Reshape(r[#"manifest"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  InsurancePlan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"ownedBy" = Reference.Reshape(r[#"ownedBy"]?),
        #"administeredBy" = Reference.Reshape(r[#"administeredBy"]?),
        #"coverageArea" = if r[#"coverageArea"]? = null then null else List.Transform(r[#"coverageArea"]?, Reference.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, InsurancePlan_contact.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"network" = if r[#"network"]? = null then null else List.Transform(r[#"network"]?, Reference.Reshape),
        #"coverage" = if r[#"coverage"]? = null then null else List.Transform(r[#"coverage"]?, InsurancePlan_coverage.Reshape),
        #"plan" = if r[#"plan"]? = null then null else List.Transform(r[#"plan"]?, InsurancePlan_plan.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Invoice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"recipient" = Reference.Reshape(r[#"recipient"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Invoice_participant.Reshape),
        #"issuer" = Reference.Reshape(r[#"issuer"]?),
        #"account" = Reference.Reshape(r[#"account"]?),
        #"lineItem" = if r[#"lineItem"]? = null then null else List.Transform(r[#"lineItem"]?, Invoice_lineItem.Reshape),
        #"totalNet" = Money.Reshape(r[#"totalNet"]?),
        #"totalGross" = Money.Reshape(r[#"totalGross"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"totalPriceComponent" = if r[#"totalPriceComponent"]? = null then null else List.Transform(r[#"totalPriceComponent"]?, Invoice_totalPriceComponent.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Library.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ParameterDefinition.Reshape),
        #"dataRequirement" = if r[#"dataRequirement"]? = null then null else List.Transform(r[#"dataRequirement"]?, DataRequirement.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  Linkage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Linkage_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, List_entry.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"operationalStatus" = Coding.Reshape(r[#"operationalStatus"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"physicalType" = CodeableConcept.Reshape(r[#"physicalType"]?),
        #"position" = Location_position.Reshape(r[#"position"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?),
        #"hoursOfOperation" = if r[#"hoursOfOperation"]? = null then null else List.Transform(r[#"hoursOfOperation"]?, Location_hoursOfOperation.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MarketingStatus.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"country" = CodeableConcept.Reshape(r[#"country"]?),
        #"jurisdiction" = CodeableConcept.Reshape(r[#"jurisdiction"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"dateRange" = Period.Reshape(r[#"dateRange"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"scoring" = CodeableConcept.Reshape(r[#"scoring"]?),
        #"compositeScoring" = CodeableConcept.Reshape(r[#"compositeScoring"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"improvementNotation" = CodeableConcept.Reshape(r[#"improvementNotation"]?),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, Measure_group.Reshape),
        #"supplementalData" = if r[#"supplementalData"]? = null then null else List.Transform(r[#"supplementalData"]?, Measure_supplementalData.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  MeasureReport.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"reporter" = Reference.Reshape(r[#"reporter"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"improvementNotation" = CodeableConcept.Reshape(r[#"improvementNotation"]?),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, MeasureReport_group.Reshape),
        #"evaluatedResource" = if r[#"evaluatedResource"]? = null then null else List.Transform(r[#"evaluatedResource"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Media.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCreated = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "createdDateTime", "createdPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "createdDateTime", "createdPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "createdDateTime", "dateTime"}, { "createdPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ created = null ] else choicesRemoved & [ created = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"modality" = CodeableConcept.Reshape(r[#"modality"]?),
        #"view" = CodeableConcept.Reshape(r[#"view"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"operator" = Reference.Reshape(r[#"operator"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"content" = Attachment.Reshape(r[#"content"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeCreated(
          childrenReshaped),

  Medication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"amount" = Ratio.Reshape(r[#"amount"]?),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Medication_ingredient.Reshape),
        #"batch" = Medication_batch.Reshape(r[#"batch"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"statusReason" = if r[#"statusReason"]? = null then null else List.Transform(r[#"statusReason"]?, CodeableConcept.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, MedicationAdministration_performer.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"device" = if r[#"device"]? = null then null else List.Transform(r[#"device"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosage" = MedicationAdministration_dosage.Reshape(r[#"dosage"]?),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          ReshapeMedication(
            childrenReshaped)),

  MedicationDispense.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeStatusReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "statusReasonCodeableConcept", "statusReasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "statusReasonCodeableConcept", "statusReasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "statusReasonCodeableConcept", "CodeableConcept"}, { "statusReasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ statusReason = null ] else choicesRemoved & [ statusReason = choiceRecord ],
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, MedicationDispense_performer.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"authorizingPrescription" = if r[#"authorizingPrescription"]? = null then null else List.Transform(r[#"authorizingPrescription"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"daysSupply" = Quantity.Reshape(r[#"daysSupply"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, Dosage.Reshape),
        #"substitution" = MedicationDispense_substitution.Reshape(r[#"substitution"]?),
        #"detectedIssue" = if r[#"detectedIssue"]? = null then null else List.Transform(r[#"detectedIssue"]?, Reference.Reshape),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          ReshapeStatusReason(
            childrenReshaped)),

  MedicationKnowledge.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"doseForm" = CodeableConcept.Reshape(r[#"doseForm"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?),
        #"relatedMedicationKnowledge" = if r[#"relatedMedicationKnowledge"]? = null then null else List.Transform(r[#"relatedMedicationKnowledge"]?, MedicationKnowledge_relatedMedicationKnowledge.Reshape),
        #"associatedMedication" = if r[#"associatedMedication"]? = null then null else List.Transform(r[#"associatedMedication"]?, Reference.Reshape),
        #"productType" = if r[#"productType"]? = null then null else List.Transform(r[#"productType"]?, CodeableConcept.Reshape),
        #"monograph" = if r[#"monograph"]? = null then null else List.Transform(r[#"monograph"]?, MedicationKnowledge_monograph.Reshape),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, MedicationKnowledge_ingredient.Reshape),
        #"intendedRoute" = if r[#"intendedRoute"]? = null then null else List.Transform(r[#"intendedRoute"]?, CodeableConcept.Reshape),
        #"cost" = if r[#"cost"]? = null then null else List.Transform(r[#"cost"]?, MedicationKnowledge_cost.Reshape),
        #"monitoringProgram" = if r[#"monitoringProgram"]? = null then null else List.Transform(r[#"monitoringProgram"]?, MedicationKnowledge_monitoringProgram.Reshape),
        #"administrationGuidelines" = if r[#"administrationGuidelines"]? = null then null else List.Transform(r[#"administrationGuidelines"]?, MedicationKnowledge_administrationGuidelines.Reshape),
        #"medicineClassification" = if r[#"medicineClassification"]? = null then null else List.Transform(r[#"medicineClassification"]?, MedicationKnowledge_medicineClassification.Reshape),
        #"packaging" = MedicationKnowledge_packaging.Reshape(r[#"packaging"]?),
        #"drugCharacteristic" = if r[#"drugCharacteristic"]? = null then null else List.Transform(r[#"drugCharacteristic"]?, MedicationKnowledge_drugCharacteristic.Reshape),
        #"contraindication" = if r[#"contraindication"]? = null then null else List.Transform(r[#"contraindication"]?, Reference.Reshape),
        #"regulatory" = if r[#"regulatory"]? = null then null else List.Transform(r[#"regulatory"]?, MedicationKnowledge_regulatory.Reshape),
        #"kinetics" = if r[#"kinetics"]? = null then null else List.Transform(r[#"kinetics"]?, MedicationKnowledge_kinetics.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReported = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reportedBoolean", "reportedReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reportedBoolean", "reportedReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reportedBoolean", "boolean"}, { "reportedReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reported = null ] else choicesRemoved & [ reported = choiceRecord ],
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"performerType" = CodeableConcept.Reshape(r[#"performerType"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"courseOfTherapyType" = CodeableConcept.Reshape(r[#"courseOfTherapyType"]?),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, Dosage.Reshape),
        #"dispenseRequest" = MedicationRequest_dispenseRequest.Reshape(r[#"dispenseRequest"]?),
        #"substitution" = MedicationRequest_substitution.Reshape(r[#"substitution"]?),
        #"priorPrescription" = Reference.Reshape(r[#"priorPrescription"]?),
        #"detectedIssue" = if r[#"detectedIssue"]? = null then null else List.Transform(r[#"detectedIssue"]?, Reference.Reshape),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          ReshapeReported(
            childrenReshaped)),

  MedicationStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"statusReason" = if r[#"statusReason"]? = null then null else List.Transform(r[#"statusReason"]?, CodeableConcept.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"informationSource" = Reference.Reshape(r[#"informationSource"]?),
        #"derivedFrom" = if r[#"derivedFrom"]? = null then null else List.Transform(r[#"derivedFrom"]?, Reference.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, Dosage.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          ReshapeMedication(
            childrenReshaped)),

  MedicinalProduct.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"domain" = Coding.Reshape(r[#"domain"]?),
        #"combinedPharmaceuticalDoseForm" = CodeableConcept.Reshape(r[#"combinedPharmaceuticalDoseForm"]?),
        #"legalStatusOfSupply" = CodeableConcept.Reshape(r[#"legalStatusOfSupply"]?),
        #"additionalMonitoringIndicator" = CodeableConcept.Reshape(r[#"additionalMonitoringIndicator"]?),
        #"paediatricUseIndicator" = CodeableConcept.Reshape(r[#"paediatricUseIndicator"]?),
        #"productClassification" = if r[#"productClassification"]? = null then null else List.Transform(r[#"productClassification"]?, CodeableConcept.Reshape),
        #"marketingStatus" = if r[#"marketingStatus"]? = null then null else List.Transform(r[#"marketingStatus"]?, MarketingStatus.Reshape),
        #"pharmaceuticalProduct" = if r[#"pharmaceuticalProduct"]? = null then null else List.Transform(r[#"pharmaceuticalProduct"]?, Reference.Reshape),
        #"packagedMedicinalProduct" = if r[#"packagedMedicinalProduct"]? = null then null else List.Transform(r[#"packagedMedicinalProduct"]?, Reference.Reshape),
        #"attachedDocument" = if r[#"attachedDocument"]? = null then null else List.Transform(r[#"attachedDocument"]?, Reference.Reshape),
        #"masterFile" = if r[#"masterFile"]? = null then null else List.Transform(r[#"masterFile"]?, Reference.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Reference.Reshape),
        #"clinicalTrial" = if r[#"clinicalTrial"]? = null then null else List.Transform(r[#"clinicalTrial"]?, Reference.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, MedicinalProduct_name.Reshape),
        #"crossReference" = if r[#"crossReference"]? = null then null else List.Transform(r[#"crossReference"]?, Identifier.Reshape),
        #"manufacturingBusinessOperation" = if r[#"manufacturingBusinessOperation"]? = null then null else List.Transform(r[#"manufacturingBusinessOperation"]?, MedicinalProduct_manufacturingBusinessOperation.Reshape),
        #"specialDesignation" = if r[#"specialDesignation"]? = null then null else List.Transform(r[#"specialDesignation"]?, MedicinalProduct_specialDesignation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductAuthorization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"country" = if r[#"country"]? = null then null else List.Transform(r[#"country"]?, CodeableConcept.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?),
        #"dataExclusivityPeriod" = Period.Reshape(r[#"dataExclusivityPeriod"]?),
        #"legalBasis" = CodeableConcept.Reshape(r[#"legalBasis"]?),
        #"jurisdictionalAuthorization" = if r[#"jurisdictionalAuthorization"]? = null then null else List.Transform(r[#"jurisdictionalAuthorization"]?, MedicinalProductAuthorization_jurisdictionalAuthorization.Reshape),
        #"holder" = Reference.Reshape(r[#"holder"]?),
        #"regulator" = Reference.Reshape(r[#"regulator"]?),
        #"procedure" = MedicinalProductAuthorization_procedure.Reshape(r[#"procedure"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductContraindication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"disease" = CodeableConcept.Reshape(r[#"disease"]?),
        #"diseaseStatus" = CodeableConcept.Reshape(r[#"diseaseStatus"]?),
        #"comorbidity" = if r[#"comorbidity"]? = null then null else List.Transform(r[#"comorbidity"]?, CodeableConcept.Reshape),
        #"therapeuticIndication" = if r[#"therapeuticIndication"]? = null then null else List.Transform(r[#"therapeuticIndication"]?, Reference.Reshape),
        #"otherTherapy" = if r[#"otherTherapy"]? = null then null else List.Transform(r[#"otherTherapy"]?, MedicinalProductContraindication_otherTherapy.Reshape),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, Population.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductIndication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"diseaseSymptomProcedure" = CodeableConcept.Reshape(r[#"diseaseSymptomProcedure"]?),
        #"diseaseStatus" = CodeableConcept.Reshape(r[#"diseaseStatus"]?),
        #"comorbidity" = if r[#"comorbidity"]? = null then null else List.Transform(r[#"comorbidity"]?, CodeableConcept.Reshape),
        #"intendedEffect" = CodeableConcept.Reshape(r[#"intendedEffect"]?),
        #"duration" = Quantity.Reshape(r[#"duration"]?),
        #"otherTherapy" = if r[#"otherTherapy"]? = null then null else List.Transform(r[#"otherTherapy"]?, MedicinalProductIndication_otherTherapy.Reshape),
        #"undesirableEffect" = if r[#"undesirableEffect"]? = null then null else List.Transform(r[#"undesirableEffect"]?, Reference.Reshape),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, Population.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductIngredient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"manufacturer" = if r[#"manufacturer"]? = null then null else List.Transform(r[#"manufacturer"]?, Reference.Reshape),
        #"specifiedSubstance" = if r[#"specifiedSubstance"]? = null then null else List.Transform(r[#"specifiedSubstance"]?, MedicinalProductIngredient_specifiedSubstance.Reshape),
        #"substance" = MedicinalProductIngredient_substance.Reshape(r[#"substance"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductInteraction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"interactant" = if r[#"interactant"]? = null then null else List.Transform(r[#"interactant"]?, MedicinalProductInteraction_interactant.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"effect" = CodeableConcept.Reshape(r[#"effect"]?),
        #"incidence" = CodeableConcept.Reshape(r[#"incidence"]?),
        #"management" = CodeableConcept.Reshape(r[#"management"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductManufactured.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"manufacturedDoseForm" = CodeableConcept.Reshape(r[#"manufacturedDoseForm"]?),
        #"unitOfPresentation" = CodeableConcept.Reshape(r[#"unitOfPresentation"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"manufacturer" = if r[#"manufacturer"]? = null then null else List.Transform(r[#"manufacturer"]?, Reference.Reshape),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Reference.Reshape),
        #"physicalCharacteristics" = ProdCharacteristic.Reshape(r[#"physicalCharacteristics"]?),
        #"otherCharacteristics" = if r[#"otherCharacteristics"]? = null then null else List.Transform(r[#"otherCharacteristics"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPackaged.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"legalStatusOfSupply" = CodeableConcept.Reshape(r[#"legalStatusOfSupply"]?),
        #"marketingStatus" = if r[#"marketingStatus"]? = null then null else List.Transform(r[#"marketingStatus"]?, MarketingStatus.Reshape),
        #"marketingAuthorization" = Reference.Reshape(r[#"marketingAuthorization"]?),
        #"manufacturer" = if r[#"manufacturer"]? = null then null else List.Transform(r[#"manufacturer"]?, Reference.Reshape),
        #"batchIdentifier" = if r[#"batchIdentifier"]? = null then null else List.Transform(r[#"batchIdentifier"]?, MedicinalProductPackaged_batchIdentifier.Reshape),
        #"packageItem" = if r[#"packageItem"]? = null then null else List.Transform(r[#"packageItem"]?, MedicinalProductPackaged_packageItem.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductPharmaceutical.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"administrableDoseForm" = CodeableConcept.Reshape(r[#"administrableDoseForm"]?),
        #"unitOfPresentation" = CodeableConcept.Reshape(r[#"unitOfPresentation"]?),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Reference.Reshape),
        #"device" = if r[#"device"]? = null then null else List.Transform(r[#"device"]?, Reference.Reshape),
        #"characteristics" = if r[#"characteristics"]? = null then null else List.Transform(r[#"characteristics"]?, MedicinalProductPharmaceutical_characteristics.Reshape),
        #"routeOfAdministration" = if r[#"routeOfAdministration"]? = null then null else List.Transform(r[#"routeOfAdministration"]?, MedicinalProductPharmaceutical_routeOfAdministration.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicinalProductUndesirableEffect.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"symptomConditionEffect" = CodeableConcept.Reshape(r[#"symptomConditionEffect"]?),
        #"classification" = CodeableConcept.Reshape(r[#"classification"]?),
        #"frequencyOfOccurrence" = CodeableConcept.Reshape(r[#"frequencyOfOccurrence"]?),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, Population.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEvent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "eventCoding", "eventUri"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "eventCoding", "eventUri" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "eventCoding", "Coding"}, { "eventUri", "uri"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ event = null ] else choicesRemoved & [ event = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, MessageDefinition_focus.Reshape),
        #"allowedResponse" = if r[#"allowedResponse"]? = null then null else List.Transform(r[#"allowedResponse"]?, MessageDefinition_allowedResponse.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEvent(
          childrenReshaped),

  MessageHeader.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEvent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "eventCoding", "eventUri"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "eventCoding", "eventUri" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "eventCoding", "Coding"}, { "eventUri", "uri"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ event = null ] else choicesRemoved & [ event = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"destination" = if r[#"destination"]? = null then null else List.Transform(r[#"destination"]?, MessageHeader_destination.Reshape),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"source" = MessageHeader_source.Reshape(r[#"source"]?),
        #"responsible" = Reference.Reshape(r[#"responsible"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"response" = MessageHeader_response.Reshape(r[#"response"]?),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEvent(
          childrenReshaped),

  Meta.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"security" = if r[#"security"]? = null then null else List.Transform(r[#"security"]?, Coding.Reshape),
        #"tag" = if r[#"tag"]? = null then null else List.Transform(r[#"tag"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MetadataResource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MolecularSequence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"specimen" = Reference.Reshape(r[#"specimen"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"referenceSeq" = MolecularSequence_referenceSeq.Reshape(r[#"referenceSeq"]?),
        #"variant" = if r[#"variant"]? = null then null else List.Transform(r[#"variant"]?, MolecularSequence_variant.Reshape),
        #"quality" = if r[#"quality"]? = null then null else List.Transform(r[#"quality"]?, MolecularSequence_quality.Reshape),
        #"repository" = if r[#"repository"]? = null then null else List.Transform(r[#"repository"]?, MolecularSequence_repository.Reshape),
        #"pointer" = if r[#"pointer"]? = null then null else List.Transform(r[#"pointer"]?, Reference.Reshape),
        #"structureVariant" = if r[#"structureVariant"]? = null then null else List.Transform(r[#"structureVariant"]?, MolecularSequence_structureVariant.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Money.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MoneyQuantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"uniqueId" = if r[#"uniqueId"]? = null then null else List.Transform(r[#"uniqueId"]?, NamingSystem_uniqueId.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Narrative.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"orderer" = Reference.Reshape(r[#"orderer"]?),
        #"allergyIntolerance" = if r[#"allergyIntolerance"]? = null then null else List.Transform(r[#"allergyIntolerance"]?, Reference.Reshape),
        #"foodPreferenceModifier" = if r[#"foodPreferenceModifier"]? = null then null else List.Transform(r[#"foodPreferenceModifier"]?, CodeableConcept.Reshape),
        #"excludeFoodModifier" = if r[#"excludeFoodModifier"]? = null then null else List.Transform(r[#"excludeFoodModifier"]?, CodeableConcept.Reshape),
        #"oralDiet" = NutritionOrder_oralDiet.Reshape(r[#"oralDiet"]?),
        #"supplement" = if r[#"supplement"]? = null then null else List.Transform(r[#"supplement"]?, NutritionOrder_supplement.Reshape),
        #"enteralFormula" = NutritionOrder_enteralFormula.Reshape(r[#"enteralFormula"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod", "effectiveTiming", "effectiveInstant"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod", "effectiveTiming", "effectiveInstant" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"}, { "effectiveTiming", "Timing"}, { "effectiveInstant", "instant"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueInteger", "valueRange", "valueRatio", "valueSampledData", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueInteger", "valueRange", "valueRatio", "valueSampledData", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, Reference.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"interpretation" = if r[#"interpretation"]? = null then null else List.Transform(r[#"interpretation"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"specimen" = Reference.Reshape(r[#"specimen"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape),
        #"hasMember" = if r[#"hasMember"]? = null then null else List.Transform(r[#"hasMember"]?, Reference.Reshape),
        #"derivedFrom" = if r[#"derivedFrom"]? = null then null else List.Transform(r[#"derivedFrom"]?, Reference.Reshape),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, Observation_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeEffective(
            childrenReshaped)),

  ObservationDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"quantitativeDetails" = ObservationDefinition_quantitativeDetails.Reshape(r[#"quantitativeDetails"]?),
        #"qualifiedInterval" = if r[#"qualifiedInterval"]? = null then null else List.Transform(r[#"qualifiedInterval"]?, ObservationDefinition_qualifiedInterval.Reshape),
        #"validCodedValueSet" = Reference.Reshape(r[#"validCodedValueSet"]?),
        #"normalCodedValueSet" = Reference.Reshape(r[#"normalCodedValueSet"]?),
        #"abnormalCodedValueSet" = Reference.Reshape(r[#"abnormalCodedValueSet"]?),
        #"criticalCodedValueSet" = Reference.Reshape(r[#"criticalCodedValueSet"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, OperationDefinition_parameter.Reshape),
        #"overload" = if r[#"overload"]? = null then null else List.Transform(r[#"overload"]?, OperationDefinition_overload.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationOutcome.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"issue" = if r[#"issue"]? = null then null else List.Transform(r[#"issue"]?, OperationOutcome_issue.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"partOf" = Reference.Reshape(r[#"partOf"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Organization_contact.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OrganizationAffiliation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"participatingOrganization" = Reference.Reshape(r[#"participatingOrganization"]?),
        #"network" = if r[#"network"]? = null then null else List.Transform(r[#"network"]?, Reference.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"healthcareService" = if r[#"healthcareService"]? = null then null else List.Transform(r[#"healthcareService"]?, Reference.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ParameterDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      ReshapeMultipleBirth = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "multipleBirthBoolean", "multipleBirthInteger"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "multipleBirthBoolean", "multipleBirthInteger" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "multipleBirthBoolean", "boolean"}, { "multipleBirthInteger", "integer"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ multipleBirth = null ] else choicesRemoved & [ multipleBirth = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"maritalStatus" = CodeableConcept.Reshape(r[#"maritalStatus"]?),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Patient_contact.Reshape),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, Patient_communication.Reshape),
        #"generalPractitioner" = if r[#"generalPractitioner"]? = null then null else List.Transform(r[#"generalPractitioner"]?, Reference.Reshape),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Patient_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMultipleBirth(
          ReshapeDeceased(
            childrenReshaped)),

  PaymentNotice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"payment" = Reference.Reshape(r[#"payment"]?),
        #"payee" = Reference.Reshape(r[#"payee"]?),
        #"recipient" = Reference.Reshape(r[#"recipient"]?),
        #"amount" = Money.Reshape(r[#"amount"]?),
        #"paymentStatus" = CodeableConcept.Reshape(r[#"paymentStatus"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"paymentIssuer" = Reference.Reshape(r[#"paymentIssuer"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"requestor" = Reference.Reshape(r[#"requestor"]?),
        #"paymentAmount" = Money.Reshape(r[#"paymentAmount"]?),
        #"paymentIdentifier" = Identifier.Reshape(r[#"paymentIdentifier"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, PaymentReconciliation_detail.Reshape),
        #"formCode" = CodeableConcept.Reshape(r[#"formCode"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, PaymentReconciliation_processNote.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Period.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Person_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, PlanDefinition_goal.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, PlanDefinition_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  Population.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAge = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "ageRange", "ageCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "ageRange", "ageCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "ageRange", "Range"}, { "ageCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ age = null ] else choicesRemoved & [ age = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"gender" = CodeableConcept.Reshape(r[#"gender"]?),
        #"race" = CodeableConcept.Reshape(r[#"race"]?),
        #"physiologicalCondition" = CodeableConcept.Reshape(r[#"physiologicalCondition"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAge(
          childrenReshaped),

  Practitioner.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"qualification" = if r[#"qualification"]? = null then null else List.Transform(r[#"qualification"]?, Practitioner_qualification.Reshape),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"practitioner" = Reference.Reshape(r[#"practitioner"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"healthcareService" = if r[#"healthcareService"]? = null then null else List.Transform(r[#"healthcareService"]?, Reference.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"availableTime" = if r[#"availableTime"]? = null then null else List.Transform(r[#"availableTime"]?, PractitionerRole_availableTime.Reshape),
        #"notAvailable" = if r[#"notAvailable"]? = null then null else List.Transform(r[#"notAvailable"]?, PractitionerRole_notAvailable.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapePerformed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "performedDateTime", "performedPeriod", "performedString", "performedAge", "performedRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "performedDateTime", "performedPeriod", "performedString", "performedAge", "performedRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "performedDateTime", "dateTime"}, { "performedPeriod", "Period"}, { "performedString", "string"}, { "performedAge", "Age"}, { "performedRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ performed = null ] else choicesRemoved & [ performed = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Procedure_performer.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"report" = if r[#"report"]? = null then null else List.Transform(r[#"report"]?, Reference.Reshape),
        #"complication" = if r[#"complication"]? = null then null else List.Transform(r[#"complication"]?, CodeableConcept.Reshape),
        #"complicationDetail" = if r[#"complicationDetail"]? = null then null else List.Transform(r[#"complicationDetail"]?, Reference.Reshape),
        #"followUp" = if r[#"followUp"]? = null then null else List.Transform(r[#"followUp"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"focalDevice" = if r[#"focalDevice"]? = null then null else List.Transform(r[#"focalDevice"]?, Procedure_focalDevice.Reshape),
        #"usedReference" = if r[#"usedReference"]? = null then null else List.Transform(r[#"usedReference"]?, Reference.Reshape),
        #"usedCode" = if r[#"usedCode"]? = null then null else List.Transform(r[#"usedCode"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapePerformed(
          childrenReshaped),

  ProdCharacteristic.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"height" = Quantity.Reshape(r[#"height"]?),
        #"width" = Quantity.Reshape(r[#"width"]?),
        #"depth" = Quantity.Reshape(r[#"depth"]?),
        #"weight" = Quantity.Reshape(r[#"weight"]?),
        #"nominalVolume" = Quantity.Reshape(r[#"nominalVolume"]?),
        #"externalDiameter" = Quantity.Reshape(r[#"externalDiameter"]?),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, Attachment.Reshape),
        #"scoring" = CodeableConcept.Reshape(r[#"scoring"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProductShelfLife.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"period" = Quantity.Reshape(r[#"period"]?),
        #"specialPrecautionsForStorage" = if r[#"specialPrecautionsForStorage"]? = null then null else List.Transform(r[#"specialPrecautionsForStorage"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurred = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurredPeriod", "occurredDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurredPeriod", "occurredDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurredPeriod", "Period"}, { "occurredDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurred = null ] else choicesRemoved & [ occurred = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, Reference.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"activity" = CodeableConcept.Reshape(r[#"activity"]?),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Provenance_agent.Reshape),
        #"entity" = if r[#"entity"]? = null then null else List.Transform(r[#"entity"]?, Provenance_entity.Reshape),
        #"signature" = if r[#"signature"]? = null then null else List.Transform(r[#"signature"]?, Signature.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurred(
          childrenReshaped),

  Quantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Questionnaire_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Range.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Ratio.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"numerator" = Quantity.Reshape(r[#"numerator"]?),
        #"denominator" = Quantity.Reshape(r[#"denominator"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Reference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RelatedArtifact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"document" = Attachment.Reshape(r[#"document"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RelatedPerson.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = if r[#"relationship"]? = null then null else List.Transform(r[#"relationship"]?, CodeableConcept.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, RelatedPerson_communication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, RequestGroup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ResearchDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"population" = Reference.Reshape(r[#"population"]?),
        #"exposure" = Reference.Reshape(r[#"exposure"]?),
        #"exposureAlternative" = Reference.Reshape(r[#"exposureAlternative"]?),
        #"outcome" = Reference.Reshape(r[#"outcome"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  ResearchElementDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubject = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "subjectCodeableConcept", "subjectReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "subjectCodeableConcept", "subjectReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "subjectCodeableConcept", "CodeableConcept"}, { "subjectReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ subject = null ] else choicesRemoved & [ subject = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, ResearchElementDefinition_characteristic.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubject(
          childrenReshaped),

  ResearchStudy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"protocol" = if r[#"protocol"]? = null then null else List.Transform(r[#"protocol"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"primaryPurposeType" = CodeableConcept.Reshape(r[#"primaryPurposeType"]?),
        #"phase" = CodeableConcept.Reshape(r[#"phase"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, CodeableConcept.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, CodeableConcept.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"keyword" = if r[#"keyword"]? = null then null else List.Transform(r[#"keyword"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, CodeableConcept.Reshape),
        #"enrollment" = if r[#"enrollment"]? = null then null else List.Transform(r[#"enrollment"]?, Reference.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"sponsor" = Reference.Reshape(r[#"sponsor"]?),
        #"principalInvestigator" = Reference.Reshape(r[#"principalInvestigator"]?),
        #"site" = if r[#"site"]? = null then null else List.Transform(r[#"site"]?, Reference.Reshape),
        #"reasonStopped" = CodeableConcept.Reshape(r[#"reasonStopped"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"arm" = if r[#"arm"]? = null then null else List.Transform(r[#"arm"]?, ResearchStudy_arm.Reshape),
        #"objective" = if r[#"objective"]? = null then null else List.Transform(r[#"objective"]?, ResearchStudy_objective.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ResearchSubject.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"study" = Reference.Reshape(r[#"study"]?),
        #"individual" = Reference.Reshape(r[#"individual"]?),
        #"consent" = Reference.Reshape(r[#"consent"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskAssessment.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = Reference.Reshape(r[#"basedOn"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"basis" = if r[#"basis"]? = null then null else List.Transform(r[#"basis"]?, Reference.Reshape),
        #"prediction" = if r[#"prediction"]? = null then null else List.Transform(r[#"prediction"]?, RiskAssessment_prediction.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  RiskEvidenceSynthesis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, ContactDetail.Reshape),
        #"editor" = if r[#"editor"]? = null then null else List.Transform(r[#"editor"]?, ContactDetail.Reshape),
        #"reviewer" = if r[#"reviewer"]? = null then null else List.Transform(r[#"reviewer"]?, ContactDetail.Reshape),
        #"endorser" = if r[#"endorser"]? = null then null else List.Transform(r[#"endorser"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"synthesisType" = CodeableConcept.Reshape(r[#"synthesisType"]?),
        #"studyType" = CodeableConcept.Reshape(r[#"studyType"]?),
        #"population" = Reference.Reshape(r[#"population"]?),
        #"exposure" = Reference.Reshape(r[#"exposure"]?),
        #"outcome" = Reference.Reshape(r[#"outcome"]?),
        #"sampleSize" = RiskEvidenceSynthesis_sampleSize.Reshape(r[#"sampleSize"]?),
        #"riskEstimate" = RiskEvidenceSynthesis_riskEstimate.Reshape(r[#"riskEstimate"]?),
        #"certainty" = if r[#"certainty"]? = null then null else List.Transform(r[#"certainty"]?, RiskEvidenceSynthesis_certainty.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SampledData.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"origin" = Quantity.Reshape(r[#"origin"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Schedule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"serviceCategory" = if r[#"serviceCategory"]? = null then null else List.Transform(r[#"serviceCategory"]?, CodeableConcept.Reshape),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Reference.Reshape),
        #"planningHorizon" = Period.Reshape(r[#"planningHorizon"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SearchParameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, SearchParameter_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ServiceRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeQuantity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "quantityQuantity", "quantityRatio", "quantityRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "quantityQuantity", "quantityRatio", "quantityRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "quantityQuantity", "Quantity"}, { "quantityRatio", "Ratio"}, { "quantityRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ quantity = null ] else choicesRemoved & [ quantity = choiceRecord ],
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"requisition" = Identifier.Reshape(r[#"requisition"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"orderDetail" = if r[#"orderDetail"]? = null then null else List.Transform(r[#"orderDetail"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"performerType" = CodeableConcept.Reshape(r[#"performerType"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"locationCode" = if r[#"locationCode"]? = null then null else List.Transform(r[#"locationCode"]?, CodeableConcept.Reshape),
        #"locationReference" = if r[#"locationReference"]? = null then null else List.Transform(r[#"locationReference"]?, Reference.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAsNeeded(
          ReshapeOccurrence(
            ReshapeQuantity(
              childrenReshaped))),

  Signature.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape),
        #"who" = Reference.Reshape(r[#"who"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SimpleQuantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Slot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"serviceCategory" = if r[#"serviceCategory"]? = null then null else List.Transform(r[#"serviceCategory"]?, CodeableConcept.Reshape),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"appointmentType" = CodeableConcept.Reshape(r[#"appointmentType"]?),
        #"schedule" = Reference.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"accessionIdentifier" = Identifier.Reshape(r[#"accessionIdentifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"request" = if r[#"request"]? = null then null else List.Transform(r[#"request"]?, Reference.Reshape),
        #"collection" = Specimen_collection.Reshape(r[#"collection"]?),
        #"processing" = if r[#"processing"]? = null then null else List.Transform(r[#"processing"]?, Specimen_processing.Reshape),
        #"container" = if r[#"container"]? = null then null else List.Transform(r[#"container"]?, Specimen_container.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SpecimenDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"typeCollected" = CodeableConcept.Reshape(r[#"typeCollected"]?),
        #"patientPreparation" = if r[#"patientPreparation"]? = null then null else List.Transform(r[#"patientPreparation"]?, CodeableConcept.Reshape),
        #"collection" = if r[#"collection"]? = null then null else List.Transform(r[#"collection"]?, CodeableConcept.Reshape),
        #"typeTested" = if r[#"typeTested"]? = null then null else List.Transform(r[#"typeTested"]?, SpecimenDefinition_typeTested.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"keyword" = if r[#"keyword"]? = null then null else List.Transform(r[#"keyword"]?, Coding.Reshape),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, StructureDefinition_mapping.Reshape),
        #"context" = if r[#"context"]? = null then null else List.Transform(r[#"context"]?, StructureDefinition_context.Reshape),
        #"snapshot" = StructureDefinition_snapshot.Reshape(r[#"snapshot"]?),
        #"differential" = StructureDefinition_differential.Reshape(r[#"differential"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"structure" = if r[#"structure"]? = null then null else List.Transform(r[#"structure"]?, StructureMap_structure.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, StructureMap_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"channel" = Subscription_channel.Reshape(r[#"channel"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, Substance_instance.Reshape),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Substance_ingredient.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceAmount.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAmount = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "amountQuantity", "amountRange", "amountString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "amountQuantity", "amountRange", "amountString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "amountQuantity", "Quantity"}, { "amountRange", "Range"}, { "amountString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ amount = null ] else choicesRemoved & [ amount = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"amountType" = CodeableConcept.Reshape(r[#"amountType"]?),
        #"referenceRange" = SubstanceAmount_referenceRange.Reshape(r[#"referenceRange"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAmount(
          childrenReshaped),

  SubstanceNucleicAcid.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sequenceType" = CodeableConcept.Reshape(r[#"sequenceType"]?),
        #"oligoNucleotideType" = CodeableConcept.Reshape(r[#"oligoNucleotideType"]?),
        #"subunit" = if r[#"subunit"]? = null then null else List.Transform(r[#"subunit"]?, SubstanceNucleicAcid_subunit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstancePolymer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"geometry" = CodeableConcept.Reshape(r[#"geometry"]?),
        #"copolymerConnectivity" = if r[#"copolymerConnectivity"]? = null then null else List.Transform(r[#"copolymerConnectivity"]?, CodeableConcept.Reshape),
        #"monomerSet" = if r[#"monomerSet"]? = null then null else List.Transform(r[#"monomerSet"]?, SubstancePolymer_monomerSet.Reshape),
        #"repeat" = if r[#"repeat"]? = null then null else List.Transform(r[#"repeat"]?, SubstancePolymer_repeat.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceProtein.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sequenceType" = CodeableConcept.Reshape(r[#"sequenceType"]?),
        #"subunit" = if r[#"subunit"]? = null then null else List.Transform(r[#"subunit"]?, SubstanceProtein_subunit.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceReferenceInformation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"gene" = if r[#"gene"]? = null then null else List.Transform(r[#"gene"]?, SubstanceReferenceInformation_gene.Reshape),
        #"geneElement" = if r[#"geneElement"]? = null then null else List.Transform(r[#"geneElement"]?, SubstanceReferenceInformation_geneElement.Reshape),
        #"classification" = if r[#"classification"]? = null then null else List.Transform(r[#"classification"]?, SubstanceReferenceInformation_classification.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, SubstanceReferenceInformation_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSourceMaterial.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"sourceMaterialClass" = CodeableConcept.Reshape(r[#"sourceMaterialClass"]?),
        #"sourceMaterialType" = CodeableConcept.Reshape(r[#"sourceMaterialType"]?),
        #"sourceMaterialState" = CodeableConcept.Reshape(r[#"sourceMaterialState"]?),
        #"organismId" = Identifier.Reshape(r[#"organismId"]?),
        #"parentSubstanceId" = if r[#"parentSubstanceId"]? = null then null else List.Transform(r[#"parentSubstanceId"]?, Identifier.Reshape),
        #"countryOfOrigin" = if r[#"countryOfOrigin"]? = null then null else List.Transform(r[#"countryOfOrigin"]?, CodeableConcept.Reshape),
        #"developmentStage" = CodeableConcept.Reshape(r[#"developmentStage"]?),
        #"fractionDescription" = if r[#"fractionDescription"]? = null then null else List.Transform(r[#"fractionDescription"]?, SubstanceSourceMaterial_fractionDescription.Reshape),
        #"organism" = SubstanceSourceMaterial_organism.Reshape(r[#"organism"]?),
        #"partDescription" = if r[#"partDescription"]? = null then null else List.Transform(r[#"partDescription"]?, SubstanceSourceMaterial_partDescription.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SubstanceSpecification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"status" = CodeableConcept.Reshape(r[#"status"]?),
        #"domain" = CodeableConcept.Reshape(r[#"domain"]?),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, Reference.Reshape),
        #"moiety" = if r[#"moiety"]? = null then null else List.Transform(r[#"moiety"]?, SubstanceSpecification_moiety.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, SubstanceSpecification_property.Reshape),
        #"referenceInformation" = Reference.Reshape(r[#"referenceInformation"]?),
        #"structure" = SubstanceSpecification_structure.Reshape(r[#"structure"]?),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, SubstanceSpecification_code.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, SubstanceSpecification_name.Reshape),
        #"relationship" = if r[#"relationship"]? = null then null else List.Transform(r[#"relationship"]?, SubstanceSpecification_relationship.Reshape),
        #"nucleicAcid" = Reference.Reshape(r[#"nucleicAcid"]?),
        #"polymer" = Reference.Reshape(r[#"polymer"]?),
        #"protein" = Reference.Reshape(r[#"protein"]?),
        #"sourceMaterial" = Reference.Reshape(r[#"sourceMaterial"]?),
        #"molecularWeight" = if r[#"molecularWeight"]? = null then null else List.Transform(r[#"molecularWeight"]?, SubstanceSpecification_molecularWeight.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SupplyDelivery.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"suppliedItem" = SupplyDelivery_suppliedItem.Reshape(r[#"suppliedItem"]?),
        #"supplier" = Reference.Reshape(r[#"supplier"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  SupplyRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, SupplyRequest_parameter.Reshape),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"supplier" = if r[#"supplier"]? = null then null else List.Transform(r[#"supplier"]?, Reference.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"deliverFrom" = Reference.Reshape(r[#"deliverFrom"]?),
        #"deliverTo" = Reference.Reshape(r[#"deliverTo"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          ReshapeItem(
            childrenReshaped)),

  Task.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"businessStatus" = CodeableConcept.Reshape(r[#"businessStatus"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"focus" = Reference.Reshape(r[#"focus"]?),
        #"for" = Reference.Reshape(r[#"for"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"executionPeriod" = Period.Reshape(r[#"executionPeriod"]?),
        #"requester" = Reference.Reshape(r[#"requester"]?),
        #"performerType" = if r[#"performerType"]? = null then null else List.Transform(r[#"performerType"]?, CodeableConcept.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reasonCode" = CodeableConcept.Reshape(r[#"reasonCode"]?),
        #"reasonReference" = Reference.Reshape(r[#"reasonReference"]?),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape),
        #"restriction" = Task_restriction.Reshape(r[#"restriction"]?),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, Task_input.Reshape),
        #"output" = if r[#"output"]? = null then null else List.Transform(r[#"output"]?, Task_output.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TerminologyCapabilities.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"software" = TerminologyCapabilities_software.Reshape(r[#"software"]?),
        #"implementation" = TerminologyCapabilities_implementation.Reshape(r[#"implementation"]?),
        #"codeSystem" = if r[#"codeSystem"]? = null then null else List.Transform(r[#"codeSystem"]?, TerminologyCapabilities_codeSystem.Reshape),
        #"expansion" = TerminologyCapabilities_expansion.Reshape(r[#"expansion"]?),
        #"validateCode" = TerminologyCapabilities_validateCode.Reshape(r[#"validateCode"]?),
        #"translation" = TerminologyCapabilities_translation.Reshape(r[#"translation"]?),
        #"closure" = TerminologyCapabilities_closure.Reshape(r[#"closure"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"testScript" = Reference.Reshape(r[#"testScript"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, TestReport_participant.Reshape),
        #"setup" = TestReport_setup.Reshape(r[#"setup"]?),
        #"test" = if r[#"test"]? = null then null else List.Transform(r[#"test"]?, TestReport_test.Reshape),
        #"teardown" = TestReport_teardown.Reshape(r[#"teardown"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"origin" = if r[#"origin"]? = null then null else List.Transform(r[#"origin"]?, TestScript_origin.Reshape),
        #"destination" = if r[#"destination"]? = null then null else List.Transform(r[#"destination"]?, TestScript_destination.Reshape),
        #"metadata" = TestScript_metadata.Reshape(r[#"metadata"]?),
        #"fixture" = if r[#"fixture"]? = null then null else List.Transform(r[#"fixture"]?, TestScript_fixture.Reshape),
        #"profile" = if r[#"profile"]? = null then null else List.Transform(r[#"profile"]?, Reference.Reshape),
        #"variable" = if r[#"variable"]? = null then null else List.Transform(r[#"variable"]?, TestScript_variable.Reshape),
        #"setup" = TestScript_setup.Reshape(r[#"setup"]?),
        #"test" = if r[#"test"]? = null then null else List.Transform(r[#"test"]?, TestScript_test.Reshape),
        #"teardown" = TestScript_teardown.Reshape(r[#"teardown"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Timing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"repeat" = Timing_repeat.Reshape(r[#"repeat"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TriggerDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingReference", "timingDate", "timingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingReference", "timingDate", "timingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingReference", "Reference"}, { "timingDate", "date"}, { "timingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"data" = if r[#"data"]? = null then null else List.Transform(r[#"data"]?, DataRequirement.Reshape),
        #"condition" = Expression.Reshape(r[#"condition"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  UsageContext.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ValueSet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"compose" = ValueSet_compose.Reshape(r[#"compose"]?),
        #"expansion" = ValueSet_expansion.Reshape(r[#"expansion"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VerificationResult.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, Reference.Reshape),
        #"need" = CodeableConcept.Reshape(r[#"need"]?),
        #"validationType" = CodeableConcept.Reshape(r[#"validationType"]?),
        #"validationProcess" = if r[#"validationProcess"]? = null then null else List.Transform(r[#"validationProcess"]?, CodeableConcept.Reshape),
        #"frequency" = Timing.Reshape(r[#"frequency"]?),
        #"failureAction" = CodeableConcept.Reshape(r[#"failureAction"]?),
        #"primarySource" = if r[#"primarySource"]? = null then null else List.Transform(r[#"primarySource"]?, VerificationResult_primarySource.Reshape),
        #"attestation" = VerificationResult_attestation.Reshape(r[#"attestation"]?),
        #"validator" = if r[#"validator"]? = null then null else List.Transform(r[#"validator"]?, VerificationResult_validator.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"prescriber" = Reference.Reshape(r[#"prescriber"]?),
        #"lensSpecification" = if r[#"lensSpecification"]? = null then null else List.Transform(r[#"lensSpecification"]?, VisionPrescription_lensSpecification.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped
in
  #table(
    type table [ ResourceTypeName = text, Reshaper = function (r as nullable record) as nullable record ],
    {
      { "Account", Account.Reshape },
      { "ActivityDefinition", ActivityDefinition.Reshape },
      { "AdverseEvent", AdverseEvent.Reshape },
      { "AllergyIntolerance", AllergyIntolerance.Reshape },
      { "Appointment", Appointment.Reshape },
      { "AppointmentResponse", AppointmentResponse.Reshape },
      { "AuditEvent", AuditEvent.Reshape },
      { "Basic", Basic.Reshape },
      { "Binary", Binary.Reshape },
      { "BiologicallyDerivedProduct", BiologicallyDerivedProduct.Reshape },
      { "BodyStructure", BodyStructure.Reshape },
      { "Bundle", Bundle.Reshape },
      { "CapabilityStatement", CapabilityStatement.Reshape },
      { "CarePlan", CarePlan.Reshape },
      { "CareTeam", CareTeam.Reshape },
      { "CatalogEntry", CatalogEntry.Reshape },
      { "ChargeItem", ChargeItem.Reshape },
      { "ChargeItemDefinition", ChargeItemDefinition.Reshape },
      { "Claim", Claim.Reshape },
      { "ClaimResponse", ClaimResponse.Reshape },
      { "ClinicalImpression", ClinicalImpression.Reshape },
      { "CodeSystem", CodeSystem.Reshape },
      { "Communication", Communication.Reshape },
      { "CommunicationRequest", CommunicationRequest.Reshape },
      { "CompartmentDefinition", CompartmentDefinition.Reshape },
      { "Composition", Composition.Reshape },
      { "ConceptMap", ConceptMap.Reshape },
      { "Condition", Condition.Reshape },
      { "Consent", Consent.Reshape },
      { "Contract", Contract.Reshape },
      { "Coverage", Coverage.Reshape },
      { "CoverageEligibilityRequest", CoverageEligibilityRequest.Reshape },
      { "CoverageEligibilityResponse", CoverageEligibilityResponse.Reshape },
      { "DetectedIssue", DetectedIssue.Reshape },
      { "Device", Device.Reshape },
      { "DeviceDefinition", DeviceDefinition.Reshape },
      { "DeviceMetric", DeviceMetric.Reshape },
      { "DeviceRequest", DeviceRequest.Reshape },
      { "DeviceUseStatement", DeviceUseStatement.Reshape },
      { "DiagnosticReport", DiagnosticReport.Reshape },
      { "DocumentManifest", DocumentManifest.Reshape },
      { "DocumentReference", DocumentReference.Reshape },
      { "EffectEvidenceSynthesis", EffectEvidenceSynthesis.Reshape },
      { "Encounter", Encounter.Reshape },
      { "Endpoint", Endpoint.Reshape },
      { "EnrollmentRequest", EnrollmentRequest.Reshape },
      { "EnrollmentResponse", EnrollmentResponse.Reshape },
      { "EpisodeOfCare", EpisodeOfCare.Reshape },
      { "EventDefinition", EventDefinition.Reshape },
      { "Evidence", Evidence.Reshape },
      { "EvidenceVariable", EvidenceVariable.Reshape },
      { "ExampleScenario", ExampleScenario.Reshape },
      { "ExplanationOfBenefit", ExplanationOfBenefit.Reshape },
      { "FamilyMemberHistory", FamilyMemberHistory.Reshape },
      { "Flag", Flag.Reshape },
      { "Goal", Goal.Reshape },
      { "GraphDefinition", GraphDefinition.Reshape },
      { "Group", Group.Reshape },
      { "GuidanceResponse", GuidanceResponse.Reshape },
      { "HealthcareService", HealthcareService.Reshape },
      { "ImagingStudy", ImagingStudy.Reshape },
      { "Immunization", Immunization.Reshape },
      { "ImmunizationEvaluation", ImmunizationEvaluation.Reshape },
      { "ImmunizationRecommendation", ImmunizationRecommendation.Reshape },
      { "ImplementationGuide", ImplementationGuide.Reshape },
      { "InsurancePlan", InsurancePlan.Reshape },
      { "Invoice", Invoice.Reshape },
      { "Library", Library.Reshape },
      { "Linkage", Linkage.Reshape },
      { "List", List.Reshape },
      { "Location", Location.Reshape },
      { "Measure", Measure.Reshape },
      { "MeasureReport", MeasureReport.Reshape },
      { "Media", Media.Reshape },
      { "Medication", Medication.Reshape },
      { "MedicationAdministration", MedicationAdministration.Reshape },
      { "MedicationDispense", MedicationDispense.Reshape },
      { "MedicationKnowledge", MedicationKnowledge.Reshape },
      { "MedicationRequest", MedicationRequest.Reshape },
      { "MedicationStatement", MedicationStatement.Reshape },
      { "MedicinalProduct", MedicinalProduct.Reshape },
      { "MedicinalProductAuthorization", MedicinalProductAuthorization.Reshape },
      { "MedicinalProductContraindication", MedicinalProductContraindication.Reshape },
      { "MedicinalProductIndication", MedicinalProductIndication.Reshape },
      { "MedicinalProductIngredient", MedicinalProductIngredient.Reshape },
      { "MedicinalProductInteraction", MedicinalProductInteraction.Reshape },
      { "MedicinalProductManufactured", MedicinalProductManufactured.Reshape },
      { "MedicinalProductPackaged", MedicinalProductPackaged.Reshape },
      { "MedicinalProductPharmaceutical", MedicinalProductPharmaceutical.Reshape },
      { "MedicinalProductUndesirableEffect", MedicinalProductUndesirableEffect.Reshape },
      { "MessageDefinition", MessageDefinition.Reshape },
      { "MessageHeader", MessageHeader.Reshape },
      { "MolecularSequence", MolecularSequence.Reshape },
      { "NamingSystem", NamingSystem.Reshape },
      { "NutritionOrder", NutritionOrder.Reshape },
      { "Observation", Observation.Reshape },
      { "ObservationDefinition", ObservationDefinition.Reshape },
      { "OperationDefinition", OperationDefinition.Reshape },
      { "OperationOutcome", OperationOutcome.Reshape },
      { "Organization", Organization.Reshape },
      { "OrganizationAffiliation", OrganizationAffiliation.Reshape },
      { "Parameters", Parameters.Reshape },
      { "Patient", Patient.Reshape },
      { "PaymentNotice", PaymentNotice.Reshape },
      { "PaymentReconciliation", PaymentReconciliation.Reshape },
      { "Person", Person.Reshape },
      { "PlanDefinition", PlanDefinition.Reshape },
      { "Practitioner", Practitioner.Reshape },
      { "PractitionerRole", PractitionerRole.Reshape },
      { "Procedure", Procedure.Reshape },
      { "Provenance", Provenance.Reshape },
      { "Questionnaire", Questionnaire.Reshape },
      { "QuestionnaireResponse", QuestionnaireResponse.Reshape },
      { "RelatedPerson", RelatedPerson.Reshape },
      { "RequestGroup", RequestGroup.Reshape },
      { "ResearchDefinition", ResearchDefinition.Reshape },
      { "ResearchElementDefinition", ResearchElementDefinition.Reshape },
      { "ResearchStudy", ResearchStudy.Reshape },
      { "ResearchSubject", ResearchSubject.Reshape },
      { "RiskAssessment", RiskAssessment.Reshape },
      { "RiskEvidenceSynthesis", RiskEvidenceSynthesis.Reshape },
      { "Schedule", Schedule.Reshape },
      { "SearchParameter", SearchParameter.Reshape },
      { "ServiceRequest", ServiceRequest.Reshape },
      { "Slot", Slot.Reshape },
      { "Specimen", Specimen.Reshape },
      { "SpecimenDefinition", SpecimenDefinition.Reshape },
      { "StructureDefinition", StructureDefinition.Reshape },
      { "StructureMap", StructureMap.Reshape },
      { "Subscription", Subscription.Reshape },
      { "Substance", Substance.Reshape },
      { "SubstanceNucleicAcid", SubstanceNucleicAcid.Reshape },
      { "SubstancePolymer", SubstancePolymer.Reshape },
      { "SubstanceProtein", SubstanceProtein.Reshape },
      { "SubstanceReferenceInformation", SubstanceReferenceInformation.Reshape },
      { "SubstanceSourceMaterial", SubstanceSourceMaterial.Reshape },
      { "SubstanceSpecification", SubstanceSpecification.Reshape },
      { "SupplyDelivery", SupplyDelivery.Reshape },
      { "SupplyRequest", SupplyRequest.Reshape },
      { "Task", Task.Reshape },
      { "TerminologyCapabilities", TerminologyCapabilities.Reshape },
      { "TestReport", TestReport.Reshape },
      { "TestScript", TestScript.Reshape },
      { "ValueSet", ValueSet.Reshape },
      { "VerificationResult", VerificationResult.Reshape },
      { "VisionPrescription", VisionPrescription.Reshape }
    })

