//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

let
  Address.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"use" = Text.Type,
    #"type" = Text.Type,
    #"text" = Text.Type,
    #"line" = { Text.Type },
    #"city" = Text.Type,
    #"district" = Text.Type,
    #"state" = Text.Type,
    #"postalCode" = Text.Type,
    #"country" = Text.Type,
    #"period" = Period.Type
  ] meta [ Documentation.Name = "Address.Type" ],

  Age.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "Age.Type" ],

  Annotation.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"author" = [
      #"Reference" = Reference.Type,
      #"string" = Text.Type
    ],
    #"time" = DateTimeZone.Type,
    #"text" = Text.Type
  ] meta [ Documentation.Name = "Annotation.Type" ],

  Attachment.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"contentType" = Text.Type,
    #"language" = Text.Type,
    #"data" = Text.Type,
    #"url" = Uri.Type,
    #"size" = Int32.Type,
    #"hash" = Text.Type,
    #"title" = Text.Type,
    #"creation" = DateTimeZone.Type
  ] meta [ Documentation.Name = "Attachment.Type" ],

  BackboneElement.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type
  ] meta [ Documentation.Name = "BackboneElement.Type" ],

  CodeableConcept.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"coding" = table Coding.Type,
    #"text" = Text.Type
  ] meta [ Documentation.Name = "CodeableConcept.Type" ],

  Coding.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"system" = Uri.Type,
    #"version" = Text.Type,
    #"code" = Text.Type,
    #"display" = Text.Type,
    #"userSelected" = Logical.Type
  ] meta [ Documentation.Name = "Coding.Type" ],

  ContactDetail.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"name" = Text.Type,
    #"telecom" = table ContactPoint.Type
  ] meta [ Documentation.Name = "ContactDetail.Type" ],

  ContactPoint.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"system" = Text.Type,
    #"value" = Text.Type,
    #"use" = Text.Type,
    #"rank" = Int32.Type,
    #"period" = Period.Type
  ] meta [ Documentation.Name = "ContactPoint.Type" ],

  Contributor.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"type" = Text.Type,
    #"name" = Text.Type,
    #"contact" = table ContactDetail.Type
  ] meta [ Documentation.Name = "Contributor.Type" ],

  Count.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "Count.Type" ],

  DataRequirement.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"type" = Text.Type,
    #"profile" = { Uri.Type },
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"mustSupport" = { Text.Type },
    #"codeFilter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"path" = Text.Type,
      #"searchParam" = Text.Type,
      #"valueSet" = Uri.Type,
      #"code" = table Coding.Type
    ],
    #"dateFilter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"path" = Text.Type,
      #"searchParam" = Text.Type,
      #"value" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type
      ]
    ],
    #"limit" = Int32.Type,
    #"sort" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"path" = Text.Type,
      #"direction" = Text.Type
    ]
  ] meta [ Documentation.Name = "DataRequirement.Type" ],

  Distance.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "Distance.Type" ],

  Dosage.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"sequence" = Int32.Type,
    #"text" = Text.Type,
    #"additionalInstruction" = table CodeableConcept.Type,
    #"patientInstruction" = Text.Type,
    #"timing" = Timing.Type,
    #"asNeeded" = [
      #"boolean" = Logical.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"site" = CodeableConcept.Type,
    #"route" = CodeableConcept.Type,
    #"method" = CodeableConcept.Type,
    #"doseAndRate" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"dose" = [
        #"Range" = Range.Type,
        #"Quantity" = Quantity.Type
      ],
      #"rate" = [
        #"Ratio" = Ratio.Type,
        #"Range" = Range.Type,
        #"Quantity" = Quantity.Type
      ]
    ],
    #"maxDosePerPeriod" = Ratio.Type,
    #"maxDosePerAdministration" = Quantity.Type,
    #"maxDosePerLifetime" = Quantity.Type
  ] meta [ Documentation.Name = "Dosage.Type" ],

  Duration.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "Duration.Type" ],

  Element.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type
  ] meta [ Documentation.Name = "Element.Type" ],

  ElementDefinition.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"path" = Text.Type,
    #"representation" = { Text.Type },
    #"sliceName" = Text.Type,
    #"sliceIsConstraining" = Logical.Type,
    #"label" = Text.Type,
    #"code" = table Coding.Type,
    #"slicing" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"discriminator" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"type" = Text.Type,
        #"path" = Text.Type
      ],
      #"description" = Text.Type,
      #"ordered" = Logical.Type,
      #"rules" = Text.Type
    ],
    #"short" = Text.Type,
    #"definition" = Text.Type,
    #"comment" = Text.Type,
    #"requirements" = Text.Type,
    #"alias" = { Text.Type },
    #"min" = Int32.Type,
    #"max" = Text.Type,
    #"base" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"path" = Text.Type,
      #"min" = Int32.Type,
      #"max" = Text.Type
    ],
    #"contentReference" = Uri.Type,
    #"type" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"code" = Uri.Type,
      #"profile" = { Uri.Type },
      #"targetProfile" = { Uri.Type },
      #"aggregation" = { Text.Type },
      #"versioning" = Text.Type
    ],
    #"defaultValue" = [
      #"base64Binary" = Text.Type,
      #"boolean" = Logical.Type,
      #"canonical" = Uri.Type,
      #"code" = Text.Type,
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"decimal" = Decimal.Type,
      #"id" = Text.Type,
      #"instant" = DateTimeZone.Type,
      #"integer" = Int32.Type,
      #"markdown" = Text.Type,
      #"oid" = Text.Type,
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type,
      #"time" = Time.Type,
      #"unsignedInt" = Int32.Type,
      #"uri" = Uri.Type,
      #"url" = Uri.Type,
      #"uuid" = Text.Type,
      #"Address" = Address.Type,
      #"Age" = Age.Type,
      #"Annotation" = Annotation.Type,
      #"Attachment" = Attachment.Type,
      #"CodeableConcept" = CodeableConcept.Type,
      #"Coding" = Coding.Type,
      #"ContactPoint" = ContactPoint.Type,
      #"Count" = Count.Type,
      #"Distance" = Distance.Type,
      #"Duration" = Duration.Type,
      #"HumanName" = HumanName.Type,
      #"Identifier" = Identifier.Type,
      #"Money" = Money.Type,
      #"Period" = Period.Type,
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"Ratio" = Ratio.Type,
      #"Reference" = Reference.Type,
      #"SampledData" = SampledData.Type,
      #"Signature" = Signature.Type,
      #"Timing" = Timing.Type,
      #"ContactDetail" = ContactDetail.Type,
      #"Contributor" = Contributor.Type,
      #"DataRequirement" = DataRequirement.Type,
      #"Expression" = Expression.Type,
      #"ParameterDefinition" = ParameterDefinition.Type,
      #"RelatedArtifact" = RelatedArtifact.Type,
      #"TriggerDefinition" = TriggerDefinition.Type,
      #"UsageContext" = UsageContext.Type,
      #"Dosage" = Dosage.Type,
      #"Meta" = Meta.Type
    ],
    #"meaningWhenMissing" = Text.Type,
    #"orderMeaning" = Text.Type,
    #"fixed" = [
      #"base64Binary" = Text.Type,
      #"boolean" = Logical.Type,
      #"canonical" = Uri.Type,
      #"code" = Text.Type,
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"decimal" = Decimal.Type,
      #"id" = Text.Type,
      #"instant" = DateTimeZone.Type,
      #"integer" = Int32.Type,
      #"markdown" = Text.Type,
      #"oid" = Text.Type,
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type,
      #"time" = Time.Type,
      #"unsignedInt" = Int32.Type,
      #"uri" = Uri.Type,
      #"url" = Uri.Type,
      #"uuid" = Text.Type,
      #"Address" = Address.Type,
      #"Age" = Age.Type,
      #"Annotation" = Annotation.Type,
      #"Attachment" = Attachment.Type,
      #"CodeableConcept" = CodeableConcept.Type,
      #"Coding" = Coding.Type,
      #"ContactPoint" = ContactPoint.Type,
      #"Count" = Count.Type,
      #"Distance" = Distance.Type,
      #"Duration" = Duration.Type,
      #"HumanName" = HumanName.Type,
      #"Identifier" = Identifier.Type,
      #"Money" = Money.Type,
      #"Period" = Period.Type,
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"Ratio" = Ratio.Type,
      #"Reference" = Reference.Type,
      #"SampledData" = SampledData.Type,
      #"Signature" = Signature.Type,
      #"Timing" = Timing.Type,
      #"ContactDetail" = ContactDetail.Type,
      #"Contributor" = Contributor.Type,
      #"DataRequirement" = DataRequirement.Type,
      #"Expression" = Expression.Type,
      #"ParameterDefinition" = ParameterDefinition.Type,
      #"RelatedArtifact" = RelatedArtifact.Type,
      #"TriggerDefinition" = TriggerDefinition.Type,
      #"UsageContext" = UsageContext.Type,
      #"Dosage" = Dosage.Type,
      #"Meta" = Meta.Type
    ],
    #"pattern" = [
      #"base64Binary" = Text.Type,
      #"boolean" = Logical.Type,
      #"canonical" = Uri.Type,
      #"code" = Text.Type,
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"decimal" = Decimal.Type,
      #"id" = Text.Type,
      #"instant" = DateTimeZone.Type,
      #"integer" = Int32.Type,
      #"markdown" = Text.Type,
      #"oid" = Text.Type,
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type,
      #"time" = Time.Type,
      #"unsignedInt" = Int32.Type,
      #"uri" = Uri.Type,
      #"url" = Uri.Type,
      #"uuid" = Text.Type,
      #"Address" = Address.Type,
      #"Age" = Age.Type,
      #"Annotation" = Annotation.Type,
      #"Attachment" = Attachment.Type,
      #"CodeableConcept" = CodeableConcept.Type,
      #"Coding" = Coding.Type,
      #"ContactPoint" = ContactPoint.Type,
      #"Count" = Count.Type,
      #"Distance" = Distance.Type,
      #"Duration" = Duration.Type,
      #"HumanName" = HumanName.Type,
      #"Identifier" = Identifier.Type,
      #"Money" = Money.Type,
      #"Period" = Period.Type,
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"Ratio" = Ratio.Type,
      #"Reference" = Reference.Type,
      #"SampledData" = SampledData.Type,
      #"Signature" = Signature.Type,
      #"Timing" = Timing.Type,
      #"ContactDetail" = ContactDetail.Type,
      #"Contributor" = Contributor.Type,
      #"DataRequirement" = DataRequirement.Type,
      #"Expression" = Expression.Type,
      #"ParameterDefinition" = ParameterDefinition.Type,
      #"RelatedArtifact" = RelatedArtifact.Type,
      #"TriggerDefinition" = TriggerDefinition.Type,
      #"UsageContext" = UsageContext.Type,
      #"Dosage" = Dosage.Type,
      #"Meta" = Meta.Type
    ],
    #"example" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"label" = Text.Type,
      #"value" = [
        #"base64Binary" = Text.Type,
        #"boolean" = Logical.Type,
        #"canonical" = Uri.Type,
        #"code" = Text.Type,
        #"date" = Date.Type,
        #"dateTime" = DateTimeZone.Type,
        #"decimal" = Decimal.Type,
        #"id" = Text.Type,
        #"instant" = DateTimeZone.Type,
        #"integer" = Int32.Type,
        #"markdown" = Text.Type,
        #"oid" = Text.Type,
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type,
        #"time" = Time.Type,
        #"unsignedInt" = Int32.Type,
        #"uri" = Uri.Type,
        #"url" = Uri.Type,
        #"uuid" = Text.Type,
        #"Address" = Address.Type,
        #"Age" = Age.Type,
        #"Annotation" = Annotation.Type,
        #"Attachment" = Attachment.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"Coding" = Coding.Type,
        #"ContactPoint" = ContactPoint.Type,
        #"Count" = Count.Type,
        #"Distance" = Distance.Type,
        #"Duration" = Duration.Type,
        #"HumanName" = HumanName.Type,
        #"Identifier" = Identifier.Type,
        #"Money" = Money.Type,
        #"Period" = Period.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"Reference" = Reference.Type,
        #"SampledData" = SampledData.Type,
        #"Signature" = Signature.Type,
        #"Timing" = Timing.Type,
        #"ContactDetail" = ContactDetail.Type,
        #"Contributor" = Contributor.Type,
        #"DataRequirement" = DataRequirement.Type,
        #"Expression" = Expression.Type,
        #"ParameterDefinition" = ParameterDefinition.Type,
        #"RelatedArtifact" = RelatedArtifact.Type,
        #"TriggerDefinition" = TriggerDefinition.Type,
        #"UsageContext" = UsageContext.Type,
        #"Dosage" = Dosage.Type,
        #"Meta" = Meta.Type
      ]
    ],
    #"minValue" = [
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"instant" = DateTimeZone.Type,
      #"time" = Time.Type,
      #"decimal" = Decimal.Type,
      #"integer" = Int32.Type,
      #"positiveInt" = Int32.Type,
      #"unsignedInt" = Int32.Type,
      #"Quantity" = Quantity.Type
    ],
    #"maxValue" = [
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"instant" = DateTimeZone.Type,
      #"time" = Time.Type,
      #"decimal" = Decimal.Type,
      #"integer" = Int32.Type,
      #"positiveInt" = Int32.Type,
      #"unsignedInt" = Int32.Type,
      #"Quantity" = Quantity.Type
    ],
    #"maxLength" = Int32.Type,
    #"condition" = { Text.Type },
    #"constraint" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"key" = Text.Type,
      #"requirements" = Text.Type,
      #"severity" = Text.Type,
      #"human" = Text.Type,
      #"expression" = Text.Type,
      #"xpath" = Text.Type,
      #"source" = Uri.Type
    ],
    #"mustSupport" = Logical.Type,
    #"isModifier" = Logical.Type,
    #"isModifierReason" = Text.Type,
    #"isSummary" = Logical.Type,
    #"binding" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"strength" = Text.Type,
      #"description" = Text.Type,
      #"valueSet" = Uri.Type
    ],
    #"mapping" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"identity" = Text.Type,
      #"language" = Text.Type,
      #"map" = Text.Type,
      #"comment" = Text.Type
    ]
  ] meta [ Documentation.Name = "ElementDefinition.Type" ],

  Expression.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"description" = Text.Type,
    #"name" = Text.Type,
    #"language" = Text.Type,
    #"expression" = Text.Type,
    #"reference" = Uri.Type
  ] meta [ Documentation.Name = "Expression.Type" ],

  Extension.Type = type [
    #"id" = Text.Type,
    #"extension" = table @Extension.Type,
    #"url" = Uri.Type,
    #"value" = [
      #"base64Binary" = Text.Type,
      #"boolean" = Logical.Type,
      #"canonical" = Uri.Type,
      #"code" = Text.Type,
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type,
      #"decimal" = Decimal.Type,
      #"id" = Text.Type,
      #"instant" = DateTimeZone.Type,
      #"integer" = Int32.Type,
      #"markdown" = Text.Type,
      #"oid" = Text.Type,
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type,
      #"time" = Time.Type,
      #"unsignedInt" = Int32.Type,
      #"uri" = Uri.Type,
      #"url" = Uri.Type,
      #"uuid" = Text.Type,
      #"Address" = Address.Type,
      #"Age" = Age.Type,
      #"Annotation" = Annotation.Type,
      #"Attachment" = Attachment.Type,
      #"CodeableConcept" = CodeableConcept.Type,
      #"Coding" = Coding.Type,
      #"ContactPoint" = ContactPoint.Type,
      #"Count" = Count.Type,
      #"Distance" = Distance.Type,
      #"Duration" = Duration.Type,
      #"HumanName" = HumanName.Type,
      #"Identifier" = Identifier.Type,
      #"Money" = Money.Type,
      #"Period" = Period.Type,
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"Ratio" = Ratio.Type,
      #"Reference" = Reference.Type,
      #"SampledData" = SampledData.Type,
      #"Signature" = Signature.Type,
      #"Timing" = Timing.Type,
      #"ContactDetail" = ContactDetail.Type,
      #"Contributor" = Contributor.Type,
      #"DataRequirement" = DataRequirement.Type,
      #"Expression" = Expression.Type,
      #"ParameterDefinition" = ParameterDefinition.Type,
      #"RelatedArtifact" = RelatedArtifact.Type,
      #"TriggerDefinition" = TriggerDefinition.Type,
      #"UsageContext" = UsageContext.Type,
      #"Dosage" = Dosage.Type,
      #"Meta" = Meta.Type
    ]
  ] meta [ Documentation.Name = "Extension.Type" ],

  HumanName.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"use" = Text.Type,
    #"text" = Text.Type,
    #"family" = Text.Type,
    #"given" = { Text.Type },
    #"prefix" = { Text.Type },
    #"suffix" = { Text.Type },
    #"period" = Period.Type
  ] meta [ Documentation.Name = "HumanName.Type" ],

  Identifier.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"use" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"system" = Uri.Type,
    #"value" = Text.Type,
    #"period" = Period.Type,
    #"assigner" = Reference.Type
  ] meta [ Documentation.Name = "Identifier.Type" ],

  MarketingStatus.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"country" = CodeableConcept.Type,
    #"jurisdiction" = CodeableConcept.Type,
    #"status" = CodeableConcept.Type,
    #"dateRange" = Period.Type,
    #"restoreDate" = DateTimeZone.Type
  ] meta [ Documentation.Name = "MarketingStatus.Type" ],

  Meta.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"versionId" = Text.Type,
    #"lastUpdated" = DateTimeZone.Type,
    #"source" = Uri.Type,
    #"profile" = { Uri.Type },
    #"security" = table Coding.Type,
    #"tag" = table Coding.Type
  ] meta [ Documentation.Name = "Meta.Type" ],

  Money.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"currency" = Text.Type
  ] meta [ Documentation.Name = "Money.Type" ],

  MoneyQuantity.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "MoneyQuantity.Type" ],

  Narrative.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"status" = Text.Type,
    #"div" = Text.Type
  ] meta [ Documentation.Name = "Narrative.Type" ],

  ParameterDefinition.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"name" = Text.Type,
    #"use" = Text.Type,
    #"min" = Int32.Type,
    #"max" = Text.Type,
    #"documentation" = Text.Type,
    #"type" = Text.Type,
    #"profile" = Uri.Type
  ] meta [ Documentation.Name = "ParameterDefinition.Type" ],

  Period.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"start" = DateTimeZone.Type,
    #"end" = DateTimeZone.Type
  ] meta [ Documentation.Name = "Period.Type" ],

  Population.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"age" = [
      #"Range" = Range.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"gender" = CodeableConcept.Type,
    #"race" = CodeableConcept.Type,
    #"physiologicalCondition" = CodeableConcept.Type
  ] meta [ Documentation.Name = "Population.Type" ],

  ProdCharacteristic.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"height" = Quantity.Type,
    #"width" = Quantity.Type,
    #"depth" = Quantity.Type,
    #"weight" = Quantity.Type,
    #"nominalVolume" = Quantity.Type,
    #"externalDiameter" = Quantity.Type,
    #"shape" = Text.Type,
    #"color" = { Text.Type },
    #"imprint" = { Text.Type },
    #"image" = table Attachment.Type,
    #"scoring" = CodeableConcept.Type
  ] meta [ Documentation.Name = "ProdCharacteristic.Type" ],

  ProductShelfLife.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"type" = CodeableConcept.Type,
    #"period" = Quantity.Type,
    #"specialPrecautionsForStorage" = table CodeableConcept.Type
  ] meta [ Documentation.Name = "ProductShelfLife.Type" ],

  Quantity.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "Quantity.Type" ],

  Range.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"low" = Quantity.Type,
    #"high" = Quantity.Type
  ] meta [ Documentation.Name = "Range.Type" ],

  Ratio.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"numerator" = Quantity.Type,
    #"denominator" = Quantity.Type
  ] meta [ Documentation.Name = "Ratio.Type" ],

  Reference.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"reference" = Text.Type,
    #"type" = Uri.Type,
    #"identifier" = Identifier.Type,
    #"display" = Text.Type
  ] meta [ Documentation.Name = "Reference.Type" ],

  RelatedArtifact.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"type" = Text.Type,
    #"label" = Text.Type,
    #"display" = Text.Type,
    #"citation" = Text.Type,
    #"url" = Uri.Type,
    #"document" = Attachment.Type,
    #"resource" = Uri.Type
  ] meta [ Documentation.Name = "RelatedArtifact.Type" ],

  SampledData.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"origin" = Quantity.Type,
    #"period" = Decimal.Type,
    #"factor" = Decimal.Type,
    #"lowerLimit" = Decimal.Type,
    #"upperLimit" = Decimal.Type,
    #"dimensions" = Int32.Type,
    #"data" = Text.Type
  ] meta [ Documentation.Name = "SampledData.Type" ],

  Signature.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"type" = table Coding.Type,
    #"when" = DateTimeZone.Type,
    #"who" = Reference.Type,
    #"onBehalfOf" = Reference.Type,
    #"targetFormat" = Text.Type,
    #"sigFormat" = Text.Type,
    #"data" = Text.Type
  ] meta [ Documentation.Name = "Signature.Type" ],

  SimpleQuantity.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"value" = Decimal.Type,
    #"comparator" = Text.Type,
    #"unit" = Text.Type,
    #"system" = Uri.Type,
    #"code" = Text.Type
  ] meta [ Documentation.Name = "SimpleQuantity.Type" ],

  SubstanceAmount.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"amount" = [
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"string" = Text.Type
    ],
    #"amountType" = CodeableConcept.Type,
    #"amountText" = Text.Type,
    #"referenceRange" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"lowLimit" = Quantity.Type,
      #"highLimit" = Quantity.Type
    ]
  ] meta [ Documentation.Name = "SubstanceAmount.Type" ],

  Timing.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"event" = { DateTimeZone.Type },
    #"repeat" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"bounds" = [
        #"Duration" = Duration.Type,
        #"Range" = Range.Type,
        #"Period" = Period.Type
      ],
      #"count" = Int32.Type,
      #"countMax" = Int32.Type,
      #"duration" = Decimal.Type,
      #"durationMax" = Decimal.Type,
      #"durationUnit" = Text.Type,
      #"frequency" = Int32.Type,
      #"frequencyMax" = Int32.Type,
      #"period" = Decimal.Type,
      #"periodMax" = Decimal.Type,
      #"periodUnit" = Text.Type,
      #"dayOfWeek" = { Text.Type },
      #"timeOfDay" = { Time.Type },
      #"when" = { Text.Type },
      #"offset" = Int32.Type
    ],
    #"code" = CodeableConcept.Type
  ] meta [ Documentation.Name = "Timing.Type" ],

  TriggerDefinition.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"type" = Text.Type,
    #"name" = Text.Type,
    #"timing" = [
      #"Timing" = Timing.Type,
      #"Reference" = Reference.Type,
      #"date" = Date.Type,
      #"dateTime" = DateTimeZone.Type
    ],
    #"data" = table DataRequirement.Type,
    #"condition" = Expression.Type
  ] meta [ Documentation.Name = "TriggerDefinition.Type" ],

  UsageContext.Type = type [
    #"id" = Text.Type,
    #"extension" = table Extension.Type,
    #"code" = Coding.Type,
    #"value" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Quantity" = Quantity.Type,
      #"Range" = Range.Type,
      #"Reference" = Reference.Type
    ]
  ] meta [ Documentation.Name = "UsageContext.Type" ],

  Account.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"name" = Text.Type,
    #"subject" = table Reference.Type,
    #"servicePeriod" = Period.Type,
    #"coverage" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"coverage" = Reference.Type,
      #"priority" = Int32.Type
    ],
    #"owner" = Reference.Type,
    #"description" = Text.Type,
    #"guarantor" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"party" = Reference.Type,
      #"onHold" = Logical.Type,
      #"period" = Period.Type
    ],
    #"partOf" = Reference.Type
  ] meta [ Documentation.Name = "Account.Type" ],

  ActivityDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"library" = { Uri.Type },
    #"kind" = Text.Type,
    #"profile" = Uri.Type,
    #"code" = CodeableConcept.Type,
    #"intent" = Text.Type,
    #"priority" = Text.Type,
    #"doNotPerform" = Logical.Type,
    #"timing" = [
      #"Timing" = Timing.Type,
      #"dateTime" = DateTimeZone.Type,
      #"Age" = Age.Type,
      #"Period" = Period.Type,
      #"Range" = Range.Type,
      #"Duration" = Duration.Type
    ],
    #"location" = Reference.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"role" = CodeableConcept.Type
    ],
    #"product" = [
      #"Reference" = Reference.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"quantity" = Quantity.Type,
    #"dosage" = table Dosage.Type,
    #"bodySite" = table CodeableConcept.Type,
    #"specimenRequirement" = table Reference.Type,
    #"observationRequirement" = table Reference.Type,
    #"observationResultRequirement" = table Reference.Type,
    #"transform" = Uri.Type,
    #"dynamicValue" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"path" = Text.Type,
      #"expression" = Expression.Type
    ]
  ] meta [ Documentation.Name = "ActivityDefinition.Type" ],

  AdverseEvent.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"actuality" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"event" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"detected" = DateTimeZone.Type,
    #"recordedDate" = DateTimeZone.Type,
    #"resultingCondition" = table Reference.Type,
    #"location" = Reference.Type,
    #"seriousness" = CodeableConcept.Type,
    #"severity" = CodeableConcept.Type,
    #"outcome" = CodeableConcept.Type,
    #"recorder" = Reference.Type,
    #"contributor" = table Reference.Type,
    #"suspectEntity" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"instance" = Reference.Type,
      #"causality" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"assessment" = CodeableConcept.Type,
        #"productRelatedness" = Text.Type,
        #"author" = Reference.Type,
        #"method" = CodeableConcept.Type
      ]
    ],
    #"subjectMedicalHistory" = table Reference.Type,
    #"referenceDocument" = table Reference.Type,
    #"study" = table Reference.Type
  ] meta [ Documentation.Name = "AdverseEvent.Type" ],

  AllergyIntolerance.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"clinicalStatus" = CodeableConcept.Type,
    #"verificationStatus" = CodeableConcept.Type,
    #"type" = Text.Type,
    #"category" = { Text.Type },
    #"criticality" = Text.Type,
    #"code" = CodeableConcept.Type,
    #"patient" = Reference.Type,
    #"encounter" = Reference.Type,
    #"onset" = [
      #"dateTime" = DateTimeZone.Type,
      #"Age" = Age.Type,
      #"Period" = Period.Type,
      #"Range" = Range.Type,
      #"string" = Text.Type
    ],
    #"recordedDate" = DateTimeZone.Type,
    #"recorder" = Reference.Type,
    #"asserter" = Reference.Type,
    #"lastOccurrence" = DateTimeZone.Type,
    #"note" = table Annotation.Type,
    #"reaction" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"substance" = CodeableConcept.Type,
      #"manifestation" = table CodeableConcept.Type,
      #"description" = Text.Type,
      #"onset" = DateTimeZone.Type,
      #"severity" = Text.Type,
      #"exposureRoute" = CodeableConcept.Type,
      #"note" = table Annotation.Type
    ]
  ] meta [ Documentation.Name = "AllergyIntolerance.Type" ],

  Appointment.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"cancelationReason" = CodeableConcept.Type,
    #"serviceCategory" = table CodeableConcept.Type,
    #"serviceType" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"appointmentType" = CodeableConcept.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"priority" = Int32.Type,
    #"description" = Text.Type,
    #"supportingInformation" = table Reference.Type,
    #"start" = DateTimeZone.Type,
    #"end" = DateTimeZone.Type,
    #"minutesDuration" = Int32.Type,
    #"slot" = table Reference.Type,
    #"created" = DateTimeZone.Type,
    #"comment" = Text.Type,
    #"patientInstruction" = Text.Type,
    #"basedOn" = table Reference.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = table CodeableConcept.Type,
      #"actor" = Reference.Type,
      #"required" = Text.Type,
      #"status" = Text.Type,
      #"period" = Period.Type
    ],
    #"requestedPeriod" = table Period.Type
  ] meta [ Documentation.Name = "Appointment.Type" ],

  AppointmentResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"appointment" = Reference.Type,
    #"start" = DateTimeZone.Type,
    #"end" = DateTimeZone.Type,
    #"participantType" = table CodeableConcept.Type,
    #"actor" = Reference.Type,
    #"participantStatus" = Text.Type,
    #"comment" = Text.Type
  ] meta [ Documentation.Name = "AppointmentResponse.Type" ],

  AuditEvent.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"type" = Coding.Type,
    #"subtype" = table Coding.Type,
    #"action" = Text.Type,
    #"period" = Period.Type,
    #"recorded" = DateTimeZone.Type,
    #"outcome" = Text.Type,
    #"outcomeDesc" = Text.Type,
    #"purposeOfEvent" = table CodeableConcept.Type,
    #"agent" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"role" = table CodeableConcept.Type,
      #"who" = Reference.Type,
      #"altId" = Text.Type,
      #"name" = Text.Type,
      #"requestor" = Logical.Type,
      #"location" = Reference.Type,
      #"policy" = { Uri.Type },
      #"media" = Coding.Type,
      #"network" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"address" = Text.Type,
        #"type" = Text.Type
      ],
      #"purposeOfUse" = table CodeableConcept.Type
    ],
    #"source" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"site" = Text.Type,
      #"observer" = Reference.Type,
      #"type" = table Coding.Type
    ],
    #"entity" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"what" = Reference.Type,
      #"type" = Coding.Type,
      #"role" = Coding.Type,
      #"lifecycle" = Coding.Type,
      #"securityLabel" = table Coding.Type,
      #"name" = Text.Type,
      #"description" = Text.Type,
      #"query" = Text.Type,
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"value" = [
          #"string" = Text.Type,
          #"base64Binary" = Text.Type
        ]
      ]
    ]
  ] meta [ Documentation.Name = "AuditEvent.Type" ],

  Basic.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"created" = Date.Type,
    #"author" = Reference.Type
  ] meta [ Documentation.Name = "Basic.Type" ],

  Binary.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"contentType" = Text.Type,
    #"securityContext" = Reference.Type,
    #"data" = Text.Type
  ] meta [ Documentation.Name = "Binary.Type" ],

  BiologicallyDerivedProduct.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"productCategory" = Text.Type,
    #"productCode" = CodeableConcept.Type,
    #"status" = Text.Type,
    #"request" = table Reference.Type,
    #"quantity" = Int32.Type,
    #"parent" = table Reference.Type,
    #"collection" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"collector" = Reference.Type,
      #"source" = Reference.Type,
      #"collected" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ]
    ],
    #"processing" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"procedure" = CodeableConcept.Type,
      #"additive" = Reference.Type,
      #"time" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ]
    ],
    #"manipulation" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"time" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ]
    ],
    #"storage" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"temperature" = Decimal.Type,
      #"scale" = Text.Type,
      #"duration" = Period.Type
    ]
  ] meta [ Documentation.Name = "BiologicallyDerivedProduct.Type" ],

  BodyStructure.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"morphology" = CodeableConcept.Type,
    #"location" = CodeableConcept.Type,
    #"locationQualifier" = table CodeableConcept.Type,
    #"description" = Text.Type,
    #"image" = table Attachment.Type,
    #"patient" = Reference.Type
  ] meta [ Documentation.Name = "BodyStructure.Type" ],

  Bundle.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"identifier" = Identifier.Type,
    #"type" = Text.Type,
    #"timestamp" = DateTimeZone.Type,
    #"total" = Int32.Type,
    #"link" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"relation" = Text.Type,
      #"url" = Uri.Type
    ],
    #"entry" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"fullUrl" = Uri.Type,
      #"resource" = Resource.Type,
      #"search" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"mode" = Text.Type,
        #"score" = Decimal.Type
      ],
      #"request" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"method" = Text.Type,
        #"url" = Uri.Type,
        #"ifNoneMatch" = Text.Type,
        #"ifModifiedSince" = DateTimeZone.Type,
        #"ifMatch" = Text.Type,
        #"ifNoneExist" = Text.Type
      ],
      #"response" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"status" = Text.Type,
        #"location" = Uri.Type,
        #"etag" = Text.Type,
        #"lastModified" = DateTimeZone.Type,
        #"outcome" = Resource.Type
      ],
      #"link" = table Type.TableRow(Type.RecordFields(@Bundle.Type)[#"link"][Type])
    ],
    #"signature" = Signature.Type
  ] meta [ Documentation.Name = "Bundle.Type" ],

  CapabilityStatement.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"kind" = Text.Type,
    #"instantiates" = { Uri.Type },
    #"imports" = { Uri.Type },
    #"software" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"version" = Text.Type,
      #"releaseDate" = DateTimeZone.Type
    ],
    #"implementation" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"url" = Uri.Type,
      #"custodian" = Reference.Type
    ],
    #"fhirVersion" = Text.Type,
    #"format" = { Text.Type },
    #"patchFormat" = { Text.Type },
    #"implementationGuide" = { Uri.Type },
    #"rest" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"mode" = Text.Type,
      #"documentation" = Text.Type,
      #"security" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"cors" = Logical.Type,
        #"service" = table CodeableConcept.Type,
        #"description" = Text.Type
      ],
      #"resource" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"profile" = Uri.Type,
        #"supportedProfile" = { Uri.Type },
        #"documentation" = Text.Type,
        #"interaction" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"code" = Text.Type,
          #"documentation" = Text.Type
        ],
        #"versioning" = Text.Type,
        #"readHistory" = Logical.Type,
        #"updateCreate" = Logical.Type,
        #"conditionalCreate" = Logical.Type,
        #"conditionalRead" = Text.Type,
        #"conditionalUpdate" = Logical.Type,
        #"conditionalDelete" = Text.Type,
        #"referencePolicy" = { Text.Type },
        #"searchInclude" = { Text.Type },
        #"searchRevInclude" = { Text.Type },
        #"searchParam" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"name" = Text.Type,
          #"definition" = Uri.Type,
          #"type" = Text.Type,
          #"documentation" = Text.Type
        ],
        #"operation" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"name" = Text.Type,
          #"definition" = Uri.Type,
          #"documentation" = Text.Type
        ]
      ],
      #"interaction" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"documentation" = Text.Type
      ],
      #"compartment" = { Uri.Type },
      #"searchParam" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@CapabilityStatement.Type)[#"rest"][Type]))[#"resource"][Type]))[#"searchParam"][Type]),
      #"operation" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@CapabilityStatement.Type)[#"rest"][Type]))[#"resource"][Type]))[#"operation"][Type])
    ],
    #"messaging" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"endpoint" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"protocol" = Coding.Type,
        #"address" = Uri.Type
      ],
      #"reliableCache" = Int32.Type,
      #"documentation" = Text.Type,
      #"supportedMessage" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"mode" = Text.Type,
        #"definition" = Uri.Type
      ]
    ],
    #"document" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"mode" = Text.Type,
      #"documentation" = Text.Type,
      #"profile" = Uri.Type
    ]
  ] meta [ Documentation.Name = "CapabilityStatement.Type" ],

  CarePlan.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"replaces" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"intent" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"title" = Text.Type,
    #"description" = Text.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"period" = Period.Type,
    #"created" = DateTimeZone.Type,
    #"author" = Reference.Type,
    #"contributor" = table Reference.Type,
    #"careTeam" = table Reference.Type,
    #"addresses" = table Reference.Type,
    #"supportingInfo" = table Reference.Type,
    #"goal" = table Reference.Type,
    #"activity" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"outcomeCodeableConcept" = table CodeableConcept.Type,
      #"outcomeReference" = table Reference.Type,
      #"progress" = table Annotation.Type,
      #"reference" = Reference.Type,
      #"detail" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"kind" = Text.Type,
        #"instantiatesCanonical" = { Uri.Type },
        #"instantiatesUri" = { Uri.Type },
        #"code" = CodeableConcept.Type,
        #"reasonCode" = table CodeableConcept.Type,
        #"reasonReference" = table Reference.Type,
        #"goal" = table Reference.Type,
        #"status" = Text.Type,
        #"statusReason" = CodeableConcept.Type,
        #"doNotPerform" = Logical.Type,
        #"scheduled" = [
          #"Timing" = Timing.Type,
          #"Period" = Period.Type,
          #"string" = Text.Type
        ],
        #"location" = Reference.Type,
        #"performer" = table Reference.Type,
        #"product" = [
          #"CodeableConcept" = CodeableConcept.Type,
          #"Reference" = Reference.Type
        ],
        #"dailyAmount" = Quantity.Type,
        #"quantity" = Quantity.Type,
        #"description" = Text.Type
      ]
    ],
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "CarePlan.Type" ],

  CareTeam.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"name" = Text.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"period" = Period.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"role" = table CodeableConcept.Type,
      #"member" = Reference.Type,
      #"onBehalfOf" = Reference.Type,
      #"period" = Period.Type
    ],
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"managingOrganization" = table Reference.Type,
    #"telecom" = table ContactPoint.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "CareTeam.Type" ],

  CatalogEntry.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"type" = CodeableConcept.Type,
    #"orderable" = Logical.Type,
    #"referencedItem" = Reference.Type,
    #"additionalIdentifier" = table Identifier.Type,
    #"classification" = table CodeableConcept.Type,
    #"status" = Text.Type,
    #"validityPeriod" = Period.Type,
    #"validTo" = DateTimeZone.Type,
    #"lastUpdated" = DateTimeZone.Type,
    #"additionalCharacteristic" = table CodeableConcept.Type,
    #"additionalClassification" = table CodeableConcept.Type,
    #"relatedEntry" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"relationtype" = Text.Type,
      #"item" = Reference.Type
    ]
  ] meta [ Documentation.Name = "CatalogEntry.Type" ],

  ChargeItem.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"definitionUri" = { Uri.Type },
    #"definitionCanonical" = { Uri.Type },
    #"status" = Text.Type,
    #"partOf" = table Reference.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"context" = Reference.Type,
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type
    ],
    #"performer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"function" = CodeableConcept.Type,
      #"actor" = Reference.Type
    ],
    #"performingOrganization" = Reference.Type,
    #"requestingOrganization" = Reference.Type,
    #"costCenter" = Reference.Type,
    #"quantity" = Quantity.Type,
    #"bodysite" = table CodeableConcept.Type,
    #"factorOverride" = Decimal.Type,
    #"priceOverride" = Money.Type,
    #"overrideReason" = Text.Type,
    #"enterer" = Reference.Type,
    #"enteredDate" = DateTimeZone.Type,
    #"reason" = table CodeableConcept.Type,
    #"service" = table Reference.Type,
    #"product" = [
      #"Reference" = Reference.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"account" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"supportingInformation" = table Reference.Type
  ] meta [ Documentation.Name = "ChargeItem.Type" ],

  ChargeItemDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"title" = Text.Type,
    #"derivedFromUri" = { Uri.Type },
    #"partOf" = { Uri.Type },
    #"replaces" = { Uri.Type },
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"code" = CodeableConcept.Type,
    #"instance" = table Reference.Type,
    #"applicability" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"language" = Text.Type,
      #"expression" = Text.Type
    ],
    #"propertyGroup" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"priceComponent" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"code" = CodeableConcept.Type,
        #"factor" = Decimal.Type,
        #"amount" = Money.Type
      ],
      #"applicability" = table Type.TableRow(Type.RecordFields(@ChargeItemDefinition.Type)[#"applicability"][Type])
    ]
  ] meta [ Documentation.Name = "ChargeItemDefinition.Type" ],

  Claim.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subType" = CodeableConcept.Type,
    #"use" = Text.Type,
    #"patient" = Reference.Type,
    #"billablePeriod" = Period.Type,
    #"created" = DateTimeZone.Type,
    #"enterer" = Reference.Type,
    #"insurer" = Reference.Type,
    #"provider" = Reference.Type,
    #"priority" = CodeableConcept.Type,
    #"fundsReserve" = CodeableConcept.Type,
    #"related" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"claim" = Reference.Type,
      #"relationship" = CodeableConcept.Type,
      #"reference" = Identifier.Type
    ],
    #"prescription" = Reference.Type,
    #"originalPrescription" = Reference.Type,
    #"payee" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"party" = Reference.Type
    ],
    #"referral" = Reference.Type,
    #"facility" = Reference.Type,
    #"careTeam" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"provider" = Reference.Type,
      #"responsible" = Logical.Type,
      #"role" = CodeableConcept.Type,
      #"qualification" = CodeableConcept.Type
    ],
    #"supportingInfo" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"category" = CodeableConcept.Type,
      #"code" = CodeableConcept.Type,
      #"timing" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"value" = [
        #"boolean" = Logical.Type,
        #"string" = Text.Type,
        #"Quantity" = Quantity.Type,
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ],
      #"reason" = CodeableConcept.Type
    ],
    #"diagnosis" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"diagnosis" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"type" = table CodeableConcept.Type,
      #"onAdmission" = CodeableConcept.Type,
      #"packageCode" = CodeableConcept.Type
    ],
    #"procedure" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"type" = table CodeableConcept.Type,
      #"date" = DateTimeZone.Type,
      #"procedure" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"udi" = table Reference.Type
    ],
    #"insurance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"focal" = Logical.Type,
      #"identifier" = Identifier.Type,
      #"coverage" = Reference.Type,
      #"businessArrangement" = Text.Type,
      #"preAuthRef" = { Text.Type },
      #"claimResponse" = Reference.Type
    ],
    #"accident" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"date" = Date.Type,
      #"type" = CodeableConcept.Type,
      #"location" = [
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"careTeamSequence" = { Int32.Type },
      #"diagnosisSequence" = { Int32.Type },
      #"procedureSequence" = { Int32.Type },
      #"informationSequence" = { Int32.Type },
      #"revenue" = CodeableConcept.Type,
      #"category" = CodeableConcept.Type,
      #"productOrService" = CodeableConcept.Type,
      #"modifier" = table CodeableConcept.Type,
      #"programCode" = table CodeableConcept.Type,
      #"serviced" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"location" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ],
      #"quantity" = Quantity.Type,
      #"unitPrice" = Money.Type,
      #"factor" = Decimal.Type,
      #"net" = Money.Type,
      #"udi" = table Reference.Type,
      #"bodySite" = CodeableConcept.Type,
      #"subSite" = table CodeableConcept.Type,
      #"encounter" = table Reference.Type,
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"sequence" = Int32.Type,
        #"revenue" = CodeableConcept.Type,
        #"category" = CodeableConcept.Type,
        #"productOrService" = CodeableConcept.Type,
        #"modifier" = table CodeableConcept.Type,
        #"programCode" = table CodeableConcept.Type,
        #"quantity" = Quantity.Type,
        #"unitPrice" = Money.Type,
        #"factor" = Decimal.Type,
        #"net" = Money.Type,
        #"udi" = table Reference.Type,
        #"subDetail" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"sequence" = Int32.Type,
          #"revenue" = CodeableConcept.Type,
          #"category" = CodeableConcept.Type,
          #"productOrService" = CodeableConcept.Type,
          #"modifier" = table CodeableConcept.Type,
          #"programCode" = table CodeableConcept.Type,
          #"quantity" = Quantity.Type,
          #"unitPrice" = Money.Type,
          #"factor" = Decimal.Type,
          #"net" = Money.Type,
          #"udi" = table Reference.Type
        ]
      ]
    ],
    #"total" = Money.Type
  ] meta [ Documentation.Name = "Claim.Type" ],

  ClaimResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subType" = CodeableConcept.Type,
    #"use" = Text.Type,
    #"patient" = Reference.Type,
    #"created" = DateTimeZone.Type,
    #"insurer" = Reference.Type,
    #"requestor" = Reference.Type,
    #"request" = Reference.Type,
    #"outcome" = Text.Type,
    #"disposition" = Text.Type,
    #"preAuthRef" = Text.Type,
    #"preAuthPeriod" = Period.Type,
    #"payeeType" = CodeableConcept.Type,
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"itemSequence" = Int32.Type,
      #"noteNumber" = { Int32.Type },
      #"adjudication" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"category" = CodeableConcept.Type,
        #"reason" = CodeableConcept.Type,
        #"amount" = Money.Type,
        #"value" = Decimal.Type
      ],
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"detailSequence" = Int32.Type,
        #"noteNumber" = { Int32.Type },
        #"subDetail" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"subDetailSequence" = Int32.Type,
          #"noteNumber" = { Int32.Type },
          #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
        ],
        #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
      ]
    ],
    #"addItem" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"itemSequence" = { Int32.Type },
      #"detailSequence" = { Int32.Type },
      #"subdetailSequence" = { Int32.Type },
      #"provider" = table Reference.Type,
      #"productOrService" = CodeableConcept.Type,
      #"modifier" = table CodeableConcept.Type,
      #"programCode" = table CodeableConcept.Type,
      #"serviced" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"location" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ],
      #"quantity" = Quantity.Type,
      #"unitPrice" = Money.Type,
      #"factor" = Decimal.Type,
      #"net" = Money.Type,
      #"bodySite" = CodeableConcept.Type,
      #"subSite" = table CodeableConcept.Type,
      #"noteNumber" = { Int32.Type },
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"productOrService" = CodeableConcept.Type,
        #"modifier" = table CodeableConcept.Type,
        #"quantity" = Quantity.Type,
        #"unitPrice" = Money.Type,
        #"factor" = Decimal.Type,
        #"net" = Money.Type,
        #"noteNumber" = { Int32.Type },
        #"subDetail" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"productOrService" = CodeableConcept.Type,
          #"modifier" = table CodeableConcept.Type,
          #"quantity" = Quantity.Type,
          #"unitPrice" = Money.Type,
          #"factor" = Decimal.Type,
          #"net" = Money.Type,
          #"noteNumber" = { Int32.Type },
          #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
        ],
        #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
      ],
      #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
    ],
    #"total" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = CodeableConcept.Type,
      #"amount" = Money.Type
    ],
    #"payment" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"adjustment" = Money.Type,
      #"adjustmentReason" = CodeableConcept.Type,
      #"date" = Date.Type,
      #"amount" = Money.Type,
      #"identifier" = Identifier.Type
    ],
    #"fundsReserve" = CodeableConcept.Type,
    #"formCode" = CodeableConcept.Type,
    #"form" = Attachment.Type,
    #"processNote" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"number" = Int32.Type,
      #"type" = Text.Type,
      #"text" = Text.Type,
      #"language" = CodeableConcept.Type
    ],
    #"communicationRequest" = table Reference.Type,
    #"insurance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"focal" = Logical.Type,
      #"coverage" = Reference.Type,
      #"businessArrangement" = Text.Type,
      #"claimResponse" = Reference.Type
    ],
    #"error" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"itemSequence" = Int32.Type,
      #"detailSequence" = Int32.Type,
      #"subDetailSequence" = Int32.Type,
      #"code" = CodeableConcept.Type
    ],
    #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ClaimResponse.Type)[#"item"][Type]))[#"adjudication"][Type])
  ] meta [ Documentation.Name = "ClaimResponse.Type" ],

  ClinicalImpression.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"description" = Text.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"effective" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"date" = DateTimeZone.Type,
    #"assessor" = Reference.Type,
    #"previous" = Reference.Type,
    #"problem" = table Reference.Type,
    #"investigation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"item" = table Reference.Type
    ],
    #"protocol" = { Uri.Type },
    #"summary" = Text.Type,
    #"finding" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"itemCodeableConcept" = CodeableConcept.Type,
      #"itemReference" = Reference.Type,
      #"basis" = Text.Type
    ],
    #"prognosisCodeableConcept" = table CodeableConcept.Type,
    #"prognosisReference" = table Reference.Type,
    #"supportingInfo" = table Reference.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "ClinicalImpression.Type" ],

  CodeSystem.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"caseSensitive" = Logical.Type,
    #"valueSet" = Uri.Type,
    #"hierarchyMeaning" = Text.Type,
    #"compositional" = Logical.Type,
    #"versionNeeded" = Logical.Type,
    #"content" = Text.Type,
    #"supplements" = Uri.Type,
    #"count" = Int32.Type,
    #"filter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"description" = Text.Type,
      #"operator" = { Text.Type },
      #"value" = Text.Type
    ],
    #"property" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"uri" = Uri.Type,
      #"description" = Text.Type,
      #"type" = Text.Type
    ],
    #"concept" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"display" = Text.Type,
      #"definition" = Text.Type,
      #"designation" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"language" = Text.Type,
        #"use" = Coding.Type,
        #"value" = Text.Type
      ],
      #"property" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"value" = [
          #"code" = Text.Type,
          #"Coding" = Coding.Type,
          #"string" = Text.Type,
          #"integer" = Int32.Type,
          #"boolean" = Logical.Type,
          #"dateTime" = DateTimeZone.Type,
          #"decimal" = Decimal.Type
        ]
      ],
      #"concept" = table Type.TableRow(Type.RecordFields(@CodeSystem.Type)[#"concept"][Type])
    ]
  ] meta [ Documentation.Name = "CodeSystem.Type" ],

  Communication.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"inResponseTo" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"priority" = Text.Type,
    #"medium" = table CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"topic" = CodeableConcept.Type,
    #"about" = table Reference.Type,
    #"encounter" = Reference.Type,
    #"sent" = DateTimeZone.Type,
    #"received" = DateTimeZone.Type,
    #"recipient" = table Reference.Type,
    #"sender" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"payload" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"content" = [
        #"string" = Text.Type,
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "Communication.Type" ],

  CommunicationRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"replaces" = table Reference.Type,
    #"groupIdentifier" = Identifier.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"priority" = Text.Type,
    #"doNotPerform" = Logical.Type,
    #"medium" = table CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"about" = table Reference.Type,
    #"encounter" = Reference.Type,
    #"payload" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"content" = [
        #"string" = Text.Type,
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"authoredOn" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"recipient" = table Reference.Type,
    #"sender" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "CommunicationRequest.Type" ],

  CompartmentDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"purpose" = Text.Type,
    #"code" = Text.Type,
    #"search" = Logical.Type,
    #"resource" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"param" = { Text.Type },
      #"documentation" = Text.Type
    ]
  ] meta [ Documentation.Name = "CompartmentDefinition.Type" ],

  Composition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"author" = table Reference.Type,
    #"title" = Text.Type,
    #"confidentiality" = Text.Type,
    #"attester" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"mode" = Text.Type,
      #"time" = DateTimeZone.Type,
      #"party" = Reference.Type
    ],
    #"custodian" = Reference.Type,
    #"relatesTo" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"target" = [
        #"Identifier" = Identifier.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"event" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = table CodeableConcept.Type,
      #"period" = Period.Type,
      #"detail" = table Reference.Type
    ],
    #"section" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"title" = Text.Type,
      #"code" = CodeableConcept.Type,
      #"author" = table Reference.Type,
      #"focus" = Reference.Type,
      #"text" = Narrative.Type,
      #"mode" = Text.Type,
      #"orderedBy" = CodeableConcept.Type,
      #"entry" = table Reference.Type,
      #"emptyReason" = CodeableConcept.Type,
      #"section" = table Type.TableRow(Type.RecordFields(@Composition.Type)[#"section"][Type])
    ]
  ] meta [ Documentation.Name = "Composition.Type" ],

  ConceptMap.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"source" = [
      #"uri" = Uri.Type,
      #"canonical" = Uri.Type
    ],
    #"target" = [
      #"uri" = Uri.Type,
      #"canonical" = Uri.Type
    ],
    #"group" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"source" = Uri.Type,
      #"sourceVersion" = Text.Type,
      #"target" = Uri.Type,
      #"targetVersion" = Text.Type,
      #"element" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"display" = Text.Type,
        #"target" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"code" = Text.Type,
          #"display" = Text.Type,
          #"equivalence" = Text.Type,
          #"comment" = Text.Type,
          #"dependsOn" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"property" = Uri.Type,
            #"system" = Uri.Type,
            #"value" = Text.Type,
            #"display" = Text.Type
          ],
          #"product" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ConceptMap.Type)[#"group"][Type]))[#"element"][Type]))[#"target"][Type]))[#"dependsOn"][Type])
        ]
      ],
      #"unmapped" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"mode" = Text.Type,
        #"code" = Text.Type,
        #"display" = Text.Type,
        #"url" = Uri.Type
      ]
    ]
  ] meta [ Documentation.Name = "ConceptMap.Type" ],

  Condition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"clinicalStatus" = CodeableConcept.Type,
    #"verificationStatus" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"severity" = CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"bodySite" = table CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"onset" = [
      #"dateTime" = DateTimeZone.Type,
      #"Age" = Age.Type,
      #"Period" = Period.Type,
      #"Range" = Range.Type,
      #"string" = Text.Type
    ],
    #"abatement" = [
      #"dateTime" = DateTimeZone.Type,
      #"Age" = Age.Type,
      #"Period" = Period.Type,
      #"Range" = Range.Type,
      #"string" = Text.Type
    ],
    #"recordedDate" = DateTimeZone.Type,
    #"recorder" = Reference.Type,
    #"asserter" = Reference.Type,
    #"stage" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"summary" = CodeableConcept.Type,
      #"assessment" = table Reference.Type,
      #"type" = CodeableConcept.Type
    ],
    #"evidence" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = table CodeableConcept.Type,
      #"detail" = table Reference.Type
    ],
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "Condition.Type" ],

  Consent.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"scope" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"patient" = Reference.Type,
    #"dateTime" = DateTimeZone.Type,
    #"performer" = table Reference.Type,
    #"organization" = table Reference.Type,
    #"source" = [
      #"Attachment" = Attachment.Type,
      #"Reference" = Reference.Type
    ],
    #"policy" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"authority" = Uri.Type,
      #"uri" = Uri.Type
    ],
    #"policyRule" = CodeableConcept.Type,
    #"verification" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"verified" = Logical.Type,
      #"verifiedWith" = Reference.Type,
      #"verificationDate" = DateTimeZone.Type
    ],
    #"provision" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"period" = Period.Type,
      #"actor" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"role" = CodeableConcept.Type,
        #"reference" = Reference.Type
      ],
      #"action" = table CodeableConcept.Type,
      #"securityLabel" = table Coding.Type,
      #"purpose" = table Coding.Type,
      #"class" = table Coding.Type,
      #"code" = table CodeableConcept.Type,
      #"dataPeriod" = Period.Type,
      #"data" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"meaning" = Text.Type,
        #"reference" = Reference.Type
      ],
      #"provision" = table Type.RecordFields(@Consent.Type)[#"provision"][Type]
    ]
  ] meta [ Documentation.Name = "Consent.Type" ],

  Contract.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"status" = Text.Type,
    #"legalState" = CodeableConcept.Type,
    #"instantiatesCanonical" = Reference.Type,
    #"instantiatesUri" = Uri.Type,
    #"contentDerivative" = CodeableConcept.Type,
    #"issued" = DateTimeZone.Type,
    #"applies" = Period.Type,
    #"expirationType" = CodeableConcept.Type,
    #"subject" = table Reference.Type,
    #"authority" = table Reference.Type,
    #"domain" = table Reference.Type,
    #"site" = table Reference.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"alias" = { Text.Type },
    #"author" = Reference.Type,
    #"scope" = CodeableConcept.Type,
    #"topic" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"type" = CodeableConcept.Type,
    #"subType" = table CodeableConcept.Type,
    #"contentDefinition" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"subType" = CodeableConcept.Type,
      #"publisher" = Reference.Type,
      #"publicationDate" = DateTimeZone.Type,
      #"publicationStatus" = Text.Type,
      #"copyright" = Text.Type
    ],
    #"term" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Identifier.Type,
      #"issued" = DateTimeZone.Type,
      #"applies" = Period.Type,
      #"topic" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"type" = CodeableConcept.Type,
      #"subType" = CodeableConcept.Type,
      #"text" = Text.Type,
      #"securityLabel" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"number" = { Int32.Type },
        #"classification" = Coding.Type,
        #"category" = table Coding.Type,
        #"control" = table Coding.Type
      ],
      #"offer" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"identifier" = table Identifier.Type,
        #"party" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"reference" = table Reference.Type,
          #"role" = CodeableConcept.Type
        ],
        #"topic" = Reference.Type,
        #"type" = CodeableConcept.Type,
        #"decision" = CodeableConcept.Type,
        #"decisionMode" = table CodeableConcept.Type,
        #"answer" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"value" = [
            #"boolean" = Logical.Type,
            #"decimal" = Decimal.Type,
            #"integer" = Int32.Type,
            #"date" = Date.Type,
            #"dateTime" = DateTimeZone.Type,
            #"time" = Time.Type,
            #"string" = Text.Type,
            #"uri" = Uri.Type,
            #"Attachment" = Attachment.Type,
            #"Coding" = Coding.Type,
            #"Quantity" = Quantity.Type,
            #"Reference" = Reference.Type
          ]
        ],
        #"text" = Text.Type,
        #"linkId" = { Text.Type },
        #"securityLabelNumber" = { Int32.Type }
      ],
      #"asset" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"scope" = CodeableConcept.Type,
        #"type" = table CodeableConcept.Type,
        #"typeReference" = table Reference.Type,
        #"subtype" = table CodeableConcept.Type,
        #"relationship" = Coding.Type,
        #"context" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"reference" = Reference.Type,
          #"code" = table CodeableConcept.Type,
          #"text" = Text.Type
        ],
        #"condition" = Text.Type,
        #"periodType" = table CodeableConcept.Type,
        #"period" = table Period.Type,
        #"usePeriod" = table Period.Type,
        #"text" = Text.Type,
        #"linkId" = { Text.Type },
        #"securityLabelNumber" = { Int32.Type },
        #"valuedItem" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"entity" = [
            #"CodeableConcept" = CodeableConcept.Type,
            #"Reference" = Reference.Type
          ],
          #"identifier" = Identifier.Type,
          #"effectiveTime" = DateTimeZone.Type,
          #"quantity" = Quantity.Type,
          #"unitPrice" = Money.Type,
          #"factor" = Decimal.Type,
          #"points" = Decimal.Type,
          #"net" = Money.Type,
          #"payment" = Text.Type,
          #"paymentDate" = DateTimeZone.Type,
          #"responsible" = Reference.Type,
          #"recipient" = Reference.Type,
          #"linkId" = { Text.Type },
          #"securityLabelNumber" = { Int32.Type }
        ],
        #"answer" = table Type.TableRow(Type.RecordFields(Type.RecordFields(Type.TableRow(Type.RecordFields(@Contract.Type)[#"term"][Type]))[#"offer"][Type])[#"answer"][Type])
      ],
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"doNotPerform" = Logical.Type,
        #"type" = CodeableConcept.Type,
        #"subject" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"reference" = table Reference.Type,
          #"role" = CodeableConcept.Type
        ],
        #"intent" = CodeableConcept.Type,
        #"linkId" = { Text.Type },
        #"status" = CodeableConcept.Type,
        #"context" = Reference.Type,
        #"contextLinkId" = { Text.Type },
        #"occurrence" = [
          #"dateTime" = DateTimeZone.Type,
          #"Period" = Period.Type,
          #"Timing" = Timing.Type
        ],
        #"requester" = table Reference.Type,
        #"requesterLinkId" = { Text.Type },
        #"performerType" = table CodeableConcept.Type,
        #"performerRole" = CodeableConcept.Type,
        #"performer" = Reference.Type,
        #"performerLinkId" = { Text.Type },
        #"reasonCode" = table CodeableConcept.Type,
        #"reasonReference" = table Reference.Type,
        #"reason" = { Text.Type },
        #"reasonLinkId" = { Text.Type },
        #"note" = table Annotation.Type,
        #"securityLabelNumber" = { Int32.Type }
      ],
      #"group" = table Type.TableRow(Type.RecordFields(@Contract.Type)[#"term"][Type])
    ],
    #"supportingInfo" = table Reference.Type,
    #"relevantHistory" = table Reference.Type,
    #"signer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Coding.Type,
      #"party" = Reference.Type,
      #"signature" = table Signature.Type
    ],
    #"friendly" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"content" = [
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"legal" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"content" = [
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"rule" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"content" = [
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"legallyBinding" = [
      #"Attachment" = Attachment.Type,
      #"Reference" = Reference.Type
    ]
  ] meta [ Documentation.Name = "Contract.Type" ],

  Coverage.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"policyHolder" = Reference.Type,
    #"subscriber" = Reference.Type,
    #"subscriberId" = Text.Type,
    #"beneficiary" = Reference.Type,
    #"dependent" = Text.Type,
    #"relationship" = CodeableConcept.Type,
    #"period" = Period.Type,
    #"payor" = table Reference.Type,
    #"class" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"value" = Text.Type,
      #"name" = Text.Type
    ],
    #"order" = Int32.Type,
    #"network" = Text.Type,
    #"costToBeneficiary" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"value" = [
        #"Quantity" = Quantity.Type,
        #"Money" = Money.Type
      ],
      #"exception" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"period" = Period.Type
      ]
    ],
    #"subrogation" = Logical.Type,
    #"contract" = table Reference.Type
  ] meta [ Documentation.Name = "Coverage.Type" ],

  CoverageEligibilityRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"priority" = CodeableConcept.Type,
    #"purpose" = { Text.Type },
    #"patient" = Reference.Type,
    #"serviced" = [
      #"date" = Date.Type,
      #"Period" = Period.Type
    ],
    #"created" = DateTimeZone.Type,
    #"enterer" = Reference.Type,
    #"provider" = Reference.Type,
    #"insurer" = Reference.Type,
    #"facility" = Reference.Type,
    #"supportingInfo" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"information" = Reference.Type,
      #"appliesToAll" = Logical.Type
    ],
    #"insurance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"focal" = Logical.Type,
      #"coverage" = Reference.Type,
      #"businessArrangement" = Text.Type
    ],
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"supportingInfoSequence" = { Int32.Type },
      #"category" = CodeableConcept.Type,
      #"productOrService" = CodeableConcept.Type,
      #"modifier" = table CodeableConcept.Type,
      #"provider" = Reference.Type,
      #"quantity" = Quantity.Type,
      #"unitPrice" = Money.Type,
      #"facility" = Reference.Type,
      #"diagnosis" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"diagnosis" = [
          #"CodeableConcept" = CodeableConcept.Type,
          #"Reference" = Reference.Type
        ]
      ],
      #"detail" = table Reference.Type
    ]
  ] meta [ Documentation.Name = "CoverageEligibilityRequest.Type" ],

  CoverageEligibilityResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"purpose" = { Text.Type },
    #"patient" = Reference.Type,
    #"serviced" = [
      #"date" = Date.Type,
      #"Period" = Period.Type
    ],
    #"created" = DateTimeZone.Type,
    #"requestor" = Reference.Type,
    #"request" = Reference.Type,
    #"outcome" = Text.Type,
    #"disposition" = Text.Type,
    #"insurer" = Reference.Type,
    #"insurance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"coverage" = Reference.Type,
      #"inforce" = Logical.Type,
      #"benefitPeriod" = Period.Type,
      #"item" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"category" = CodeableConcept.Type,
        #"productOrService" = CodeableConcept.Type,
        #"modifier" = table CodeableConcept.Type,
        #"provider" = Reference.Type,
        #"excluded" = Logical.Type,
        #"name" = Text.Type,
        #"description" = Text.Type,
        #"network" = CodeableConcept.Type,
        #"unit" = CodeableConcept.Type,
        #"term" = CodeableConcept.Type,
        #"benefit" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"type" = CodeableConcept.Type,
          #"allowed" = [
            #"unsignedInt" = Int32.Type,
            #"string" = Text.Type,
            #"Money" = Money.Type
          ],
          #"used" = [
            #"unsignedInt" = Int32.Type,
            #"string" = Text.Type,
            #"Money" = Money.Type
          ]
        ],
        #"authorizationRequired" = Logical.Type,
        #"authorizationSupporting" = table CodeableConcept.Type,
        #"authorizationUrl" = Uri.Type
      ]
    ],
    #"preAuthRef" = Text.Type,
    #"form" = CodeableConcept.Type,
    #"error" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type
    ]
  ] meta [ Documentation.Name = "CoverageEligibilityResponse.Type" ],

  DetectedIssue.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"code" = CodeableConcept.Type,
    #"severity" = Text.Type,
    #"patient" = Reference.Type,
    #"identified" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"author" = Reference.Type,
    #"implicated" = table Reference.Type,
    #"evidence" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = table CodeableConcept.Type,
      #"detail" = table Reference.Type
    ],
    #"detail" = Text.Type,
    #"reference" = Uri.Type,
    #"mitigation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = CodeableConcept.Type,
      #"date" = DateTimeZone.Type,
      #"author" = Reference.Type
    ]
  ] meta [ Documentation.Name = "DetectedIssue.Type" ],

  Device.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"definition" = Reference.Type,
    #"udiCarrier" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"deviceIdentifier" = Text.Type,
      #"issuer" = Uri.Type,
      #"jurisdiction" = Uri.Type,
      #"carrierAIDC" = Text.Type,
      #"carrierHRF" = Text.Type,
      #"entryType" = Text.Type
    ],
    #"status" = Text.Type,
    #"statusReason" = table CodeableConcept.Type,
    #"distinctIdentifier" = Text.Type,
    #"manufacturer" = Text.Type,
    #"manufactureDate" = DateTimeZone.Type,
    #"expirationDate" = DateTimeZone.Type,
    #"lotNumber" = Text.Type,
    #"serialNumber" = Text.Type,
    #"deviceName" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"type" = Text.Type
    ],
    #"modelNumber" = Text.Type,
    #"partNumber" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"specialization" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"systemType" = CodeableConcept.Type,
      #"version" = Text.Type
    ],
    #"version" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"component" = Identifier.Type,
      #"value" = Text.Type
    ],
    #"property" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"valueQuantity" = table Quantity.Type,
      #"valueCode" = table CodeableConcept.Type
    ],
    #"patient" = Reference.Type,
    #"owner" = Reference.Type,
    #"contact" = table ContactPoint.Type,
    #"location" = Reference.Type,
    #"url" = Uri.Type,
    #"note" = table Annotation.Type,
    #"safety" = table CodeableConcept.Type,
    #"parent" = Reference.Type
  ] meta [ Documentation.Name = "Device.Type" ],

  DeviceDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"udiDeviceIdentifier" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"deviceIdentifier" = Text.Type,
      #"issuer" = Uri.Type,
      #"jurisdiction" = Uri.Type
    ],
    #"manufacturer" = [
      #"string" = Text.Type,
      #"Reference" = Reference.Type
    ],
    #"deviceName" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"type" = Text.Type
    ],
    #"modelNumber" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"specialization" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"systemType" = Text.Type,
      #"version" = Text.Type
    ],
    #"version" = { Text.Type },
    #"safety" = table CodeableConcept.Type,
    #"shelfLifeStorage" = table ProductShelfLife.Type,
    #"physicalCharacteristics" = ProdCharacteristic.Type,
    #"languageCode" = table CodeableConcept.Type,
    #"capability" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"description" = table CodeableConcept.Type
    ],
    #"property" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"valueQuantity" = table Quantity.Type,
      #"valueCode" = table CodeableConcept.Type
    ],
    #"owner" = Reference.Type,
    #"contact" = table ContactPoint.Type,
    #"url" = Uri.Type,
    #"onlineInformation" = Uri.Type,
    #"note" = table Annotation.Type,
    #"quantity" = Quantity.Type,
    #"parentDevice" = Reference.Type,
    #"material" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"substance" = CodeableConcept.Type,
      #"alternate" = Logical.Type,
      #"allergenicIndicator" = Logical.Type
    ]
  ] meta [ Documentation.Name = "DeviceDefinition.Type" ],

  DeviceMetric.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"type" = CodeableConcept.Type,
    #"unit" = CodeableConcept.Type,
    #"source" = Reference.Type,
    #"parent" = Reference.Type,
    #"operationalStatus" = Text.Type,
    #"color" = Text.Type,
    #"category" = Text.Type,
    #"measurementPeriod" = Timing.Type,
    #"calibration" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"state" = Text.Type,
      #"time" = DateTimeZone.Type
    ]
  ] meta [ Documentation.Name = "DeviceMetric.Type" ],

  DeviceRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"priorRequest" = table Reference.Type,
    #"groupIdentifier" = Identifier.Type,
    #"status" = Text.Type,
    #"intent" = Text.Type,
    #"priority" = Text.Type,
    #"code" = [
      #"Reference" = Reference.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"parameter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"value" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"boolean" = Logical.Type
      ]
    ],
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type
    ],
    #"authoredOn" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"performerType" = CodeableConcept.Type,
    #"performer" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"insurance" = table Reference.Type,
    #"supportingInfo" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"relevantHistory" = table Reference.Type
  ] meta [ Documentation.Name = "DeviceRequest.Type" ],

  DeviceUseStatement.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"status" = Text.Type,
    #"subject" = Reference.Type,
    #"derivedFrom" = table Reference.Type,
    #"timing" = [
      #"Timing" = Timing.Type,
      #"Period" = Period.Type,
      #"dateTime" = DateTimeZone.Type
    ],
    #"recordedOn" = DateTimeZone.Type,
    #"source" = Reference.Type,
    #"device" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"bodySite" = CodeableConcept.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "DeviceUseStatement.Type" ],

  DiagnosticReport.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"status" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"effective" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"issued" = DateTimeZone.Type,
    #"performer" = table Reference.Type,
    #"resultsInterpreter" = table Reference.Type,
    #"specimen" = table Reference.Type,
    #"result" = table Reference.Type,
    #"imagingStudy" = table Reference.Type,
    #"media" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"comment" = Text.Type,
      #"link" = Reference.Type
    ],
    #"conclusion" = Text.Type,
    #"conclusionCode" = table CodeableConcept.Type,
    #"presentedForm" = table Attachment.Type
  ] meta [ Documentation.Name = "DiagnosticReport.Type" ],

  DocumentManifest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"masterIdentifier" = Identifier.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"created" = DateTimeZone.Type,
    #"author" = table Reference.Type,
    #"recipient" = table Reference.Type,
    #"source" = Uri.Type,
    #"description" = Text.Type,
    #"content" = table Reference.Type,
    #"related" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Identifier.Type,
      #"ref" = Reference.Type
    ]
  ] meta [ Documentation.Name = "DocumentManifest.Type" ],

  DocumentReference.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"masterIdentifier" = Identifier.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"docStatus" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"author" = table Reference.Type,
    #"authenticator" = Reference.Type,
    #"custodian" = Reference.Type,
    #"relatesTo" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"target" = Reference.Type
    ],
    #"description" = Text.Type,
    #"securityLabel" = table CodeableConcept.Type,
    #"content" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"attachment" = Attachment.Type,
      #"format" = Coding.Type
    ],
    #"context" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"encounter" = table Reference.Type,
      #"event" = table CodeableConcept.Type,
      #"period" = Period.Type,
      #"facilityType" = CodeableConcept.Type,
      #"practiceSetting" = CodeableConcept.Type,
      #"sourcePatientInfo" = Reference.Type,
      #"related" = table Reference.Type
    ]
  ] meta [ Documentation.Name = "DocumentReference.Type" ],

  DomainResource.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type
  ] meta [ Documentation.Name = "DomainResource.Type" ],

  EffectEvidenceSynthesis.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"note" = table Annotation.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"synthesisType" = CodeableConcept.Type,
    #"studyType" = CodeableConcept.Type,
    #"population" = Reference.Type,
    #"exposure" = Reference.Type,
    #"exposureAlternative" = Reference.Type,
    #"outcome" = Reference.Type,
    #"sampleSize" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"numberOfStudies" = Int32.Type,
      #"numberOfParticipants" = Int32.Type
    ],
    #"resultsByExposure" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"exposureState" = Text.Type,
      #"variantState" = CodeableConcept.Type,
      #"riskEvidenceSynthesis" = Reference.Type
    ],
    #"effectEstimate" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"type" = CodeableConcept.Type,
      #"variantState" = CodeableConcept.Type,
      #"value" = Decimal.Type,
      #"unitOfMeasure" = CodeableConcept.Type,
      #"precisionEstimate" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"level" = Decimal.Type,
        #"from" = Decimal.Type,
        #"to" = Decimal.Type
      ]
    ],
    #"certainty" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"rating" = table CodeableConcept.Type,
      #"note" = table Annotation.Type,
      #"certaintySubcomponent" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"rating" = table CodeableConcept.Type,
        #"note" = table Annotation.Type
      ]
    ]
  ] meta [ Documentation.Name = "EffectEvidenceSynthesis.Type" ],

  Encounter.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"statusHistory" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"status" = Text.Type,
      #"period" = Period.Type
    ],
    #"class" = Coding.Type,
    #"classHistory" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"class" = Coding.Type,
      #"period" = Period.Type
    ],
    #"type" = table CodeableConcept.Type,
    #"serviceType" = CodeableConcept.Type,
    #"priority" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"episodeOfCare" = table Reference.Type,
    #"basedOn" = table Reference.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = table CodeableConcept.Type,
      #"period" = Period.Type,
      #"individual" = Reference.Type
    ],
    #"appointment" = table Reference.Type,
    #"period" = Period.Type,
    #"length" = Duration.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"diagnosis" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"condition" = Reference.Type,
      #"use" = CodeableConcept.Type,
      #"rank" = Int32.Type
    ],
    #"account" = table Reference.Type,
    #"hospitalization" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"preAdmissionIdentifier" = Identifier.Type,
      #"origin" = Reference.Type,
      #"admitSource" = CodeableConcept.Type,
      #"reAdmission" = CodeableConcept.Type,
      #"dietPreference" = table CodeableConcept.Type,
      #"specialCourtesy" = table CodeableConcept.Type,
      #"specialArrangement" = table CodeableConcept.Type,
      #"destination" = Reference.Type,
      #"dischargeDisposition" = CodeableConcept.Type
    ],
    #"location" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"location" = Reference.Type,
      #"status" = Text.Type,
      #"physicalType" = CodeableConcept.Type,
      #"period" = Period.Type
    ],
    #"serviceProvider" = Reference.Type,
    #"partOf" = Reference.Type
  ] meta [ Documentation.Name = "Encounter.Type" ],

  Endpoint.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"connectionType" = Coding.Type,
    #"name" = Text.Type,
    #"managingOrganization" = Reference.Type,
    #"contact" = table ContactPoint.Type,
    #"period" = Period.Type,
    #"payloadType" = table CodeableConcept.Type,
    #"payloadMimeType" = { Text.Type },
    #"address" = Uri.Type,
    #"header" = { Text.Type }
  ] meta [ Documentation.Name = "Endpoint.Type" ],

  EnrollmentRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"created" = DateTimeZone.Type,
    #"insurer" = Reference.Type,
    #"provider" = Reference.Type,
    #"candidate" = Reference.Type,
    #"coverage" = Reference.Type
  ] meta [ Documentation.Name = "EnrollmentRequest.Type" ],

  EnrollmentResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"request" = Reference.Type,
    #"outcome" = Text.Type,
    #"disposition" = Text.Type,
    #"created" = DateTimeZone.Type,
    #"organization" = Reference.Type,
    #"requestProvider" = Reference.Type
  ] meta [ Documentation.Name = "EnrollmentResponse.Type" ],

  EpisodeOfCare.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"statusHistory" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"status" = Text.Type,
      #"period" = Period.Type
    ],
    #"type" = table CodeableConcept.Type,
    #"diagnosis" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"condition" = Reference.Type,
      #"role" = CodeableConcept.Type,
      #"rank" = Int32.Type
    ],
    #"patient" = Reference.Type,
    #"managingOrganization" = Reference.Type,
    #"period" = Period.Type,
    #"referralRequest" = table Reference.Type,
    #"careManager" = Reference.Type,
    #"team" = table Reference.Type,
    #"account" = table Reference.Type
  ] meta [ Documentation.Name = "EpisodeOfCare.Type" ],

  EventDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"trigger" = table TriggerDefinition.Type
  ] meta [ Documentation.Name = "EventDefinition.Type" ],

  Evidence.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"shortTitle" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"note" = table Annotation.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"exposureBackground" = Reference.Type,
    #"exposureVariant" = table Reference.Type,
    #"outcome" = table Reference.Type
  ] meta [ Documentation.Name = "Evidence.Type" ],

  EvidenceVariable.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"shortTitle" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"note" = table Annotation.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"type" = Text.Type,
    #"characteristic" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"definition" = [
        #"Reference" = Reference.Type,
        #"canonical" = Uri.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"Expression" = Expression.Type,
        #"DataRequirement" = DataRequirement.Type,
        #"TriggerDefinition" = TriggerDefinition.Type
      ],
      #"usageContext" = table UsageContext.Type,
      #"exclude" = Logical.Type,
      #"participantEffective" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type,
        #"Timing" = Timing.Type
      ],
      #"timeFromStart" = Duration.Type,
      #"groupMeasure" = Text.Type
    ]
  ] meta [ Documentation.Name = "EvidenceVariable.Type" ],

  ExampleScenario.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"purpose" = Text.Type,
    #"actor" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"actorId" = Text.Type,
      #"type" = Text.Type,
      #"name" = Text.Type,
      #"description" = Text.Type
    ],
    #"instance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"resourceId" = Text.Type,
      #"resourceType" = Text.Type,
      #"name" = Text.Type,
      #"description" = Text.Type,
      #"version" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"versionId" = Text.Type,
        #"description" = Text.Type
      ],
      #"containedInstance" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"resourceId" = Text.Type,
        #"versionId" = Text.Type
      ]
    ],
    #"process" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"title" = Text.Type,
      #"description" = Text.Type,
      #"preConditions" = Text.Type,
      #"postConditions" = Text.Type,
      #"step" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"pause" = Logical.Type,
        #"operation" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"number" = Text.Type,
          #"type" = Text.Type,
          #"name" = Text.Type,
          #"initiator" = Text.Type,
          #"receiver" = Text.Type,
          #"description" = Text.Type,
          #"initiatorActive" = Logical.Type,
          #"receiverActive" = Logical.Type,
          #"request" = Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExampleScenario.Type)[#"instance"][Type]))[#"containedInstance"][Type]),
          #"response" = Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExampleScenario.Type)[#"instance"][Type]))[#"containedInstance"][Type])
        ],
        #"alternative" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"title" = Text.Type,
          #"description" = Text.Type,
          #"step" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExampleScenario.Type)[#"process"][Type]))[#"step"][Type])
        ],
        #"process" = table Type.TableRow(Type.RecordFields(@ExampleScenario.Type)[#"process"][Type])
      ]
    ],
    #"workflow" = { Uri.Type }
  ] meta [ Documentation.Name = "ExampleScenario.Type" ],

  ExplanationOfBenefit.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subType" = CodeableConcept.Type,
    #"use" = Text.Type,
    #"patient" = Reference.Type,
    #"billablePeriod" = Period.Type,
    #"created" = DateTimeZone.Type,
    #"enterer" = Reference.Type,
    #"insurer" = Reference.Type,
    #"provider" = Reference.Type,
    #"priority" = CodeableConcept.Type,
    #"fundsReserveRequested" = CodeableConcept.Type,
    #"fundsReserve" = CodeableConcept.Type,
    #"related" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"claim" = Reference.Type,
      #"relationship" = CodeableConcept.Type,
      #"reference" = Identifier.Type
    ],
    #"prescription" = Reference.Type,
    #"originalPrescription" = Reference.Type,
    #"payee" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"party" = Reference.Type
    ],
    #"referral" = Reference.Type,
    #"facility" = Reference.Type,
    #"claim" = Reference.Type,
    #"claimResponse" = Reference.Type,
    #"outcome" = Text.Type,
    #"disposition" = Text.Type,
    #"preAuthRef" = { Text.Type },
    #"preAuthRefPeriod" = table Period.Type,
    #"careTeam" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"provider" = Reference.Type,
      #"responsible" = Logical.Type,
      #"role" = CodeableConcept.Type,
      #"qualification" = CodeableConcept.Type
    ],
    #"supportingInfo" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"category" = CodeableConcept.Type,
      #"code" = CodeableConcept.Type,
      #"timing" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"value" = [
        #"boolean" = Logical.Type,
        #"string" = Text.Type,
        #"Quantity" = Quantity.Type,
        #"Attachment" = Attachment.Type,
        #"Reference" = Reference.Type
      ],
      #"reason" = Coding.Type
    ],
    #"diagnosis" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"diagnosis" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"type" = table CodeableConcept.Type,
      #"onAdmission" = CodeableConcept.Type,
      #"packageCode" = CodeableConcept.Type
    ],
    #"procedure" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"type" = table CodeableConcept.Type,
      #"date" = DateTimeZone.Type,
      #"procedure" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"udi" = table Reference.Type
    ],
    #"precedence" = Int32.Type,
    #"insurance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"focal" = Logical.Type,
      #"coverage" = Reference.Type,
      #"preAuthRef" = { Text.Type }
    ],
    #"accident" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"date" = Date.Type,
      #"type" = CodeableConcept.Type,
      #"location" = [
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"careTeamSequence" = { Int32.Type },
      #"diagnosisSequence" = { Int32.Type },
      #"procedureSequence" = { Int32.Type },
      #"informationSequence" = { Int32.Type },
      #"revenue" = CodeableConcept.Type,
      #"category" = CodeableConcept.Type,
      #"productOrService" = CodeableConcept.Type,
      #"modifier" = table CodeableConcept.Type,
      #"programCode" = table CodeableConcept.Type,
      #"serviced" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"location" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ],
      #"quantity" = Quantity.Type,
      #"unitPrice" = Money.Type,
      #"factor" = Decimal.Type,
      #"net" = Money.Type,
      #"udi" = table Reference.Type,
      #"bodySite" = CodeableConcept.Type,
      #"subSite" = table CodeableConcept.Type,
      #"encounter" = table Reference.Type,
      #"noteNumber" = { Int32.Type },
      #"adjudication" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"category" = CodeableConcept.Type,
        #"reason" = CodeableConcept.Type,
        #"amount" = Money.Type,
        #"value" = Decimal.Type
      ],
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"sequence" = Int32.Type,
        #"revenue" = CodeableConcept.Type,
        #"category" = CodeableConcept.Type,
        #"productOrService" = CodeableConcept.Type,
        #"modifier" = table CodeableConcept.Type,
        #"programCode" = table CodeableConcept.Type,
        #"quantity" = Quantity.Type,
        #"unitPrice" = Money.Type,
        #"factor" = Decimal.Type,
        #"net" = Money.Type,
        #"udi" = table Reference.Type,
        #"noteNumber" = { Int32.Type },
        #"subDetail" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"sequence" = Int32.Type,
          #"revenue" = CodeableConcept.Type,
          #"category" = CodeableConcept.Type,
          #"productOrService" = CodeableConcept.Type,
          #"modifier" = table CodeableConcept.Type,
          #"programCode" = table CodeableConcept.Type,
          #"quantity" = Quantity.Type,
          #"unitPrice" = Money.Type,
          #"factor" = Decimal.Type,
          #"net" = Money.Type,
          #"udi" = table Reference.Type,
          #"noteNumber" = { Int32.Type },
          #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
        ],
        #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
      ]
    ],
    #"addItem" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"itemSequence" = { Int32.Type },
      #"detailSequence" = { Int32.Type },
      #"subDetailSequence" = { Int32.Type },
      #"provider" = table Reference.Type,
      #"productOrService" = CodeableConcept.Type,
      #"modifier" = table CodeableConcept.Type,
      #"programCode" = table CodeableConcept.Type,
      #"serviced" = [
        #"date" = Date.Type,
        #"Period" = Period.Type
      ],
      #"location" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Address" = Address.Type,
        #"Reference" = Reference.Type
      ],
      #"quantity" = Quantity.Type,
      #"unitPrice" = Money.Type,
      #"factor" = Decimal.Type,
      #"net" = Money.Type,
      #"bodySite" = CodeableConcept.Type,
      #"subSite" = table CodeableConcept.Type,
      #"noteNumber" = { Int32.Type },
      #"detail" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"productOrService" = CodeableConcept.Type,
        #"modifier" = table CodeableConcept.Type,
        #"quantity" = Quantity.Type,
        #"unitPrice" = Money.Type,
        #"factor" = Decimal.Type,
        #"net" = Money.Type,
        #"noteNumber" = { Int32.Type },
        #"subDetail" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"productOrService" = CodeableConcept.Type,
          #"modifier" = table CodeableConcept.Type,
          #"quantity" = Quantity.Type,
          #"unitPrice" = Money.Type,
          #"factor" = Decimal.Type,
          #"net" = Money.Type,
          #"noteNumber" = { Int32.Type },
          #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
        ],
        #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
      ],
      #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
    ],
    #"total" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = CodeableConcept.Type,
      #"amount" = Money.Type
    ],
    #"payment" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"adjustment" = Money.Type,
      #"adjustmentReason" = CodeableConcept.Type,
      #"date" = Date.Type,
      #"amount" = Money.Type,
      #"identifier" = Identifier.Type
    ],
    #"formCode" = CodeableConcept.Type,
    #"form" = Attachment.Type,
    #"processNote" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"number" = Int32.Type,
      #"type" = Text.Type,
      #"text" = Text.Type,
      #"language" = CodeableConcept.Type
    ],
    #"benefitPeriod" = Period.Type,
    #"benefitBalance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = CodeableConcept.Type,
      #"excluded" = Logical.Type,
      #"name" = Text.Type,
      #"description" = Text.Type,
      #"network" = CodeableConcept.Type,
      #"unit" = CodeableConcept.Type,
      #"term" = CodeableConcept.Type,
      #"financial" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"allowed" = [
          #"unsignedInt" = Int32.Type,
          #"string" = Text.Type,
          #"Money" = Money.Type
        ],
        #"used" = [
          #"unsignedInt" = Int32.Type,
          #"Money" = Money.Type
        ]
      ]
    ],
    #"adjudication" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@ExplanationOfBenefit.Type)[#"item"][Type]))[#"adjudication"][Type])
  ] meta [ Documentation.Name = "ExplanationOfBenefit.Type" ],

  FamilyMemberHistory.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"status" = Text.Type,
    #"dataAbsentReason" = CodeableConcept.Type,
    #"patient" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"name" = Text.Type,
    #"relationship" = CodeableConcept.Type,
    #"sex" = CodeableConcept.Type,
    #"born" = [
      #"Period" = Period.Type,
      #"date" = Date.Type,
      #"string" = Text.Type
    ],
    #"age" = [
      #"Age" = Age.Type,
      #"Range" = Range.Type,
      #"string" = Text.Type
    ],
    #"estimatedAge" = Logical.Type,
    #"deceased" = [
      #"boolean" = Logical.Type,
      #"Age" = Age.Type,
      #"Range" = Range.Type,
      #"date" = Date.Type,
      #"string" = Text.Type
    ],
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"condition" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"outcome" = CodeableConcept.Type,
      #"contributedToDeath" = Logical.Type,
      #"onset" = [
        #"Age" = Age.Type,
        #"Range" = Range.Type,
        #"Period" = Period.Type,
        #"string" = Text.Type
      ],
      #"note" = table Annotation.Type
    ]
  ] meta [ Documentation.Name = "FamilyMemberHistory.Type" ],

  Flag.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"period" = Period.Type,
    #"encounter" = Reference.Type,
    #"author" = Reference.Type
  ] meta [ Documentation.Name = "Flag.Type" ],

  Goal.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"lifecycleStatus" = Text.Type,
    #"achievementStatus" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"priority" = CodeableConcept.Type,
    #"description" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"start" = [
      #"date" = Date.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"target" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"measure" = CodeableConcept.Type,
      #"detail" = [
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"string" = Text.Type,
        #"boolean" = Logical.Type,
        #"integer" = Int32.Type,
        #"Ratio" = Ratio.Type
      ],
      #"due" = [
        #"date" = Date.Type,
        #"Duration" = Duration.Type
      ]
    ],
    #"statusDate" = Date.Type,
    #"statusReason" = Text.Type,
    #"expressedBy" = Reference.Type,
    #"addresses" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"outcomeCode" = table CodeableConcept.Type,
    #"outcomeReference" = table Reference.Type
  ] meta [ Documentation.Name = "Goal.Type" ],

  GraphDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"start" = Text.Type,
    #"profile" = Uri.Type,
    #"link" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"path" = Text.Type,
      #"sliceName" = Text.Type,
      #"min" = Int32.Type,
      #"max" = Text.Type,
      #"description" = Text.Type,
      #"target" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"params" = Text.Type,
        #"profile" = Uri.Type,
        #"compartment" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"use" = Text.Type,
          #"code" = Text.Type,
          #"rule" = Text.Type,
          #"expression" = Text.Type,
          #"description" = Text.Type
        ],
        #"link" = table Type.TableRow(Type.RecordFields(@GraphDefinition.Type)[#"link"][Type])
      ]
    ]
  ] meta [ Documentation.Name = "GraphDefinition.Type" ],

  Group.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"type" = Text.Type,
    #"actual" = Logical.Type,
    #"code" = CodeableConcept.Type,
    #"name" = Text.Type,
    #"quantity" = Int32.Type,
    #"managingEntity" = Reference.Type,
    #"characteristic" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"value" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"boolean" = Logical.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Reference" = Reference.Type
      ],
      #"exclude" = Logical.Type,
      #"period" = Period.Type
    ],
    #"member" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"entity" = Reference.Type,
      #"period" = Period.Type,
      #"inactive" = Logical.Type
    ]
  ] meta [ Documentation.Name = "Group.Type" ],

  GuidanceResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"requestIdentifier" = Identifier.Type,
    #"identifier" = table Identifier.Type,
    #"module" = [
      #"uri" = Uri.Type,
      #"canonical" = Uri.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"status" = Text.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"occurrenceDateTime" = DateTimeZone.Type,
    #"performer" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"evaluationMessage" = table Reference.Type,
    #"outputParameters" = Reference.Type,
    #"result" = Reference.Type,
    #"dataRequirement" = table DataRequirement.Type
  ] meta [ Documentation.Name = "GuidanceResponse.Type" ],

  HealthcareService.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"providedBy" = Reference.Type,
    #"category" = table CodeableConcept.Type,
    #"type" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"location" = table Reference.Type,
    #"name" = Text.Type,
    #"comment" = Text.Type,
    #"extraDetails" = Text.Type,
    #"photo" = Attachment.Type,
    #"telecom" = table ContactPoint.Type,
    #"coverageArea" = table Reference.Type,
    #"serviceProvisionCode" = table CodeableConcept.Type,
    #"eligibility" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"comment" = Text.Type
    ],
    #"program" = table CodeableConcept.Type,
    #"characteristic" = table CodeableConcept.Type,
    #"communication" = table CodeableConcept.Type,
    #"referralMethod" = table CodeableConcept.Type,
    #"appointmentRequired" = Logical.Type,
    #"availableTime" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"daysOfWeek" = { Text.Type },
      #"allDay" = Logical.Type,
      #"availableStartTime" = Time.Type,
      #"availableEndTime" = Time.Type
    ],
    #"notAvailable" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"during" = Period.Type
    ],
    #"availabilityExceptions" = Text.Type,
    #"endpoint" = table Reference.Type
  ] meta [ Documentation.Name = "HealthcareService.Type" ],

  ImagingStudy.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"modality" = table Coding.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"started" = DateTimeZone.Type,
    #"basedOn" = table Reference.Type,
    #"referrer" = Reference.Type,
    #"interpreter" = table Reference.Type,
    #"endpoint" = table Reference.Type,
    #"numberOfSeries" = Int32.Type,
    #"numberOfInstances" = Int32.Type,
    #"procedureReference" = Reference.Type,
    #"procedureCode" = table CodeableConcept.Type,
    #"location" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"description" = Text.Type,
    #"series" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"uid" = Text.Type,
      #"number" = Int32.Type,
      #"modality" = Coding.Type,
      #"description" = Text.Type,
      #"numberOfInstances" = Int32.Type,
      #"endpoint" = table Reference.Type,
      #"bodySite" = Coding.Type,
      #"laterality" = Coding.Type,
      #"specimen" = table Reference.Type,
      #"started" = DateTimeZone.Type,
      #"performer" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"function" = CodeableConcept.Type,
        #"actor" = Reference.Type
      ],
      #"instance" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"uid" = Text.Type,
        #"sopClass" = Coding.Type,
        #"number" = Int32.Type,
        #"title" = Text.Type
      ]
    ]
  ] meta [ Documentation.Name = "ImagingStudy.Type" ],

  Immunization.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"vaccineCode" = CodeableConcept.Type,
    #"patient" = Reference.Type,
    #"encounter" = Reference.Type,
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"string" = Text.Type
    ],
    #"recorded" = DateTimeZone.Type,
    #"primarySource" = Logical.Type,
    #"reportOrigin" = CodeableConcept.Type,
    #"location" = Reference.Type,
    #"manufacturer" = Reference.Type,
    #"lotNumber" = Text.Type,
    #"expirationDate" = Date.Type,
    #"site" = CodeableConcept.Type,
    #"route" = CodeableConcept.Type,
    #"doseQuantity" = Quantity.Type,
    #"performer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"function" = CodeableConcept.Type,
      #"actor" = Reference.Type
    ],
    #"note" = table Annotation.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"isSubpotent" = Logical.Type,
    #"subpotentReason" = table CodeableConcept.Type,
    #"education" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"documentType" = Text.Type,
      #"reference" = Uri.Type,
      #"publicationDate" = DateTimeZone.Type,
      #"presentationDate" = DateTimeZone.Type
    ],
    #"programEligibility" = table CodeableConcept.Type,
    #"fundingSource" = CodeableConcept.Type,
    #"reaction" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"date" = DateTimeZone.Type,
      #"detail" = Reference.Type,
      #"reported" = Logical.Type
    ],
    #"protocolApplied" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"series" = Text.Type,
      #"authority" = Reference.Type,
      #"targetDisease" = table CodeableConcept.Type,
      #"doseNumber" = [
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type
      ],
      #"seriesDoses" = [
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type
      ]
    ]
  ] meta [ Documentation.Name = "Immunization.Type" ],

  ImmunizationEvaluation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"patient" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"authority" = Reference.Type,
    #"targetDisease" = CodeableConcept.Type,
    #"immunizationEvent" = Reference.Type,
    #"doseStatus" = CodeableConcept.Type,
    #"doseStatusReason" = table CodeableConcept.Type,
    #"description" = Text.Type,
    #"series" = Text.Type,
    #"doseNumber" = [
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type
    ],
    #"seriesDoses" = [
      #"positiveInt" = Int32.Type,
      #"string" = Text.Type
    ]
  ] meta [ Documentation.Name = "ImmunizationEvaluation.Type" ],

  ImmunizationRecommendation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"patient" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"authority" = Reference.Type,
    #"recommendation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"vaccineCode" = table CodeableConcept.Type,
      #"targetDisease" = CodeableConcept.Type,
      #"contraindicatedVaccineCode" = table CodeableConcept.Type,
      #"forecastStatus" = CodeableConcept.Type,
      #"forecastReason" = table CodeableConcept.Type,
      #"dateCriterion" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = CodeableConcept.Type,
        #"value" = DateTimeZone.Type
      ],
      #"description" = Text.Type,
      #"series" = Text.Type,
      #"doseNumber" = [
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type
      ],
      #"seriesDoses" = [
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type
      ],
      #"supportingImmunization" = table Reference.Type,
      #"supportingPatientInformation" = table Reference.Type
    ]
  ] meta [ Documentation.Name = "ImmunizationRecommendation.Type" ],

  ImplementationGuide.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"packageId" = Text.Type,
    #"license" = Text.Type,
    #"fhirVersion" = { Text.Type },
    #"dependsOn" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"uri" = Uri.Type,
      #"packageId" = Text.Type,
      #"version" = Text.Type
    ],
    #"global" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"profile" = Uri.Type
    ],
    #"definition" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"grouping" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"description" = Text.Type
      ],
      #"resource" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"reference" = Reference.Type,
        #"fhirVersion" = { Text.Type },
        #"name" = Text.Type,
        #"description" = Text.Type,
        #"example" = [
          #"boolean" = Logical.Type,
          #"canonical" = Uri.Type
        ],
        #"groupingId" = Text.Type
      ],
      #"page" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = [
          #"url" = Uri.Type,
          #"Reference" = Reference.Type
        ],
        #"title" = Text.Type,
        #"generation" = Text.Type,
        #"page" = table Type.RecordFields(Type.RecordFields(@ImplementationGuide.Type)[#"definition"][Type])[#"page"][Type]
      ],
      #"parameter" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"value" = Text.Type
      ],
      #"template" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"source" = Text.Type,
        #"scope" = Text.Type
      ]
    ],
    #"manifest" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"rendering" = Uri.Type,
      #"resource" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"reference" = Reference.Type,
        #"example" = [
          #"boolean" = Logical.Type,
          #"canonical" = Uri.Type
        ],
        #"relativePath" = Uri.Type
      ],
      #"page" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"title" = Text.Type,
        #"anchor" = { Text.Type }
      ],
      #"image" = { Text.Type },
      #"other" = { Text.Type }
    ]
  ] meta [ Documentation.Name = "ImplementationGuide.Type" ],

  InsurancePlan.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = table CodeableConcept.Type,
    #"name" = Text.Type,
    #"alias" = { Text.Type },
    #"period" = Period.Type,
    #"ownedBy" = Reference.Type,
    #"administeredBy" = Reference.Type,
    #"coverageArea" = table Reference.Type,
    #"contact" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"purpose" = CodeableConcept.Type,
      #"name" = HumanName.Type,
      #"telecom" = table ContactPoint.Type,
      #"address" = Address.Type
    ],
    #"endpoint" = table Reference.Type,
    #"network" = table Reference.Type,
    #"coverage" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"network" = table Reference.Type,
      #"benefit" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"requirement" = Text.Type,
        #"limit" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"value" = Quantity.Type,
          #"code" = CodeableConcept.Type
        ]
      ]
    ],
    #"plan" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"coverageArea" = table Reference.Type,
      #"network" = table Reference.Type,
      #"generalCost" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"groupSize" = Int32.Type,
        #"cost" = Money.Type,
        #"comment" = Text.Type
      ],
      #"specificCost" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"category" = CodeableConcept.Type,
        #"benefit" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"type" = CodeableConcept.Type,
          #"cost" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"type" = CodeableConcept.Type,
            #"applicability" = CodeableConcept.Type,
            #"qualifiers" = table CodeableConcept.Type,
            #"value" = Quantity.Type
          ]
        ]
      ]
    ]
  ] meta [ Documentation.Name = "InsurancePlan.Type" ],

  Invoice.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"cancelledReason" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"recipient" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"role" = CodeableConcept.Type,
      #"actor" = Reference.Type
    ],
    #"issuer" = Reference.Type,
    #"account" = Reference.Type,
    #"lineItem" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"sequence" = Int32.Type,
      #"chargeItem" = [
        #"Reference" = Reference.Type,
        #"CodeableConcept" = CodeableConcept.Type
      ],
      #"priceComponent" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"code" = CodeableConcept.Type,
        #"factor" = Decimal.Type,
        #"amount" = Money.Type
      ]
    ],
    #"totalNet" = Money.Type,
    #"totalGross" = Money.Type,
    #"paymentTerms" = Text.Type,
    #"note" = table Annotation.Type,
    #"totalPriceComponent" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@Invoice.Type)[#"lineItem"][Type]))[#"priceComponent"][Type])
  ] meta [ Documentation.Name = "Invoice.Type" ],

  Library.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"type" = CodeableConcept.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"parameter" = table ParameterDefinition.Type,
    #"dataRequirement" = table DataRequirement.Type,
    #"content" = table Attachment.Type
  ] meta [ Documentation.Name = "Library.Type" ],

  Linkage.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"active" = Logical.Type,
    #"author" = Reference.Type,
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"resource" = Reference.Type
    ]
  ] meta [ Documentation.Name = "Linkage.Type" ],

  List.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"mode" = Text.Type,
    #"title" = Text.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"source" = Reference.Type,
    #"orderedBy" = CodeableConcept.Type,
    #"note" = table Annotation.Type,
    #"entry" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"flag" = CodeableConcept.Type,
      #"deleted" = Logical.Type,
      #"date" = DateTimeZone.Type,
      #"item" = Reference.Type
    ],
    #"emptyReason" = CodeableConcept.Type
  ] meta [ Documentation.Name = "List.Type" ],

  Location.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"operationalStatus" = Coding.Type,
    #"name" = Text.Type,
    #"alias" = { Text.Type },
    #"description" = Text.Type,
    #"mode" = Text.Type,
    #"type" = table CodeableConcept.Type,
    #"telecom" = table ContactPoint.Type,
    #"address" = Address.Type,
    #"physicalType" = CodeableConcept.Type,
    #"position" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"longitude" = Decimal.Type,
      #"latitude" = Decimal.Type,
      #"altitude" = Decimal.Type
    ],
    #"managingOrganization" = Reference.Type,
    #"partOf" = Reference.Type,
    #"hoursOfOperation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"daysOfWeek" = { Text.Type },
      #"allDay" = Logical.Type,
      #"openingTime" = Time.Type,
      #"closingTime" = Time.Type
    ],
    #"availabilityExceptions" = Text.Type,
    #"endpoint" = table Reference.Type
  ] meta [ Documentation.Name = "Location.Type" ],

  Measure.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"library" = { Uri.Type },
    #"disclaimer" = Text.Type,
    #"scoring" = CodeableConcept.Type,
    #"compositeScoring" = CodeableConcept.Type,
    #"type" = table CodeableConcept.Type,
    #"riskAdjustment" = Text.Type,
    #"rateAggregation" = Text.Type,
    #"rationale" = Text.Type,
    #"clinicalRecommendationStatement" = Text.Type,
    #"improvementNotation" = CodeableConcept.Type,
    #"definition" = { Text.Type },
    #"guidance" = Text.Type,
    #"group" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"description" = Text.Type,
      #"population" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = CodeableConcept.Type,
        #"description" = Text.Type,
        #"criteria" = Expression.Type
      ],
      #"stratifier" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = CodeableConcept.Type,
        #"description" = Text.Type,
        #"criteria" = Expression.Type,
        #"component" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"code" = CodeableConcept.Type,
          #"description" = Text.Type,
          #"criteria" = Expression.Type
        ]
      ]
    ],
    #"supplementalData" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"usage" = table CodeableConcept.Type,
      #"description" = Text.Type,
      #"criteria" = Expression.Type
    ]
  ] meta [ Documentation.Name = "Measure.Type" ],

  MeasureReport.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"type" = Text.Type,
    #"measure" = Uri.Type,
    #"subject" = Reference.Type,
    #"date" = DateTimeZone.Type,
    #"reporter" = Reference.Type,
    #"period" = Period.Type,
    #"improvementNotation" = CodeableConcept.Type,
    #"group" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"population" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = CodeableConcept.Type,
        #"count" = Int32.Type,
        #"subjectResults" = Reference.Type
      ],
      #"measureScore" = Quantity.Type,
      #"stratifier" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = table CodeableConcept.Type,
        #"stratum" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"value" = CodeableConcept.Type,
          #"component" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"code" = CodeableConcept.Type,
            #"value" = CodeableConcept.Type
          ],
          #"population" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"code" = CodeableConcept.Type,
            #"count" = Int32.Type,
            #"subjectResults" = Reference.Type
          ],
          #"measureScore" = Quantity.Type
        ]
      ]
    ],
    #"evaluatedResource" = table Reference.Type
  ] meta [ Documentation.Name = "MeasureReport.Type" ],

  Media.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"modality" = CodeableConcept.Type,
    #"view" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"created" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"issued" = DateTimeZone.Type,
    #"operator" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"bodySite" = CodeableConcept.Type,
    #"deviceName" = Text.Type,
    #"device" = Reference.Type,
    #"height" = Int32.Type,
    #"width" = Int32.Type,
    #"frames" = Int32.Type,
    #"duration" = Decimal.Type,
    #"content" = Attachment.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "Media.Type" ],

  Medication.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"code" = CodeableConcept.Type,
    #"status" = Text.Type,
    #"manufacturer" = Reference.Type,
    #"form" = CodeableConcept.Type,
    #"amount" = Ratio.Type,
    #"ingredient" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"item" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"isActive" = Logical.Type,
      #"strength" = Ratio.Type
    ],
    #"batch" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"lotNumber" = Text.Type,
      #"expirationDate" = DateTimeZone.Type
    ]
  ] meta [ Documentation.Name = "Medication.Type" ],

  MedicationAdministration.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiates" = { Uri.Type },
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = table CodeableConcept.Type,
    #"category" = CodeableConcept.Type,
    #"medication" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"subject" = Reference.Type,
    #"context" = Reference.Type,
    #"supportingInformation" = table Reference.Type,
    #"effective" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"performer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"function" = CodeableConcept.Type,
      #"actor" = Reference.Type
    ],
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"request" = Reference.Type,
    #"device" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"dosage" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"text" = Text.Type,
      #"site" = CodeableConcept.Type,
      #"route" = CodeableConcept.Type,
      #"method" = CodeableConcept.Type,
      #"dose" = Quantity.Type,
      #"rate" = [
        #"Ratio" = Ratio.Type,
        #"Quantity" = Quantity.Type
      ]
    ],
    #"eventHistory" = table Reference.Type
  ] meta [ Documentation.Name = "MedicationAdministration.Type" ],

  MedicationDispense.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"category" = CodeableConcept.Type,
    #"medication" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"subject" = Reference.Type,
    #"context" = Reference.Type,
    #"supportingInformation" = table Reference.Type,
    #"performer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"function" = CodeableConcept.Type,
      #"actor" = Reference.Type
    ],
    #"location" = Reference.Type,
    #"authorizingPrescription" = table Reference.Type,
    #"type" = CodeableConcept.Type,
    #"quantity" = Quantity.Type,
    #"daysSupply" = Quantity.Type,
    #"whenPrepared" = DateTimeZone.Type,
    #"whenHandedOver" = DateTimeZone.Type,
    #"destination" = Reference.Type,
    #"receiver" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"dosageInstruction" = table Dosage.Type,
    #"substitution" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"wasSubstituted" = Logical.Type,
      #"type" = CodeableConcept.Type,
      #"reason" = table CodeableConcept.Type,
      #"responsibleParty" = table Reference.Type
    ],
    #"detectedIssue" = table Reference.Type,
    #"eventHistory" = table Reference.Type
  ] meta [ Documentation.Name = "MedicationDispense.Type" ],

  MedicationKnowledge.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"code" = CodeableConcept.Type,
    #"status" = Text.Type,
    #"manufacturer" = Reference.Type,
    #"doseForm" = CodeableConcept.Type,
    #"amount" = Quantity.Type,
    #"synonym" = { Text.Type },
    #"relatedMedicationKnowledge" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"reference" = table Reference.Type
    ],
    #"associatedMedication" = table Reference.Type,
    #"productType" = table CodeableConcept.Type,
    #"monograph" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"source" = Reference.Type
    ],
    #"ingredient" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"item" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"isActive" = Logical.Type,
      #"strength" = Ratio.Type
    ],
    #"preparationInstruction" = Text.Type,
    #"intendedRoute" = table CodeableConcept.Type,
    #"cost" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"source" = Text.Type,
      #"cost" = Money.Type
    ],
    #"monitoringProgram" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"name" = Text.Type
    ],
    #"administrationGuidelines" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"dosage" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"dosage" = table Dosage.Type
      ],
      #"indication" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"patientCharacteristics" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"characteristic" = [
          #"CodeableConcept" = CodeableConcept.Type,
          #"Quantity" = Quantity.Type
        ],
        #"value" = { Text.Type }
      ]
    ],
    #"medicineClassification" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"classification" = table CodeableConcept.Type
    ],
    #"packaging" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"quantity" = Quantity.Type
    ],
    #"drugCharacteristic" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"value" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"string" = Text.Type,
        #"Quantity" = Quantity.Type,
        #"base64Binary" = Text.Type
      ]
    ],
    #"contraindication" = table Reference.Type,
    #"regulatory" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"regulatoryAuthority" = Reference.Type,
      #"substitution" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"allowed" = Logical.Type
      ],
      #"schedule" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"schedule" = CodeableConcept.Type
      ],
      #"maxDispense" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"quantity" = Quantity.Type,
        #"period" = Duration.Type
      ]
    ],
    #"kinetics" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"areaUnderCurve" = table Quantity.Type,
      #"lethalDose50" = table Quantity.Type,
      #"halfLifePeriod" = Duration.Type
    ]
  ] meta [ Documentation.Name = "MedicationKnowledge.Type" ],

  MedicationRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"intent" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"priority" = Text.Type,
    #"doNotPerform" = Logical.Type,
    #"reported" = [
      #"boolean" = Logical.Type,
      #"Reference" = Reference.Type
    ],
    #"medication" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"supportingInformation" = table Reference.Type,
    #"authoredOn" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"performer" = Reference.Type,
    #"performerType" = CodeableConcept.Type,
    #"recorder" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"groupIdentifier" = Identifier.Type,
    #"courseOfTherapyType" = CodeableConcept.Type,
    #"insurance" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"dosageInstruction" = table Dosage.Type,
    #"dispenseRequest" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"initialFill" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"quantity" = Quantity.Type,
        #"duration" = Duration.Type
      ],
      #"dispenseInterval" = Duration.Type,
      #"validityPeriod" = Period.Type,
      #"numberOfRepeatsAllowed" = Int32.Type,
      #"quantity" = Quantity.Type,
      #"expectedSupplyDuration" = Duration.Type,
      #"performer" = Reference.Type
    ],
    #"substitution" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"allowed" = [
        #"boolean" = Logical.Type,
        #"CodeableConcept" = CodeableConcept.Type
      ],
      #"reason" = CodeableConcept.Type
    ],
    #"priorPrescription" = Reference.Type,
    #"detectedIssue" = table Reference.Type,
    #"eventHistory" = table Reference.Type
  ] meta [ Documentation.Name = "MedicationRequest.Type" ],

  MedicationStatement.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = table CodeableConcept.Type,
    #"category" = CodeableConcept.Type,
    #"medication" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"subject" = Reference.Type,
    #"context" = Reference.Type,
    #"effective" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"dateAsserted" = DateTimeZone.Type,
    #"informationSource" = Reference.Type,
    #"derivedFrom" = table Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"dosage" = table Dosage.Type
  ] meta [ Documentation.Name = "MedicationStatement.Type" ],

  MedicinalProduct.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"type" = CodeableConcept.Type,
    #"domain" = Coding.Type,
    #"combinedPharmaceuticalDoseForm" = CodeableConcept.Type,
    #"legalStatusOfSupply" = CodeableConcept.Type,
    #"additionalMonitoringIndicator" = CodeableConcept.Type,
    #"specialMeasures" = { Text.Type },
    #"paediatricUseIndicator" = CodeableConcept.Type,
    #"productClassification" = table CodeableConcept.Type,
    #"marketingStatus" = table MarketingStatus.Type,
    #"pharmaceuticalProduct" = table Reference.Type,
    #"packagedMedicinalProduct" = table Reference.Type,
    #"attachedDocument" = table Reference.Type,
    #"masterFile" = table Reference.Type,
    #"contact" = table Reference.Type,
    #"clinicalTrial" = table Reference.Type,
    #"name" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"productName" = Text.Type,
      #"namePart" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"part" = Text.Type,
        #"type" = Coding.Type
      ],
      #"countryLanguage" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"country" = CodeableConcept.Type,
        #"jurisdiction" = CodeableConcept.Type,
        #"language" = CodeableConcept.Type
      ]
    ],
    #"crossReference" = table Identifier.Type,
    #"manufacturingBusinessOperation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"operationType" = CodeableConcept.Type,
      #"authorisationReferenceNumber" = Identifier.Type,
      #"effectiveDate" = DateTimeZone.Type,
      #"confidentialityIndicator" = CodeableConcept.Type,
      #"manufacturer" = table Reference.Type,
      #"regulator" = Reference.Type
    ],
    #"specialDesignation" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"intendedUse" = CodeableConcept.Type,
      #"indication" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"status" = CodeableConcept.Type,
      #"date" = DateTimeZone.Type,
      #"species" = CodeableConcept.Type
    ]
  ] meta [ Documentation.Name = "MedicinalProduct.Type" ],

  MedicinalProductAuthorization.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"subject" = Reference.Type,
    #"country" = table CodeableConcept.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"status" = CodeableConcept.Type,
    #"statusDate" = DateTimeZone.Type,
    #"restoreDate" = DateTimeZone.Type,
    #"validityPeriod" = Period.Type,
    #"dataExclusivityPeriod" = Period.Type,
    #"dateOfFirstAuthorization" = DateTimeZone.Type,
    #"internationalBirthDate" = DateTimeZone.Type,
    #"legalBasis" = CodeableConcept.Type,
    #"jurisdictionalAuthorization" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"country" = CodeableConcept.Type,
      #"jurisdiction" = table CodeableConcept.Type,
      #"legalStatusOfSupply" = CodeableConcept.Type,
      #"validityPeriod" = Period.Type
    ],
    #"holder" = Reference.Type,
    #"regulator" = Reference.Type,
    #"procedure" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"date" = [
        #"Period" = Period.Type,
        #"dateTime" = DateTimeZone.Type
      ],
      #"application" = table Type.RecordFields(@MedicinalProductAuthorization.Type)[#"procedure"][Type]
    ]
  ] meta [ Documentation.Name = "MedicinalProductAuthorization.Type" ],

  MedicinalProductContraindication.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"subject" = table Reference.Type,
    #"disease" = CodeableConcept.Type,
    #"diseaseStatus" = CodeableConcept.Type,
    #"comorbidity" = table CodeableConcept.Type,
    #"therapeuticIndication" = table Reference.Type,
    #"otherTherapy" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"therapyRelationshipType" = CodeableConcept.Type,
      #"medication" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"population" = table Population.Type
  ] meta [ Documentation.Name = "MedicinalProductContraindication.Type" ],

  MedicinalProductIndication.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"subject" = table Reference.Type,
    #"diseaseSymptomProcedure" = CodeableConcept.Type,
    #"diseaseStatus" = CodeableConcept.Type,
    #"comorbidity" = table CodeableConcept.Type,
    #"intendedEffect" = CodeableConcept.Type,
    #"duration" = Quantity.Type,
    #"otherTherapy" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"therapyRelationshipType" = CodeableConcept.Type,
      #"medication" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"undesirableEffect" = table Reference.Type,
    #"population" = table Population.Type
  ] meta [ Documentation.Name = "MedicinalProductIndication.Type" ],

  MedicinalProductIngredient.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"role" = CodeableConcept.Type,
    #"allergenicIndicator" = Logical.Type,
    #"manufacturer" = table Reference.Type,
    #"specifiedSubstance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"group" = CodeableConcept.Type,
      #"confidentiality" = CodeableConcept.Type,
      #"strength" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"presentation" = Ratio.Type,
        #"presentationLowLimit" = Ratio.Type,
        #"concentration" = Ratio.Type,
        #"concentrationLowLimit" = Ratio.Type,
        #"measurementPoint" = Text.Type,
        #"country" = table CodeableConcept.Type,
        #"referenceStrength" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"substance" = CodeableConcept.Type,
          #"strength" = Ratio.Type,
          #"strengthLowLimit" = Ratio.Type,
          #"measurementPoint" = Text.Type,
          #"country" = table CodeableConcept.Type
        ]
      ]
    ],
    #"substance" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"strength" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@MedicinalProductIngredient.Type)[#"specifiedSubstance"][Type]))[#"strength"][Type])
    ]
  ] meta [ Documentation.Name = "MedicinalProductIngredient.Type" ],

  MedicinalProductInteraction.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"subject" = table Reference.Type,
    #"description" = Text.Type,
    #"interactant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"item" = [
        #"Reference" = Reference.Type,
        #"CodeableConcept" = CodeableConcept.Type
      ]
    ],
    #"type" = CodeableConcept.Type,
    #"effect" = CodeableConcept.Type,
    #"incidence" = CodeableConcept.Type,
    #"management" = CodeableConcept.Type
  ] meta [ Documentation.Name = "MedicinalProductInteraction.Type" ],

  MedicinalProductManufactured.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"manufacturedDoseForm" = CodeableConcept.Type,
    #"unitOfPresentation" = CodeableConcept.Type,
    #"quantity" = Quantity.Type,
    #"manufacturer" = table Reference.Type,
    #"ingredient" = table Reference.Type,
    #"physicalCharacteristics" = ProdCharacteristic.Type,
    #"otherCharacteristics" = table CodeableConcept.Type
  ] meta [ Documentation.Name = "MedicinalProductManufactured.Type" ],

  MedicinalProductPackaged.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"subject" = table Reference.Type,
    #"description" = Text.Type,
    #"legalStatusOfSupply" = CodeableConcept.Type,
    #"marketingStatus" = table MarketingStatus.Type,
    #"marketingAuthorization" = Reference.Type,
    #"manufacturer" = table Reference.Type,
    #"batchIdentifier" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"outerPackaging" = Identifier.Type,
      #"immediatePackaging" = Identifier.Type
    ],
    #"packageItem" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"quantity" = Quantity.Type,
      #"material" = table CodeableConcept.Type,
      #"alternateMaterial" = table CodeableConcept.Type,
      #"device" = table Reference.Type,
      #"manufacturedItem" = table Reference.Type,
      #"physicalCharacteristics" = ProdCharacteristic.Type,
      #"otherCharacteristics" = table CodeableConcept.Type,
      #"shelfLifeStorage" = table ProductShelfLife.Type,
      #"manufacturer" = table Reference.Type,
      #"packageItem" = table Type.TableRow(Type.RecordFields(@MedicinalProductPackaged.Type)[#"packageItem"][Type])
    ]
  ] meta [ Documentation.Name = "MedicinalProductPackaged.Type" ],

  MedicinalProductPharmaceutical.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"administrableDoseForm" = CodeableConcept.Type,
    #"unitOfPresentation" = CodeableConcept.Type,
    #"ingredient" = table Reference.Type,
    #"device" = table Reference.Type,
    #"characteristics" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"status" = CodeableConcept.Type
    ],
    #"routeOfAdministration" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"firstDose" = Quantity.Type,
      #"maxSingleDose" = Quantity.Type,
      #"maxDosePerDay" = Quantity.Type,
      #"maxDosePerTreatmentPeriod" = Ratio.Type,
      #"maxTreatmentPeriod" = Duration.Type,
      #"targetSpecies" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = CodeableConcept.Type,
        #"withdrawalPeriod" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"tissue" = CodeableConcept.Type,
          #"value" = Quantity.Type,
          #"supportingInformation" = Text.Type
        ]
      ]
    ]
  ] meta [ Documentation.Name = "MedicinalProductPharmaceutical.Type" ],

  MedicinalProductUndesirableEffect.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"subject" = table Reference.Type,
    #"symptomConditionEffect" = CodeableConcept.Type,
    #"classification" = CodeableConcept.Type,
    #"frequencyOfOccurrence" = CodeableConcept.Type,
    #"population" = table Population.Type
  ] meta [ Documentation.Name = "MedicinalProductUndesirableEffect.Type" ],

  MessageDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"replaces" = { Uri.Type },
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"base" = Uri.Type,
    #"parent" = { Uri.Type },
    #"event" = [
      #"Coding" = Coding.Type,
      #"uri" = Uri.Type
    ],
    #"category" = Text.Type,
    #"focus" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = Text.Type,
      #"profile" = Uri.Type,
      #"min" = Int32.Type,
      #"max" = Text.Type
    ],
    #"responseRequired" = Text.Type,
    #"allowedResponse" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"message" = Uri.Type,
      #"situation" = Text.Type
    ],
    #"graph" = { Uri.Type }
  ] meta [ Documentation.Name = "MessageDefinition.Type" ],

  MessageHeader.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"event" = [
      #"Coding" = Coding.Type,
      #"uri" = Uri.Type
    ],
    #"destination" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"target" = Reference.Type,
      #"endpoint" = Uri.Type,
      #"receiver" = Reference.Type
    ],
    #"sender" = Reference.Type,
    #"enterer" = Reference.Type,
    #"author" = Reference.Type,
    #"source" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"software" = Text.Type,
      #"version" = Text.Type,
      #"contact" = ContactPoint.Type,
      #"endpoint" = Uri.Type
    ],
    #"responsible" = Reference.Type,
    #"reason" = CodeableConcept.Type,
    #"response" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Text.Type,
      #"code" = Text.Type,
      #"details" = Reference.Type
    ],
    #"focus" = table Reference.Type,
    #"definition" = Uri.Type
  ] meta [ Documentation.Name = "MessageHeader.Type" ],

  MetadataResource.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type
  ] meta [ Documentation.Name = "MetadataResource.Type" ],

  MolecularSequence.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"type" = Text.Type,
    #"coordinateSystem" = Int32.Type,
    #"patient" = Reference.Type,
    #"specimen" = Reference.Type,
    #"device" = Reference.Type,
    #"performer" = Reference.Type,
    #"quantity" = Quantity.Type,
    #"referenceSeq" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"chromosome" = CodeableConcept.Type,
      #"genomeBuild" = Text.Type,
      #"orientation" = Text.Type,
      #"referenceSeqId" = CodeableConcept.Type,
      #"referenceSeqPointer" = Reference.Type,
      #"referenceSeqString" = Text.Type,
      #"strand" = Text.Type,
      #"windowStart" = Int32.Type,
      #"windowEnd" = Int32.Type
    ],
    #"variant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"start" = Int32.Type,
      #"end" = Int32.Type,
      #"observedAllele" = Text.Type,
      #"referenceAllele" = Text.Type,
      #"cigar" = Text.Type,
      #"variantPointer" = Reference.Type
    ],
    #"observedSeq" = Text.Type,
    #"quality" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"standardSequence" = CodeableConcept.Type,
      #"start" = Int32.Type,
      #"end" = Int32.Type,
      #"score" = Quantity.Type,
      #"method" = CodeableConcept.Type,
      #"truthTP" = Decimal.Type,
      #"queryTP" = Decimal.Type,
      #"truthFN" = Decimal.Type,
      #"queryFP" = Decimal.Type,
      #"gtFP" = Decimal.Type,
      #"precision" = Decimal.Type,
      #"recall" = Decimal.Type,
      #"fScore" = Decimal.Type,
      #"roc" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"score" = { Int32.Type },
        #"numTP" = { Int32.Type },
        #"numFP" = { Int32.Type },
        #"numFN" = { Int32.Type },
        #"precision" = { Decimal.Type },
        #"sensitivity" = { Decimal.Type },
        #"fMeasure" = { Decimal.Type }
      ]
    ],
    #"readCoverage" = Int32.Type,
    #"repository" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"url" = Uri.Type,
      #"name" = Text.Type,
      #"datasetId" = Text.Type,
      #"variantsetId" = Text.Type,
      #"readsetId" = Text.Type
    ],
    #"pointer" = table Reference.Type,
    #"structureVariant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"variantType" = CodeableConcept.Type,
      #"exact" = Logical.Type,
      #"length" = Int32.Type,
      #"outer" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"start" = Int32.Type,
        #"end" = Int32.Type
      ],
      #"inner" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"start" = Int32.Type,
        #"end" = Int32.Type
      ]
    ]
  ] meta [ Documentation.Name = "MolecularSequence.Type" ],

  NamingSystem.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"name" = Text.Type,
    #"status" = Text.Type,
    #"kind" = Text.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"responsible" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"usage" = Text.Type,
    #"uniqueId" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"value" = Text.Type,
      #"preferred" = Logical.Type,
      #"comment" = Text.Type,
      #"period" = Period.Type
    ]
  ] meta [ Documentation.Name = "NamingSystem.Type" ],

  NutritionOrder.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"instantiates" = { Uri.Type },
    #"status" = Text.Type,
    #"intent" = Text.Type,
    #"patient" = Reference.Type,
    #"encounter" = Reference.Type,
    #"dateTime" = DateTimeZone.Type,
    #"orderer" = Reference.Type,
    #"allergyIntolerance" = table Reference.Type,
    #"foodPreferenceModifier" = table CodeableConcept.Type,
    #"excludeFoodModifier" = table CodeableConcept.Type,
    #"oralDiet" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = table CodeableConcept.Type,
      #"schedule" = table Timing.Type,
      #"nutrient" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"modifier" = CodeableConcept.Type,
        #"amount" = Quantity.Type
      ],
      #"texture" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"modifier" = CodeableConcept.Type,
        #"foodType" = CodeableConcept.Type
      ],
      #"fluidConsistencyType" = table CodeableConcept.Type,
      #"instruction" = Text.Type
    ],
    #"supplement" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"productName" = Text.Type,
      #"schedule" = table Timing.Type,
      #"quantity" = Quantity.Type,
      #"instruction" = Text.Type
    ],
    #"enteralFormula" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"baseFormulaType" = CodeableConcept.Type,
      #"baseFormulaProductName" = Text.Type,
      #"additiveType" = CodeableConcept.Type,
      #"additiveProductName" = Text.Type,
      #"caloricDensity" = Quantity.Type,
      #"routeofAdministration" = CodeableConcept.Type,
      #"administration" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"schedule" = Timing.Type,
        #"quantity" = Quantity.Type,
        #"rate" = [
          #"Quantity" = Quantity.Type,
          #"Ratio" = Ratio.Type
        ]
      ],
      #"maxVolumeToDeliver" = Quantity.Type,
      #"administrationInstruction" = Text.Type
    ],
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "NutritionOrder.Type" ],

  Observation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"focus" = table Reference.Type,
    #"encounter" = Reference.Type,
    #"effective" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type,
      #"instant" = DateTimeZone.Type
    ],
    #"issued" = DateTimeZone.Type,
    #"performer" = table Reference.Type,
    #"value" = [
      #"Quantity" = Quantity.Type,
      #"CodeableConcept" = CodeableConcept.Type,
      #"string" = Text.Type,
      #"boolean" = Logical.Type,
      #"integer" = Int32.Type,
      #"Range" = Range.Type,
      #"Ratio" = Ratio.Type,
      #"SampledData" = SampledData.Type,
      #"time" = Time.Type,
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"dataAbsentReason" = CodeableConcept.Type,
    #"interpretation" = table CodeableConcept.Type,
    #"note" = table Annotation.Type,
    #"bodySite" = CodeableConcept.Type,
    #"method" = CodeableConcept.Type,
    #"specimen" = Reference.Type,
    #"device" = Reference.Type,
    #"referenceRange" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"low" = Quantity.Type,
      #"high" = Quantity.Type,
      #"type" = CodeableConcept.Type,
      #"appliesTo" = table CodeableConcept.Type,
      #"age" = Range.Type,
      #"text" = Text.Type
    ],
    #"hasMember" = table Reference.Type,
    #"derivedFrom" = table Reference.Type,
    #"component" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"value" = [
        #"Quantity" = Quantity.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"string" = Text.Type,
        #"boolean" = Logical.Type,
        #"integer" = Int32.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"SampledData" = SampledData.Type,
        #"time" = Time.Type,
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ],
      #"dataAbsentReason" = CodeableConcept.Type,
      #"interpretation" = table CodeableConcept.Type,
      #"referenceRange" = table Type.TableRow(Type.RecordFields(@Observation.Type)[#"referenceRange"][Type])
    ]
  ] meta [ Documentation.Name = "Observation.Type" ],

  ObservationDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"category" = table CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"identifier" = table Identifier.Type,
    #"permittedDataType" = { Text.Type },
    #"multipleResultsAllowed" = Logical.Type,
    #"method" = CodeableConcept.Type,
    #"preferredReportName" = Text.Type,
    #"quantitativeDetails" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"customaryUnit" = CodeableConcept.Type,
      #"unit" = CodeableConcept.Type,
      #"conversionFactor" = Decimal.Type,
      #"decimalPrecision" = Int32.Type
    ],
    #"qualifiedInterval" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = Text.Type,
      #"range" = Range.Type,
      #"context" = CodeableConcept.Type,
      #"appliesTo" = table CodeableConcept.Type,
      #"gender" = Text.Type,
      #"age" = Range.Type,
      #"gestationalAge" = Range.Type,
      #"condition" = Text.Type
    ],
    #"validCodedValueSet" = Reference.Type,
    #"normalCodedValueSet" = Reference.Type,
    #"abnormalCodedValueSet" = Reference.Type,
    #"criticalCodedValueSet" = Reference.Type
  ] meta [ Documentation.Name = "ObservationDefinition.Type" ],

  OperationDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"kind" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"affectsState" = Logical.Type,
    #"code" = Text.Type,
    #"comment" = Text.Type,
    #"base" = Uri.Type,
    #"resource" = { Text.Type },
    #"system" = Logical.Type,
    #"type" = Logical.Type,
    #"instance" = Logical.Type,
    #"inputProfile" = Uri.Type,
    #"outputProfile" = Uri.Type,
    #"parameter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"use" = Text.Type,
      #"min" = Int32.Type,
      #"max" = Text.Type,
      #"documentation" = Text.Type,
      #"type" = Text.Type,
      #"targetProfile" = { Uri.Type },
      #"searchType" = Text.Type,
      #"binding" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"strength" = Text.Type,
        #"valueSet" = Uri.Type
      ],
      #"referencedFrom" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"source" = Text.Type,
        #"sourceId" = Text.Type
      ],
      #"part" = table Type.TableRow(Type.RecordFields(@OperationDefinition.Type)[#"parameter"][Type])
    ],
    #"overload" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"parameterName" = { Text.Type },
      #"comment" = Text.Type
    ]
  ] meta [ Documentation.Name = "OperationDefinition.Type" ],

  OperationOutcome.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"issue" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"severity" = Text.Type,
      #"code" = Text.Type,
      #"details" = CodeableConcept.Type,
      #"diagnostics" = Text.Type,
      #"location" = { Text.Type },
      #"expression" = { Text.Type }
    ]
  ] meta [ Documentation.Name = "OperationOutcome.Type" ],

  Organization.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"type" = table CodeableConcept.Type,
    #"name" = Text.Type,
    #"alias" = { Text.Type },
    #"telecom" = table ContactPoint.Type,
    #"address" = table Address.Type,
    #"partOf" = Reference.Type,
    #"contact" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"purpose" = CodeableConcept.Type,
      #"name" = HumanName.Type,
      #"telecom" = table ContactPoint.Type,
      #"address" = Address.Type
    ],
    #"endpoint" = table Reference.Type
  ] meta [ Documentation.Name = "Organization.Type" ],

  OrganizationAffiliation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"period" = Period.Type,
    #"organization" = Reference.Type,
    #"participatingOrganization" = Reference.Type,
    #"network" = table Reference.Type,
    #"code" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"location" = table Reference.Type,
    #"healthcareService" = table Reference.Type,
    #"telecom" = table ContactPoint.Type,
    #"endpoint" = table Reference.Type
  ] meta [ Documentation.Name = "OrganizationAffiliation.Type" ],

  Parameters.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"parameter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"value" = [
        #"base64Binary" = Text.Type,
        #"boolean" = Logical.Type,
        #"canonical" = Uri.Type,
        #"code" = Text.Type,
        #"date" = Date.Type,
        #"dateTime" = DateTimeZone.Type,
        #"decimal" = Decimal.Type,
        #"id" = Text.Type,
        #"instant" = DateTimeZone.Type,
        #"integer" = Int32.Type,
        #"markdown" = Text.Type,
        #"oid" = Text.Type,
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type,
        #"time" = Time.Type,
        #"unsignedInt" = Int32.Type,
        #"uri" = Uri.Type,
        #"url" = Uri.Type,
        #"uuid" = Text.Type,
        #"Address" = Address.Type,
        #"Age" = Age.Type,
        #"Annotation" = Annotation.Type,
        #"Attachment" = Attachment.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"Coding" = Coding.Type,
        #"ContactPoint" = ContactPoint.Type,
        #"Count" = Count.Type,
        #"Distance" = Distance.Type,
        #"Duration" = Duration.Type,
        #"HumanName" = HumanName.Type,
        #"Identifier" = Identifier.Type,
        #"Money" = Money.Type,
        #"Period" = Period.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"Reference" = Reference.Type,
        #"SampledData" = SampledData.Type,
        #"Signature" = Signature.Type,
        #"Timing" = Timing.Type,
        #"ContactDetail" = ContactDetail.Type,
        #"Contributor" = Contributor.Type,
        #"DataRequirement" = DataRequirement.Type,
        #"Expression" = Expression.Type,
        #"ParameterDefinition" = ParameterDefinition.Type,
        #"RelatedArtifact" = RelatedArtifact.Type,
        #"TriggerDefinition" = TriggerDefinition.Type,
        #"UsageContext" = UsageContext.Type,
        #"Dosage" = Dosage.Type,
        #"Meta" = Meta.Type
      ],
      #"resource" = Resource.Type,
      #"part" = table Type.TableRow(Type.RecordFields(@Parameters.Type)[#"parameter"][Type])
    ]
  ] meta [ Documentation.Name = "Parameters.Type" ],

  Patient.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"name" = table HumanName.Type,
    #"telecom" = table ContactPoint.Type,
    #"gender" = Text.Type,
    #"birthDate" = Date.Type,
    #"deceased" = [
      #"boolean" = Logical.Type,
      #"dateTime" = DateTimeZone.Type
    ],
    #"address" = table Address.Type,
    #"maritalStatus" = CodeableConcept.Type,
    #"multipleBirth" = [
      #"boolean" = Logical.Type,
      #"integer" = Int32.Type
    ],
    #"photo" = table Attachment.Type,
    #"contact" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"relationship" = table CodeableConcept.Type,
      #"name" = HumanName.Type,
      #"telecom" = table ContactPoint.Type,
      #"address" = Address.Type,
      #"gender" = Text.Type,
      #"organization" = Reference.Type,
      #"period" = Period.Type
    ],
    #"communication" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"language" = CodeableConcept.Type,
      #"preferred" = Logical.Type
    ],
    #"generalPractitioner" = table Reference.Type,
    #"managingOrganization" = Reference.Type,
    #"link" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"other" = Reference.Type,
      #"type" = Text.Type
    ]
  ] meta [ Documentation.Name = "Patient.Type" ],

  PaymentNotice.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"request" = Reference.Type,
    #"response" = Reference.Type,
    #"created" = DateTimeZone.Type,
    #"provider" = Reference.Type,
    #"payment" = Reference.Type,
    #"paymentDate" = Date.Type,
    #"payee" = Reference.Type,
    #"recipient" = Reference.Type,
    #"amount" = Money.Type,
    #"paymentStatus" = CodeableConcept.Type
  ] meta [ Documentation.Name = "PaymentNotice.Type" ],

  PaymentReconciliation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"period" = Period.Type,
    #"created" = DateTimeZone.Type,
    #"paymentIssuer" = Reference.Type,
    #"request" = Reference.Type,
    #"requestor" = Reference.Type,
    #"outcome" = Text.Type,
    #"disposition" = Text.Type,
    #"paymentDate" = Date.Type,
    #"paymentAmount" = Money.Type,
    #"paymentIdentifier" = Identifier.Type,
    #"detail" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Identifier.Type,
      #"predecessor" = Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"request" = Reference.Type,
      #"submitter" = Reference.Type,
      #"response" = Reference.Type,
      #"date" = Date.Type,
      #"responsible" = Reference.Type,
      #"payee" = Reference.Type,
      #"amount" = Money.Type
    ],
    #"formCode" = CodeableConcept.Type,
    #"processNote" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"text" = Text.Type
    ]
  ] meta [ Documentation.Name = "PaymentReconciliation.Type" ],

  Person.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"name" = table HumanName.Type,
    #"telecom" = table ContactPoint.Type,
    #"gender" = Text.Type,
    #"birthDate" = Date.Type,
    #"address" = table Address.Type,
    #"photo" = Attachment.Type,
    #"managingOrganization" = Reference.Type,
    #"active" = Logical.Type,
    #"link" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"target" = Reference.Type,
      #"assurance" = Text.Type
    ]
  ] meta [ Documentation.Name = "Person.Type" ],

  PlanDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"subtitle" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"library" = { Uri.Type },
    #"goal" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = CodeableConcept.Type,
      #"description" = CodeableConcept.Type,
      #"priority" = CodeableConcept.Type,
      #"start" = CodeableConcept.Type,
      #"addresses" = table CodeableConcept.Type,
      #"documentation" = table RelatedArtifact.Type,
      #"target" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"measure" = CodeableConcept.Type,
        #"detail" = [
          #"Quantity" = Quantity.Type,
          #"Range" = Range.Type,
          #"CodeableConcept" = CodeableConcept.Type
        ],
        #"due" = Duration.Type
      ]
    ],
    #"action" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"prefix" = Text.Type,
      #"title" = Text.Type,
      #"description" = Text.Type,
      #"textEquivalent" = Text.Type,
      #"priority" = Text.Type,
      #"code" = table CodeableConcept.Type,
      #"reason" = table CodeableConcept.Type,
      #"documentation" = table RelatedArtifact.Type,
      #"goalId" = { Text.Type },
      #"subject" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ],
      #"trigger" = table TriggerDefinition.Type,
      #"condition" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"kind" = Text.Type,
        #"expression" = Expression.Type
      ],
      #"input" = table DataRequirement.Type,
      #"output" = table DataRequirement.Type,
      #"relatedAction" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"actionId" = Text.Type,
        #"relationship" = Text.Type,
        #"offset" = [
          #"Duration" = Duration.Type,
          #"Range" = Range.Type
        ]
      ],
      #"timing" = [
        #"dateTime" = DateTimeZone.Type,
        #"Age" = Age.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type,
        #"Range" = Range.Type,
        #"Timing" = Timing.Type
      ],
      #"participant" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = Text.Type,
        #"role" = CodeableConcept.Type
      ],
      #"type" = CodeableConcept.Type,
      #"groupingBehavior" = Text.Type,
      #"selectionBehavior" = Text.Type,
      #"requiredBehavior" = Text.Type,
      #"precheckBehavior" = Text.Type,
      #"cardinalityBehavior" = Text.Type,
      #"definition" = [
        #"canonical" = Uri.Type,
        #"uri" = Uri.Type
      ],
      #"transform" = Uri.Type,
      #"dynamicValue" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"path" = Text.Type,
        #"expression" = Expression.Type
      ],
      #"action" = table Type.TableRow(Type.RecordFields(@PlanDefinition.Type)[#"action"][Type])
    ]
  ] meta [ Documentation.Name = "PlanDefinition.Type" ],

  Practitioner.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"name" = table HumanName.Type,
    #"telecom" = table ContactPoint.Type,
    #"address" = table Address.Type,
    #"gender" = Text.Type,
    #"birthDate" = Date.Type,
    #"photo" = table Attachment.Type,
    #"qualification" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"code" = CodeableConcept.Type,
      #"period" = Period.Type,
      #"issuer" = Reference.Type
    ],
    #"communication" = table CodeableConcept.Type
  ] meta [ Documentation.Name = "Practitioner.Type" ],

  PractitionerRole.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"period" = Period.Type,
    #"practitioner" = Reference.Type,
    #"organization" = Reference.Type,
    #"code" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"location" = table Reference.Type,
    #"healthcareService" = table Reference.Type,
    #"telecom" = table ContactPoint.Type,
    #"availableTime" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"daysOfWeek" = { Text.Type },
      #"allDay" = Logical.Type,
      #"availableStartTime" = Time.Type,
      #"availableEndTime" = Time.Type
    ],
    #"notAvailable" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"during" = Period.Type
    ],
    #"availabilityExceptions" = Text.Type,
    #"endpoint" = table Reference.Type
  ] meta [ Documentation.Name = "PractitionerRole.Type" ],

  Procedure.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"category" = CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"performed" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"string" = Text.Type,
      #"Age" = Age.Type,
      #"Range" = Range.Type
    ],
    #"recorder" = Reference.Type,
    #"asserter" = Reference.Type,
    #"performer" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"function" = CodeableConcept.Type,
      #"actor" = Reference.Type,
      #"onBehalfOf" = Reference.Type
    ],
    #"location" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"bodySite" = table CodeableConcept.Type,
    #"outcome" = CodeableConcept.Type,
    #"report" = table Reference.Type,
    #"complication" = table CodeableConcept.Type,
    #"complicationDetail" = table Reference.Type,
    #"followUp" = table CodeableConcept.Type,
    #"note" = table Annotation.Type,
    #"focalDevice" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = CodeableConcept.Type,
      #"manipulated" = Reference.Type
    ],
    #"usedReference" = table Reference.Type,
    #"usedCode" = table CodeableConcept.Type
  ] meta [ Documentation.Name = "Procedure.Type" ],

  Provenance.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"target" = table Reference.Type,
    #"occurred" = [
      #"Period" = Period.Type,
      #"dateTime" = DateTimeZone.Type
    ],
    #"recorded" = DateTimeZone.Type,
    #"policy" = { Uri.Type },
    #"location" = Reference.Type,
    #"reason" = table CodeableConcept.Type,
    #"activity" = CodeableConcept.Type,
    #"agent" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"role" = table CodeableConcept.Type,
      #"who" = Reference.Type,
      #"onBehalfOf" = Reference.Type
    ],
    #"entity" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"role" = Text.Type,
      #"what" = Reference.Type,
      #"agent" = table Type.TableRow(Type.RecordFields(@Provenance.Type)[#"agent"][Type])
    ],
    #"signature" = table Signature.Type
  ] meta [ Documentation.Name = "Provenance.Type" ],

  Questionnaire.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"derivedFrom" = { Uri.Type },
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subjectType" = { Text.Type },
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"code" = table Coding.Type,
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"linkId" = Text.Type,
      #"definition" = Uri.Type,
      #"code" = table Coding.Type,
      #"prefix" = Text.Type,
      #"text" = Text.Type,
      #"type" = Text.Type,
      #"enableWhen" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"question" = Text.Type,
        #"operator" = Text.Type,
        #"answer" = [
          #"boolean" = Logical.Type,
          #"decimal" = Decimal.Type,
          #"integer" = Int32.Type,
          #"date" = Date.Type,
          #"dateTime" = DateTimeZone.Type,
          #"time" = Time.Type,
          #"string" = Text.Type,
          #"Coding" = Coding.Type,
          #"Quantity" = Quantity.Type,
          #"Reference" = Reference.Type
        ]
      ],
      #"enableBehavior" = Text.Type,
      #"required" = Logical.Type,
      #"repeats" = Logical.Type,
      #"readOnly" = Logical.Type,
      #"maxLength" = Int32.Type,
      #"answerValueSet" = Uri.Type,
      #"answerOption" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"value" = [
          #"integer" = Int32.Type,
          #"date" = Date.Type,
          #"time" = Time.Type,
          #"string" = Text.Type,
          #"Coding" = Coding.Type,
          #"Reference" = Reference.Type
        ],
        #"initialSelected" = Logical.Type
      ],
      #"initial" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"value" = [
          #"boolean" = Logical.Type,
          #"decimal" = Decimal.Type,
          #"integer" = Int32.Type,
          #"date" = Date.Type,
          #"dateTime" = DateTimeZone.Type,
          #"time" = Time.Type,
          #"string" = Text.Type,
          #"uri" = Uri.Type,
          #"Attachment" = Attachment.Type,
          #"Coding" = Coding.Type,
          #"Quantity" = Quantity.Type,
          #"Reference" = Reference.Type
        ]
      ],
      #"item" = table Type.TableRow(Type.RecordFields(@Questionnaire.Type)[#"item"][Type])
    ]
  ] meta [ Documentation.Name = "Questionnaire.Type" ],

  QuestionnaireResponse.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"questionnaire" = Uri.Type,
    #"status" = Text.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"authored" = DateTimeZone.Type,
    #"author" = Reference.Type,
    #"source" = Reference.Type,
    #"item" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"linkId" = Text.Type,
      #"definition" = Uri.Type,
      #"text" = Text.Type,
      #"answer" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"value" = [
          #"boolean" = Logical.Type,
          #"decimal" = Decimal.Type,
          #"integer" = Int32.Type,
          #"date" = Date.Type,
          #"dateTime" = DateTimeZone.Type,
          #"time" = Time.Type,
          #"string" = Text.Type,
          #"uri" = Uri.Type,
          #"Attachment" = Attachment.Type,
          #"Coding" = Coding.Type,
          #"Quantity" = Quantity.Type,
          #"Reference" = Reference.Type
        ],
        #"item" = table Type.TableRow(Type.RecordFields(@QuestionnaireResponse.Type)[#"item"][Type])
      ],
      #"item" = table Type.TableRow(Type.RecordFields(@QuestionnaireResponse.Type)[#"item"][Type])
    ]
  ] meta [ Documentation.Name = "QuestionnaireResponse.Type" ],

  RelatedPerson.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"patient" = Reference.Type,
    #"relationship" = table CodeableConcept.Type,
    #"name" = table HumanName.Type,
    #"telecom" = table ContactPoint.Type,
    #"gender" = Text.Type,
    #"birthDate" = Date.Type,
    #"address" = table Address.Type,
    #"photo" = table Attachment.Type,
    #"period" = Period.Type,
    #"communication" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"language" = CodeableConcept.Type,
      #"preferred" = Logical.Type
    ]
  ] meta [ Documentation.Name = "RelatedPerson.Type" ],

  RequestGroup.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"replaces" = table Reference.Type,
    #"groupIdentifier" = Identifier.Type,
    #"status" = Text.Type,
    #"intent" = Text.Type,
    #"priority" = Text.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"authoredOn" = DateTimeZone.Type,
    #"author" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"action" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"prefix" = Text.Type,
      #"title" = Text.Type,
      #"description" = Text.Type,
      #"textEquivalent" = Text.Type,
      #"priority" = Text.Type,
      #"code" = table CodeableConcept.Type,
      #"documentation" = table RelatedArtifact.Type,
      #"condition" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"kind" = Text.Type,
        #"expression" = Expression.Type
      ],
      #"relatedAction" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"actionId" = Text.Type,
        #"relationship" = Text.Type,
        #"offset" = [
          #"Duration" = Duration.Type,
          #"Range" = Range.Type
        ]
      ],
      #"timing" = [
        #"dateTime" = DateTimeZone.Type,
        #"Age" = Age.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type,
        #"Range" = Range.Type,
        #"Timing" = Timing.Type
      ],
      #"participant" = table Reference.Type,
      #"type" = CodeableConcept.Type,
      #"groupingBehavior" = Text.Type,
      #"selectionBehavior" = Text.Type,
      #"requiredBehavior" = Text.Type,
      #"precheckBehavior" = Text.Type,
      #"cardinalityBehavior" = Text.Type,
      #"resource" = Reference.Type,
      #"action" = table Type.TableRow(Type.RecordFields(@RequestGroup.Type)[#"action"][Type])
    ]
  ] meta [ Documentation.Name = "RequestGroup.Type" ],

  ResearchDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"shortTitle" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"comment" = { Text.Type },
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"library" = { Uri.Type },
    #"population" = Reference.Type,
    #"exposure" = Reference.Type,
    #"exposureAlternative" = Reference.Type,
    #"outcome" = Reference.Type
  ] meta [ Documentation.Name = "ResearchDefinition.Type" ],

  ResearchElementDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"shortTitle" = Text.Type,
    #"subtitle" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"subject" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"comment" = { Text.Type },
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"usage" = Text.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"library" = { Uri.Type },
    #"type" = Text.Type,
    #"variableType" = Text.Type,
    #"characteristic" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"definition" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"canonical" = Uri.Type,
        #"Expression" = Expression.Type,
        #"DataRequirement" = DataRequirement.Type
      ],
      #"usageContext" = table UsageContext.Type,
      #"exclude" = Logical.Type,
      #"unitOfMeasure" = CodeableConcept.Type,
      #"studyEffectiveDescription" = Text.Type,
      #"studyEffective" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type,
        #"Timing" = Timing.Type
      ],
      #"studyEffectiveTimeFromStart" = Duration.Type,
      #"studyEffectiveGroupMeasure" = Text.Type,
      #"participantEffectiveDescription" = Text.Type,
      #"participantEffective" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type,
        #"Duration" = Duration.Type,
        #"Timing" = Timing.Type
      ],
      #"participantEffectiveTimeFromStart" = Duration.Type,
      #"participantEffectiveGroupMeasure" = Text.Type
    ]
  ] meta [ Documentation.Name = "ResearchElementDefinition.Type" ],

  ResearchStudy.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"title" = Text.Type,
    #"protocol" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"primaryPurposeType" = CodeableConcept.Type,
    #"phase" = CodeableConcept.Type,
    #"category" = table CodeableConcept.Type,
    #"focus" = table CodeableConcept.Type,
    #"condition" = table CodeableConcept.Type,
    #"contact" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"keyword" = table CodeableConcept.Type,
    #"location" = table CodeableConcept.Type,
    #"description" = Text.Type,
    #"enrollment" = table Reference.Type,
    #"period" = Period.Type,
    #"sponsor" = Reference.Type,
    #"principalInvestigator" = Reference.Type,
    #"site" = table Reference.Type,
    #"reasonStopped" = CodeableConcept.Type,
    #"note" = table Annotation.Type,
    #"arm" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"type" = CodeableConcept.Type,
      #"description" = Text.Type
    ],
    #"objective" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"type" = CodeableConcept.Type
    ]
  ] meta [ Documentation.Name = "ResearchStudy.Type" ],

  ResearchSubject.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"period" = Period.Type,
    #"study" = Reference.Type,
    #"individual" = Reference.Type,
    #"assignedArm" = Text.Type,
    #"actualArm" = Text.Type,
    #"consent" = Reference.Type
  ] meta [ Documentation.Name = "ResearchSubject.Type" ],

  Resource.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type
  ] meta [ Documentation.Name = "Resource.Type" ],

  RiskAssessment.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = Reference.Type,
    #"parent" = Reference.Type,
    #"status" = Text.Type,
    #"method" = CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type
    ],
    #"condition" = Reference.Type,
    #"performer" = Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"basis" = table Reference.Type,
    #"prediction" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"outcome" = CodeableConcept.Type,
      #"probability" = [
        #"decimal" = Decimal.Type,
        #"Range" = Range.Type
      ],
      #"qualitativeRisk" = CodeableConcept.Type,
      #"relativeRisk" = Decimal.Type,
      #"when" = [
        #"Period" = Period.Type,
        #"Range" = Range.Type
      ],
      #"rationale" = Text.Type
    ],
    #"mitigation" = Text.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "RiskAssessment.Type" ],

  RiskEvidenceSynthesis.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"note" = table Annotation.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"copyright" = Text.Type,
    #"approvalDate" = Date.Type,
    #"lastReviewDate" = Date.Type,
    #"effectivePeriod" = Period.Type,
    #"topic" = table CodeableConcept.Type,
    #"author" = table ContactDetail.Type,
    #"editor" = table ContactDetail.Type,
    #"reviewer" = table ContactDetail.Type,
    #"endorser" = table ContactDetail.Type,
    #"relatedArtifact" = table RelatedArtifact.Type,
    #"synthesisType" = CodeableConcept.Type,
    #"studyType" = CodeableConcept.Type,
    #"population" = Reference.Type,
    #"exposure" = Reference.Type,
    #"outcome" = Reference.Type,
    #"sampleSize" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"numberOfStudies" = Int32.Type,
      #"numberOfParticipants" = Int32.Type
    ],
    #"riskEstimate" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"type" = CodeableConcept.Type,
      #"value" = Decimal.Type,
      #"unitOfMeasure" = CodeableConcept.Type,
      #"denominatorCount" = Int32.Type,
      #"numeratorCount" = Int32.Type,
      #"precisionEstimate" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"level" = Decimal.Type,
        #"from" = Decimal.Type,
        #"to" = Decimal.Type
      ]
    ],
    #"certainty" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"rating" = table CodeableConcept.Type,
      #"note" = table Annotation.Type,
      #"certaintySubcomponent" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"rating" = table CodeableConcept.Type,
        #"note" = table Annotation.Type
      ]
    ]
  ] meta [ Documentation.Name = "RiskEvidenceSynthesis.Type" ],

  Schedule.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"active" = Logical.Type,
    #"serviceCategory" = table CodeableConcept.Type,
    #"serviceType" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"actor" = table Reference.Type,
    #"planningHorizon" = Period.Type,
    #"comment" = Text.Type
  ] meta [ Documentation.Name = "Schedule.Type" ],

  SearchParameter.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"derivedFrom" = Uri.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"code" = Text.Type,
    #"base" = { Text.Type },
    #"type" = Text.Type,
    #"expression" = Text.Type,
    #"xpath" = Text.Type,
    #"xpathUsage" = Text.Type,
    #"target" = { Text.Type },
    #"multipleOr" = Logical.Type,
    #"multipleAnd" = Logical.Type,
    #"comparator" = { Text.Type },
    #"modifier" = { Text.Type },
    #"chain" = { Text.Type },
    #"component" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"definition" = Uri.Type,
      #"expression" = Text.Type
    ]
  ] meta [ Documentation.Name = "SearchParameter.Type" ],

  ServiceRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = { Uri.Type },
    #"instantiatesUri" = { Uri.Type },
    #"basedOn" = table Reference.Type,
    #"replaces" = table Reference.Type,
    #"requisition" = Identifier.Type,
    #"status" = Text.Type,
    #"intent" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"priority" = Text.Type,
    #"doNotPerform" = Logical.Type,
    #"code" = CodeableConcept.Type,
    #"orderDetail" = table CodeableConcept.Type,
    #"quantity" = [
      #"Quantity" = Quantity.Type,
      #"Ratio" = Ratio.Type,
      #"Range" = Range.Type
    ],
    #"subject" = Reference.Type,
    #"encounter" = Reference.Type,
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type
    ],
    #"asNeeded" = [
      #"boolean" = Logical.Type,
      #"CodeableConcept" = CodeableConcept.Type
    ],
    #"authoredOn" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"performerType" = CodeableConcept.Type,
    #"performer" = table Reference.Type,
    #"locationCode" = table CodeableConcept.Type,
    #"locationReference" = table Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"insurance" = table Reference.Type,
    #"supportingInfo" = table Reference.Type,
    #"specimen" = table Reference.Type,
    #"bodySite" = table CodeableConcept.Type,
    #"note" = table Annotation.Type,
    #"patientInstruction" = Text.Type,
    #"relevantHistory" = table Reference.Type
  ] meta [ Documentation.Name = "ServiceRequest.Type" ],

  Slot.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"serviceCategory" = table CodeableConcept.Type,
    #"serviceType" = table CodeableConcept.Type,
    #"specialty" = table CodeableConcept.Type,
    #"appointmentType" = CodeableConcept.Type,
    #"schedule" = Reference.Type,
    #"status" = Text.Type,
    #"start" = DateTimeZone.Type,
    #"end" = DateTimeZone.Type,
    #"overbooked" = Logical.Type,
    #"comment" = Text.Type
  ] meta [ Documentation.Name = "Slot.Type" ],

  Specimen.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"accessionIdentifier" = Identifier.Type,
    #"status" = Text.Type,
    #"type" = CodeableConcept.Type,
    #"subject" = Reference.Type,
    #"receivedTime" = DateTimeZone.Type,
    #"parent" = table Reference.Type,
    #"request" = table Reference.Type,
    #"collection" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"collector" = Reference.Type,
      #"collected" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ],
      #"duration" = Duration.Type,
      #"quantity" = Quantity.Type,
      #"method" = CodeableConcept.Type,
      #"bodySite" = CodeableConcept.Type,
      #"fastingStatus" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Duration" = Duration.Type
      ]
    ],
    #"processing" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"procedure" = CodeableConcept.Type,
      #"additive" = table Reference.Type,
      #"time" = [
        #"dateTime" = DateTimeZone.Type,
        #"Period" = Period.Type
      ]
    ],
    #"container" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = table Identifier.Type,
      #"description" = Text.Type,
      #"type" = CodeableConcept.Type,
      #"capacity" = Quantity.Type,
      #"specimenQuantity" = Quantity.Type,
      #"additive" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"condition" = table CodeableConcept.Type,
    #"note" = table Annotation.Type
  ] meta [ Documentation.Name = "Specimen.Type" ],

  SpecimenDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"typeCollected" = CodeableConcept.Type,
    #"patientPreparation" = table CodeableConcept.Type,
    #"timeAspect" = Text.Type,
    #"collection" = table CodeableConcept.Type,
    #"typeTested" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"isDerived" = Logical.Type,
      #"type" = CodeableConcept.Type,
      #"preference" = Text.Type,
      #"container" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"material" = CodeableConcept.Type,
        #"type" = CodeableConcept.Type,
        #"cap" = CodeableConcept.Type,
        #"description" = Text.Type,
        #"capacity" = Quantity.Type,
        #"minimumVolume" = [
          #"Quantity" = Quantity.Type,
          #"string" = Text.Type
        ],
        #"additive" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"additive" = [
            #"CodeableConcept" = CodeableConcept.Type,
            #"Reference" = Reference.Type
          ]
        ],
        #"preparation" = Text.Type
      ],
      #"requirement" = Text.Type,
      #"retentionTime" = Duration.Type,
      #"rejectionCriterion" = table CodeableConcept.Type,
      #"handling" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"temperatureQualifier" = CodeableConcept.Type,
        #"temperatureRange" = Range.Type,
        #"maxDuration" = Duration.Type,
        #"instruction" = Text.Type
      ]
    ]
  ] meta [ Documentation.Name = "SpecimenDefinition.Type" ],

  StructureDefinition.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"keyword" = table Coding.Type,
    #"fhirVersion" = Text.Type,
    #"mapping" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identity" = Text.Type,
      #"uri" = Uri.Type,
      #"name" = Text.Type,
      #"comment" = Text.Type
    ],
    #"kind" = Text.Type,
    #"abstract" = Logical.Type,
    #"context" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"expression" = Text.Type
    ],
    #"contextInvariant" = { Text.Type },
    #"type" = Uri.Type,
    #"baseDefinition" = Uri.Type,
    #"derivation" = Text.Type,
    #"snapshot" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"element" = table ElementDefinition.Type
    ],
    #"differential" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"element" = table ElementDefinition.Type
    ]
  ] meta [ Documentation.Name = "StructureDefinition.Type" ],

  StructureMap.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"structure" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"url" = Uri.Type,
      #"mode" = Text.Type,
      #"alias" = Text.Type,
      #"documentation" = Text.Type
    ],
    #"import" = { Uri.Type },
    #"group" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"extends" = Text.Type,
      #"typeMode" = Text.Type,
      #"documentation" = Text.Type,
      #"input" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"type" = Text.Type,
        #"mode" = Text.Type,
        #"documentation" = Text.Type
      ],
      #"rule" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"source" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"context" = Text.Type,
          #"min" = Int32.Type,
          #"max" = Text.Type,
          #"type" = Text.Type,
          #"defaultValue" = [
            #"base64Binary" = Text.Type,
            #"boolean" = Logical.Type,
            #"canonical" = Uri.Type,
            #"code" = Text.Type,
            #"date" = Date.Type,
            #"dateTime" = DateTimeZone.Type,
            #"decimal" = Decimal.Type,
            #"id" = Text.Type,
            #"instant" = DateTimeZone.Type,
            #"integer" = Int32.Type,
            #"markdown" = Text.Type,
            #"oid" = Text.Type,
            #"positiveInt" = Int32.Type,
            #"string" = Text.Type,
            #"time" = Time.Type,
            #"unsignedInt" = Int32.Type,
            #"uri" = Uri.Type,
            #"url" = Uri.Type,
            #"uuid" = Text.Type,
            #"Address" = Address.Type,
            #"Age" = Age.Type,
            #"Annotation" = Annotation.Type,
            #"Attachment" = Attachment.Type,
            #"CodeableConcept" = CodeableConcept.Type,
            #"Coding" = Coding.Type,
            #"ContactPoint" = ContactPoint.Type,
            #"Count" = Count.Type,
            #"Distance" = Distance.Type,
            #"Duration" = Duration.Type,
            #"HumanName" = HumanName.Type,
            #"Identifier" = Identifier.Type,
            #"Money" = Money.Type,
            #"Period" = Period.Type,
            #"Quantity" = Quantity.Type,
            #"Range" = Range.Type,
            #"Ratio" = Ratio.Type,
            #"Reference" = Reference.Type,
            #"SampledData" = SampledData.Type,
            #"Signature" = Signature.Type,
            #"Timing" = Timing.Type,
            #"ContactDetail" = ContactDetail.Type,
            #"Contributor" = Contributor.Type,
            #"DataRequirement" = DataRequirement.Type,
            #"Expression" = Expression.Type,
            #"ParameterDefinition" = ParameterDefinition.Type,
            #"RelatedArtifact" = RelatedArtifact.Type,
            #"TriggerDefinition" = TriggerDefinition.Type,
            #"UsageContext" = UsageContext.Type,
            #"Dosage" = Dosage.Type,
            #"Meta" = Meta.Type
          ],
          #"element" = Text.Type,
          #"listMode" = Text.Type,
          #"variable" = Text.Type,
          #"condition" = Text.Type,
          #"check" = Text.Type,
          #"logMessage" = Text.Type
        ],
        #"target" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"context" = Text.Type,
          #"contextType" = Text.Type,
          #"element" = Text.Type,
          #"variable" = Text.Type,
          #"listMode" = { Text.Type },
          #"listRuleId" = Text.Type,
          #"transform" = Text.Type,
          #"parameter" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"value" = [
              #"id" = Text.Type,
              #"string" = Text.Type,
              #"boolean" = Logical.Type,
              #"integer" = Int32.Type,
              #"decimal" = Decimal.Type
            ]
          ]
        ],
        #"dependent" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"name" = Text.Type,
          #"variable" = { Text.Type }
        ],
        #"documentation" = Text.Type,
        #"rule" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(@StructureMap.Type)[#"group"][Type]))[#"rule"][Type])
      ]
    ]
  ] meta [ Documentation.Name = "StructureMap.Type" ],

  Subscription.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"status" = Text.Type,
    #"contact" = table ContactPoint.Type,
    #"end" = DateTimeZone.Type,
    #"reason" = Text.Type,
    #"criteria" = Text.Type,
    #"error" = Text.Type,
    #"channel" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"endpoint" = Uri.Type,
      #"payload" = Text.Type,
      #"header" = { Text.Type }
    ]
  ] meta [ Documentation.Name = "Subscription.Type" ],

  Substance.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"category" = table CodeableConcept.Type,
    #"code" = CodeableConcept.Type,
    #"description" = Text.Type,
    #"instance" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Identifier.Type,
      #"expiry" = DateTimeZone.Type,
      #"quantity" = Quantity.Type
    ],
    #"ingredient" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"quantity" = Ratio.Type,
      #"substance" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ]
    ]
  ] meta [ Documentation.Name = "Substance.Type" ],

  SubstanceNucleicAcid.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"sequenceType" = CodeableConcept.Type,
    #"numberOfSubunits" = Int32.Type,
    #"areaOfHybridisation" = Text.Type,
    #"oligoNucleotideType" = CodeableConcept.Type,
    #"subunit" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"subunit" = Int32.Type,
      #"sequence" = Text.Type,
      #"length" = Int32.Type,
      #"sequenceAttachment" = Attachment.Type,
      #"fivePrime" = CodeableConcept.Type,
      #"threePrime" = CodeableConcept.Type,
      #"linkage" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"connectivity" = Text.Type,
        #"identifier" = Identifier.Type,
        #"name" = Text.Type,
        #"residueSite" = Text.Type
      ],
      #"sugar" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"identifier" = Identifier.Type,
        #"name" = Text.Type,
        #"residueSite" = Text.Type
      ]
    ]
  ] meta [ Documentation.Name = "SubstanceNucleicAcid.Type" ],

  SubstancePolymer.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"class" = CodeableConcept.Type,
    #"geometry" = CodeableConcept.Type,
    #"copolymerConnectivity" = table CodeableConcept.Type,
    #"modification" = { Text.Type },
    #"monomerSet" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"ratioType" = CodeableConcept.Type,
      #"startingMaterial" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"material" = CodeableConcept.Type,
        #"type" = CodeableConcept.Type,
        #"isDefining" = Logical.Type,
        #"amount" = SubstanceAmount.Type
      ]
    ],
    #"repeat" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"numberOfUnits" = Int32.Type,
      #"averageMolecularFormula" = Text.Type,
      #"repeatUnitAmountType" = CodeableConcept.Type,
      #"repeatUnit" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"orientationOfPolymerisation" = CodeableConcept.Type,
        #"repeatUnit" = Text.Type,
        #"amount" = SubstanceAmount.Type,
        #"degreeOfPolymerisation" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"degree" = CodeableConcept.Type,
          #"amount" = SubstanceAmount.Type
        ],
        #"structuralRepresentation" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"type" = CodeableConcept.Type,
          #"representation" = Text.Type,
          #"attachment" = Attachment.Type
        ]
      ]
    ]
  ] meta [ Documentation.Name = "SubstancePolymer.Type" ],

  SubstanceProtein.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"sequenceType" = CodeableConcept.Type,
    #"numberOfSubunits" = Int32.Type,
    #"disulfideLinkage" = { Text.Type },
    #"subunit" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"subunit" = Int32.Type,
      #"sequence" = Text.Type,
      #"length" = Int32.Type,
      #"sequenceAttachment" = Attachment.Type,
      #"nTerminalModificationId" = Identifier.Type,
      #"nTerminalModification" = Text.Type,
      #"cTerminalModificationId" = Identifier.Type,
      #"cTerminalModification" = Text.Type
    ]
  ] meta [ Documentation.Name = "SubstanceProtein.Type" ],

  SubstanceReferenceInformation.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"comment" = Text.Type,
    #"gene" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"geneSequenceOrigin" = CodeableConcept.Type,
      #"gene" = CodeableConcept.Type,
      #"source" = table Reference.Type
    ],
    #"geneElement" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"element" = Identifier.Type,
      #"source" = table Reference.Type
    ],
    #"classification" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"domain" = CodeableConcept.Type,
      #"classification" = CodeableConcept.Type,
      #"subtype" = table CodeableConcept.Type,
      #"source" = table Reference.Type
    ],
    #"target" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"target" = Identifier.Type,
      #"type" = CodeableConcept.Type,
      #"interaction" = CodeableConcept.Type,
      #"organism" = CodeableConcept.Type,
      #"organismType" = CodeableConcept.Type,
      #"amount" = [
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"string" = Text.Type
      ],
      #"amountType" = CodeableConcept.Type,
      #"source" = table Reference.Type
    ]
  ] meta [ Documentation.Name = "SubstanceReferenceInformation.Type" ],

  SubstanceSourceMaterial.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"sourceMaterialClass" = CodeableConcept.Type,
    #"sourceMaterialType" = CodeableConcept.Type,
    #"sourceMaterialState" = CodeableConcept.Type,
    #"organismId" = Identifier.Type,
    #"organismName" = Text.Type,
    #"parentSubstanceId" = table Identifier.Type,
    #"parentSubstanceName" = { Text.Type },
    #"countryOfOrigin" = table CodeableConcept.Type,
    #"geographicalLocation" = { Text.Type },
    #"developmentStage" = CodeableConcept.Type,
    #"fractionDescription" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"fraction" = Text.Type,
      #"materialType" = CodeableConcept.Type
    ],
    #"organism" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"family" = CodeableConcept.Type,
      #"genus" = CodeableConcept.Type,
      #"species" = CodeableConcept.Type,
      #"intraspecificType" = CodeableConcept.Type,
      #"intraspecificDescription" = Text.Type,
      #"author" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"authorType" = CodeableConcept.Type,
        #"authorDescription" = Text.Type
      ],
      #"hybrid" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"maternalOrganismId" = Text.Type,
        #"maternalOrganismName" = Text.Type,
        #"paternalOrganismId" = Text.Type,
        #"paternalOrganismName" = Text.Type,
        #"hybridType" = CodeableConcept.Type
      ],
      #"organismGeneral" = [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"kingdom" = CodeableConcept.Type,
        #"phylum" = CodeableConcept.Type,
        #"class" = CodeableConcept.Type,
        #"order" = CodeableConcept.Type
      ]
    ],
    #"partDescription" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"part" = CodeableConcept.Type,
      #"partLocation" = CodeableConcept.Type
    ]
  ] meta [ Documentation.Name = "SubstanceSourceMaterial.Type" ],

  SubstanceSpecification.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"type" = CodeableConcept.Type,
    #"status" = CodeableConcept.Type,
    #"domain" = CodeableConcept.Type,
    #"description" = Text.Type,
    #"source" = table Reference.Type,
    #"comment" = Text.Type,
    #"moiety" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"role" = CodeableConcept.Type,
      #"identifier" = Identifier.Type,
      #"name" = Text.Type,
      #"stereochemistry" = CodeableConcept.Type,
      #"opticalActivity" = CodeableConcept.Type,
      #"molecularFormula" = Text.Type,
      #"amount" = [
        #"Quantity" = Quantity.Type,
        #"string" = Text.Type
      ]
    ],
    #"property" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"category" = CodeableConcept.Type,
      #"code" = CodeableConcept.Type,
      #"parameters" = Text.Type,
      #"definingSubstance" = [
        #"Reference" = Reference.Type,
        #"CodeableConcept" = CodeableConcept.Type
      ],
      #"amount" = [
        #"Quantity" = Quantity.Type,
        #"string" = Text.Type
      ]
    ],
    #"referenceInformation" = Reference.Type,
    #"structure" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"stereochemistry" = CodeableConcept.Type,
      #"opticalActivity" = CodeableConcept.Type,
      #"molecularFormula" = Text.Type,
      #"molecularFormulaByMoiety" = Text.Type,
      #"isotope" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"identifier" = Identifier.Type,
        #"name" = CodeableConcept.Type,
        #"substitution" = CodeableConcept.Type,
        #"halfLife" = Quantity.Type,
        #"molecularWeight" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"method" = CodeableConcept.Type,
          #"type" = CodeableConcept.Type,
          #"amount" = Quantity.Type
        ]
      ],
      #"source" = table Reference.Type,
      #"representation" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"type" = CodeableConcept.Type,
        #"representation" = Text.Type,
        #"attachment" = Attachment.Type
      ],
      #"molecularWeight" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@SubstanceSpecification.Type)[#"structure"][Type])[#"isotope"][Type]))[#"molecularWeight"][Type]
    ],
    #"code" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"status" = CodeableConcept.Type,
      #"statusDate" = DateTimeZone.Type,
      #"comment" = Text.Type,
      #"source" = table Reference.Type
    ],
    #"name" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"type" = CodeableConcept.Type,
      #"status" = CodeableConcept.Type,
      #"preferred" = Logical.Type,
      #"language" = table CodeableConcept.Type,
      #"domain" = table CodeableConcept.Type,
      #"jurisdiction" = table CodeableConcept.Type,
      #"official" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"authority" = CodeableConcept.Type,
        #"status" = CodeableConcept.Type,
        #"date" = DateTimeZone.Type
      ],
      #"source" = table Reference.Type,
      #"synonym" = table Type.TableRow(Type.RecordFields(@SubstanceSpecification.Type)[#"name"][Type]),
      #"translation" = table Type.TableRow(Type.RecordFields(@SubstanceSpecification.Type)[#"name"][Type])
    ],
    #"relationship" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"substance" = [
        #"Reference" = Reference.Type,
        #"CodeableConcept" = CodeableConcept.Type
      ],
      #"relationship" = CodeableConcept.Type,
      #"isDefining" = Logical.Type,
      #"amount" = [
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"string" = Text.Type
      ],
      #"amountRatioLowLimit" = Ratio.Type,
      #"amountType" = CodeableConcept.Type,
      #"source" = table Reference.Type
    ],
    #"nucleicAcid" = Reference.Type,
    #"polymer" = Reference.Type,
    #"protein" = Reference.Type,
    #"sourceMaterial" = Reference.Type,
    #"molecularWeight" = table Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@SubstanceSpecification.Type)[#"structure"][Type])[#"isotope"][Type]))[#"molecularWeight"][Type]
  ] meta [ Documentation.Name = "SubstanceSpecification.Type" ],

  SupplyDelivery.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"basedOn" = table Reference.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"patient" = Reference.Type,
    #"type" = CodeableConcept.Type,
    #"suppliedItem" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"quantity" = Quantity.Type,
      #"item" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Reference" = Reference.Type
      ]
    ],
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type
    ],
    #"supplier" = Reference.Type,
    #"destination" = Reference.Type,
    #"receiver" = table Reference.Type
  ] meta [ Documentation.Name = "SupplyDelivery.Type" ],

  SupplyRequest.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"category" = CodeableConcept.Type,
    #"priority" = Text.Type,
    #"item" = [
      #"CodeableConcept" = CodeableConcept.Type,
      #"Reference" = Reference.Type
    ],
    #"quantity" = Quantity.Type,
    #"parameter" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"code" = CodeableConcept.Type,
      #"value" = [
        #"CodeableConcept" = CodeableConcept.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"boolean" = Logical.Type
      ]
    ],
    #"occurrence" = [
      #"dateTime" = DateTimeZone.Type,
      #"Period" = Period.Type,
      #"Timing" = Timing.Type
    ],
    #"authoredOn" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"supplier" = table Reference.Type,
    #"reasonCode" = table CodeableConcept.Type,
    #"reasonReference" = table Reference.Type,
    #"deliverFrom" = Reference.Type,
    #"deliverTo" = Reference.Type
  ] meta [ Documentation.Name = "SupplyRequest.Type" ],

  Task.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"instantiatesCanonical" = Uri.Type,
    #"instantiatesUri" = Uri.Type,
    #"basedOn" = table Reference.Type,
    #"groupIdentifier" = Identifier.Type,
    #"partOf" = table Reference.Type,
    #"status" = Text.Type,
    #"statusReason" = CodeableConcept.Type,
    #"businessStatus" = CodeableConcept.Type,
    #"intent" = Text.Type,
    #"priority" = Text.Type,
    #"code" = CodeableConcept.Type,
    #"description" = Text.Type,
    #"focus" = Reference.Type,
    #"for" = Reference.Type,
    #"encounter" = Reference.Type,
    #"executionPeriod" = Period.Type,
    #"authoredOn" = DateTimeZone.Type,
    #"lastModified" = DateTimeZone.Type,
    #"requester" = Reference.Type,
    #"performerType" = table CodeableConcept.Type,
    #"owner" = Reference.Type,
    #"location" = Reference.Type,
    #"reasonCode" = CodeableConcept.Type,
    #"reasonReference" = Reference.Type,
    #"insurance" = table Reference.Type,
    #"note" = table Annotation.Type,
    #"relevantHistory" = table Reference.Type,
    #"restriction" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"repetitions" = Int32.Type,
      #"period" = Period.Type,
      #"recipient" = table Reference.Type
    ],
    #"input" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"value" = [
        #"base64Binary" = Text.Type,
        #"boolean" = Logical.Type,
        #"canonical" = Uri.Type,
        #"code" = Text.Type,
        #"date" = Date.Type,
        #"dateTime" = DateTimeZone.Type,
        #"decimal" = Decimal.Type,
        #"id" = Text.Type,
        #"instant" = DateTimeZone.Type,
        #"integer" = Int32.Type,
        #"markdown" = Text.Type,
        #"oid" = Text.Type,
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type,
        #"time" = Time.Type,
        #"unsignedInt" = Int32.Type,
        #"uri" = Uri.Type,
        #"url" = Uri.Type,
        #"uuid" = Text.Type,
        #"Address" = Address.Type,
        #"Age" = Age.Type,
        #"Annotation" = Annotation.Type,
        #"Attachment" = Attachment.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"Coding" = Coding.Type,
        #"ContactPoint" = ContactPoint.Type,
        #"Count" = Count.Type,
        #"Distance" = Distance.Type,
        #"Duration" = Duration.Type,
        #"HumanName" = HumanName.Type,
        #"Identifier" = Identifier.Type,
        #"Money" = Money.Type,
        #"Period" = Period.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"Reference" = Reference.Type,
        #"SampledData" = SampledData.Type,
        #"Signature" = Signature.Type,
        #"Timing" = Timing.Type,
        #"ContactDetail" = ContactDetail.Type,
        #"Contributor" = Contributor.Type,
        #"DataRequirement" = DataRequirement.Type,
        #"Expression" = Expression.Type,
        #"ParameterDefinition" = ParameterDefinition.Type,
        #"RelatedArtifact" = RelatedArtifact.Type,
        #"TriggerDefinition" = TriggerDefinition.Type,
        #"UsageContext" = UsageContext.Type,
        #"Dosage" = Dosage.Type,
        #"Meta" = Meta.Type
      ]
    ],
    #"output" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = CodeableConcept.Type,
      #"value" = [
        #"base64Binary" = Text.Type,
        #"boolean" = Logical.Type,
        #"canonical" = Uri.Type,
        #"code" = Text.Type,
        #"date" = Date.Type,
        #"dateTime" = DateTimeZone.Type,
        #"decimal" = Decimal.Type,
        #"id" = Text.Type,
        #"instant" = DateTimeZone.Type,
        #"integer" = Int32.Type,
        #"markdown" = Text.Type,
        #"oid" = Text.Type,
        #"positiveInt" = Int32.Type,
        #"string" = Text.Type,
        #"time" = Time.Type,
        #"unsignedInt" = Int32.Type,
        #"uri" = Uri.Type,
        #"url" = Uri.Type,
        #"uuid" = Text.Type,
        #"Address" = Address.Type,
        #"Age" = Age.Type,
        #"Annotation" = Annotation.Type,
        #"Attachment" = Attachment.Type,
        #"CodeableConcept" = CodeableConcept.Type,
        #"Coding" = Coding.Type,
        #"ContactPoint" = ContactPoint.Type,
        #"Count" = Count.Type,
        #"Distance" = Distance.Type,
        #"Duration" = Duration.Type,
        #"HumanName" = HumanName.Type,
        #"Identifier" = Identifier.Type,
        #"Money" = Money.Type,
        #"Period" = Period.Type,
        #"Quantity" = Quantity.Type,
        #"Range" = Range.Type,
        #"Ratio" = Ratio.Type,
        #"Reference" = Reference.Type,
        #"SampledData" = SampledData.Type,
        #"Signature" = Signature.Type,
        #"Timing" = Timing.Type,
        #"ContactDetail" = ContactDetail.Type,
        #"Contributor" = Contributor.Type,
        #"DataRequirement" = DataRequirement.Type,
        #"Expression" = Expression.Type,
        #"ParameterDefinition" = ParameterDefinition.Type,
        #"RelatedArtifact" = RelatedArtifact.Type,
        #"TriggerDefinition" = TriggerDefinition.Type,
        #"UsageContext" = UsageContext.Type,
        #"Dosage" = Dosage.Type,
        #"Meta" = Meta.Type
      ]
    ]
  ] meta [ Documentation.Name = "Task.Type" ],

  TerminologyCapabilities.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"kind" = Text.Type,
    #"software" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"version" = Text.Type
    ],
    #"implementation" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"description" = Text.Type,
      #"url" = Uri.Type
    ],
    #"lockedDate" = Logical.Type,
    #"codeSystem" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"uri" = Uri.Type,
      #"version" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"code" = Text.Type,
        #"isDefault" = Logical.Type,
        #"compositional" = Logical.Type,
        #"language" = { Text.Type },
        #"filter" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"code" = Text.Type,
          #"op" = { Text.Type }
        ],
        #"property" = { Text.Type }
      ],
      #"subsumption" = Logical.Type
    ],
    #"expansion" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"hierarchical" = Logical.Type,
      #"paging" = Logical.Type,
      #"incomplete" = Logical.Type,
      #"parameter" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"documentation" = Text.Type
      ],
      #"textFilter" = Text.Type
    ],
    #"codeSearch" = Text.Type,
    #"validateCode" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"translations" = Logical.Type
    ],
    #"translation" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"needsMap" = Logical.Type
    ],
    #"closure" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"translation" = Logical.Type
    ]
  ] meta [ Documentation.Name = "TerminologyCapabilities.Type" ],

  TestReport.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = Identifier.Type,
    #"name" = Text.Type,
    #"status" = Text.Type,
    #"testScript" = Reference.Type,
    #"result" = Text.Type,
    #"score" = Decimal.Type,
    #"tester" = Text.Type,
    #"issued" = DateTimeZone.Type,
    #"participant" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"type" = Text.Type,
      #"uri" = Uri.Type,
      #"display" = Text.Type
    ],
    #"setup" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"result" = Text.Type,
          #"message" = Text.Type,
          #"detail" = Uri.Type
        ],
        #"assert" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"result" = Text.Type,
          #"message" = Text.Type,
          #"detail" = Text.Type
        ]
      ]
    ],
    #"test" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"description" = Text.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestReport.Type)[#"setup"][Type])[#"action"][Type]))[#"operation"][Type],
        #"assert" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestReport.Type)[#"setup"][Type])[#"action"][Type]))[#"assert"][Type]
      ]
    ],
    #"teardown" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestReport.Type)[#"setup"][Type])[#"action"][Type]))[#"operation"][Type]
      ]
    ]
  ] meta [ Documentation.Name = "TestReport.Type" ],

  TestScript.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"origin" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"index" = Int32.Type,
      #"profile" = Coding.Type
    ],
    #"destination" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"index" = Int32.Type,
      #"profile" = Coding.Type
    ],
    #"metadata" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"link" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"url" = Uri.Type,
        #"description" = Text.Type
      ],
      #"capability" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"required" = Logical.Type,
        #"validated" = Logical.Type,
        #"description" = Text.Type,
        #"origin" = { Int32.Type },
        #"destination" = Int32.Type,
        #"link" = { Uri.Type },
        #"capabilities" = Uri.Type
      ]
    ],
    #"fixture" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"autocreate" = Logical.Type,
      #"autodelete" = Logical.Type,
      #"resource" = Reference.Type
    ],
    #"profile" = table Reference.Type,
    #"variable" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"defaultValue" = Text.Type,
      #"description" = Text.Type,
      #"expression" = Text.Type,
      #"headerField" = Text.Type,
      #"hint" = Text.Type,
      #"path" = Text.Type,
      #"sourceId" = Text.Type
    ],
    #"setup" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"type" = Coding.Type,
          #"resource" = Text.Type,
          #"label" = Text.Type,
          #"description" = Text.Type,
          #"accept" = Text.Type,
          #"contentType" = Text.Type,
          #"destination" = Int32.Type,
          #"encodeRequestUrl" = Logical.Type,
          #"method" = Text.Type,
          #"origin" = Int32.Type,
          #"params" = Text.Type,
          #"requestHeader" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"field" = Text.Type,
            #"value" = Text.Type
          ],
          #"requestId" = Text.Type,
          #"responseId" = Text.Type,
          #"sourceId" = Text.Type,
          #"targetId" = Text.Type,
          #"url" = Text.Type
        ],
        #"assert" = [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"label" = Text.Type,
          #"description" = Text.Type,
          #"direction" = Text.Type,
          #"compareToSourceId" = Text.Type,
          #"compareToSourceExpression" = Text.Type,
          #"compareToSourcePath" = Text.Type,
          #"contentType" = Text.Type,
          #"expression" = Text.Type,
          #"headerField" = Text.Type,
          #"minimumId" = Text.Type,
          #"navigationLinks" = Logical.Type,
          #"operator" = Text.Type,
          #"path" = Text.Type,
          #"requestMethod" = Text.Type,
          #"requestURL" = Text.Type,
          #"resource" = Text.Type,
          #"response" = Text.Type,
          #"responseCode" = Text.Type,
          #"sourceId" = Text.Type,
          #"validateProfileId" = Text.Type,
          #"value" = Text.Type,
          #"warningOnly" = Logical.Type
        ]
      ]
    ],
    #"test" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"name" = Text.Type,
      #"description" = Text.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestScript.Type)[#"setup"][Type])[#"action"][Type]))[#"operation"][Type],
        #"assert" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestScript.Type)[#"setup"][Type])[#"action"][Type]))[#"assert"][Type]
      ]
    ],
    #"teardown" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"action" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"operation" = Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@TestScript.Type)[#"setup"][Type])[#"action"][Type]))[#"operation"][Type]
      ]
    ]
  ] meta [ Documentation.Name = "TestScript.Type" ],

  ValueSet.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"url" = Uri.Type,
    #"identifier" = table Identifier.Type,
    #"version" = Text.Type,
    #"name" = Text.Type,
    #"title" = Text.Type,
    #"status" = Text.Type,
    #"experimental" = Logical.Type,
    #"date" = DateTimeZone.Type,
    #"publisher" = Text.Type,
    #"contact" = table ContactDetail.Type,
    #"description" = Text.Type,
    #"useContext" = table UsageContext.Type,
    #"jurisdiction" = table CodeableConcept.Type,
    #"immutable" = Logical.Type,
    #"purpose" = Text.Type,
    #"copyright" = Text.Type,
    #"compose" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"lockedDate" = Date.Type,
      #"inactive" = Logical.Type,
      #"include" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"system" = Uri.Type,
        #"version" = Text.Type,
        #"concept" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"code" = Text.Type,
          #"display" = Text.Type,
          #"designation" = table [
            #"id" = Text.Type,
            #"extension" = table Extension.Type,
            #"modifierExtension" = table Extension.Type,
            #"language" = Text.Type,
            #"use" = Coding.Type,
            #"value" = Text.Type
          ]
        ],
        #"filter" = table [
          #"id" = Text.Type,
          #"extension" = table Extension.Type,
          #"modifierExtension" = table Extension.Type,
          #"property" = Text.Type,
          #"op" = Text.Type,
          #"value" = Text.Type
        ],
        #"valueSet" = { Uri.Type }
      ],
      #"exclude" = table Type.TableRow(Type.RecordFields(Type.RecordFields(@ValueSet.Type)[#"compose"][Type])[#"include"][Type])
    ],
    #"expansion" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"identifier" = Uri.Type,
      #"timestamp" = DateTimeZone.Type,
      #"total" = Int32.Type,
      #"offset" = Int32.Type,
      #"parameter" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"name" = Text.Type,
        #"value" = [
          #"string" = Text.Type,
          #"boolean" = Logical.Type,
          #"integer" = Int32.Type,
          #"decimal" = Decimal.Type,
          #"uri" = Uri.Type,
          #"code" = Text.Type,
          #"dateTime" = DateTimeZone.Type
        ]
      ],
      #"contains" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"system" = Uri.Type,
        #"abstract" = Logical.Type,
        #"inactive" = Logical.Type,
        #"version" = Text.Type,
        #"code" = Text.Type,
        #"display" = Text.Type,
        #"designation" = table Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.TableRow(Type.RecordFields(Type.RecordFields(@ValueSet.Type)[#"compose"][Type])[#"include"][Type]))[#"concept"][Type]))[#"designation"][Type]),
        #"contains" = table Type.TableRow(Type.RecordFields(Type.RecordFields(@ValueSet.Type)[#"expansion"][Type])[#"contains"][Type])
      ]
    ]
  ] meta [ Documentation.Name = "ValueSet.Type" ],

  VerificationResult.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"target" = table Reference.Type,
    #"targetLocation" = { Text.Type },
    #"need" = CodeableConcept.Type,
    #"status" = Text.Type,
    #"statusDate" = DateTimeZone.Type,
    #"validationType" = CodeableConcept.Type,
    #"validationProcess" = table CodeableConcept.Type,
    #"frequency" = Timing.Type,
    #"lastPerformed" = DateTimeZone.Type,
    #"nextScheduled" = Date.Type,
    #"failureAction" = CodeableConcept.Type,
    #"primarySource" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"who" = Reference.Type,
      #"type" = table CodeableConcept.Type,
      #"communicationMethod" = table CodeableConcept.Type,
      #"validationStatus" = CodeableConcept.Type,
      #"validationDate" = DateTimeZone.Type,
      #"canPushUpdates" = CodeableConcept.Type,
      #"pushTypeAvailable" = table CodeableConcept.Type
    ],
    #"attestation" = [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"who" = Reference.Type,
      #"onBehalfOf" = Reference.Type,
      #"communicationMethod" = CodeableConcept.Type,
      #"date" = Date.Type,
      #"sourceIdentityCertificate" = Text.Type,
      #"proxyIdentityCertificate" = Text.Type,
      #"proxySignature" = Signature.Type,
      #"sourceSignature" = Signature.Type
    ],
    #"validator" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"organization" = Reference.Type,
      #"identityCertificate" = Text.Type,
      #"attestationSignature" = Signature.Type
    ]
  ] meta [ Documentation.Name = "VerificationResult.Type" ],

  VisionPrescription.Type = type [
    #"id" = Text.Type,
    #"meta" = Meta.Type,
    #"implicitRules" = Uri.Type,
    #"language" = Text.Type,
    #"<referenceId>" = Text.Type,
    #"text" = Narrative.Type,
    #"contained" = Contained.Type,
    #"extension" = table Extension.Type,
    #"modifierExtension" = table Extension.Type,
    #"identifier" = table Identifier.Type,
    #"status" = Text.Type,
    #"created" = DateTimeZone.Type,
    #"patient" = Reference.Type,
    #"encounter" = Reference.Type,
    #"dateWritten" = DateTimeZone.Type,
    #"prescriber" = Reference.Type,
    #"lensSpecification" = table [
      #"id" = Text.Type,
      #"extension" = table Extension.Type,
      #"modifierExtension" = table Extension.Type,
      #"product" = CodeableConcept.Type,
      #"eye" = Text.Type,
      #"sphere" = Decimal.Type,
      #"cylinder" = Decimal.Type,
      #"axis" = Int32.Type,
      #"prism" = table [
        #"id" = Text.Type,
        #"extension" = table Extension.Type,
        #"modifierExtension" = table Extension.Type,
        #"amount" = Decimal.Type,
        #"base" = Text.Type
      ],
      #"add" = Decimal.Type,
      #"power" = Decimal.Type,
      #"backCurve" = Decimal.Type,
      #"diameter" = Decimal.Type,
      #"duration" = Quantity.Type,
      #"color" = Text.Type,
      #"brand" = Text.Type,
      #"note" = table Annotation.Type
    ]
  ] meta [ Documentation.Name = "VisionPrescription.Type" ],

  Contained.Type = type [
    #"Account" = table Account.Type,
    #"ActivityDefinition" = table ActivityDefinition.Type,
    #"AdverseEvent" = table AdverseEvent.Type,
    #"AllergyIntolerance" = table AllergyIntolerance.Type,
    #"Appointment" = table Appointment.Type,
    #"AppointmentResponse" = table AppointmentResponse.Type,
    #"AuditEvent" = table AuditEvent.Type,
    #"Basic" = table Basic.Type,
    #"Binary" = table Binary.Type,
    #"BiologicallyDerivedProduct" = table BiologicallyDerivedProduct.Type,
    #"BodyStructure" = table BodyStructure.Type,
    #"Bundle" = table Bundle.Type,
    #"CapabilityStatement" = table CapabilityStatement.Type,
    #"CarePlan" = table CarePlan.Type,
    #"CareTeam" = table CareTeam.Type,
    #"CatalogEntry" = table CatalogEntry.Type,
    #"ChargeItem" = table ChargeItem.Type,
    #"ChargeItemDefinition" = table ChargeItemDefinition.Type,
    #"Claim" = table Claim.Type,
    #"ClaimResponse" = table ClaimResponse.Type,
    #"ClinicalImpression" = table ClinicalImpression.Type,
    #"CodeSystem" = table CodeSystem.Type,
    #"Communication" = table Communication.Type,
    #"CommunicationRequest" = table CommunicationRequest.Type,
    #"CompartmentDefinition" = table CompartmentDefinition.Type,
    #"Composition" = table Composition.Type,
    #"ConceptMap" = table ConceptMap.Type,
    #"Condition" = table Condition.Type,
    #"Consent" = table Consent.Type,
    #"Contract" = table Contract.Type,
    #"Coverage" = table Coverage.Type,
    #"CoverageEligibilityRequest" = table CoverageEligibilityRequest.Type,
    #"CoverageEligibilityResponse" = table CoverageEligibilityResponse.Type,
    #"DetectedIssue" = table DetectedIssue.Type,
    #"Device" = table Device.Type,
    #"DeviceDefinition" = table DeviceDefinition.Type,
    #"DeviceMetric" = table DeviceMetric.Type,
    #"DeviceRequest" = table DeviceRequest.Type,
    #"DeviceUseStatement" = table DeviceUseStatement.Type,
    #"DiagnosticReport" = table DiagnosticReport.Type,
    #"DocumentManifest" = table DocumentManifest.Type,
    #"DocumentReference" = table DocumentReference.Type,
    #"DomainResource" = table DomainResource.Type,
    #"EffectEvidenceSynthesis" = table EffectEvidenceSynthesis.Type,
    #"Encounter" = table Encounter.Type,
    #"Endpoint" = table Endpoint.Type,
    #"EnrollmentRequest" = table EnrollmentRequest.Type,
    #"EnrollmentResponse" = table EnrollmentResponse.Type,
    #"EpisodeOfCare" = table EpisodeOfCare.Type,
    #"EventDefinition" = table EventDefinition.Type,
    #"Evidence" = table Evidence.Type,
    #"EvidenceVariable" = table EvidenceVariable.Type,
    #"ExampleScenario" = table ExampleScenario.Type,
    #"ExplanationOfBenefit" = table ExplanationOfBenefit.Type,
    #"FamilyMemberHistory" = table FamilyMemberHistory.Type,
    #"Flag" = table Flag.Type,
    #"Goal" = table Goal.Type,
    #"GraphDefinition" = table GraphDefinition.Type,
    #"Group" = table Group.Type,
    #"GuidanceResponse" = table GuidanceResponse.Type,
    #"HealthcareService" = table HealthcareService.Type,
    #"ImagingStudy" = table ImagingStudy.Type,
    #"Immunization" = table Immunization.Type,
    #"ImmunizationEvaluation" = table ImmunizationEvaluation.Type,
    #"ImmunizationRecommendation" = table ImmunizationRecommendation.Type,
    #"ImplementationGuide" = table ImplementationGuide.Type,
    #"InsurancePlan" = table InsurancePlan.Type,
    #"Invoice" = table Invoice.Type,
    #"Library" = table Library.Type,
    #"Linkage" = table Linkage.Type,
    #"List" = table List.Type,
    #"Location" = table Location.Type,
    #"Measure" = table Measure.Type,
    #"MeasureReport" = table MeasureReport.Type,
    #"Media" = table Media.Type,
    #"Medication" = table Medication.Type,
    #"MedicationAdministration" = table MedicationAdministration.Type,
    #"MedicationDispense" = table MedicationDispense.Type,
    #"MedicationKnowledge" = table MedicationKnowledge.Type,
    #"MedicationRequest" = table MedicationRequest.Type,
    #"MedicationStatement" = table MedicationStatement.Type,
    #"MedicinalProduct" = table MedicinalProduct.Type,
    #"MedicinalProductAuthorization" = table MedicinalProductAuthorization.Type,
    #"MedicinalProductContraindication" = table MedicinalProductContraindication.Type,
    #"MedicinalProductIndication" = table MedicinalProductIndication.Type,
    #"MedicinalProductIngredient" = table MedicinalProductIngredient.Type,
    #"MedicinalProductInteraction" = table MedicinalProductInteraction.Type,
    #"MedicinalProductManufactured" = table MedicinalProductManufactured.Type,
    #"MedicinalProductPackaged" = table MedicinalProductPackaged.Type,
    #"MedicinalProductPharmaceutical" = table MedicinalProductPharmaceutical.Type,
    #"MedicinalProductUndesirableEffect" = table MedicinalProductUndesirableEffect.Type,
    #"MessageDefinition" = table MessageDefinition.Type,
    #"MessageHeader" = table MessageHeader.Type,
    #"MolecularSequence" = table MolecularSequence.Type,
    #"NamingSystem" = table NamingSystem.Type,
    #"NutritionOrder" = table NutritionOrder.Type,
    #"Observation" = table Observation.Type,
    #"ObservationDefinition" = table ObservationDefinition.Type,
    #"OperationDefinition" = table OperationDefinition.Type,
    #"OperationOutcome" = table OperationOutcome.Type,
    #"Organization" = table Organization.Type,
    #"OrganizationAffiliation" = table OrganizationAffiliation.Type,
    #"Parameters" = table Parameters.Type,
    #"Patient" = table Patient.Type,
    #"PaymentNotice" = table PaymentNotice.Type,
    #"PaymentReconciliation" = table PaymentReconciliation.Type,
    #"Person" = table Person.Type,
    #"PlanDefinition" = table PlanDefinition.Type,
    #"Practitioner" = table Practitioner.Type,
    #"PractitionerRole" = table PractitionerRole.Type,
    #"Procedure" = table Procedure.Type,
    #"Provenance" = table Provenance.Type,
    #"Questionnaire" = table Questionnaire.Type,
    #"QuestionnaireResponse" = table QuestionnaireResponse.Type,
    #"RelatedPerson" = table RelatedPerson.Type,
    #"RequestGroup" = table RequestGroup.Type,
    #"ResearchDefinition" = table ResearchDefinition.Type,
    #"ResearchElementDefinition" = table ResearchElementDefinition.Type,
    #"ResearchStudy" = table ResearchStudy.Type,
    #"ResearchSubject" = table ResearchSubject.Type,
    #"Resource" = table Resource.Type,
    #"RiskAssessment" = table RiskAssessment.Type,
    #"RiskEvidenceSynthesis" = table RiskEvidenceSynthesis.Type,
    #"Schedule" = table Schedule.Type,
    #"SearchParameter" = table SearchParameter.Type,
    #"ServiceRequest" = table ServiceRequest.Type,
    #"Slot" = table Slot.Type,
    #"Specimen" = table Specimen.Type,
    #"SpecimenDefinition" = table SpecimenDefinition.Type,
    #"StructureDefinition" = table StructureDefinition.Type,
    #"StructureMap" = table StructureMap.Type,
    #"Subscription" = table Subscription.Type,
    #"Substance" = table Substance.Type,
    #"SubstanceNucleicAcid" = table SubstanceNucleicAcid.Type,
    #"SubstancePolymer" = table SubstancePolymer.Type,
    #"SubstanceProtein" = table SubstanceProtein.Type,
    #"SubstanceReferenceInformation" = table SubstanceReferenceInformation.Type,
    #"SubstanceSourceMaterial" = table SubstanceSourceMaterial.Type,
    #"SubstanceSpecification" = table SubstanceSpecification.Type,
    #"SupplyDelivery" = table SupplyDelivery.Type,
    #"SupplyRequest" = table SupplyRequest.Type,
    #"Task" = table Task.Type,
    #"TerminologyCapabilities" = table TerminologyCapabilities.Type,
    #"TestReport" = table TestReport.Type,
    #"TestScript" = table TestScript.Type,
    #"ValueSet" = table ValueSet.Type,
    #"VerificationResult" = table VerificationResult.Type,
    #"VisionPrescription" = table VisionPrescription.Type
  ] meta [ Documentation.Name = "Contained.Type" ],

  Date.FromDateOrDateTimeZone = (datestring as text) => try Date.From(datestring) otherwise Date.From(DateTimeZone.RemoveZone(DateTimeZone.From(datestring))) as date,

  Address.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"use" = r[#"use"]?,
      #"type" = r[#"type"]?,
      #"text" = r[#"text"]?,
      #"line" = if r[#"line"]? <> null then List.Transform(r[#"line"], each _) else null,
      #"city" = r[#"city"]?,
      #"district" = r[#"district"]?,
      #"state" = r[#"state"]?,
      #"postalCode" = r[#"postalCode"]?,
      #"country" = r[#"country"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Age.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  Annotation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Annotation_author.ApplySchema(r[#"author"]),
      #"time" = if r[#"time"]? <> null then DateTimeZone.From(r[#"time"]) else null,
      #"text" = r[#"text"]?
    ],

  Annotation_author.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"string" = r[#"string"]?
    ],

  Attachment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"contentType" = r[#"contentType"]?,
      #"language" = r[#"language"]?,
      #"data" = r[#"data"]?,
      #"url" = r[#"url"]?,
      #"size" = r[#"size"]?,
      #"hash" = r[#"hash"]?,
      #"title" = r[#"title"]?,
      #"creation" = if r[#"creation"]? <> null then DateTimeZone.From(r[#"creation"]) else null
    ],

  BackboneElement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema))
    ],

  CodeableConcept.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"coding" = if r[#"coding"]? = null then null else Table.FromRecords(List.Transform(r[#"coding"], Coding.ApplySchema)),
      #"text" = r[#"text"]?
    ],

  Coding.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"system" = r[#"system"]?,
      #"version" = r[#"version"]?,
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"userSelected" = r[#"userSelected"]?
    ],

  ContactDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema))
    ],

  ContactPoint.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"system" = r[#"system"]?,
      #"value" = r[#"value"]?,
      #"use" = r[#"use"]?,
      #"rank" = r[#"rank"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Contributor.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"name" = r[#"name"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema))
    ],

  Count.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  DataRequirement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"profile" = if r[#"profile"]? <> null then List.Transform(r[#"profile"], each _) else null,
      #"subject" = if r[#"subject"]? = null then null else DataRequirement_subject.ApplySchema(r[#"subject"]),
      #"mustSupport" = if r[#"mustSupport"]? <> null then List.Transform(r[#"mustSupport"], each _) else null,
      #"codeFilter" = if r[#"codeFilter"]? = null then null else Table.FromRecords(List.Transform(r[#"codeFilter"], DataRequirement_codeFilter.ApplySchema)),
      #"dateFilter" = if r[#"dateFilter"]? = null then null else Table.FromRecords(List.Transform(r[#"dateFilter"], DataRequirement_dateFilter.ApplySchema)),
      #"limit" = r[#"limit"]?,
      #"sort" = if r[#"sort"]? = null then null else Table.FromRecords(List.Transform(r[#"sort"], DataRequirement_sort.ApplySchema))
    ],

  DataRequirement_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  DataRequirement_codeFilter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"searchParam" = r[#"searchParam"]?,
      #"valueSet" = r[#"valueSet"]?,
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], Coding.ApplySchema))
    ],

  DataRequirement_dateFilter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"searchParam" = r[#"searchParam"]?,
      #"value" = if r[#"value"]? = null then null else DataRequirement_dateFilter_value.ApplySchema(r[#"value"])
    ],

  DataRequirement_dateFilter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"])
    ],

  DataRequirement_sort.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"direction" = r[#"direction"]?
    ],

  Distance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  Dosage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"text" = r[#"text"]?,
      #"additionalInstruction" = if r[#"additionalInstruction"]? = null then null else Table.FromRecords(List.Transform(r[#"additionalInstruction"], CodeableConcept.ApplySchema)),
      #"patientInstruction" = r[#"patientInstruction"]?,
      #"timing" = if r[#"timing"]? = null then null else Timing.ApplySchema(r[#"timing"]),
      #"asNeeded" = if r[#"asNeeded"]? = null then null else Dosage_asNeeded.ApplySchema(r[#"asNeeded"]),
      #"site" = if r[#"site"]? = null then null else CodeableConcept.ApplySchema(r[#"site"]),
      #"route" = if r[#"route"]? = null then null else CodeableConcept.ApplySchema(r[#"route"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"doseAndRate" = if r[#"doseAndRate"]? = null then null else Table.FromRecords(List.Transform(r[#"doseAndRate"], Dosage_doseAndRate.ApplySchema)),
      #"maxDosePerPeriod" = if r[#"maxDosePerPeriod"]? = null then null else Ratio.ApplySchema(r[#"maxDosePerPeriod"]),
      #"maxDosePerAdministration" = if r[#"maxDosePerAdministration"]? = null then null else Quantity.ApplySchema(r[#"maxDosePerAdministration"]),
      #"maxDosePerLifetime" = if r[#"maxDosePerLifetime"]? = null then null else Quantity.ApplySchema(r[#"maxDosePerLifetime"])
    ],

  Dosage_asNeeded.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  Dosage_doseAndRate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"dose" = if r[#"dose"]? = null then null else Dosage_doseAndRate_dose.ApplySchema(r[#"dose"]),
      #"rate" = if r[#"rate"]? = null then null else Dosage_doseAndRate_rate.ApplySchema(r[#"rate"])
    ],

  Dosage_doseAndRate_dose.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  Dosage_doseAndRate_rate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  Duration.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  Element.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema))
    ],

  ElementDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"representation" = if r[#"representation"]? <> null then List.Transform(r[#"representation"], each _) else null,
      #"sliceName" = r[#"sliceName"]?,
      #"sliceIsConstraining" = r[#"sliceIsConstraining"]?,
      #"label" = r[#"label"]?,
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], Coding.ApplySchema)),
      #"slicing" = if r[#"slicing"]? = null then null else ElementDefinition_slicing.ApplySchema(r[#"slicing"]),
      #"short" = r[#"short"]?,
      #"definition" = r[#"definition"]?,
      #"comment" = r[#"comment"]?,
      #"requirements" = r[#"requirements"]?,
      #"alias" = if r[#"alias"]? <> null then List.Transform(r[#"alias"], each _) else null,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?,
      #"base" = if r[#"base"]? = null then null else ElementDefinition_base.ApplySchema(r[#"base"]),
      #"contentReference" = r[#"contentReference"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], ElementDefinition_type.ApplySchema)),
      #"defaultValue" = if r[#"defaultValue"]? = null then null else ElementDefinition_defaultValue.ApplySchema(r[#"defaultValue"]),
      #"meaningWhenMissing" = r[#"meaningWhenMissing"]?,
      #"orderMeaning" = r[#"orderMeaning"]?,
      #"fixed" = if r[#"fixed"]? = null then null else ElementDefinition_fixed.ApplySchema(r[#"fixed"]),
      #"pattern" = if r[#"pattern"]? = null then null else ElementDefinition_pattern.ApplySchema(r[#"pattern"]),
      #"example" = if r[#"example"]? = null then null else Table.FromRecords(List.Transform(r[#"example"], ElementDefinition_example.ApplySchema)),
      #"minValue" = if r[#"minValue"]? = null then null else ElementDefinition_minValue.ApplySchema(r[#"minValue"]),
      #"maxValue" = if r[#"maxValue"]? = null then null else ElementDefinition_maxValue.ApplySchema(r[#"maxValue"]),
      #"maxLength" = r[#"maxLength"]?,
      #"condition" = if r[#"condition"]? <> null then List.Transform(r[#"condition"], each _) else null,
      #"constraint" = if r[#"constraint"]? = null then null else Table.FromRecords(List.Transform(r[#"constraint"], ElementDefinition_constraint.ApplySchema)),
      #"mustSupport" = r[#"mustSupport"]?,
      #"isModifier" = r[#"isModifier"]?,
      #"isModifierReason" = r[#"isModifierReason"]?,
      #"isSummary" = r[#"isSummary"]?,
      #"binding" = if r[#"binding"]? = null then null else ElementDefinition_binding.ApplySchema(r[#"binding"]),
      #"mapping" = if r[#"mapping"]? = null then null else Table.FromRecords(List.Transform(r[#"mapping"], ElementDefinition_mapping.ApplySchema))
    ],

  ElementDefinition_slicing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"discriminator" = if r[#"discriminator"]? = null then null else Table.FromRecords(List.Transform(r[#"discriminator"], ElementDefinition_slicing_discriminator.ApplySchema)),
      #"description" = r[#"description"]?,
      #"ordered" = r[#"ordered"]?,
      #"rules" = r[#"rules"]?
    ],

  ElementDefinition_slicing_discriminator.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"path" = r[#"path"]?
    ],

  ElementDefinition_base.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?
    ],

  ElementDefinition_type.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"profile" = if r[#"profile"]? <> null then List.Transform(r[#"profile"], each _) else null,
      #"targetProfile" = if r[#"targetProfile"]? <> null then List.Transform(r[#"targetProfile"], each _) else null,
      #"aggregation" = if r[#"aggregation"]? <> null then List.Transform(r[#"aggregation"], each _) else null,
      #"versioning" = r[#"versioning"]?
    ],

  ElementDefinition_defaultValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  ElementDefinition_fixed.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  ElementDefinition_pattern.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  ElementDefinition_example.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"label" = r[#"label"]?,
      #"value" = if r[#"value"]? = null then null else ElementDefinition_example_value.ApplySchema(r[#"value"])
    ],

  ElementDefinition_example_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  ElementDefinition_minValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  ElementDefinition_maxValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  ElementDefinition_constraint.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"key" = r[#"key"]?,
      #"requirements" = r[#"requirements"]?,
      #"severity" = r[#"severity"]?,
      #"human" = r[#"human"]?,
      #"expression" = r[#"expression"]?,
      #"xpath" = r[#"xpath"]?,
      #"source" = r[#"source"]?
    ],

  ElementDefinition_binding.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"strength" = r[#"strength"]?,
      #"description" = r[#"description"]?,
      #"valueSet" = r[#"valueSet"]?
    ],

  ElementDefinition_mapping.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"identity" = r[#"identity"]?,
      #"language" = r[#"language"]?,
      #"map" = r[#"map"]?,
      #"comment" = r[#"comment"]?
    ],

  Expression.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"name" = r[#"name"]?,
      #"language" = r[#"language"]?,
      #"expression" = r[#"expression"]?,
      #"reference" = r[#"reference"]?
    ],

  Extension.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], @Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"value" = if r[#"value"]? = null then null else Extension_value.ApplySchema(r[#"value"])
    ],

  Extension_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  HumanName.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"use" = r[#"use"]?,
      #"text" = r[#"text"]?,
      #"family" = r[#"family"]?,
      #"given" = if r[#"given"]? <> null then List.Transform(r[#"given"], each _) else null,
      #"prefix" = if r[#"prefix"]? <> null then List.Transform(r[#"prefix"], each _) else null,
      #"suffix" = if r[#"suffix"]? <> null then List.Transform(r[#"suffix"], each _) else null,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Identifier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"use" = r[#"use"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"system" = r[#"system"]?,
      #"value" = r[#"value"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"assigner" = if r[#"assigner"]? = null then null else Reference.ApplySchema(r[#"assigner"])
    ],

  MarketingStatus.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"country" = if r[#"country"]? = null then null else CodeableConcept.ApplySchema(r[#"country"]),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else CodeableConcept.ApplySchema(r[#"jurisdiction"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"dateRange" = if r[#"dateRange"]? = null then null else Period.ApplySchema(r[#"dateRange"]),
      #"restoreDate" = if r[#"restoreDate"]? <> null then DateTimeZone.From(r[#"restoreDate"]) else null
    ],

  Meta.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"versionId" = r[#"versionId"]?,
      #"lastUpdated" = if r[#"lastUpdated"]? <> null then DateTimeZone.From(r[#"lastUpdated"]) else null,
      #"source" = r[#"source"]?,
      #"profile" = if r[#"profile"]? <> null then List.Transform(r[#"profile"], each _) else null,
      #"security" = if r[#"security"]? = null then null else Table.FromRecords(List.Transform(r[#"security"], Coding.ApplySchema)),
      #"tag" = if r[#"tag"]? = null then null else Table.FromRecords(List.Transform(r[#"tag"], Coding.ApplySchema))
    ],

  Money.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"currency" = r[#"currency"]?
    ],

  MoneyQuantity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  Narrative.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"status" = r[#"status"]?,
      #"div" = r[#"div"]?
    ],

  ParameterDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"use" = r[#"use"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?,
      #"documentation" = r[#"documentation"]?,
      #"type" = r[#"type"]?,
      #"profile" = r[#"profile"]?
    ],

  Period.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"start" = if r[#"start"]? <> null then DateTimeZone.From(r[#"start"]) else null,
      #"end" = if r[#"end"]? <> null then DateTimeZone.From(r[#"end"]) else null
    ],

  Population.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"age" = if r[#"age"]? = null then null else Population_age.ApplySchema(r[#"age"]),
      #"gender" = if r[#"gender"]? = null then null else CodeableConcept.ApplySchema(r[#"gender"]),
      #"race" = if r[#"race"]? = null then null else CodeableConcept.ApplySchema(r[#"race"]),
      #"physiologicalCondition" = if r[#"physiologicalCondition"]? = null then null else CodeableConcept.ApplySchema(r[#"physiologicalCondition"])
    ],

  Population_age.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  ProdCharacteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"height" = if r[#"height"]? = null then null else Quantity.ApplySchema(r[#"height"]),
      #"width" = if r[#"width"]? = null then null else Quantity.ApplySchema(r[#"width"]),
      #"depth" = if r[#"depth"]? = null then null else Quantity.ApplySchema(r[#"depth"]),
      #"weight" = if r[#"weight"]? = null then null else Quantity.ApplySchema(r[#"weight"]),
      #"nominalVolume" = if r[#"nominalVolume"]? = null then null else Quantity.ApplySchema(r[#"nominalVolume"]),
      #"externalDiameter" = if r[#"externalDiameter"]? = null then null else Quantity.ApplySchema(r[#"externalDiameter"]),
      #"shape" = r[#"shape"]?,
      #"color" = if r[#"color"]? <> null then List.Transform(r[#"color"], each _) else null,
      #"imprint" = if r[#"imprint"]? <> null then List.Transform(r[#"imprint"], each _) else null,
      #"image" = if r[#"image"]? = null then null else Table.FromRecords(List.Transform(r[#"image"], Attachment.ApplySchema)),
      #"scoring" = if r[#"scoring"]? = null then null else CodeableConcept.ApplySchema(r[#"scoring"])
    ],

  ProductShelfLife.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"period" = if r[#"period"]? = null then null else Quantity.ApplySchema(r[#"period"]),
      #"specialPrecautionsForStorage" = if r[#"specialPrecautionsForStorage"]? = null then null else Table.FromRecords(List.Transform(r[#"specialPrecautionsForStorage"], CodeableConcept.ApplySchema))
    ],

  Quantity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  Range.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"low" = if r[#"low"]? = null then null else Quantity.ApplySchema(r[#"low"]),
      #"high" = if r[#"high"]? = null then null else Quantity.ApplySchema(r[#"high"])
    ],

  Ratio.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"numerator" = if r[#"numerator"]? = null then null else Quantity.ApplySchema(r[#"numerator"]),
      #"denominator" = if r[#"denominator"]? = null then null else Quantity.ApplySchema(r[#"denominator"])
    ],

  Reference.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"reference" = r[#"reference"]?,
      #"type" = r[#"type"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"display" = r[#"display"]?
    ],

  RelatedArtifact.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"label" = r[#"label"]?,
      #"display" = r[#"display"]?,
      #"citation" = r[#"citation"]?,
      #"url" = r[#"url"]?,
      #"document" = if r[#"document"]? = null then null else Attachment.ApplySchema(r[#"document"]),
      #"resource" = r[#"resource"]?
    ],

  SampledData.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"origin" = if r[#"origin"]? = null then null else Quantity.ApplySchema(r[#"origin"]),
      #"period" = r[#"period"]?,
      #"factor" = r[#"factor"]?,
      #"lowerLimit" = r[#"lowerLimit"]?,
      #"upperLimit" = r[#"upperLimit"]?,
      #"dimensions" = r[#"dimensions"]?,
      #"data" = r[#"data"]?
    ],

  Signature.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], Coding.ApplySchema)),
      #"when" = if r[#"when"]? <> null then DateTimeZone.From(r[#"when"]) else null,
      #"who" = if r[#"who"]? = null then null else Reference.ApplySchema(r[#"who"]),
      #"onBehalfOf" = if r[#"onBehalfOf"]? = null then null else Reference.ApplySchema(r[#"onBehalfOf"]),
      #"targetFormat" = r[#"targetFormat"]?,
      #"sigFormat" = r[#"sigFormat"]?,
      #"data" = r[#"data"]?
    ],

  SimpleQuantity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"value" = r[#"value"]?,
      #"comparator" = r[#"comparator"]?,
      #"unit" = r[#"unit"]?,
      #"system" = r[#"system"]?,
      #"code" = r[#"code"]?
    ],

  SubstanceAmount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"amount" = if r[#"amount"]? = null then null else SubstanceAmount_amount.ApplySchema(r[#"amount"]),
      #"amountType" = if r[#"amountType"]? = null then null else CodeableConcept.ApplySchema(r[#"amountType"]),
      #"amountText" = r[#"amountText"]?,
      #"referenceRange" = if r[#"referenceRange"]? = null then null else SubstanceAmount_referenceRange.ApplySchema(r[#"referenceRange"])
    ],

  SubstanceAmount_amount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  SubstanceAmount_referenceRange.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"lowLimit" = if r[#"lowLimit"]? = null then null else Quantity.ApplySchema(r[#"lowLimit"]),
      #"highLimit" = if r[#"highLimit"]? = null then null else Quantity.ApplySchema(r[#"highLimit"])
    ],

  Timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"event" = if r[#"event"]? <> null then List.Transform(r[#"event"], each (v) => DateTimeZone.From(v)) else null,
      #"repeat" = if r[#"repeat"]? = null then null else Timing_repeat.ApplySchema(r[#"repeat"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"])
    ],

  Timing_repeat.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"bounds" = if r[#"bounds"]? = null then null else Timing_repeat_bounds.ApplySchema(r[#"bounds"]),
      #"count" = r[#"count"]?,
      #"countMax" = r[#"countMax"]?,
      #"duration" = r[#"duration"]?,
      #"durationMax" = r[#"durationMax"]?,
      #"durationUnit" = r[#"durationUnit"]?,
      #"frequency" = r[#"frequency"]?,
      #"frequencyMax" = r[#"frequencyMax"]?,
      #"period" = r[#"period"]?,
      #"periodMax" = r[#"periodMax"]?,
      #"periodUnit" = r[#"periodUnit"]?,
      #"dayOfWeek" = if r[#"dayOfWeek"]? <> null then List.Transform(r[#"dayOfWeek"], each _) else null,
      #"timeOfDay" = if r[#"timeOfDay"]? <> null then List.Transform(r[#"timeOfDay"], each (v) => Time.From(v)) else null,
      #"when" = if r[#"when"]? <> null then List.Transform(r[#"when"], each _) else null,
      #"offset" = r[#"offset"]?
    ],

  Timing_repeat_bounds.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  TriggerDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"name" = r[#"name"]?,
      #"timing" = if r[#"timing"]? = null then null else TriggerDefinition_timing.ApplySchema(r[#"timing"]),
      #"data" = if r[#"data"]? = null then null else Table.FromRecords(List.Transform(r[#"data"], DataRequirement.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Expression.ApplySchema(r[#"condition"])
    ],

  TriggerDefinition_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  UsageContext.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Coding.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else UsageContext_value.ApplySchema(r[#"value"])
    ],

  UsageContext_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Account.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"name" = r[#"name"]?,
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"servicePeriod" = if r[#"servicePeriod"]? = null then null else Period.ApplySchema(r[#"servicePeriod"]),
      #"coverage" = if r[#"coverage"]? = null then null else Table.FromRecords(List.Transform(r[#"coverage"], Account_coverage.ApplySchema)),
      #"owner" = if r[#"owner"]? = null then null else Reference.ApplySchema(r[#"owner"]),
      #"description" = r[#"description"]?,
      #"guarantor" = if r[#"guarantor"]? = null then null else Table.FromRecords(List.Transform(r[#"guarantor"], Account_guarantor.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Reference.ApplySchema(r[#"partOf"])
    ],

  Account_coverage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"priority" = r[#"priority"]?
    ],

  Account_guarantor.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"party" = if r[#"party"]? = null then null else Reference.ApplySchema(r[#"party"]),
      #"onHold" = r[#"onHold"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  ActivityDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else ActivityDefinition_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"library" = if r[#"library"]? <> null then List.Transform(r[#"library"], each _) else null,
      #"kind" = r[#"kind"]?,
      #"profile" = r[#"profile"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"intent" = r[#"intent"]?,
      #"priority" = r[#"priority"]?,
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"timing" = if r[#"timing"]? = null then null else ActivityDefinition_timing.ApplySchema(r[#"timing"]),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], ActivityDefinition_participant.ApplySchema)),
      #"product" = if r[#"product"]? = null then null else ActivityDefinition_product.ApplySchema(r[#"product"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"dosage" = if r[#"dosage"]? = null then null else Table.FromRecords(List.Transform(r[#"dosage"], Dosage.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else Table.FromRecords(List.Transform(r[#"bodySite"], CodeableConcept.ApplySchema)),
      #"specimenRequirement" = if r[#"specimenRequirement"]? = null then null else Table.FromRecords(List.Transform(r[#"specimenRequirement"], Reference.ApplySchema)),
      #"observationRequirement" = if r[#"observationRequirement"]? = null then null else Table.FromRecords(List.Transform(r[#"observationRequirement"], Reference.ApplySchema)),
      #"observationResultRequirement" = if r[#"observationResultRequirement"]? = null then null else Table.FromRecords(List.Transform(r[#"observationResultRequirement"], Reference.ApplySchema)),
      #"transform" = r[#"transform"]?,
      #"dynamicValue" = if r[#"dynamicValue"]? = null then null else Table.FromRecords(List.Transform(r[#"dynamicValue"], ActivityDefinition_dynamicValue.ApplySchema))
    ],

  ActivityDefinition_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ActivityDefinition_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"])
    ],

  ActivityDefinition_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"])
    ],

  ActivityDefinition_product.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  ActivityDefinition_dynamicValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"expression" = if r[#"expression"]? = null then null else Expression.ApplySchema(r[#"expression"])
    ],

  AdverseEvent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"actuality" = r[#"actuality"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"event" = if r[#"event"]? = null then null else CodeableConcept.ApplySchema(r[#"event"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"detected" = if r[#"detected"]? <> null then DateTimeZone.From(r[#"detected"]) else null,
      #"recordedDate" = if r[#"recordedDate"]? <> null then DateTimeZone.From(r[#"recordedDate"]) else null,
      #"resultingCondition" = if r[#"resultingCondition"]? = null then null else Table.FromRecords(List.Transform(r[#"resultingCondition"], Reference.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"seriousness" = if r[#"seriousness"]? = null then null else CodeableConcept.ApplySchema(r[#"seriousness"]),
      #"severity" = if r[#"severity"]? = null then null else CodeableConcept.ApplySchema(r[#"severity"]),
      #"outcome" = if r[#"outcome"]? = null then null else CodeableConcept.ApplySchema(r[#"outcome"]),
      #"recorder" = if r[#"recorder"]? = null then null else Reference.ApplySchema(r[#"recorder"]),
      #"contributor" = if r[#"contributor"]? = null then null else Table.FromRecords(List.Transform(r[#"contributor"], Reference.ApplySchema)),
      #"suspectEntity" = if r[#"suspectEntity"]? = null then null else Table.FromRecords(List.Transform(r[#"suspectEntity"], AdverseEvent_suspectEntity.ApplySchema)),
      #"subjectMedicalHistory" = if r[#"subjectMedicalHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"subjectMedicalHistory"], Reference.ApplySchema)),
      #"referenceDocument" = if r[#"referenceDocument"]? = null then null else Table.FromRecords(List.Transform(r[#"referenceDocument"], Reference.ApplySchema)),
      #"study" = if r[#"study"]? = null then null else Table.FromRecords(List.Transform(r[#"study"], Reference.ApplySchema))
    ],

  AdverseEvent_suspectEntity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"instance" = if r[#"instance"]? = null then null else Reference.ApplySchema(r[#"instance"]),
      #"causality" = if r[#"causality"]? = null then null else Table.FromRecords(List.Transform(r[#"causality"], AdverseEvent_suspectEntity_causality.ApplySchema))
    ],

  AdverseEvent_suspectEntity_causality.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"assessment" = if r[#"assessment"]? = null then null else CodeableConcept.ApplySchema(r[#"assessment"]),
      #"productRelatedness" = r[#"productRelatedness"]?,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"])
    ],

  AllergyIntolerance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"clinicalStatus" = if r[#"clinicalStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"clinicalStatus"]),
      #"verificationStatus" = if r[#"verificationStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"verificationStatus"]),
      #"type" = r[#"type"]?,
      #"category" = if r[#"category"]? <> null then List.Transform(r[#"category"], each _) else null,
      #"criticality" = r[#"criticality"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"onset" = if r[#"onset"]? = null then null else AllergyIntolerance_onset.ApplySchema(r[#"onset"]),
      #"recordedDate" = if r[#"recordedDate"]? <> null then DateTimeZone.From(r[#"recordedDate"]) else null,
      #"recorder" = if r[#"recorder"]? = null then null else Reference.ApplySchema(r[#"recorder"]),
      #"asserter" = if r[#"asserter"]? = null then null else Reference.ApplySchema(r[#"asserter"]),
      #"lastOccurrence" = if r[#"lastOccurrence"]? <> null then DateTimeZone.From(r[#"lastOccurrence"]) else null,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"reaction" = if r[#"reaction"]? = null then null else Table.FromRecords(List.Transform(r[#"reaction"], AllergyIntolerance_reaction.ApplySchema))
    ],

  AllergyIntolerance_onset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  AllergyIntolerance_reaction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"substance" = if r[#"substance"]? = null then null else CodeableConcept.ApplySchema(r[#"substance"]),
      #"manifestation" = if r[#"manifestation"]? = null then null else Table.FromRecords(List.Transform(r[#"manifestation"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?,
      #"onset" = if r[#"onset"]? <> null then DateTimeZone.From(r[#"onset"]) else null,
      #"severity" = r[#"severity"]?,
      #"exposureRoute" = if r[#"exposureRoute"]? = null then null else CodeableConcept.ApplySchema(r[#"exposureRoute"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Appointment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"cancelationReason" = if r[#"cancelationReason"]? = null then null else CodeableConcept.ApplySchema(r[#"cancelationReason"]),
      #"serviceCategory" = if r[#"serviceCategory"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceCategory"], CodeableConcept.ApplySchema)),
      #"serviceType" = if r[#"serviceType"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceType"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"appointmentType" = if r[#"appointmentType"]? = null then null else CodeableConcept.ApplySchema(r[#"appointmentType"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"priority" = r[#"priority"]?,
      #"description" = r[#"description"]?,
      #"supportingInformation" = if r[#"supportingInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInformation"], Reference.ApplySchema)),
      #"start" = if r[#"start"]? <> null then DateTimeZone.From(r[#"start"]) else null,
      #"end" = if r[#"end"]? <> null then DateTimeZone.From(r[#"end"]) else null,
      #"minutesDuration" = r[#"minutesDuration"]?,
      #"slot" = if r[#"slot"]? = null then null else Table.FromRecords(List.Transform(r[#"slot"], Reference.ApplySchema)),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"comment" = r[#"comment"]?,
      #"patientInstruction" = r[#"patientInstruction"]?,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], Appointment_participant.ApplySchema)),
      #"requestedPeriod" = if r[#"requestedPeriod"]? = null then null else Table.FromRecords(List.Transform(r[#"requestedPeriod"], Period.ApplySchema))
    ],

  Appointment_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"]),
      #"required" = r[#"required"]?,
      #"status" = r[#"status"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  AppointmentResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"appointment" = if r[#"appointment"]? = null then null else Reference.ApplySchema(r[#"appointment"]),
      #"start" = if r[#"start"]? <> null then DateTimeZone.From(r[#"start"]) else null,
      #"end" = if r[#"end"]? <> null then DateTimeZone.From(r[#"end"]) else null,
      #"participantType" = if r[#"participantType"]? = null then null else Table.FromRecords(List.Transform(r[#"participantType"], CodeableConcept.ApplySchema)),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"]),
      #"participantStatus" = r[#"participantStatus"]?,
      #"comment" = r[#"comment"]?
    ],

  AuditEvent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Coding.ApplySchema(r[#"type"]),
      #"subtype" = if r[#"subtype"]? = null then null else Table.FromRecords(List.Transform(r[#"subtype"], Coding.ApplySchema)),
      #"action" = r[#"action"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"recorded" = if r[#"recorded"]? <> null then DateTimeZone.From(r[#"recorded"]) else null,
      #"outcome" = r[#"outcome"]?,
      #"outcomeDesc" = r[#"outcomeDesc"]?,
      #"purposeOfEvent" = if r[#"purposeOfEvent"]? = null then null else Table.FromRecords(List.Transform(r[#"purposeOfEvent"], CodeableConcept.ApplySchema)),
      #"agent" = if r[#"agent"]? = null then null else Table.FromRecords(List.Transform(r[#"agent"], AuditEvent_agent.ApplySchema)),
      #"source" = if r[#"source"]? = null then null else AuditEvent_source.ApplySchema(r[#"source"]),
      #"entity" = if r[#"entity"]? = null then null else Table.FromRecords(List.Transform(r[#"entity"], AuditEvent_entity.ApplySchema))
    ],

  AuditEvent_agent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"role" = if r[#"role"]? = null then null else Table.FromRecords(List.Transform(r[#"role"], CodeableConcept.ApplySchema)),
      #"who" = if r[#"who"]? = null then null else Reference.ApplySchema(r[#"who"]),
      #"altId" = r[#"altId"]?,
      #"name" = r[#"name"]?,
      #"requestor" = r[#"requestor"]?,
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"policy" = if r[#"policy"]? <> null then List.Transform(r[#"policy"], each _) else null,
      #"media" = if r[#"media"]? = null then null else Coding.ApplySchema(r[#"media"]),
      #"network" = if r[#"network"]? = null then null else AuditEvent_agent_network.ApplySchema(r[#"network"]),
      #"purposeOfUse" = if r[#"purposeOfUse"]? = null then null else Table.FromRecords(List.Transform(r[#"purposeOfUse"], CodeableConcept.ApplySchema))
    ],

  AuditEvent_agent_network.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"address" = r[#"address"]?,
      #"type" = r[#"type"]?
    ],

  AuditEvent_source.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"site" = r[#"site"]?,
      #"observer" = if r[#"observer"]? = null then null else Reference.ApplySchema(r[#"observer"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], Coding.ApplySchema))
    ],

  AuditEvent_entity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"what" = if r[#"what"]? = null then null else Reference.ApplySchema(r[#"what"]),
      #"type" = if r[#"type"]? = null then null else Coding.ApplySchema(r[#"type"]),
      #"role" = if r[#"role"]? = null then null else Coding.ApplySchema(r[#"role"]),
      #"lifecycle" = if r[#"lifecycle"]? = null then null else Coding.ApplySchema(r[#"lifecycle"]),
      #"securityLabel" = if r[#"securityLabel"]? = null then null else Table.FromRecords(List.Transform(r[#"securityLabel"], Coding.ApplySchema)),
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"query" = r[#"query"]?,
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], AuditEvent_entity_detail.ApplySchema))
    ],

  AuditEvent_entity_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"value" = if r[#"value"]? = null then null else AuditEvent_entity_detail_value.ApplySchema(r[#"value"])
    ],

  AuditEvent_entity_detail_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"string" = r[#"string"]?,
      #"base64Binary" = r[#"base64Binary"]?
    ],

  Basic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"created" = if r[#"created"]? <> null then Date.FromDateOrDateTimeZone(r[#"created"]) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"])
    ],

  Binary.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"contentType" = r[#"contentType"]?,
      #"securityContext" = if r[#"securityContext"]? = null then null else Reference.ApplySchema(r[#"securityContext"]),
      #"data" = r[#"data"]?
    ],

  BiologicallyDerivedProduct.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"productCategory" = r[#"productCategory"]?,
      #"productCode" = if r[#"productCode"]? = null then null else CodeableConcept.ApplySchema(r[#"productCode"]),
      #"status" = r[#"status"]?,
      #"request" = if r[#"request"]? = null then null else Table.FromRecords(List.Transform(r[#"request"], Reference.ApplySchema)),
      #"quantity" = r[#"quantity"]?,
      #"parent" = if r[#"parent"]? = null then null else Table.FromRecords(List.Transform(r[#"parent"], Reference.ApplySchema)),
      #"collection" = if r[#"collection"]? = null then null else BiologicallyDerivedProduct_collection.ApplySchema(r[#"collection"]),
      #"processing" = if r[#"processing"]? = null then null else Table.FromRecords(List.Transform(r[#"processing"], BiologicallyDerivedProduct_processing.ApplySchema)),
      #"manipulation" = if r[#"manipulation"]? = null then null else BiologicallyDerivedProduct_manipulation.ApplySchema(r[#"manipulation"]),
      #"storage" = if r[#"storage"]? = null then null else Table.FromRecords(List.Transform(r[#"storage"], BiologicallyDerivedProduct_storage.ApplySchema))
    ],

  BiologicallyDerivedProduct_collection.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"collector" = if r[#"collector"]? = null then null else Reference.ApplySchema(r[#"collector"]),
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"]),
      #"collected" = if r[#"collected"]? = null then null else BiologicallyDerivedProduct_collection_collected.ApplySchema(r[#"collected"])
    ],

  BiologicallyDerivedProduct_collection_collected.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  BiologicallyDerivedProduct_processing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"procedure" = if r[#"procedure"]? = null then null else CodeableConcept.ApplySchema(r[#"procedure"]),
      #"additive" = if r[#"additive"]? = null then null else Reference.ApplySchema(r[#"additive"]),
      #"time" = if r[#"time"]? = null then null else BiologicallyDerivedProduct_processing_time.ApplySchema(r[#"time"])
    ],

  BiologicallyDerivedProduct_processing_time.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  BiologicallyDerivedProduct_manipulation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"time" = if r[#"time"]? = null then null else BiologicallyDerivedProduct_manipulation_time.ApplySchema(r[#"time"])
    ],

  BiologicallyDerivedProduct_manipulation_time.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  BiologicallyDerivedProduct_storage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"temperature" = r[#"temperature"]?,
      #"scale" = r[#"scale"]?,
      #"duration" = if r[#"duration"]? = null then null else Period.ApplySchema(r[#"duration"])
    ],

  BodyStructure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"morphology" = if r[#"morphology"]? = null then null else CodeableConcept.ApplySchema(r[#"morphology"]),
      #"location" = if r[#"location"]? = null then null else CodeableConcept.ApplySchema(r[#"location"]),
      #"locationQualifier" = if r[#"locationQualifier"]? = null then null else Table.FromRecords(List.Transform(r[#"locationQualifier"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?,
      #"image" = if r[#"image"]? = null then null else Table.FromRecords(List.Transform(r[#"image"], Attachment.ApplySchema)),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"])
    ],

  Bundle.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"type" = r[#"type"]?,
      #"timestamp" = if r[#"timestamp"]? <> null then DateTimeZone.From(r[#"timestamp"]) else null,
      #"total" = r[#"total"]?,
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], Bundle_link.ApplySchema)),
      #"entry" = if r[#"entry"]? = null then null else Table.FromRecords(List.Transform(r[#"entry"], Bundle_entry.ApplySchema)),
      #"signature" = if r[#"signature"]? = null then null else Signature.ApplySchema(r[#"signature"])
    ],

  Bundle_link.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"relation" = r[#"relation"]?,
      #"url" = r[#"url"]?
    ],

  Bundle_entry.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"fullUrl" = r[#"fullUrl"]?,
      #"resource" = if r[#"resource"]? = null then null else Resource.ApplySchema(r[#"resource"]),
      #"search" = if r[#"search"]? = null then null else Bundle_entry_search.ApplySchema(r[#"search"]),
      #"request" = if r[#"request"]? = null then null else Bundle_entry_request.ApplySchema(r[#"request"]),
      #"response" = if r[#"response"]? = null then null else Bundle_entry_response.ApplySchema(r[#"response"]),
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], Bundle_link.ApplySchema))
    ],

  Bundle_entry_search.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"score" = r[#"score"]?
    ],

  Bundle_entry_request.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"method" = r[#"method"]?,
      #"url" = r[#"url"]?,
      #"ifNoneMatch" = r[#"ifNoneMatch"]?,
      #"ifModifiedSince" = if r[#"ifModifiedSince"]? <> null then DateTimeZone.From(r[#"ifModifiedSince"]) else null,
      #"ifMatch" = r[#"ifMatch"]?,
      #"ifNoneExist" = r[#"ifNoneExist"]?
    ],

  Bundle_entry_response.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"status" = r[#"status"]?,
      #"location" = r[#"location"]?,
      #"etag" = r[#"etag"]?,
      #"lastModified" = if r[#"lastModified"]? <> null then DateTimeZone.From(r[#"lastModified"]) else null,
      #"outcome" = if r[#"outcome"]? = null then null else Resource.ApplySchema(r[#"outcome"])
    ],

  CapabilityStatement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"kind" = r[#"kind"]?,
      #"instantiates" = if r[#"instantiates"]? <> null then List.Transform(r[#"instantiates"], each _) else null,
      #"imports" = if r[#"imports"]? <> null then List.Transform(r[#"imports"], each _) else null,
      #"software" = if r[#"software"]? = null then null else CapabilityStatement_software.ApplySchema(r[#"software"]),
      #"implementation" = if r[#"implementation"]? = null then null else CapabilityStatement_implementation.ApplySchema(r[#"implementation"]),
      #"fhirVersion" = r[#"fhirVersion"]?,
      #"format" = if r[#"format"]? <> null then List.Transform(r[#"format"], each _) else null,
      #"patchFormat" = if r[#"patchFormat"]? <> null then List.Transform(r[#"patchFormat"], each _) else null,
      #"implementationGuide" = if r[#"implementationGuide"]? <> null then List.Transform(r[#"implementationGuide"], each _) else null,
      #"rest" = if r[#"rest"]? = null then null else Table.FromRecords(List.Transform(r[#"rest"], CapabilityStatement_rest.ApplySchema)),
      #"messaging" = if r[#"messaging"]? = null then null else Table.FromRecords(List.Transform(r[#"messaging"], CapabilityStatement_messaging.ApplySchema)),
      #"document" = if r[#"document"]? = null then null else Table.FromRecords(List.Transform(r[#"document"], CapabilityStatement_document.ApplySchema))
    ],

  CapabilityStatement_software.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"version" = r[#"version"]?,
      #"releaseDate" = if r[#"releaseDate"]? <> null then DateTimeZone.From(r[#"releaseDate"]) else null
    ],

  CapabilityStatement_implementation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"url" = r[#"url"]?,
      #"custodian" = if r[#"custodian"]? = null then null else Reference.ApplySchema(r[#"custodian"])
    ],

  CapabilityStatement_rest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"documentation" = r[#"documentation"]?,
      #"security" = if r[#"security"]? = null then null else CapabilityStatement_rest_security.ApplySchema(r[#"security"]),
      #"resource" = if r[#"resource"]? = null then null else Table.FromRecords(List.Transform(r[#"resource"], CapabilityStatement_rest_resource.ApplySchema)),
      #"interaction" = if r[#"interaction"]? = null then null else Table.FromRecords(List.Transform(r[#"interaction"], CapabilityStatement_rest_interaction.ApplySchema)),
      #"compartment" = if r[#"compartment"]? <> null then List.Transform(r[#"compartment"], each _) else null,
      #"searchParam" = if r[#"searchParam"]? = null then null else Table.FromRecords(List.Transform(r[#"searchParam"], CapabilityStatement_rest_resource_searchParam.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else Table.FromRecords(List.Transform(r[#"operation"], CapabilityStatement_rest_resource_operation.ApplySchema))
    ],

  CapabilityStatement_rest_security.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"cors" = r[#"cors"]?,
      #"service" = if r[#"service"]? = null then null else Table.FromRecords(List.Transform(r[#"service"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?
    ],

  CapabilityStatement_rest_resource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"profile" = r[#"profile"]?,
      #"supportedProfile" = if r[#"supportedProfile"]? <> null then List.Transform(r[#"supportedProfile"], each _) else null,
      #"documentation" = r[#"documentation"]?,
      #"interaction" = if r[#"interaction"]? = null then null else Table.FromRecords(List.Transform(r[#"interaction"], CapabilityStatement_rest_resource_interaction.ApplySchema)),
      #"versioning" = r[#"versioning"]?,
      #"readHistory" = r[#"readHistory"]?,
      #"updateCreate" = r[#"updateCreate"]?,
      #"conditionalCreate" = r[#"conditionalCreate"]?,
      #"conditionalRead" = r[#"conditionalRead"]?,
      #"conditionalUpdate" = r[#"conditionalUpdate"]?,
      #"conditionalDelete" = r[#"conditionalDelete"]?,
      #"referencePolicy" = if r[#"referencePolicy"]? <> null then List.Transform(r[#"referencePolicy"], each _) else null,
      #"searchInclude" = if r[#"searchInclude"]? <> null then List.Transform(r[#"searchInclude"], each _) else null,
      #"searchRevInclude" = if r[#"searchRevInclude"]? <> null then List.Transform(r[#"searchRevInclude"], each _) else null,
      #"searchParam" = if r[#"searchParam"]? = null then null else Table.FromRecords(List.Transform(r[#"searchParam"], CapabilityStatement_rest_resource_searchParam.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else Table.FromRecords(List.Transform(r[#"operation"], CapabilityStatement_rest_resource_operation.ApplySchema))
    ],

  CapabilityStatement_rest_resource_interaction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"documentation" = r[#"documentation"]?
    ],

  CapabilityStatement_rest_resource_searchParam.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"definition" = r[#"definition"]?,
      #"type" = r[#"type"]?,
      #"documentation" = r[#"documentation"]?
    ],

  CapabilityStatement_rest_resource_operation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"definition" = r[#"definition"]?,
      #"documentation" = r[#"documentation"]?
    ],

  CapabilityStatement_rest_interaction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"documentation" = r[#"documentation"]?
    ],

  CapabilityStatement_messaging.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], CapabilityStatement_messaging_endpoint.ApplySchema)),
      #"reliableCache" = r[#"reliableCache"]?,
      #"documentation" = r[#"documentation"]?,
      #"supportedMessage" = if r[#"supportedMessage"]? = null then null else Table.FromRecords(List.Transform(r[#"supportedMessage"], CapabilityStatement_messaging_supportedMessage.ApplySchema))
    ],

  CapabilityStatement_messaging_endpoint.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"protocol" = if r[#"protocol"]? = null then null else Coding.ApplySchema(r[#"protocol"]),
      #"address" = r[#"address"]?
    ],

  CapabilityStatement_messaging_supportedMessage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"definition" = r[#"definition"]?
    ],

  CapabilityStatement_document.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"documentation" = r[#"documentation"]?,
      #"profile" = r[#"profile"]?
    ],

  CarePlan.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"replaces" = if r[#"replaces"]? = null then null else Table.FromRecords(List.Transform(r[#"replaces"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"intent" = r[#"intent"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"title" = r[#"title"]?,
      #"description" = r[#"description"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"contributor" = if r[#"contributor"]? = null then null else Table.FromRecords(List.Transform(r[#"contributor"], Reference.ApplySchema)),
      #"careTeam" = if r[#"careTeam"]? = null then null else Table.FromRecords(List.Transform(r[#"careTeam"], Reference.ApplySchema)),
      #"addresses" = if r[#"addresses"]? = null then null else Table.FromRecords(List.Transform(r[#"addresses"], Reference.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Reference.ApplySchema)),
      #"goal" = if r[#"goal"]? = null then null else Table.FromRecords(List.Transform(r[#"goal"], Reference.ApplySchema)),
      #"activity" = if r[#"activity"]? = null then null else Table.FromRecords(List.Transform(r[#"activity"], CarePlan_activity.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  CarePlan_activity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"outcomeCodeableConcept" = if r[#"outcomeCodeableConcept"]? = null then null else Table.FromRecords(List.Transform(r[#"outcomeCodeableConcept"], CodeableConcept.ApplySchema)),
      #"outcomeReference" = if r[#"outcomeReference"]? = null then null else Table.FromRecords(List.Transform(r[#"outcomeReference"], Reference.ApplySchema)),
      #"progress" = if r[#"progress"]? = null then null else Table.FromRecords(List.Transform(r[#"progress"], Annotation.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"]),
      #"detail" = if r[#"detail"]? = null then null else CarePlan_activity_detail.ApplySchema(r[#"detail"])
    ],

  CarePlan_activity_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"kind" = r[#"kind"]?,
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"goal" = if r[#"goal"]? = null then null else Table.FromRecords(List.Transform(r[#"goal"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"scheduled" = if r[#"scheduled"]? = null then null else CarePlan_activity_detail_scheduled.ApplySchema(r[#"scheduled"]),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Reference.ApplySchema)),
      #"product" = if r[#"product"]? = null then null else CarePlan_activity_detail_product.ApplySchema(r[#"product"]),
      #"dailyAmount" = if r[#"dailyAmount"]? = null then null else Quantity.ApplySchema(r[#"dailyAmount"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"description" = r[#"description"]?
    ],

  CarePlan_activity_detail_scheduled.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"string" = r[#"string"]?
    ],

  CarePlan_activity_detail_product.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  CareTeam.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"name" = r[#"name"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], CareTeam_participant.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Table.FromRecords(List.Transform(r[#"managingOrganization"], Reference.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  CareTeam_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else Table.FromRecords(List.Transform(r[#"role"], CodeableConcept.ApplySchema)),
      #"member" = if r[#"member"]? = null then null else Reference.ApplySchema(r[#"member"]),
      #"onBehalfOf" = if r[#"onBehalfOf"]? = null then null else Reference.ApplySchema(r[#"onBehalfOf"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  CatalogEntry.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"orderable" = r[#"orderable"]?,
      #"referencedItem" = if r[#"referencedItem"]? = null then null else Reference.ApplySchema(r[#"referencedItem"]),
      #"additionalIdentifier" = if r[#"additionalIdentifier"]? = null then null else Table.FromRecords(List.Transform(r[#"additionalIdentifier"], Identifier.ApplySchema)),
      #"classification" = if r[#"classification"]? = null then null else Table.FromRecords(List.Transform(r[#"classification"], CodeableConcept.ApplySchema)),
      #"status" = r[#"status"]?,
      #"validityPeriod" = if r[#"validityPeriod"]? = null then null else Period.ApplySchema(r[#"validityPeriod"]),
      #"validTo" = if r[#"validTo"]? <> null then DateTimeZone.From(r[#"validTo"]) else null,
      #"lastUpdated" = if r[#"lastUpdated"]? <> null then DateTimeZone.From(r[#"lastUpdated"]) else null,
      #"additionalCharacteristic" = if r[#"additionalCharacteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"additionalCharacteristic"], CodeableConcept.ApplySchema)),
      #"additionalClassification" = if r[#"additionalClassification"]? = null then null else Table.FromRecords(List.Transform(r[#"additionalClassification"], CodeableConcept.ApplySchema)),
      #"relatedEntry" = if r[#"relatedEntry"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedEntry"], CatalogEntry_relatedEntry.ApplySchema))
    ],

  CatalogEntry_relatedEntry.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"relationtype" = r[#"relationtype"]?,
      #"item" = if r[#"item"]? = null then null else Reference.ApplySchema(r[#"item"])
    ],

  ChargeItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"definitionUri" = if r[#"definitionUri"]? <> null then List.Transform(r[#"definitionUri"], each _) else null,
      #"definitionCanonical" = if r[#"definitionCanonical"]? <> null then List.Transform(r[#"definitionCanonical"], each _) else null,
      #"status" = r[#"status"]?,
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"context" = if r[#"context"]? = null then null else Reference.ApplySchema(r[#"context"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else ChargeItem_occurrence.ApplySchema(r[#"occurrence"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], ChargeItem_performer.ApplySchema)),
      #"performingOrganization" = if r[#"performingOrganization"]? = null then null else Reference.ApplySchema(r[#"performingOrganization"]),
      #"requestingOrganization" = if r[#"requestingOrganization"]? = null then null else Reference.ApplySchema(r[#"requestingOrganization"]),
      #"costCenter" = if r[#"costCenter"]? = null then null else Reference.ApplySchema(r[#"costCenter"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"bodysite" = if r[#"bodysite"]? = null then null else Table.FromRecords(List.Transform(r[#"bodysite"], CodeableConcept.ApplySchema)),
      #"factorOverride" = r[#"factorOverride"]?,
      #"priceOverride" = if r[#"priceOverride"]? = null then null else Money.ApplySchema(r[#"priceOverride"]),
      #"overrideReason" = r[#"overrideReason"]?,
      #"enterer" = if r[#"enterer"]? = null then null else Reference.ApplySchema(r[#"enterer"]),
      #"enteredDate" = if r[#"enteredDate"]? <> null then DateTimeZone.From(r[#"enteredDate"]) else null,
      #"reason" = if r[#"reason"]? = null then null else Table.FromRecords(List.Transform(r[#"reason"], CodeableConcept.ApplySchema)),
      #"service" = if r[#"service"]? = null then null else Table.FromRecords(List.Transform(r[#"service"], Reference.ApplySchema)),
      #"product" = if r[#"product"]? = null then null else ChargeItem_product.ApplySchema(r[#"product"]),
      #"account" = if r[#"account"]? = null then null else Table.FromRecords(List.Transform(r[#"account"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"supportingInformation" = if r[#"supportingInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInformation"], Reference.ApplySchema))
    ],

  ChargeItem_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ChargeItem_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  ChargeItem_product.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  ChargeItemDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"title" = r[#"title"]?,
      #"derivedFromUri" = if r[#"derivedFromUri"]? <> null then List.Transform(r[#"derivedFromUri"], each _) else null,
      #"partOf" = if r[#"partOf"]? <> null then List.Transform(r[#"partOf"], each _) else null,
      #"replaces" = if r[#"replaces"]? <> null then List.Transform(r[#"replaces"], each _) else null,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"instance" = if r[#"instance"]? = null then null else Table.FromRecords(List.Transform(r[#"instance"], Reference.ApplySchema)),
      #"applicability" = if r[#"applicability"]? = null then null else Table.FromRecords(List.Transform(r[#"applicability"], ChargeItemDefinition_applicability.ApplySchema)),
      #"propertyGroup" = if r[#"propertyGroup"]? = null then null else Table.FromRecords(List.Transform(r[#"propertyGroup"], ChargeItemDefinition_propertyGroup.ApplySchema))
    ],

  ChargeItemDefinition_applicability.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"language" = r[#"language"]?,
      #"expression" = r[#"expression"]?
    ],

  ChargeItemDefinition_propertyGroup.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"priceComponent" = if r[#"priceComponent"]? = null then null else Table.FromRecords(List.Transform(r[#"priceComponent"], ChargeItemDefinition_propertyGroup_priceComponent.ApplySchema)),
      #"applicability" = if r[#"applicability"]? = null then null else Table.FromRecords(List.Transform(r[#"applicability"], ChargeItemDefinition_applicability.ApplySchema))
    ],

  ChargeItemDefinition_propertyGroup_priceComponent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"factor" = r[#"factor"]?,
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"])
    ],

  Claim.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else CodeableConcept.ApplySchema(r[#"subType"]),
      #"use" = r[#"use"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"billablePeriod" = if r[#"billablePeriod"]? = null then null else Period.ApplySchema(r[#"billablePeriod"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"enterer" = if r[#"enterer"]? = null then null else Reference.ApplySchema(r[#"enterer"]),
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"fundsReserve" = if r[#"fundsReserve"]? = null then null else CodeableConcept.ApplySchema(r[#"fundsReserve"]),
      #"related" = if r[#"related"]? = null then null else Table.FromRecords(List.Transform(r[#"related"], Claim_related.ApplySchema)),
      #"prescription" = if r[#"prescription"]? = null then null else Reference.ApplySchema(r[#"prescription"]),
      #"originalPrescription" = if r[#"originalPrescription"]? = null then null else Reference.ApplySchema(r[#"originalPrescription"]),
      #"payee" = if r[#"payee"]? = null then null else Claim_payee.ApplySchema(r[#"payee"]),
      #"referral" = if r[#"referral"]? = null then null else Reference.ApplySchema(r[#"referral"]),
      #"facility" = if r[#"facility"]? = null then null else Reference.ApplySchema(r[#"facility"]),
      #"careTeam" = if r[#"careTeam"]? = null then null else Table.FromRecords(List.Transform(r[#"careTeam"], Claim_careTeam.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Claim_supportingInfo.ApplySchema)),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Table.FromRecords(List.Transform(r[#"diagnosis"], Claim_diagnosis.ApplySchema)),
      #"procedure" = if r[#"procedure"]? = null then null else Table.FromRecords(List.Transform(r[#"procedure"], Claim_procedure.ApplySchema)),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], Claim_insurance.ApplySchema)),
      #"accident" = if r[#"accident"]? = null then null else Claim_accident.ApplySchema(r[#"accident"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], Claim_item.ApplySchema)),
      #"total" = if r[#"total"]? = null then null else Money.ApplySchema(r[#"total"])
    ],

  Claim_related.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"claim" = if r[#"claim"]? = null then null else Reference.ApplySchema(r[#"claim"]),
      #"relationship" = if r[#"relationship"]? = null then null else CodeableConcept.ApplySchema(r[#"relationship"]),
      #"reference" = if r[#"reference"]? = null then null else Identifier.ApplySchema(r[#"reference"])
    ],

  Claim_payee.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"party" = if r[#"party"]? = null then null else Reference.ApplySchema(r[#"party"])
    ],

  Claim_careTeam.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"responsible" = r[#"responsible"]?,
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"qualification" = if r[#"qualification"]? = null then null else CodeableConcept.ApplySchema(r[#"qualification"])
    ],

  Claim_supportingInfo.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"timing" = if r[#"timing"]? = null then null else Claim_supportingInfo_timing.ApplySchema(r[#"timing"]),
      #"value" = if r[#"value"]? = null then null else Claim_supportingInfo_value.ApplySchema(r[#"value"]),
      #"reason" = if r[#"reason"]? = null then null else CodeableConcept.ApplySchema(r[#"reason"])
    ],

  Claim_supportingInfo_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Claim_supportingInfo_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"string" = r[#"string"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Claim_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Claim_diagnosis_diagnosis.ApplySchema(r[#"diagnosis"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"onAdmission" = if r[#"onAdmission"]? = null then null else CodeableConcept.ApplySchema(r[#"onAdmission"]),
      #"packageCode" = if r[#"packageCode"]? = null then null else CodeableConcept.ApplySchema(r[#"packageCode"])
    ],

  Claim_diagnosis_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Claim_procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"procedure" = if r[#"procedure"]? = null then null else Claim_procedure_procedure.ApplySchema(r[#"procedure"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema))
    ],

  Claim_procedure_procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Claim_insurance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"focal" = r[#"focal"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"businessArrangement" = r[#"businessArrangement"]?,
      #"preAuthRef" = if r[#"preAuthRef"]? <> null then List.Transform(r[#"preAuthRef"], each _) else null,
      #"claimResponse" = if r[#"claimResponse"]? = null then null else Reference.ApplySchema(r[#"claimResponse"])
    ],

  Claim_accident.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"location" = if r[#"location"]? = null then null else Claim_accident_location.ApplySchema(r[#"location"])
    ],

  Claim_accident_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Claim_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"careTeamSequence" = if r[#"careTeamSequence"]? <> null then List.Transform(r[#"careTeamSequence"], each _) else null,
      #"diagnosisSequence" = if r[#"diagnosisSequence"]? <> null then List.Transform(r[#"diagnosisSequence"], each _) else null,
      #"procedureSequence" = if r[#"procedureSequence"]? <> null then List.Transform(r[#"procedureSequence"], each _) else null,
      #"informationSequence" = if r[#"informationSequence"]? <> null then List.Transform(r[#"informationSequence"], each _) else null,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"serviced" = if r[#"serviced"]? = null then null else Claim_item_serviced.ApplySchema(r[#"serviced"]),
      #"location" = if r[#"location"]? = null then null else Claim_item_location.ApplySchema(r[#"location"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"subSite" = if r[#"subSite"]? = null then null else Table.FromRecords(List.Transform(r[#"subSite"], CodeableConcept.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Table.FromRecords(List.Transform(r[#"encounter"], Reference.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], Claim_item_detail.ApplySchema))
    ],

  Claim_item_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Claim_item_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Claim_item_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema)),
      #"subDetail" = if r[#"subDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"subDetail"], Claim_item_detail_subDetail.ApplySchema))
    ],

  Claim_item_detail_subDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema))
    ],

  ClaimResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else CodeableConcept.ApplySchema(r[#"subType"]),
      #"use" = r[#"use"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"requestor" = if r[#"requestor"]? = null then null else Reference.ApplySchema(r[#"requestor"]),
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"outcome" = r[#"outcome"]?,
      #"disposition" = r[#"disposition"]?,
      #"preAuthRef" = r[#"preAuthRef"]?,
      #"preAuthPeriod" = if r[#"preAuthPeriod"]? = null then null else Period.ApplySchema(r[#"preAuthPeriod"]),
      #"payeeType" = if r[#"payeeType"]? = null then null else CodeableConcept.ApplySchema(r[#"payeeType"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], ClaimResponse_item.ApplySchema)),
      #"addItem" = if r[#"addItem"]? = null then null else Table.FromRecords(List.Transform(r[#"addItem"], ClaimResponse_addItem.ApplySchema)),
      #"total" = if r[#"total"]? = null then null else Table.FromRecords(List.Transform(r[#"total"], ClaimResponse_total.ApplySchema)),
      #"payment" = if r[#"payment"]? = null then null else ClaimResponse_payment.ApplySchema(r[#"payment"]),
      #"fundsReserve" = if r[#"fundsReserve"]? = null then null else CodeableConcept.ApplySchema(r[#"fundsReserve"]),
      #"formCode" = if r[#"formCode"]? = null then null else CodeableConcept.ApplySchema(r[#"formCode"]),
      #"form" = if r[#"form"]? = null then null else Attachment.ApplySchema(r[#"form"]),
      #"processNote" = if r[#"processNote"]? = null then null else Table.FromRecords(List.Transform(r[#"processNote"], ClaimResponse_processNote.ApplySchema)),
      #"communicationRequest" = if r[#"communicationRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"communicationRequest"], Reference.ApplySchema)),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], ClaimResponse_insurance.ApplySchema)),
      #"error" = if r[#"error"]? = null then null else Table.FromRecords(List.Transform(r[#"error"], ClaimResponse_error.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"itemSequence" = r[#"itemSequence"]?,
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], ClaimResponse_item_detail.ApplySchema))
    ],

  ClaimResponse_item_adjudication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"reason" = if r[#"reason"]? = null then null else CodeableConcept.ApplySchema(r[#"reason"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"]),
      #"value" = r[#"value"]?
    ],

  ClaimResponse_item_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"detailSequence" = r[#"detailSequence"]?,
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"subDetail" = if r[#"subDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"subDetail"], ClaimResponse_item_detail_subDetail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_item_detail_subDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subDetailSequence" = r[#"subDetailSequence"]?,
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_addItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"itemSequence" = if r[#"itemSequence"]? <> null then List.Transform(r[#"itemSequence"], each _) else null,
      #"detailSequence" = if r[#"detailSequence"]? <> null then List.Transform(r[#"detailSequence"], each _) else null,
      #"subdetailSequence" = if r[#"subdetailSequence"]? <> null then List.Transform(r[#"subdetailSequence"], each _) else null,
      #"provider" = if r[#"provider"]? = null then null else Table.FromRecords(List.Transform(r[#"provider"], Reference.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"serviced" = if r[#"serviced"]? = null then null else ClaimResponse_addItem_serviced.ApplySchema(r[#"serviced"]),
      #"location" = if r[#"location"]? = null then null else ClaimResponse_addItem_location.ApplySchema(r[#"location"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"subSite" = if r[#"subSite"]? = null then null else Table.FromRecords(List.Transform(r[#"subSite"], CodeableConcept.ApplySchema)),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], ClaimResponse_addItem_detail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_addItem_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ClaimResponse_addItem_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ClaimResponse_addItem_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"subDetail" = if r[#"subDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"subDetail"], ClaimResponse_addItem_detail_subDetail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_addItem_detail_subDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ClaimResponse_item_adjudication.ApplySchema))
    ],

  ClaimResponse_total.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"])
    ],

  ClaimResponse_payment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"adjustment" = if r[#"adjustment"]? = null then null else Money.ApplySchema(r[#"adjustment"]),
      #"adjustmentReason" = if r[#"adjustmentReason"]? = null then null else CodeableConcept.ApplySchema(r[#"adjustmentReason"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"]),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"])
    ],

  ClaimResponse_processNote.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"number" = r[#"number"]?,
      #"type" = r[#"type"]?,
      #"text" = r[#"text"]?,
      #"language" = if r[#"language"]? = null then null else CodeableConcept.ApplySchema(r[#"language"])
    ],

  ClaimResponse_insurance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"focal" = r[#"focal"]?,
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"businessArrangement" = r[#"businessArrangement"]?,
      #"claimResponse" = if r[#"claimResponse"]? = null then null else Reference.ApplySchema(r[#"claimResponse"])
    ],

  ClaimResponse_error.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"itemSequence" = r[#"itemSequence"]?,
      #"detailSequence" = r[#"detailSequence"]?,
      #"subDetailSequence" = r[#"subDetailSequence"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"])
    ],

  ClinicalImpression.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"effective" = if r[#"effective"]? = null then null else ClinicalImpression_effective.ApplySchema(r[#"effective"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"assessor" = if r[#"assessor"]? = null then null else Reference.ApplySchema(r[#"assessor"]),
      #"previous" = if r[#"previous"]? = null then null else Reference.ApplySchema(r[#"previous"]),
      #"problem" = if r[#"problem"]? = null then null else Table.FromRecords(List.Transform(r[#"problem"], Reference.ApplySchema)),
      #"investigation" = if r[#"investigation"]? = null then null else Table.FromRecords(List.Transform(r[#"investigation"], ClinicalImpression_investigation.ApplySchema)),
      #"protocol" = if r[#"protocol"]? <> null then List.Transform(r[#"protocol"], each _) else null,
      #"summary" = r[#"summary"]?,
      #"finding" = if r[#"finding"]? = null then null else Table.FromRecords(List.Transform(r[#"finding"], ClinicalImpression_finding.ApplySchema)),
      #"prognosisCodeableConcept" = if r[#"prognosisCodeableConcept"]? = null then null else Table.FromRecords(List.Transform(r[#"prognosisCodeableConcept"], CodeableConcept.ApplySchema)),
      #"prognosisReference" = if r[#"prognosisReference"]? = null then null else Table.FromRecords(List.Transform(r[#"prognosisReference"], Reference.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  ClinicalImpression_effective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ClinicalImpression_investigation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], Reference.ApplySchema))
    ],

  ClinicalImpression_finding.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"itemCodeableConcept" = if r[#"itemCodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"itemCodeableConcept"]),
      #"itemReference" = if r[#"itemReference"]? = null then null else Reference.ApplySchema(r[#"itemReference"]),
      #"basis" = r[#"basis"]?
    ],

  CodeSystem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"caseSensitive" = r[#"caseSensitive"]?,
      #"valueSet" = r[#"valueSet"]?,
      #"hierarchyMeaning" = r[#"hierarchyMeaning"]?,
      #"compositional" = r[#"compositional"]?,
      #"versionNeeded" = r[#"versionNeeded"]?,
      #"content" = r[#"content"]?,
      #"supplements" = r[#"supplements"]?,
      #"count" = r[#"count"]?,
      #"filter" = if r[#"filter"]? = null then null else Table.FromRecords(List.Transform(r[#"filter"], CodeSystem_filter.ApplySchema)),
      #"property" = if r[#"property"]? = null then null else Table.FromRecords(List.Transform(r[#"property"], CodeSystem_property.ApplySchema)),
      #"concept" = if r[#"concept"]? = null then null else Table.FromRecords(List.Transform(r[#"concept"], CodeSystem_concept.ApplySchema))
    ],

  CodeSystem_filter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"description" = r[#"description"]?,
      #"operator" = if r[#"operator"]? <> null then List.Transform(r[#"operator"], each _) else null,
      #"value" = r[#"value"]?
    ],

  CodeSystem_property.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"uri" = r[#"uri"]?,
      #"description" = r[#"description"]?,
      #"type" = r[#"type"]?
    ],

  CodeSystem_concept.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"definition" = r[#"definition"]?,
      #"designation" = if r[#"designation"]? = null then null else Table.FromRecords(List.Transform(r[#"designation"], CodeSystem_concept_designation.ApplySchema)),
      #"property" = if r[#"property"]? = null then null else Table.FromRecords(List.Transform(r[#"property"], CodeSystem_concept_property.ApplySchema)),
      #"concept" = if r[#"concept"]? = null then null else Table.FromRecords(List.Transform(r[#"concept"], @CodeSystem_concept.ApplySchema))
    ],

  CodeSystem_concept_designation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"language" = r[#"language"]?,
      #"use" = if r[#"use"]? = null then null else Coding.ApplySchema(r[#"use"]),
      #"value" = r[#"value"]?
    ],

  CodeSystem_concept_property.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"value" = if r[#"value"]? = null then null else CodeSystem_concept_property_value.ApplySchema(r[#"value"])
    ],

  CodeSystem_concept_property_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"code" = r[#"code"]?,
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"string" = r[#"string"]?,
      #"integer" = r[#"integer"]?,
      #"boolean" = r[#"boolean"]?,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?
    ],

  Communication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"inResponseTo" = if r[#"inResponseTo"]? = null then null else Table.FromRecords(List.Transform(r[#"inResponseTo"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"priority" = r[#"priority"]?,
      #"medium" = if r[#"medium"]? = null then null else Table.FromRecords(List.Transform(r[#"medium"], CodeableConcept.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"topic" = if r[#"topic"]? = null then null else CodeableConcept.ApplySchema(r[#"topic"]),
      #"about" = if r[#"about"]? = null then null else Table.FromRecords(List.Transform(r[#"about"], Reference.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"sent" = if r[#"sent"]? <> null then DateTimeZone.From(r[#"sent"]) else null,
      #"received" = if r[#"received"]? <> null then DateTimeZone.From(r[#"received"]) else null,
      #"recipient" = if r[#"recipient"]? = null then null else Table.FromRecords(List.Transform(r[#"recipient"], Reference.ApplySchema)),
      #"sender" = if r[#"sender"]? = null then null else Reference.ApplySchema(r[#"sender"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"payload" = if r[#"payload"]? = null then null else Table.FromRecords(List.Transform(r[#"payload"], Communication_payload.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Communication_payload.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Communication_payload_content.ApplySchema(r[#"content"])
    ],

  Communication_payload_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"string" = r[#"string"]?,
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  CommunicationRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"replaces" = if r[#"replaces"]? = null then null else Table.FromRecords(List.Transform(r[#"replaces"], Reference.ApplySchema)),
      #"groupIdentifier" = if r[#"groupIdentifier"]? = null then null else Identifier.ApplySchema(r[#"groupIdentifier"]),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"priority" = r[#"priority"]?,
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"medium" = if r[#"medium"]? = null then null else Table.FromRecords(List.Transform(r[#"medium"], CodeableConcept.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"about" = if r[#"about"]? = null then null else Table.FromRecords(List.Transform(r[#"about"], Reference.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"payload" = if r[#"payload"]? = null then null else Table.FromRecords(List.Transform(r[#"payload"], CommunicationRequest_payload.ApplySchema)),
      #"occurrence" = if r[#"occurrence"]? = null then null else CommunicationRequest_occurrence.ApplySchema(r[#"occurrence"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"recipient" = if r[#"recipient"]? = null then null else Table.FromRecords(List.Transform(r[#"recipient"], Reference.ApplySchema)),
      #"sender" = if r[#"sender"]? = null then null else Reference.ApplySchema(r[#"sender"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  CommunicationRequest_payload.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else CommunicationRequest_payload_content.ApplySchema(r[#"content"])
    ],

  CommunicationRequest_payload_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"string" = r[#"string"]?,
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  CommunicationRequest_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  CompartmentDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"code" = r[#"code"]?,
      #"search" = r[#"search"]?,
      #"resource" = if r[#"resource"]? = null then null else Table.FromRecords(List.Transform(r[#"resource"], CompartmentDefinition_resource.ApplySchema))
    ],

  CompartmentDefinition_resource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"param" = if r[#"param"]? <> null then List.Transform(r[#"param"], each _) else null,
      #"documentation" = r[#"documentation"]?
    ],

  Composition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], Reference.ApplySchema)),
      #"title" = r[#"title"]?,
      #"confidentiality" = r[#"confidentiality"]?,
      #"attester" = if r[#"attester"]? = null then null else Table.FromRecords(List.Transform(r[#"attester"], Composition_attester.ApplySchema)),
      #"custodian" = if r[#"custodian"]? = null then null else Reference.ApplySchema(r[#"custodian"]),
      #"relatesTo" = if r[#"relatesTo"]? = null then null else Table.FromRecords(List.Transform(r[#"relatesTo"], Composition_relatesTo.ApplySchema)),
      #"event" = if r[#"event"]? = null then null else Table.FromRecords(List.Transform(r[#"event"], Composition_event.ApplySchema)),
      #"section" = if r[#"section"]? = null then null else Table.FromRecords(List.Transform(r[#"section"], Composition_section.ApplySchema))
    ],

  Composition_attester.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"time" = if r[#"time"]? <> null then DateTimeZone.From(r[#"time"]) else null,
      #"party" = if r[#"party"]? = null then null else Reference.ApplySchema(r[#"party"])
    ],

  Composition_relatesTo.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"target" = if r[#"target"]? = null then null else Composition_relatesTo_target.ApplySchema(r[#"target"])
    ],

  Composition_relatesTo_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Composition_event.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], Reference.ApplySchema))
    ],

  Composition_section.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"title" = r[#"title"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], Reference.ApplySchema)),
      #"focus" = if r[#"focus"]? = null then null else Reference.ApplySchema(r[#"focus"]),
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"mode" = r[#"mode"]?,
      #"orderedBy" = if r[#"orderedBy"]? = null then null else CodeableConcept.ApplySchema(r[#"orderedBy"]),
      #"entry" = if r[#"entry"]? = null then null else Table.FromRecords(List.Transform(r[#"entry"], Reference.ApplySchema)),
      #"emptyReason" = if r[#"emptyReason"]? = null then null else CodeableConcept.ApplySchema(r[#"emptyReason"]),
      #"section" = if r[#"section"]? = null then null else Table.FromRecords(List.Transform(r[#"section"], @Composition_section.ApplySchema))
    ],

  ConceptMap.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"source" = if r[#"source"]? = null then null else ConceptMap_source.ApplySchema(r[#"source"]),
      #"target" = if r[#"target"]? = null then null else ConceptMap_target.ApplySchema(r[#"target"]),
      #"group" = if r[#"group"]? = null then null else Table.FromRecords(List.Transform(r[#"group"], ConceptMap_group.ApplySchema))
    ],

  ConceptMap_source.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"uri" = r[#"uri"]?,
      #"canonical" = r[#"canonical"]?
    ],

  ConceptMap_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"uri" = r[#"uri"]?,
      #"canonical" = r[#"canonical"]?
    ],

  ConceptMap_group.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"source" = r[#"source"]?,
      #"sourceVersion" = r[#"sourceVersion"]?,
      #"target" = r[#"target"]?,
      #"targetVersion" = r[#"targetVersion"]?,
      #"element" = if r[#"element"]? = null then null else Table.FromRecords(List.Transform(r[#"element"], ConceptMap_group_element.ApplySchema)),
      #"unmapped" = if r[#"unmapped"]? = null then null else ConceptMap_group_unmapped.ApplySchema(r[#"unmapped"])
    ],

  ConceptMap_group_element.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], ConceptMap_group_element_target.ApplySchema))
    ],

  ConceptMap_group_element_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"equivalence" = r[#"equivalence"]?,
      #"comment" = r[#"comment"]?,
      #"dependsOn" = if r[#"dependsOn"]? = null then null else Table.FromRecords(List.Transform(r[#"dependsOn"], ConceptMap_group_element_target_dependsOn.ApplySchema)),
      #"product" = if r[#"product"]? = null then null else Table.FromRecords(List.Transform(r[#"product"], ConceptMap_group_element_target_dependsOn.ApplySchema))
    ],

  ConceptMap_group_element_target_dependsOn.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"property" = r[#"property"]?,
      #"system" = r[#"system"]?,
      #"value" = r[#"value"]?,
      #"display" = r[#"display"]?
    ],

  ConceptMap_group_unmapped.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"mode" = r[#"mode"]?,
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"url" = r[#"url"]?
    ],

  Condition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"clinicalStatus" = if r[#"clinicalStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"clinicalStatus"]),
      #"verificationStatus" = if r[#"verificationStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"verificationStatus"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"severity" = if r[#"severity"]? = null then null else CodeableConcept.ApplySchema(r[#"severity"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"bodySite" = if r[#"bodySite"]? = null then null else Table.FromRecords(List.Transform(r[#"bodySite"], CodeableConcept.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"onset" = if r[#"onset"]? = null then null else Condition_onset.ApplySchema(r[#"onset"]),
      #"abatement" = if r[#"abatement"]? = null then null else Condition_abatement.ApplySchema(r[#"abatement"]),
      #"recordedDate" = if r[#"recordedDate"]? <> null then DateTimeZone.From(r[#"recordedDate"]) else null,
      #"recorder" = if r[#"recorder"]? = null then null else Reference.ApplySchema(r[#"recorder"]),
      #"asserter" = if r[#"asserter"]? = null then null else Reference.ApplySchema(r[#"asserter"]),
      #"stage" = if r[#"stage"]? = null then null else Table.FromRecords(List.Transform(r[#"stage"], Condition_stage.ApplySchema)),
      #"evidence" = if r[#"evidence"]? = null then null else Table.FromRecords(List.Transform(r[#"evidence"], Condition_evidence.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Condition_onset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  Condition_abatement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  Condition_stage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"summary" = if r[#"summary"]? = null then null else CodeableConcept.ApplySchema(r[#"summary"]),
      #"assessment" = if r[#"assessment"]? = null then null else Table.FromRecords(List.Transform(r[#"assessment"], Reference.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"])
    ],

  Condition_evidence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], Reference.ApplySchema))
    ],

  Consent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"scope" = if r[#"scope"]? = null then null else CodeableConcept.ApplySchema(r[#"scope"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Reference.ApplySchema)),
      #"organization" = if r[#"organization"]? = null then null else Table.FromRecords(List.Transform(r[#"organization"], Reference.ApplySchema)),
      #"source" = if r[#"source"]? = null then null else Consent_source.ApplySchema(r[#"source"]),
      #"policy" = if r[#"policy"]? = null then null else Table.FromRecords(List.Transform(r[#"policy"], Consent_policy.ApplySchema)),
      #"policyRule" = if r[#"policyRule"]? = null then null else CodeableConcept.ApplySchema(r[#"policyRule"]),
      #"verification" = if r[#"verification"]? = null then null else Table.FromRecords(List.Transform(r[#"verification"], Consent_verification.ApplySchema)),
      #"provision" = if r[#"provision"]? = null then null else Consent_provision.ApplySchema(r[#"provision"])
    ],

  Consent_source.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Consent_policy.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"authority" = r[#"authority"]?,
      #"uri" = r[#"uri"]?
    ],

  Consent_verification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"verified" = r[#"verified"]?,
      #"verifiedWith" = if r[#"verifiedWith"]? = null then null else Reference.ApplySchema(r[#"verifiedWith"]),
      #"verificationDate" = if r[#"verificationDate"]? <> null then DateTimeZone.From(r[#"verificationDate"]) else null
    ],

  Consent_provision.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"actor" = if r[#"actor"]? = null then null else Table.FromRecords(List.Transform(r[#"actor"], Consent_provision_actor.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], CodeableConcept.ApplySchema)),
      #"securityLabel" = if r[#"securityLabel"]? = null then null else Table.FromRecords(List.Transform(r[#"securityLabel"], Coding.ApplySchema)),
      #"purpose" = if r[#"purpose"]? = null then null else Table.FromRecords(List.Transform(r[#"purpose"], Coding.ApplySchema)),
      #"class" = if r[#"class"]? = null then null else Table.FromRecords(List.Transform(r[#"class"], Coding.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"dataPeriod" = if r[#"dataPeriod"]? = null then null else Period.ApplySchema(r[#"dataPeriod"]),
      #"data" = if r[#"data"]? = null then null else Table.FromRecords(List.Transform(r[#"data"], Consent_provision_data.ApplySchema)),
      #"provision" = if r[#"provision"]? = null then null else Table.FromRecords(List.Transform(r[#"provision"], @Consent_provision.ApplySchema))
    ],

  Consent_provision_actor.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"])
    ],

  Consent_provision_data.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"meaning" = r[#"meaning"]?,
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"])
    ],

  Contract.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"status" = r[#"status"]?,
      #"legalState" = if r[#"legalState"]? = null then null else CodeableConcept.ApplySchema(r[#"legalState"]),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? = null then null else Reference.ApplySchema(r[#"instantiatesCanonical"]),
      #"instantiatesUri" = r[#"instantiatesUri"]?,
      #"contentDerivative" = if r[#"contentDerivative"]? = null then null else CodeableConcept.ApplySchema(r[#"contentDerivative"]),
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"applies" = if r[#"applies"]? = null then null else Period.ApplySchema(r[#"applies"]),
      #"expirationType" = if r[#"expirationType"]? = null then null else CodeableConcept.ApplySchema(r[#"expirationType"]),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"authority" = if r[#"authority"]? = null then null else Table.FromRecords(List.Transform(r[#"authority"], Reference.ApplySchema)),
      #"domain" = if r[#"domain"]? = null then null else Table.FromRecords(List.Transform(r[#"domain"], Reference.ApplySchema)),
      #"site" = if r[#"site"]? = null then null else Table.FromRecords(List.Transform(r[#"site"], Reference.ApplySchema)),
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"alias" = if r[#"alias"]? <> null then List.Transform(r[#"alias"], each _) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"scope" = if r[#"scope"]? = null then null else CodeableConcept.ApplySchema(r[#"scope"]),
      #"topic" = if r[#"topic"]? = null then null else Contract_topic.ApplySchema(r[#"topic"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else Table.FromRecords(List.Transform(r[#"subType"], CodeableConcept.ApplySchema)),
      #"contentDefinition" = if r[#"contentDefinition"]? = null then null else Contract_contentDefinition.ApplySchema(r[#"contentDefinition"]),
      #"term" = if r[#"term"]? = null then null else Table.FromRecords(List.Transform(r[#"term"], Contract_term.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Reference.ApplySchema)),
      #"relevantHistory" = if r[#"relevantHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"relevantHistory"], Reference.ApplySchema)),
      #"signer" = if r[#"signer"]? = null then null else Table.FromRecords(List.Transform(r[#"signer"], Contract_signer.ApplySchema)),
      #"friendly" = if r[#"friendly"]? = null then null else Table.FromRecords(List.Transform(r[#"friendly"], Contract_friendly.ApplySchema)),
      #"legal" = if r[#"legal"]? = null then null else Table.FromRecords(List.Transform(r[#"legal"], Contract_legal.ApplySchema)),
      #"rule" = if r[#"rule"]? = null then null else Table.FromRecords(List.Transform(r[#"rule"], Contract_rule.ApplySchema)),
      #"legallyBinding" = if r[#"legallyBinding"]? = null then null else Contract_legallyBinding.ApplySchema(r[#"legallyBinding"])
    ],

  Contract_topic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_contentDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else CodeableConcept.ApplySchema(r[#"subType"]),
      #"publisher" = if r[#"publisher"]? = null then null else Reference.ApplySchema(r[#"publisher"]),
      #"publicationDate" = if r[#"publicationDate"]? <> null then DateTimeZone.From(r[#"publicationDate"]) else null,
      #"publicationStatus" = r[#"publicationStatus"]?,
      #"copyright" = r[#"copyright"]?
    ],

  Contract_term.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"applies" = if r[#"applies"]? = null then null else Period.ApplySchema(r[#"applies"]),
      #"topic" = if r[#"topic"]? = null then null else Contract_term_topic.ApplySchema(r[#"topic"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else CodeableConcept.ApplySchema(r[#"subType"]),
      #"text" = r[#"text"]?,
      #"securityLabel" = if r[#"securityLabel"]? = null then null else Table.FromRecords(List.Transform(r[#"securityLabel"], Contract_term_securityLabel.ApplySchema)),
      #"offer" = if r[#"offer"]? = null then null else Contract_term_offer.ApplySchema(r[#"offer"]),
      #"asset" = if r[#"asset"]? = null then null else Table.FromRecords(List.Transform(r[#"asset"], Contract_term_asset.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], Contract_term_action.ApplySchema)),
      #"group" = if r[#"group"]? = null then null else Table.FromRecords(List.Transform(r[#"group"], @Contract_term.ApplySchema))
    ],

  Contract_term_topic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_term_securityLabel.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"number" = if r[#"number"]? <> null then List.Transform(r[#"number"], each _) else null,
      #"classification" = if r[#"classification"]? = null then null else Coding.ApplySchema(r[#"classification"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], Coding.ApplySchema)),
      #"control" = if r[#"control"]? = null then null else Table.FromRecords(List.Transform(r[#"control"], Coding.ApplySchema))
    ],

  Contract_term_offer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"party" = if r[#"party"]? = null then null else Table.FromRecords(List.Transform(r[#"party"], Contract_term_offer_party.ApplySchema)),
      #"topic" = if r[#"topic"]? = null then null else Reference.ApplySchema(r[#"topic"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"decision" = if r[#"decision"]? = null then null else CodeableConcept.ApplySchema(r[#"decision"]),
      #"decisionMode" = if r[#"decisionMode"]? = null then null else Table.FromRecords(List.Transform(r[#"decisionMode"], CodeableConcept.ApplySchema)),
      #"answer" = if r[#"answer"]? = null then null else Table.FromRecords(List.Transform(r[#"answer"], Contract_term_offer_answer.ApplySchema)),
      #"text" = r[#"text"]?,
      #"linkId" = if r[#"linkId"]? <> null then List.Transform(r[#"linkId"], each _) else null,
      #"securityLabelNumber" = if r[#"securityLabelNumber"]? <> null then List.Transform(r[#"securityLabelNumber"], each _) else null
    ],

  Contract_term_offer_party.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Table.FromRecords(List.Transform(r[#"reference"], Reference.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"])
    ],

  Contract_term_offer_answer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Contract_term_offer_answer_value.ApplySchema(r[#"value"])
    ],

  Contract_term_offer_answer_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"string" = r[#"string"]?,
      #"uri" = r[#"uri"]?,
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_term_asset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"scope" = if r[#"scope"]? = null then null else CodeableConcept.ApplySchema(r[#"scope"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"typeReference" = if r[#"typeReference"]? = null then null else Table.FromRecords(List.Transform(r[#"typeReference"], Reference.ApplySchema)),
      #"subtype" = if r[#"subtype"]? = null then null else Table.FromRecords(List.Transform(r[#"subtype"], CodeableConcept.ApplySchema)),
      #"relationship" = if r[#"relationship"]? = null then null else Coding.ApplySchema(r[#"relationship"]),
      #"context" = if r[#"context"]? = null then null else Table.FromRecords(List.Transform(r[#"context"], Contract_term_asset_context.ApplySchema)),
      #"condition" = r[#"condition"]?,
      #"periodType" = if r[#"periodType"]? = null then null else Table.FromRecords(List.Transform(r[#"periodType"], CodeableConcept.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Table.FromRecords(List.Transform(r[#"period"], Period.ApplySchema)),
      #"usePeriod" = if r[#"usePeriod"]? = null then null else Table.FromRecords(List.Transform(r[#"usePeriod"], Period.ApplySchema)),
      #"text" = r[#"text"]?,
      #"linkId" = if r[#"linkId"]? <> null then List.Transform(r[#"linkId"], each _) else null,
      #"securityLabelNumber" = if r[#"securityLabelNumber"]? <> null then List.Transform(r[#"securityLabelNumber"], each _) else null,
      #"valuedItem" = if r[#"valuedItem"]? = null then null else Table.FromRecords(List.Transform(r[#"valuedItem"], Contract_term_asset_valuedItem.ApplySchema)),
      #"answer" = if r[#"answer"]? = null then null else Table.FromRecords(List.Transform(r[#"answer"], Contract_term_offer_answer.ApplySchema))
    ],

  Contract_term_asset_context.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"]),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"text" = r[#"text"]?
    ],

  Contract_term_asset_valuedItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"entity" = if r[#"entity"]? = null then null else Contract_term_asset_valuedItem_entity.ApplySchema(r[#"entity"]),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"effectiveTime" = if r[#"effectiveTime"]? <> null then DateTimeZone.From(r[#"effectiveTime"]) else null,
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"points" = r[#"points"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"payment" = r[#"payment"]?,
      #"paymentDate" = if r[#"paymentDate"]? <> null then DateTimeZone.From(r[#"paymentDate"]) else null,
      #"responsible" = if r[#"responsible"]? = null then null else Reference.ApplySchema(r[#"responsible"]),
      #"recipient" = if r[#"recipient"]? = null then null else Reference.ApplySchema(r[#"recipient"]),
      #"linkId" = if r[#"linkId"]? <> null then List.Transform(r[#"linkId"], each _) else null,
      #"securityLabelNumber" = if r[#"securityLabelNumber"]? <> null then List.Transform(r[#"securityLabelNumber"], each _) else null
    ],

  Contract_term_asset_valuedItem_entity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_term_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Contract_term_action_subject.ApplySchema)),
      #"intent" = if r[#"intent"]? = null then null else CodeableConcept.ApplySchema(r[#"intent"]),
      #"linkId" = if r[#"linkId"]? <> null then List.Transform(r[#"linkId"], each _) else null,
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"context" = if r[#"context"]? = null then null else Reference.ApplySchema(r[#"context"]),
      #"contextLinkId" = if r[#"contextLinkId"]? <> null then List.Transform(r[#"contextLinkId"], each _) else null,
      #"occurrence" = if r[#"occurrence"]? = null then null else Contract_term_action_occurrence.ApplySchema(r[#"occurrence"]),
      #"requester" = if r[#"requester"]? = null then null else Table.FromRecords(List.Transform(r[#"requester"], Reference.ApplySchema)),
      #"requesterLinkId" = if r[#"requesterLinkId"]? <> null then List.Transform(r[#"requesterLinkId"], each _) else null,
      #"performerType" = if r[#"performerType"]? = null then null else Table.FromRecords(List.Transform(r[#"performerType"], CodeableConcept.ApplySchema)),
      #"performerRole" = if r[#"performerRole"]? = null then null else CodeableConcept.ApplySchema(r[#"performerRole"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"performerLinkId" = if r[#"performerLinkId"]? <> null then List.Transform(r[#"performerLinkId"], each _) else null,
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"reason" = if r[#"reason"]? <> null then List.Transform(r[#"reason"], each _) else null,
      #"reasonLinkId" = if r[#"reasonLinkId"]? <> null then List.Transform(r[#"reasonLinkId"], each _) else null,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"securityLabelNumber" = if r[#"securityLabelNumber"]? <> null then List.Transform(r[#"securityLabelNumber"], each _) else null
    ],

  Contract_term_action_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Table.FromRecords(List.Transform(r[#"reference"], Reference.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"])
    ],

  Contract_term_action_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  Contract_signer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Coding.ApplySchema(r[#"type"]),
      #"party" = if r[#"party"]? = null then null else Reference.ApplySchema(r[#"party"]),
      #"signature" = if r[#"signature"]? = null then null else Table.FromRecords(List.Transform(r[#"signature"], Signature.ApplySchema))
    ],

  Contract_friendly.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Contract_friendly_content.ApplySchema(r[#"content"])
    ],

  Contract_friendly_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_legal.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Contract_legal_content.ApplySchema(r[#"content"])
    ],

  Contract_legal_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_rule.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Contract_rule_content.ApplySchema(r[#"content"])
    ],

  Contract_rule_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Contract_legallyBinding.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Coverage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"policyHolder" = if r[#"policyHolder"]? = null then null else Reference.ApplySchema(r[#"policyHolder"]),
      #"subscriber" = if r[#"subscriber"]? = null then null else Reference.ApplySchema(r[#"subscriber"]),
      #"subscriberId" = r[#"subscriberId"]?,
      #"beneficiary" = if r[#"beneficiary"]? = null then null else Reference.ApplySchema(r[#"beneficiary"]),
      #"dependent" = r[#"dependent"]?,
      #"relationship" = if r[#"relationship"]? = null then null else CodeableConcept.ApplySchema(r[#"relationship"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"payor" = if r[#"payor"]? = null then null else Table.FromRecords(List.Transform(r[#"payor"], Reference.ApplySchema)),
      #"class" = if r[#"class"]? = null then null else Table.FromRecords(List.Transform(r[#"class"], Coverage_class.ApplySchema)),
      #"order" = r[#"order"]?,
      #"network" = r[#"network"]?,
      #"costToBeneficiary" = if r[#"costToBeneficiary"]? = null then null else Table.FromRecords(List.Transform(r[#"costToBeneficiary"], Coverage_costToBeneficiary.ApplySchema)),
      #"subrogation" = r[#"subrogation"]?,
      #"contract" = if r[#"contract"]? = null then null else Table.FromRecords(List.Transform(r[#"contract"], Reference.ApplySchema))
    ],

  Coverage_class.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = r[#"value"]?,
      #"name" = r[#"name"]?
    ],

  Coverage_costToBeneficiary.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = if r[#"value"]? = null then null else Coverage_costToBeneficiary_value.ApplySchema(r[#"value"]),
      #"exception" = if r[#"exception"]? = null then null else Table.FromRecords(List.Transform(r[#"exception"], Coverage_costToBeneficiary_exception.ApplySchema))
    ],

  Coverage_costToBeneficiary_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"])
    ],

  Coverage_costToBeneficiary_exception.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  CoverageEligibilityRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"purpose" = if r[#"purpose"]? <> null then List.Transform(r[#"purpose"], each _) else null,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"serviced" = if r[#"serviced"]? = null then null else CoverageEligibilityRequest_serviced.ApplySchema(r[#"serviced"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"enterer" = if r[#"enterer"]? = null then null else Reference.ApplySchema(r[#"enterer"]),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"facility" = if r[#"facility"]? = null then null else Reference.ApplySchema(r[#"facility"]),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], CoverageEligibilityRequest_supportingInfo.ApplySchema)),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], CoverageEligibilityRequest_insurance.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], CoverageEligibilityRequest_item.ApplySchema))
    ],

  CoverageEligibilityRequest_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  CoverageEligibilityRequest_supportingInfo.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"information" = if r[#"information"]? = null then null else Reference.ApplySchema(r[#"information"]),
      #"appliesToAll" = r[#"appliesToAll"]?
    ],

  CoverageEligibilityRequest_insurance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"focal" = r[#"focal"]?,
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"businessArrangement" = r[#"businessArrangement"]?
    ],

  CoverageEligibilityRequest_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"supportingInfoSequence" = if r[#"supportingInfoSequence"]? <> null then List.Transform(r[#"supportingInfoSequence"], each _) else null,
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"facility" = if r[#"facility"]? = null then null else Reference.ApplySchema(r[#"facility"]),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Table.FromRecords(List.Transform(r[#"diagnosis"], CoverageEligibilityRequest_item_diagnosis.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], Reference.ApplySchema))
    ],

  CoverageEligibilityRequest_item_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else CoverageEligibilityRequest_item_diagnosis_diagnosis.ApplySchema(r[#"diagnosis"])
    ],

  CoverageEligibilityRequest_item_diagnosis_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  CoverageEligibilityResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"purpose" = if r[#"purpose"]? <> null then List.Transform(r[#"purpose"], each _) else null,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"serviced" = if r[#"serviced"]? = null then null else CoverageEligibilityResponse_serviced.ApplySchema(r[#"serviced"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"requestor" = if r[#"requestor"]? = null then null else Reference.ApplySchema(r[#"requestor"]),
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"outcome" = r[#"outcome"]?,
      #"disposition" = r[#"disposition"]?,
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], CoverageEligibilityResponse_insurance.ApplySchema)),
      #"preAuthRef" = r[#"preAuthRef"]?,
      #"form" = if r[#"form"]? = null then null else CodeableConcept.ApplySchema(r[#"form"]),
      #"error" = if r[#"error"]? = null then null else Table.FromRecords(List.Transform(r[#"error"], CoverageEligibilityResponse_error.ApplySchema))
    ],

  CoverageEligibilityResponse_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  CoverageEligibilityResponse_insurance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"inforce" = r[#"inforce"]?,
      #"benefitPeriod" = if r[#"benefitPeriod"]? = null then null else Period.ApplySchema(r[#"benefitPeriod"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], CoverageEligibilityResponse_insurance_item.ApplySchema))
    ],

  CoverageEligibilityResponse_insurance_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"excluded" = r[#"excluded"]?,
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"network" = if r[#"network"]? = null then null else CodeableConcept.ApplySchema(r[#"network"]),
      #"unit" = if r[#"unit"]? = null then null else CodeableConcept.ApplySchema(r[#"unit"]),
      #"term" = if r[#"term"]? = null then null else CodeableConcept.ApplySchema(r[#"term"]),
      #"benefit" = if r[#"benefit"]? = null then null else Table.FromRecords(List.Transform(r[#"benefit"], CoverageEligibilityResponse_insurance_item_benefit.ApplySchema)),
      #"authorizationRequired" = r[#"authorizationRequired"]?,
      #"authorizationSupporting" = if r[#"authorizationSupporting"]? = null then null else Table.FromRecords(List.Transform(r[#"authorizationSupporting"], CodeableConcept.ApplySchema)),
      #"authorizationUrl" = r[#"authorizationUrl"]?
    ],

  CoverageEligibilityResponse_insurance_item_benefit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"allowed" = if r[#"allowed"]? = null then null else CoverageEligibilityResponse_insurance_item_benefit_allowed.ApplySchema(r[#"allowed"]),
      #"used" = if r[#"used"]? = null then null else CoverageEligibilityResponse_insurance_item_benefit_used.ApplySchema(r[#"used"])
    ],

  CoverageEligibilityResponse_insurance_item_benefit_allowed.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"string" = r[#"string"]?,
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"])
    ],

  CoverageEligibilityResponse_insurance_item_benefit_used.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"string" = r[#"string"]?,
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"])
    ],

  CoverageEligibilityResponse_error.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"])
    ],

  DetectedIssue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"severity" = r[#"severity"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"identified" = if r[#"identified"]? = null then null else DetectedIssue_identified.ApplySchema(r[#"identified"]),
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"implicated" = if r[#"implicated"]? = null then null else Table.FromRecords(List.Transform(r[#"implicated"], Reference.ApplySchema)),
      #"evidence" = if r[#"evidence"]? = null then null else Table.FromRecords(List.Transform(r[#"evidence"], DetectedIssue_evidence.ApplySchema)),
      #"detail" = r[#"detail"]?,
      #"reference" = r[#"reference"]?,
      #"mitigation" = if r[#"mitigation"]? = null then null else Table.FromRecords(List.Transform(r[#"mitigation"], DetectedIssue_mitigation.ApplySchema))
    ],

  DetectedIssue_identified.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  DetectedIssue_evidence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], Reference.ApplySchema))
    ],

  DetectedIssue_mitigation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else CodeableConcept.ApplySchema(r[#"action"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"])
    ],

  Device.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"definition" = if r[#"definition"]? = null then null else Reference.ApplySchema(r[#"definition"]),
      #"udiCarrier" = if r[#"udiCarrier"]? = null then null else Table.FromRecords(List.Transform(r[#"udiCarrier"], Device_udiCarrier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else Table.FromRecords(List.Transform(r[#"statusReason"], CodeableConcept.ApplySchema)),
      #"distinctIdentifier" = r[#"distinctIdentifier"]?,
      #"manufacturer" = r[#"manufacturer"]?,
      #"manufactureDate" = if r[#"manufactureDate"]? <> null then DateTimeZone.From(r[#"manufactureDate"]) else null,
      #"expirationDate" = if r[#"expirationDate"]? <> null then DateTimeZone.From(r[#"expirationDate"]) else null,
      #"lotNumber" = r[#"lotNumber"]?,
      #"serialNumber" = r[#"serialNumber"]?,
      #"deviceName" = if r[#"deviceName"]? = null then null else Table.FromRecords(List.Transform(r[#"deviceName"], Device_deviceName.ApplySchema)),
      #"modelNumber" = r[#"modelNumber"]?,
      #"partNumber" = r[#"partNumber"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"specialization" = if r[#"specialization"]? = null then null else Table.FromRecords(List.Transform(r[#"specialization"], Device_specialization.ApplySchema)),
      #"version" = if r[#"version"]? = null then null else Table.FromRecords(List.Transform(r[#"version"], Device_version.ApplySchema)),
      #"property" = if r[#"property"]? = null then null else Table.FromRecords(List.Transform(r[#"property"], Device_property.ApplySchema)),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"owner" = if r[#"owner"]? = null then null else Reference.ApplySchema(r[#"owner"]),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactPoint.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"url" = r[#"url"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"safety" = if r[#"safety"]? = null then null else Table.FromRecords(List.Transform(r[#"safety"], CodeableConcept.ApplySchema)),
      #"parent" = if r[#"parent"]? = null then null else Reference.ApplySchema(r[#"parent"])
    ],

  Device_udiCarrier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"deviceIdentifier" = r[#"deviceIdentifier"]?,
      #"issuer" = r[#"issuer"]?,
      #"jurisdiction" = r[#"jurisdiction"]?,
      #"carrierAIDC" = r[#"carrierAIDC"]?,
      #"carrierHRF" = r[#"carrierHRF"]?,
      #"entryType" = r[#"entryType"]?
    ],

  Device_deviceName.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = r[#"type"]?
    ],

  Device_specialization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"systemType" = if r[#"systemType"]? = null then null else CodeableConcept.ApplySchema(r[#"systemType"]),
      #"version" = r[#"version"]?
    ],

  Device_version.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"component" = if r[#"component"]? = null then null else Identifier.ApplySchema(r[#"component"]),
      #"value" = r[#"value"]?
    ],

  Device_property.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"valueQuantity" = if r[#"valueQuantity"]? = null then null else Table.FromRecords(List.Transform(r[#"valueQuantity"], Quantity.ApplySchema)),
      #"valueCode" = if r[#"valueCode"]? = null then null else Table.FromRecords(List.Transform(r[#"valueCode"], CodeableConcept.ApplySchema))
    ],

  DeviceDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"udiDeviceIdentifier" = if r[#"udiDeviceIdentifier"]? = null then null else Table.FromRecords(List.Transform(r[#"udiDeviceIdentifier"], DeviceDefinition_udiDeviceIdentifier.ApplySchema)),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else DeviceDefinition_manufacturer.ApplySchema(r[#"manufacturer"]),
      #"deviceName" = if r[#"deviceName"]? = null then null else Table.FromRecords(List.Transform(r[#"deviceName"], DeviceDefinition_deviceName.ApplySchema)),
      #"modelNumber" = r[#"modelNumber"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"specialization" = if r[#"specialization"]? = null then null else Table.FromRecords(List.Transform(r[#"specialization"], DeviceDefinition_specialization.ApplySchema)),
      #"version" = if r[#"version"]? <> null then List.Transform(r[#"version"], each _) else null,
      #"safety" = if r[#"safety"]? = null then null else Table.FromRecords(List.Transform(r[#"safety"], CodeableConcept.ApplySchema)),
      #"shelfLifeStorage" = if r[#"shelfLifeStorage"]? = null then null else Table.FromRecords(List.Transform(r[#"shelfLifeStorage"], ProductShelfLife.ApplySchema)),
      #"physicalCharacteristics" = if r[#"physicalCharacteristics"]? = null then null else ProdCharacteristic.ApplySchema(r[#"physicalCharacteristics"]),
      #"languageCode" = if r[#"languageCode"]? = null then null else Table.FromRecords(List.Transform(r[#"languageCode"], CodeableConcept.ApplySchema)),
      #"capability" = if r[#"capability"]? = null then null else Table.FromRecords(List.Transform(r[#"capability"], DeviceDefinition_capability.ApplySchema)),
      #"property" = if r[#"property"]? = null then null else Table.FromRecords(List.Transform(r[#"property"], DeviceDefinition_property.ApplySchema)),
      #"owner" = if r[#"owner"]? = null then null else Reference.ApplySchema(r[#"owner"]),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactPoint.ApplySchema)),
      #"url" = r[#"url"]?,
      #"onlineInformation" = r[#"onlineInformation"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"parentDevice" = if r[#"parentDevice"]? = null then null else Reference.ApplySchema(r[#"parentDevice"]),
      #"material" = if r[#"material"]? = null then null else Table.FromRecords(List.Transform(r[#"material"], DeviceDefinition_material.ApplySchema))
    ],

  DeviceDefinition_udiDeviceIdentifier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"deviceIdentifier" = r[#"deviceIdentifier"]?,
      #"issuer" = r[#"issuer"]?,
      #"jurisdiction" = r[#"jurisdiction"]?
    ],

  DeviceDefinition_manufacturer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"string" = r[#"string"]?,
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  DeviceDefinition_deviceName.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = r[#"type"]?
    ],

  DeviceDefinition_specialization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"systemType" = r[#"systemType"]?,
      #"version" = r[#"version"]?
    ],

  DeviceDefinition_capability.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"description" = if r[#"description"]? = null then null else Table.FromRecords(List.Transform(r[#"description"], CodeableConcept.ApplySchema))
    ],

  DeviceDefinition_property.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"valueQuantity" = if r[#"valueQuantity"]? = null then null else Table.FromRecords(List.Transform(r[#"valueQuantity"], Quantity.ApplySchema)),
      #"valueCode" = if r[#"valueCode"]? = null then null else Table.FromRecords(List.Transform(r[#"valueCode"], CodeableConcept.ApplySchema))
    ],

  DeviceDefinition_material.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"substance" = if r[#"substance"]? = null then null else CodeableConcept.ApplySchema(r[#"substance"]),
      #"alternate" = r[#"alternate"]?,
      #"allergenicIndicator" = r[#"allergenicIndicator"]?
    ],

  DeviceMetric.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"unit" = if r[#"unit"]? = null then null else CodeableConcept.ApplySchema(r[#"unit"]),
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"]),
      #"parent" = if r[#"parent"]? = null then null else Reference.ApplySchema(r[#"parent"]),
      #"operationalStatus" = r[#"operationalStatus"]?,
      #"color" = r[#"color"]?,
      #"category" = r[#"category"]?,
      #"measurementPeriod" = if r[#"measurementPeriod"]? = null then null else Timing.ApplySchema(r[#"measurementPeriod"]),
      #"calibration" = if r[#"calibration"]? = null then null else Table.FromRecords(List.Transform(r[#"calibration"], DeviceMetric_calibration.ApplySchema))
    ],

  DeviceMetric_calibration.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"state" = r[#"state"]?,
      #"time" = if r[#"time"]? <> null then DateTimeZone.From(r[#"time"]) else null
    ],

  DeviceRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"priorRequest" = if r[#"priorRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"priorRequest"], Reference.ApplySchema)),
      #"groupIdentifier" = if r[#"groupIdentifier"]? = null then null else Identifier.ApplySchema(r[#"groupIdentifier"]),
      #"status" = r[#"status"]?,
      #"intent" = r[#"intent"]?,
      #"priority" = r[#"priority"]?,
      #"code" = if r[#"code"]? = null then null else DeviceRequest_code.ApplySchema(r[#"code"]),
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], DeviceRequest_parameter.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else DeviceRequest_occurrence.ApplySchema(r[#"occurrence"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"performerType" = if r[#"performerType"]? = null then null else CodeableConcept.ApplySchema(r[#"performerType"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], Reference.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"relevantHistory" = if r[#"relevantHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"relevantHistory"], Reference.ApplySchema))
    ],

  DeviceRequest_code.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  DeviceRequest_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else DeviceRequest_parameter_value.ApplySchema(r[#"value"])
    ],

  DeviceRequest_parameter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"boolean" = r[#"boolean"]?
    ],

  DeviceRequest_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  DeviceUseStatement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"derivedFrom" = if r[#"derivedFrom"]? = null then null else Table.FromRecords(List.Transform(r[#"derivedFrom"], Reference.ApplySchema)),
      #"timing" = if r[#"timing"]? = null then null else DeviceUseStatement_timing.ApplySchema(r[#"timing"]),
      #"recordedOn" = if r[#"recordedOn"]? <> null then DateTimeZone.From(r[#"recordedOn"]) else null,
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"]),
      #"device" = if r[#"device"]? = null then null else Reference.ApplySchema(r[#"device"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  DeviceUseStatement_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  DiagnosticReport.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"effective" = if r[#"effective"]? = null then null else DiagnosticReport_effective.ApplySchema(r[#"effective"]),
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Reference.ApplySchema)),
      #"resultsInterpreter" = if r[#"resultsInterpreter"]? = null then null else Table.FromRecords(List.Transform(r[#"resultsInterpreter"], Reference.ApplySchema)),
      #"specimen" = if r[#"specimen"]? = null then null else Table.FromRecords(List.Transform(r[#"specimen"], Reference.ApplySchema)),
      #"result" = if r[#"result"]? = null then null else Table.FromRecords(List.Transform(r[#"result"], Reference.ApplySchema)),
      #"imagingStudy" = if r[#"imagingStudy"]? = null then null else Table.FromRecords(List.Transform(r[#"imagingStudy"], Reference.ApplySchema)),
      #"media" = if r[#"media"]? = null then null else Table.FromRecords(List.Transform(r[#"media"], DiagnosticReport_media.ApplySchema)),
      #"conclusion" = r[#"conclusion"]?,
      #"conclusionCode" = if r[#"conclusionCode"]? = null then null else Table.FromRecords(List.Transform(r[#"conclusionCode"], CodeableConcept.ApplySchema)),
      #"presentedForm" = if r[#"presentedForm"]? = null then null else Table.FromRecords(List.Transform(r[#"presentedForm"], Attachment.ApplySchema))
    ],

  DiagnosticReport_effective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  DiagnosticReport_media.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"comment" = r[#"comment"]?,
      #"link" = if r[#"link"]? = null then null else Reference.ApplySchema(r[#"link"])
    ],

  DocumentManifest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"masterIdentifier" = if r[#"masterIdentifier"]? = null then null else Identifier.ApplySchema(r[#"masterIdentifier"]),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], Reference.ApplySchema)),
      #"recipient" = if r[#"recipient"]? = null then null else Table.FromRecords(List.Transform(r[#"recipient"], Reference.ApplySchema)),
      #"source" = r[#"source"]?,
      #"description" = r[#"description"]?,
      #"content" = if r[#"content"]? = null then null else Table.FromRecords(List.Transform(r[#"content"], Reference.ApplySchema)),
      #"related" = if r[#"related"]? = null then null else Table.FromRecords(List.Transform(r[#"related"], DocumentManifest_related.ApplySchema))
    ],

  DocumentManifest_related.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"ref" = if r[#"ref"]? = null then null else Reference.ApplySchema(r[#"ref"])
    ],

  DocumentReference.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"masterIdentifier" = if r[#"masterIdentifier"]? = null then null else Identifier.ApplySchema(r[#"masterIdentifier"]),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"docStatus" = r[#"docStatus"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], Reference.ApplySchema)),
      #"authenticator" = if r[#"authenticator"]? = null then null else Reference.ApplySchema(r[#"authenticator"]),
      #"custodian" = if r[#"custodian"]? = null then null else Reference.ApplySchema(r[#"custodian"]),
      #"relatesTo" = if r[#"relatesTo"]? = null then null else Table.FromRecords(List.Transform(r[#"relatesTo"], DocumentReference_relatesTo.ApplySchema)),
      #"description" = r[#"description"]?,
      #"securityLabel" = if r[#"securityLabel"]? = null then null else Table.FromRecords(List.Transform(r[#"securityLabel"], CodeableConcept.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Table.FromRecords(List.Transform(r[#"content"], DocumentReference_content.ApplySchema)),
      #"context" = if r[#"context"]? = null then null else DocumentReference_context.ApplySchema(r[#"context"])
    ],

  DocumentReference_relatesTo.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"target" = if r[#"target"]? = null then null else Reference.ApplySchema(r[#"target"])
    ],

  DocumentReference_content.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"attachment" = if r[#"attachment"]? = null then null else Attachment.ApplySchema(r[#"attachment"]),
      #"format" = if r[#"format"]? = null then null else Coding.ApplySchema(r[#"format"])
    ],

  DocumentReference_context.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Table.FromRecords(List.Transform(r[#"encounter"], Reference.ApplySchema)),
      #"event" = if r[#"event"]? = null then null else Table.FromRecords(List.Transform(r[#"event"], CodeableConcept.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"facilityType" = if r[#"facilityType"]? = null then null else CodeableConcept.ApplySchema(r[#"facilityType"]),
      #"practiceSetting" = if r[#"practiceSetting"]? = null then null else CodeableConcept.ApplySchema(r[#"practiceSetting"]),
      #"sourcePatientInfo" = if r[#"sourcePatientInfo"]? = null then null else Reference.ApplySchema(r[#"sourcePatientInfo"]),
      #"related" = if r[#"related"]? = null then null else Table.FromRecords(List.Transform(r[#"related"], Reference.ApplySchema))
    ],

  DomainResource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema))
    ],

  EffectEvidenceSynthesis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"synthesisType" = if r[#"synthesisType"]? = null then null else CodeableConcept.ApplySchema(r[#"synthesisType"]),
      #"studyType" = if r[#"studyType"]? = null then null else CodeableConcept.ApplySchema(r[#"studyType"]),
      #"population" = if r[#"population"]? = null then null else Reference.ApplySchema(r[#"population"]),
      #"exposure" = if r[#"exposure"]? = null then null else Reference.ApplySchema(r[#"exposure"]),
      #"exposureAlternative" = if r[#"exposureAlternative"]? = null then null else Reference.ApplySchema(r[#"exposureAlternative"]),
      #"outcome" = if r[#"outcome"]? = null then null else Reference.ApplySchema(r[#"outcome"]),
      #"sampleSize" = if r[#"sampleSize"]? = null then null else EffectEvidenceSynthesis_sampleSize.ApplySchema(r[#"sampleSize"]),
      #"resultsByExposure" = if r[#"resultsByExposure"]? = null then null else Table.FromRecords(List.Transform(r[#"resultsByExposure"], EffectEvidenceSynthesis_resultsByExposure.ApplySchema)),
      #"effectEstimate" = if r[#"effectEstimate"]? = null then null else Table.FromRecords(List.Transform(r[#"effectEstimate"], EffectEvidenceSynthesis_effectEstimate.ApplySchema)),
      #"certainty" = if r[#"certainty"]? = null then null else Table.FromRecords(List.Transform(r[#"certainty"], EffectEvidenceSynthesis_certainty.ApplySchema))
    ],

  EffectEvidenceSynthesis_sampleSize.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"numberOfStudies" = r[#"numberOfStudies"]?,
      #"numberOfParticipants" = r[#"numberOfParticipants"]?
    ],

  EffectEvidenceSynthesis_resultsByExposure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"exposureState" = r[#"exposureState"]?,
      #"variantState" = if r[#"variantState"]? = null then null else CodeableConcept.ApplySchema(r[#"variantState"]),
      #"riskEvidenceSynthesis" = if r[#"riskEvidenceSynthesis"]? = null then null else Reference.ApplySchema(r[#"riskEvidenceSynthesis"])
    ],

  EffectEvidenceSynthesis_effectEstimate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"variantState" = if r[#"variantState"]? = null then null else CodeableConcept.ApplySchema(r[#"variantState"]),
      #"value" = r[#"value"]?,
      #"unitOfMeasure" = if r[#"unitOfMeasure"]? = null then null else CodeableConcept.ApplySchema(r[#"unitOfMeasure"]),
      #"precisionEstimate" = if r[#"precisionEstimate"]? = null then null else Table.FromRecords(List.Transform(r[#"precisionEstimate"], EffectEvidenceSynthesis_effectEstimate_precisionEstimate.ApplySchema))
    ],

  EffectEvidenceSynthesis_effectEstimate_precisionEstimate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"level" = r[#"level"]?,
      #"from" = r[#"from"]?,
      #"to" = r[#"to"]?
    ],

  EffectEvidenceSynthesis_certainty.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"rating" = if r[#"rating"]? = null then null else Table.FromRecords(List.Transform(r[#"rating"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"certaintySubcomponent" = if r[#"certaintySubcomponent"]? = null then null else Table.FromRecords(List.Transform(r[#"certaintySubcomponent"], EffectEvidenceSynthesis_certainty_certaintySubcomponent.ApplySchema))
    ],

  EffectEvidenceSynthesis_certainty_certaintySubcomponent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"rating" = if r[#"rating"]? = null then null else Table.FromRecords(List.Transform(r[#"rating"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Encounter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusHistory" = if r[#"statusHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"statusHistory"], Encounter_statusHistory.ApplySchema)),
      #"class" = if r[#"class"]? = null then null else Coding.ApplySchema(r[#"class"]),
      #"classHistory" = if r[#"classHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"classHistory"], Encounter_classHistory.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"serviceType" = if r[#"serviceType"]? = null then null else CodeableConcept.ApplySchema(r[#"serviceType"]),
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"episodeOfCare" = if r[#"episodeOfCare"]? = null then null else Table.FromRecords(List.Transform(r[#"episodeOfCare"], Reference.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], Encounter_participant.ApplySchema)),
      #"appointment" = if r[#"appointment"]? = null then null else Table.FromRecords(List.Transform(r[#"appointment"], Reference.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"length" = if r[#"length"]? = null then null else Duration.ApplySchema(r[#"length"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Table.FromRecords(List.Transform(r[#"diagnosis"], Encounter_diagnosis.ApplySchema)),
      #"account" = if r[#"account"]? = null then null else Table.FromRecords(List.Transform(r[#"account"], Reference.ApplySchema)),
      #"hospitalization" = if r[#"hospitalization"]? = null then null else Encounter_hospitalization.ApplySchema(r[#"hospitalization"]),
      #"location" = if r[#"location"]? = null then null else Table.FromRecords(List.Transform(r[#"location"], Encounter_location.ApplySchema)),
      #"serviceProvider" = if r[#"serviceProvider"]? = null then null else Reference.ApplySchema(r[#"serviceProvider"]),
      #"partOf" = if r[#"partOf"]? = null then null else Reference.ApplySchema(r[#"partOf"])
    ],

  Encounter_statusHistory.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"status" = r[#"status"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Encounter_classHistory.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"class" = if r[#"class"]? = null then null else Coding.ApplySchema(r[#"class"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Encounter_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"individual" = if r[#"individual"]? = null then null else Reference.ApplySchema(r[#"individual"])
    ],

  Encounter_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Reference.ApplySchema(r[#"condition"]),
      #"use" = if r[#"use"]? = null then null else CodeableConcept.ApplySchema(r[#"use"]),
      #"rank" = r[#"rank"]?
    ],

  Encounter_hospitalization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"preAdmissionIdentifier" = if r[#"preAdmissionIdentifier"]? = null then null else Identifier.ApplySchema(r[#"preAdmissionIdentifier"]),
      #"origin" = if r[#"origin"]? = null then null else Reference.ApplySchema(r[#"origin"]),
      #"admitSource" = if r[#"admitSource"]? = null then null else CodeableConcept.ApplySchema(r[#"admitSource"]),
      #"reAdmission" = if r[#"reAdmission"]? = null then null else CodeableConcept.ApplySchema(r[#"reAdmission"]),
      #"dietPreference" = if r[#"dietPreference"]? = null then null else Table.FromRecords(List.Transform(r[#"dietPreference"], CodeableConcept.ApplySchema)),
      #"specialCourtesy" = if r[#"specialCourtesy"]? = null then null else Table.FromRecords(List.Transform(r[#"specialCourtesy"], CodeableConcept.ApplySchema)),
      #"specialArrangement" = if r[#"specialArrangement"]? = null then null else Table.FromRecords(List.Transform(r[#"specialArrangement"], CodeableConcept.ApplySchema)),
      #"destination" = if r[#"destination"]? = null then null else Reference.ApplySchema(r[#"destination"]),
      #"dischargeDisposition" = if r[#"dischargeDisposition"]? = null then null else CodeableConcept.ApplySchema(r[#"dischargeDisposition"])
    ],

  Encounter_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"status" = r[#"status"]?,
      #"physicalType" = if r[#"physicalType"]? = null then null else CodeableConcept.ApplySchema(r[#"physicalType"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Endpoint.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"connectionType" = if r[#"connectionType"]? = null then null else Coding.ApplySchema(r[#"connectionType"]),
      #"name" = r[#"name"]?,
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Reference.ApplySchema(r[#"managingOrganization"]),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactPoint.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"payloadType" = if r[#"payloadType"]? = null then null else Table.FromRecords(List.Transform(r[#"payloadType"], CodeableConcept.ApplySchema)),
      #"payloadMimeType" = if r[#"payloadMimeType"]? <> null then List.Transform(r[#"payloadMimeType"], each _) else null,
      #"address" = r[#"address"]?,
      #"header" = if r[#"header"]? <> null then List.Transform(r[#"header"], each _) else null
    ],

  EnrollmentRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"candidate" = if r[#"candidate"]? = null then null else Reference.ApplySchema(r[#"candidate"]),
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"])
    ],

  EnrollmentResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"outcome" = r[#"outcome"]?,
      #"disposition" = r[#"disposition"]?,
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"organization" = if r[#"organization"]? = null then null else Reference.ApplySchema(r[#"organization"]),
      #"requestProvider" = if r[#"requestProvider"]? = null then null else Reference.ApplySchema(r[#"requestProvider"])
    ],

  EpisodeOfCare.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusHistory" = if r[#"statusHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"statusHistory"], EpisodeOfCare_statusHistory.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Table.FromRecords(List.Transform(r[#"diagnosis"], EpisodeOfCare_diagnosis.ApplySchema)),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Reference.ApplySchema(r[#"managingOrganization"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"referralRequest" = if r[#"referralRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"referralRequest"], Reference.ApplySchema)),
      #"careManager" = if r[#"careManager"]? = null then null else Reference.ApplySchema(r[#"careManager"]),
      #"team" = if r[#"team"]? = null then null else Table.FromRecords(List.Transform(r[#"team"], Reference.ApplySchema)),
      #"account" = if r[#"account"]? = null then null else Table.FromRecords(List.Transform(r[#"account"], Reference.ApplySchema))
    ],

  EpisodeOfCare_statusHistory.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"status" = r[#"status"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  EpisodeOfCare_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Reference.ApplySchema(r[#"condition"]),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"rank" = r[#"rank"]?
    ],

  EventDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else EventDefinition_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"trigger" = if r[#"trigger"]? = null then null else Table.FromRecords(List.Transform(r[#"trigger"], TriggerDefinition.ApplySchema))
    ],

  EventDefinition_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Evidence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"shortTitle" = r[#"shortTitle"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"exposureBackground" = if r[#"exposureBackground"]? = null then null else Reference.ApplySchema(r[#"exposureBackground"]),
      #"exposureVariant" = if r[#"exposureVariant"]? = null then null else Table.FromRecords(List.Transform(r[#"exposureVariant"], Reference.ApplySchema)),
      #"outcome" = if r[#"outcome"]? = null then null else Table.FromRecords(List.Transform(r[#"outcome"], Reference.ApplySchema))
    ],

  EvidenceVariable.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"shortTitle" = r[#"shortTitle"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"type" = r[#"type"]?,
      #"characteristic" = if r[#"characteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"characteristic"], EvidenceVariable_characteristic.ApplySchema))
    ],

  EvidenceVariable_characteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"definition" = if r[#"definition"]? = null then null else EvidenceVariable_characteristic_definition.ApplySchema(r[#"definition"]),
      #"usageContext" = if r[#"usageContext"]? = null then null else Table.FromRecords(List.Transform(r[#"usageContext"], UsageContext.ApplySchema)),
      #"exclude" = r[#"exclude"]?,
      #"participantEffective" = if r[#"participantEffective"]? = null then null else EvidenceVariable_characteristic_participantEffective.ApplySchema(r[#"participantEffective"]),
      #"timeFromStart" = if r[#"timeFromStart"]? = null then null else Duration.ApplySchema(r[#"timeFromStart"]),
      #"groupMeasure" = r[#"groupMeasure"]?
    ],

  EvidenceVariable_characteristic_definition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"canonical" = r[#"canonical"]?,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"])
    ],

  EvidenceVariable_characteristic_participantEffective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ExampleScenario.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"purpose" = r[#"purpose"]?,
      #"actor" = if r[#"actor"]? = null then null else Table.FromRecords(List.Transform(r[#"actor"], ExampleScenario_actor.ApplySchema)),
      #"instance" = if r[#"instance"]? = null then null else Table.FromRecords(List.Transform(r[#"instance"], ExampleScenario_instance.ApplySchema)),
      #"process" = if r[#"process"]? = null then null else Table.FromRecords(List.Transform(r[#"process"], ExampleScenario_process.ApplySchema)),
      #"workflow" = if r[#"workflow"]? <> null then List.Transform(r[#"workflow"], each _) else null
    ],

  ExampleScenario_actor.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"actorId" = r[#"actorId"]?,
      #"type" = r[#"type"]?,
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?
    ],

  ExampleScenario_instance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"resourceId" = r[#"resourceId"]?,
      #"resourceType" = r[#"resourceType"]?,
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"version" = if r[#"version"]? = null then null else Table.FromRecords(List.Transform(r[#"version"], ExampleScenario_instance_version.ApplySchema)),
      #"containedInstance" = if r[#"containedInstance"]? = null then null else Table.FromRecords(List.Transform(r[#"containedInstance"], ExampleScenario_instance_containedInstance.ApplySchema))
    ],

  ExampleScenario_instance_version.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"versionId" = r[#"versionId"]?,
      #"description" = r[#"description"]?
    ],

  ExampleScenario_instance_containedInstance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"resourceId" = r[#"resourceId"]?,
      #"versionId" = r[#"versionId"]?
    ],

  ExampleScenario_process.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"title" = r[#"title"]?,
      #"description" = r[#"description"]?,
      #"preConditions" = r[#"preConditions"]?,
      #"postConditions" = r[#"postConditions"]?,
      #"step" = if r[#"step"]? = null then null else Table.FromRecords(List.Transform(r[#"step"], ExampleScenario_process_step.ApplySchema))
    ],

  ExampleScenario_process_step.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"pause" = r[#"pause"]?,
      #"operation" = if r[#"operation"]? = null then null else ExampleScenario_process_step_operation.ApplySchema(r[#"operation"]),
      #"alternative" = if r[#"alternative"]? = null then null else Table.FromRecords(List.Transform(r[#"alternative"], ExampleScenario_process_step_alternative.ApplySchema)),
      #"process" = if r[#"process"]? = null then null else Table.FromRecords(List.Transform(r[#"process"], ExampleScenario_process.ApplySchema))
    ],

  ExampleScenario_process_step_operation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"number" = r[#"number"]?,
      #"type" = r[#"type"]?,
      #"name" = r[#"name"]?,
      #"initiator" = r[#"initiator"]?,
      #"receiver" = r[#"receiver"]?,
      #"description" = r[#"description"]?,
      #"initiatorActive" = r[#"initiatorActive"]?,
      #"receiverActive" = r[#"receiverActive"]?,
      #"request" = if r[#"request"]? = null then null else ExampleScenario_instance_containedInstance.ApplySchema(r[#"request"]),
      #"response" = if r[#"response"]? = null then null else ExampleScenario_instance_containedInstance.ApplySchema(r[#"response"])
    ],

  ExampleScenario_process_step_alternative.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"title" = r[#"title"]?,
      #"description" = r[#"description"]?,
      #"step" = if r[#"step"]? = null then null else Table.FromRecords(List.Transform(r[#"step"], ExampleScenario_process_step.ApplySchema))
    ],

  ExplanationOfBenefit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subType" = if r[#"subType"]? = null then null else CodeableConcept.ApplySchema(r[#"subType"]),
      #"use" = r[#"use"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"billablePeriod" = if r[#"billablePeriod"]? = null then null else Period.ApplySchema(r[#"billablePeriod"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"enterer" = if r[#"enterer"]? = null then null else Reference.ApplySchema(r[#"enterer"]),
      #"insurer" = if r[#"insurer"]? = null then null else Reference.ApplySchema(r[#"insurer"]),
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"fundsReserveRequested" = if r[#"fundsReserveRequested"]? = null then null else CodeableConcept.ApplySchema(r[#"fundsReserveRequested"]),
      #"fundsReserve" = if r[#"fundsReserve"]? = null then null else CodeableConcept.ApplySchema(r[#"fundsReserve"]),
      #"related" = if r[#"related"]? = null then null else Table.FromRecords(List.Transform(r[#"related"], ExplanationOfBenefit_related.ApplySchema)),
      #"prescription" = if r[#"prescription"]? = null then null else Reference.ApplySchema(r[#"prescription"]),
      #"originalPrescription" = if r[#"originalPrescription"]? = null then null else Reference.ApplySchema(r[#"originalPrescription"]),
      #"payee" = if r[#"payee"]? = null then null else ExplanationOfBenefit_payee.ApplySchema(r[#"payee"]),
      #"referral" = if r[#"referral"]? = null then null else Reference.ApplySchema(r[#"referral"]),
      #"facility" = if r[#"facility"]? = null then null else Reference.ApplySchema(r[#"facility"]),
      #"claim" = if r[#"claim"]? = null then null else Reference.ApplySchema(r[#"claim"]),
      #"claimResponse" = if r[#"claimResponse"]? = null then null else Reference.ApplySchema(r[#"claimResponse"]),
      #"outcome" = r[#"outcome"]?,
      #"disposition" = r[#"disposition"]?,
      #"preAuthRef" = if r[#"preAuthRef"]? <> null then List.Transform(r[#"preAuthRef"], each _) else null,
      #"preAuthRefPeriod" = if r[#"preAuthRefPeriod"]? = null then null else Table.FromRecords(List.Transform(r[#"preAuthRefPeriod"], Period.ApplySchema)),
      #"careTeam" = if r[#"careTeam"]? = null then null else Table.FromRecords(List.Transform(r[#"careTeam"], ExplanationOfBenefit_careTeam.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], ExplanationOfBenefit_supportingInfo.ApplySchema)),
      #"diagnosis" = if r[#"diagnosis"]? = null then null else Table.FromRecords(List.Transform(r[#"diagnosis"], ExplanationOfBenefit_diagnosis.ApplySchema)),
      #"procedure" = if r[#"procedure"]? = null then null else Table.FromRecords(List.Transform(r[#"procedure"], ExplanationOfBenefit_procedure.ApplySchema)),
      #"precedence" = r[#"precedence"]?,
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], ExplanationOfBenefit_insurance.ApplySchema)),
      #"accident" = if r[#"accident"]? = null then null else ExplanationOfBenefit_accident.ApplySchema(r[#"accident"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], ExplanationOfBenefit_item.ApplySchema)),
      #"addItem" = if r[#"addItem"]? = null then null else Table.FromRecords(List.Transform(r[#"addItem"], ExplanationOfBenefit_addItem.ApplySchema)),
      #"total" = if r[#"total"]? = null then null else Table.FromRecords(List.Transform(r[#"total"], ExplanationOfBenefit_total.ApplySchema)),
      #"payment" = if r[#"payment"]? = null then null else ExplanationOfBenefit_payment.ApplySchema(r[#"payment"]),
      #"formCode" = if r[#"formCode"]? = null then null else CodeableConcept.ApplySchema(r[#"formCode"]),
      #"form" = if r[#"form"]? = null then null else Attachment.ApplySchema(r[#"form"]),
      #"processNote" = if r[#"processNote"]? = null then null else Table.FromRecords(List.Transform(r[#"processNote"], ExplanationOfBenefit_processNote.ApplySchema)),
      #"benefitPeriod" = if r[#"benefitPeriod"]? = null then null else Period.ApplySchema(r[#"benefitPeriod"]),
      #"benefitBalance" = if r[#"benefitBalance"]? = null then null else Table.FromRecords(List.Transform(r[#"benefitBalance"], ExplanationOfBenefit_benefitBalance.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_related.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"claim" = if r[#"claim"]? = null then null else Reference.ApplySchema(r[#"claim"]),
      #"relationship" = if r[#"relationship"]? = null then null else CodeableConcept.ApplySchema(r[#"relationship"]),
      #"reference" = if r[#"reference"]? = null then null else Identifier.ApplySchema(r[#"reference"])
    ],

  ExplanationOfBenefit_payee.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"party" = if r[#"party"]? = null then null else Reference.ApplySchema(r[#"party"])
    ],

  ExplanationOfBenefit_careTeam.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"responsible" = r[#"responsible"]?,
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"qualification" = if r[#"qualification"]? = null then null else CodeableConcept.ApplySchema(r[#"qualification"])
    ],

  ExplanationOfBenefit_supportingInfo.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"timing" = if r[#"timing"]? = null then null else ExplanationOfBenefit_supportingInfo_timing.ApplySchema(r[#"timing"]),
      #"value" = if r[#"value"]? = null then null else ExplanationOfBenefit_supportingInfo_value.ApplySchema(r[#"value"]),
      #"reason" = if r[#"reason"]? = null then null else Coding.ApplySchema(r[#"reason"])
    ],

  ExplanationOfBenefit_supportingInfo_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ExplanationOfBenefit_supportingInfo_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"string" = r[#"string"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"diagnosis" = if r[#"diagnosis"]? = null then null else ExplanationOfBenefit_diagnosis_diagnosis.ApplySchema(r[#"diagnosis"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"onAdmission" = if r[#"onAdmission"]? = null then null else CodeableConcept.ApplySchema(r[#"onAdmission"]),
      #"packageCode" = if r[#"packageCode"]? = null then null else CodeableConcept.ApplySchema(r[#"packageCode"])
    ],

  ExplanationOfBenefit_diagnosis_diagnosis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"procedure" = if r[#"procedure"]? = null then null else ExplanationOfBenefit_procedure_procedure.ApplySchema(r[#"procedure"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema))
    ],

  ExplanationOfBenefit_procedure_procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_insurance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"focal" = r[#"focal"]?,
      #"coverage" = if r[#"coverage"]? = null then null else Reference.ApplySchema(r[#"coverage"]),
      #"preAuthRef" = if r[#"preAuthRef"]? <> null then List.Transform(r[#"preAuthRef"], each _) else null
    ],

  ExplanationOfBenefit_accident.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"location" = if r[#"location"]? = null then null else ExplanationOfBenefit_accident_location.ApplySchema(r[#"location"])
    ],

  ExplanationOfBenefit_accident_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"careTeamSequence" = if r[#"careTeamSequence"]? <> null then List.Transform(r[#"careTeamSequence"], each _) else null,
      #"diagnosisSequence" = if r[#"diagnosisSequence"]? <> null then List.Transform(r[#"diagnosisSequence"], each _) else null,
      #"procedureSequence" = if r[#"procedureSequence"]? <> null then List.Transform(r[#"procedureSequence"], each _) else null,
      #"informationSequence" = if r[#"informationSequence"]? <> null then List.Transform(r[#"informationSequence"], each _) else null,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"serviced" = if r[#"serviced"]? = null then null else ExplanationOfBenefit_item_serviced.ApplySchema(r[#"serviced"]),
      #"location" = if r[#"location"]? = null then null else ExplanationOfBenefit_item_location.ApplySchema(r[#"location"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"subSite" = if r[#"subSite"]? = null then null else Table.FromRecords(List.Transform(r[#"subSite"], CodeableConcept.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Table.FromRecords(List.Transform(r[#"encounter"], Reference.ApplySchema)),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema)),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], ExplanationOfBenefit_item_detail.ApplySchema))
    ],

  ExplanationOfBenefit_item_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ExplanationOfBenefit_item_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_item_adjudication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"reason" = if r[#"reason"]? = null then null else CodeableConcept.ApplySchema(r[#"reason"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"]),
      #"value" = r[#"value"]?
    ],

  ExplanationOfBenefit_item_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema)),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"subDetail" = if r[#"subDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"subDetail"], ExplanationOfBenefit_item_detail_subDetail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_item_detail_subDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"revenue" = if r[#"revenue"]? = null then null else CodeableConcept.ApplySchema(r[#"revenue"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"udi" = if r[#"udi"]? = null then null else Table.FromRecords(List.Transform(r[#"udi"], Reference.ApplySchema)),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_addItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"itemSequence" = if r[#"itemSequence"]? <> null then List.Transform(r[#"itemSequence"], each _) else null,
      #"detailSequence" = if r[#"detailSequence"]? <> null then List.Transform(r[#"detailSequence"], each _) else null,
      #"subDetailSequence" = if r[#"subDetailSequence"]? <> null then List.Transform(r[#"subDetailSequence"], each _) else null,
      #"provider" = if r[#"provider"]? = null then null else Table.FromRecords(List.Transform(r[#"provider"], Reference.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"programCode" = if r[#"programCode"]? = null then null else Table.FromRecords(List.Transform(r[#"programCode"], CodeableConcept.ApplySchema)),
      #"serviced" = if r[#"serviced"]? = null then null else ExplanationOfBenefit_addItem_serviced.ApplySchema(r[#"serviced"]),
      #"location" = if r[#"location"]? = null then null else ExplanationOfBenefit_addItem_location.ApplySchema(r[#"location"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"subSite" = if r[#"subSite"]? = null then null else Table.FromRecords(List.Transform(r[#"subSite"], CodeableConcept.ApplySchema)),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], ExplanationOfBenefit_addItem_detail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_addItem_serviced.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ExplanationOfBenefit_addItem_location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ExplanationOfBenefit_addItem_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"subDetail" = if r[#"subDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"subDetail"], ExplanationOfBenefit_addItem_detail_subDetail.ApplySchema)),
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_addItem_detail_subDetail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"productOrService" = if r[#"productOrService"]? = null then null else CodeableConcept.ApplySchema(r[#"productOrService"]),
      #"modifier" = if r[#"modifier"]? = null then null else Table.FromRecords(List.Transform(r[#"modifier"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"unitPrice" = if r[#"unitPrice"]? = null then null else Money.ApplySchema(r[#"unitPrice"]),
      #"factor" = r[#"factor"]?,
      #"net" = if r[#"net"]? = null then null else Money.ApplySchema(r[#"net"]),
      #"noteNumber" = if r[#"noteNumber"]? <> null then List.Transform(r[#"noteNumber"], each _) else null,
      #"adjudication" = if r[#"adjudication"]? = null then null else Table.FromRecords(List.Transform(r[#"adjudication"], ExplanationOfBenefit_item_adjudication.ApplySchema))
    ],

  ExplanationOfBenefit_total.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"])
    ],

  ExplanationOfBenefit_payment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"adjustment" = if r[#"adjustment"]? = null then null else Money.ApplySchema(r[#"adjustment"]),
      #"adjustmentReason" = if r[#"adjustmentReason"]? = null then null else CodeableConcept.ApplySchema(r[#"adjustmentReason"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"]),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"])
    ],

  ExplanationOfBenefit_processNote.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"number" = r[#"number"]?,
      #"type" = r[#"type"]?,
      #"text" = r[#"text"]?,
      #"language" = if r[#"language"]? = null then null else CodeableConcept.ApplySchema(r[#"language"])
    ],

  ExplanationOfBenefit_benefitBalance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"excluded" = r[#"excluded"]?,
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"network" = if r[#"network"]? = null then null else CodeableConcept.ApplySchema(r[#"network"]),
      #"unit" = if r[#"unit"]? = null then null else CodeableConcept.ApplySchema(r[#"unit"]),
      #"term" = if r[#"term"]? = null then null else CodeableConcept.ApplySchema(r[#"term"]),
      #"financial" = if r[#"financial"]? = null then null else Table.FromRecords(List.Transform(r[#"financial"], ExplanationOfBenefit_benefitBalance_financial.ApplySchema))
    ],

  ExplanationOfBenefit_benefitBalance_financial.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"allowed" = if r[#"allowed"]? = null then null else ExplanationOfBenefit_benefitBalance_financial_allowed.ApplySchema(r[#"allowed"]),
      #"used" = if r[#"used"]? = null then null else ExplanationOfBenefit_benefitBalance_financial_used.ApplySchema(r[#"used"])
    ],

  ExplanationOfBenefit_benefitBalance_financial_allowed.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"string" = r[#"string"]?,
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"])
    ],

  ExplanationOfBenefit_benefitBalance_financial_used.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"])
    ],

  FamilyMemberHistory.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"status" = r[#"status"]?,
      #"dataAbsentReason" = if r[#"dataAbsentReason"]? = null then null else CodeableConcept.ApplySchema(r[#"dataAbsentReason"]),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"name" = r[#"name"]?,
      #"relationship" = if r[#"relationship"]? = null then null else CodeableConcept.ApplySchema(r[#"relationship"]),
      #"sex" = if r[#"sex"]? = null then null else CodeableConcept.ApplySchema(r[#"sex"]),
      #"born" = if r[#"born"]? = null then null else FamilyMemberHistory_born.ApplySchema(r[#"born"]),
      #"age" = if r[#"age"]? = null then null else FamilyMemberHistory_age.ApplySchema(r[#"age"]),
      #"estimatedAge" = r[#"estimatedAge"]?,
      #"deceased" = if r[#"deceased"]? = null then null else FamilyMemberHistory_deceased.ApplySchema(r[#"deceased"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Table.FromRecords(List.Transform(r[#"condition"], FamilyMemberHistory_condition.ApplySchema))
    ],

  FamilyMemberHistory_born.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"string" = r[#"string"]?
    ],

  FamilyMemberHistory_age.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  FamilyMemberHistory_deceased.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"string" = r[#"string"]?
    ],

  FamilyMemberHistory_condition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"outcome" = if r[#"outcome"]? = null then null else CodeableConcept.ApplySchema(r[#"outcome"]),
      #"contributedToDeath" = r[#"contributedToDeath"]?,
      #"onset" = if r[#"onset"]? = null then null else FamilyMemberHistory_condition_onset.ApplySchema(r[#"onset"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  FamilyMemberHistory_condition_onset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"string" = r[#"string"]?
    ],

  Flag.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"])
    ],

  Goal.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"lifecycleStatus" = r[#"lifecycleStatus"]?,
      #"achievementStatus" = if r[#"achievementStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"achievementStatus"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"description" = if r[#"description"]? = null then null else CodeableConcept.ApplySchema(r[#"description"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"start" = if r[#"start"]? = null then null else Goal_start.ApplySchema(r[#"start"]),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], Goal_target.ApplySchema)),
      #"statusDate" = if r[#"statusDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"statusDate"]) else null,
      #"statusReason" = r[#"statusReason"]?,
      #"expressedBy" = if r[#"expressedBy"]? = null then null else Reference.ApplySchema(r[#"expressedBy"]),
      #"addresses" = if r[#"addresses"]? = null then null else Table.FromRecords(List.Transform(r[#"addresses"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"outcomeCode" = if r[#"outcomeCode"]? = null then null else Table.FromRecords(List.Transform(r[#"outcomeCode"], CodeableConcept.ApplySchema)),
      #"outcomeReference" = if r[#"outcomeReference"]? = null then null else Table.FromRecords(List.Transform(r[#"outcomeReference"], Reference.ApplySchema))
    ],

  Goal_start.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  Goal_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"measure" = if r[#"measure"]? = null then null else CodeableConcept.ApplySchema(r[#"measure"]),
      #"detail" = if r[#"detail"]? = null then null else Goal_target_detail.ApplySchema(r[#"detail"]),
      #"due" = if r[#"due"]? = null then null else Goal_target_due.ApplySchema(r[#"due"])
    ],

  Goal_target_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"string" = r[#"string"]?,
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?,
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"])
    ],

  Goal_target_due.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"])
    ],

  GraphDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"start" = r[#"start"]?,
      #"profile" = r[#"profile"]?,
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], GraphDefinition_link.ApplySchema))
    ],

  GraphDefinition_link.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"sliceName" = r[#"sliceName"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?,
      #"description" = r[#"description"]?,
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], GraphDefinition_link_target.ApplySchema))
    ],

  GraphDefinition_link_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"params" = r[#"params"]?,
      #"profile" = r[#"profile"]?,
      #"compartment" = if r[#"compartment"]? = null then null else Table.FromRecords(List.Transform(r[#"compartment"], GraphDefinition_link_target_compartment.ApplySchema)),
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], GraphDefinition_link.ApplySchema))
    ],

  GraphDefinition_link_target_compartment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"use" = r[#"use"]?,
      #"code" = r[#"code"]?,
      #"rule" = r[#"rule"]?,
      #"expression" = r[#"expression"]?,
      #"description" = r[#"description"]?
    ],

  Group.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"type" = r[#"type"]?,
      #"actual" = r[#"actual"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"name" = r[#"name"]?,
      #"quantity" = r[#"quantity"]?,
      #"managingEntity" = if r[#"managingEntity"]? = null then null else Reference.ApplySchema(r[#"managingEntity"]),
      #"characteristic" = if r[#"characteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"characteristic"], Group_characteristic.ApplySchema)),
      #"member" = if r[#"member"]? = null then null else Table.FromRecords(List.Transform(r[#"member"], Group_member.ApplySchema))
    ],

  Group_characteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else Group_characteristic_value.ApplySchema(r[#"value"]),
      #"exclude" = r[#"exclude"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Group_characteristic_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"boolean" = r[#"boolean"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Group_member.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"entity" = if r[#"entity"]? = null then null else Reference.ApplySchema(r[#"entity"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"inactive" = r[#"inactive"]?
    ],

  GuidanceResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"requestIdentifier" = if r[#"requestIdentifier"]? = null then null else Identifier.ApplySchema(r[#"requestIdentifier"]),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"module" = if r[#"module"]? = null then null else GuidanceResponse_module.ApplySchema(r[#"module"]),
      #"status" = r[#"status"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"occurrenceDateTime" = if r[#"occurrenceDateTime"]? <> null then DateTimeZone.From(r[#"occurrenceDateTime"]) else null,
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"evaluationMessage" = if r[#"evaluationMessage"]? = null then null else Table.FromRecords(List.Transform(r[#"evaluationMessage"], Reference.ApplySchema)),
      #"outputParameters" = if r[#"outputParameters"]? = null then null else Reference.ApplySchema(r[#"outputParameters"]),
      #"result" = if r[#"result"]? = null then null else Reference.ApplySchema(r[#"result"]),
      #"dataRequirement" = if r[#"dataRequirement"]? = null then null else Table.FromRecords(List.Transform(r[#"dataRequirement"], DataRequirement.ApplySchema))
    ],

  GuidanceResponse_module.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"uri" = r[#"uri"]?,
      #"canonical" = r[#"canonical"]?,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  HealthcareService.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"providedBy" = if r[#"providedBy"]? = null then null else Reference.ApplySchema(r[#"providedBy"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Table.FromRecords(List.Transform(r[#"location"], Reference.ApplySchema)),
      #"name" = r[#"name"]?,
      #"comment" = r[#"comment"]?,
      #"extraDetails" = r[#"extraDetails"]?,
      #"photo" = if r[#"photo"]? = null then null else Attachment.ApplySchema(r[#"photo"]),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"coverageArea" = if r[#"coverageArea"]? = null then null else Table.FromRecords(List.Transform(r[#"coverageArea"], Reference.ApplySchema)),
      #"serviceProvisionCode" = if r[#"serviceProvisionCode"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceProvisionCode"], CodeableConcept.ApplySchema)),
      #"eligibility" = if r[#"eligibility"]? = null then null else Table.FromRecords(List.Transform(r[#"eligibility"], HealthcareService_eligibility.ApplySchema)),
      #"program" = if r[#"program"]? = null then null else Table.FromRecords(List.Transform(r[#"program"], CodeableConcept.ApplySchema)),
      #"characteristic" = if r[#"characteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"characteristic"], CodeableConcept.ApplySchema)),
      #"communication" = if r[#"communication"]? = null then null else Table.FromRecords(List.Transform(r[#"communication"], CodeableConcept.ApplySchema)),
      #"referralMethod" = if r[#"referralMethod"]? = null then null else Table.FromRecords(List.Transform(r[#"referralMethod"], CodeableConcept.ApplySchema)),
      #"appointmentRequired" = r[#"appointmentRequired"]?,
      #"availableTime" = if r[#"availableTime"]? = null then null else Table.FromRecords(List.Transform(r[#"availableTime"], HealthcareService_availableTime.ApplySchema)),
      #"notAvailable" = if r[#"notAvailable"]? = null then null else Table.FromRecords(List.Transform(r[#"notAvailable"], HealthcareService_notAvailable.ApplySchema)),
      #"availabilityExceptions" = r[#"availabilityExceptions"]?,
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema))
    ],

  HealthcareService_eligibility.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"comment" = r[#"comment"]?
    ],

  HealthcareService_availableTime.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"daysOfWeek" = if r[#"daysOfWeek"]? <> null then List.Transform(r[#"daysOfWeek"], each _) else null,
      #"allDay" = r[#"allDay"]?,
      #"availableStartTime" = if r[#"availableStartTime"]? <> null then Time.From(r[#"availableStartTime"]) else null,
      #"availableEndTime" = if r[#"availableEndTime"]? <> null then Time.From(r[#"availableEndTime"]) else null
    ],

  HealthcareService_notAvailable.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"during" = if r[#"during"]? = null then null else Period.ApplySchema(r[#"during"])
    ],

  ImagingStudy.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"modality" = if r[#"modality"]? = null then null else Table.FromRecords(List.Transform(r[#"modality"], Coding.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"started" = if r[#"started"]? <> null then DateTimeZone.From(r[#"started"]) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"referrer" = if r[#"referrer"]? = null then null else Reference.ApplySchema(r[#"referrer"]),
      #"interpreter" = if r[#"interpreter"]? = null then null else Table.FromRecords(List.Transform(r[#"interpreter"], Reference.ApplySchema)),
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema)),
      #"numberOfSeries" = r[#"numberOfSeries"]?,
      #"numberOfInstances" = r[#"numberOfInstances"]?,
      #"procedureReference" = if r[#"procedureReference"]? = null then null else Reference.ApplySchema(r[#"procedureReference"]),
      #"procedureCode" = if r[#"procedureCode"]? = null then null else Table.FromRecords(List.Transform(r[#"procedureCode"], CodeableConcept.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"description" = r[#"description"]?,
      #"series" = if r[#"series"]? = null then null else Table.FromRecords(List.Transform(r[#"series"], ImagingStudy_series.ApplySchema))
    ],

  ImagingStudy_series.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"uid" = r[#"uid"]?,
      #"number" = r[#"number"]?,
      #"modality" = if r[#"modality"]? = null then null else Coding.ApplySchema(r[#"modality"]),
      #"description" = r[#"description"]?,
      #"numberOfInstances" = r[#"numberOfInstances"]?,
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else Coding.ApplySchema(r[#"bodySite"]),
      #"laterality" = if r[#"laterality"]? = null then null else Coding.ApplySchema(r[#"laterality"]),
      #"specimen" = if r[#"specimen"]? = null then null else Table.FromRecords(List.Transform(r[#"specimen"], Reference.ApplySchema)),
      #"started" = if r[#"started"]? <> null then DateTimeZone.From(r[#"started"]) else null,
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], ImagingStudy_series_performer.ApplySchema)),
      #"instance" = if r[#"instance"]? = null then null else Table.FromRecords(List.Transform(r[#"instance"], ImagingStudy_series_instance.ApplySchema))
    ],

  ImagingStudy_series_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  ImagingStudy_series_instance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"uid" = r[#"uid"]?,
      #"sopClass" = if r[#"sopClass"]? = null then null else Coding.ApplySchema(r[#"sopClass"]),
      #"number" = r[#"number"]?,
      #"title" = r[#"title"]?
    ],

  Immunization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"vaccineCode" = if r[#"vaccineCode"]? = null then null else CodeableConcept.ApplySchema(r[#"vaccineCode"]),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else Immunization_occurrence.ApplySchema(r[#"occurrence"]),
      #"recorded" = if r[#"recorded"]? <> null then DateTimeZone.From(r[#"recorded"]) else null,
      #"primarySource" = r[#"primarySource"]?,
      #"reportOrigin" = if r[#"reportOrigin"]? = null then null else CodeableConcept.ApplySchema(r[#"reportOrigin"]),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Reference.ApplySchema(r[#"manufacturer"]),
      #"lotNumber" = r[#"lotNumber"]?,
      #"expirationDate" = if r[#"expirationDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"expirationDate"]) else null,
      #"site" = if r[#"site"]? = null then null else CodeableConcept.ApplySchema(r[#"site"]),
      #"route" = if r[#"route"]? = null then null else CodeableConcept.ApplySchema(r[#"route"]),
      #"doseQuantity" = if r[#"doseQuantity"]? = null then null else Quantity.ApplySchema(r[#"doseQuantity"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Immunization_performer.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"isSubpotent" = r[#"isSubpotent"]?,
      #"subpotentReason" = if r[#"subpotentReason"]? = null then null else Table.FromRecords(List.Transform(r[#"subpotentReason"], CodeableConcept.ApplySchema)),
      #"education" = if r[#"education"]? = null then null else Table.FromRecords(List.Transform(r[#"education"], Immunization_education.ApplySchema)),
      #"programEligibility" = if r[#"programEligibility"]? = null then null else Table.FromRecords(List.Transform(r[#"programEligibility"], CodeableConcept.ApplySchema)),
      #"fundingSource" = if r[#"fundingSource"]? = null then null else CodeableConcept.ApplySchema(r[#"fundingSource"]),
      #"reaction" = if r[#"reaction"]? = null then null else Table.FromRecords(List.Transform(r[#"reaction"], Immunization_reaction.ApplySchema)),
      #"protocolApplied" = if r[#"protocolApplied"]? = null then null else Table.FromRecords(List.Transform(r[#"protocolApplied"], Immunization_protocolApplied.ApplySchema))
    ],

  Immunization_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"string" = r[#"string"]?
    ],

  Immunization_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  Immunization_education.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"documentType" = r[#"documentType"]?,
      #"reference" = r[#"reference"]?,
      #"publicationDate" = if r[#"publicationDate"]? <> null then DateTimeZone.From(r[#"publicationDate"]) else null,
      #"presentationDate" = if r[#"presentationDate"]? <> null then DateTimeZone.From(r[#"presentationDate"]) else null
    ],

  Immunization_reaction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"detail" = if r[#"detail"]? = null then null else Reference.ApplySchema(r[#"detail"]),
      #"reported" = r[#"reported"]?
    ],

  Immunization_protocolApplied.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"series" = r[#"series"]?,
      #"authority" = if r[#"authority"]? = null then null else Reference.ApplySchema(r[#"authority"]),
      #"targetDisease" = if r[#"targetDisease"]? = null then null else Table.FromRecords(List.Transform(r[#"targetDisease"], CodeableConcept.ApplySchema)),
      #"doseNumber" = if r[#"doseNumber"]? = null then null else Immunization_protocolApplied_doseNumber.ApplySchema(r[#"doseNumber"]),
      #"seriesDoses" = if r[#"seriesDoses"]? = null then null else Immunization_protocolApplied_seriesDoses.ApplySchema(r[#"seriesDoses"])
    ],

  Immunization_protocolApplied_doseNumber.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  Immunization_protocolApplied_seriesDoses.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  ImmunizationEvaluation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"authority" = if r[#"authority"]? = null then null else Reference.ApplySchema(r[#"authority"]),
      #"targetDisease" = if r[#"targetDisease"]? = null then null else CodeableConcept.ApplySchema(r[#"targetDisease"]),
      #"immunizationEvent" = if r[#"immunizationEvent"]? = null then null else Reference.ApplySchema(r[#"immunizationEvent"]),
      #"doseStatus" = if r[#"doseStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"doseStatus"]),
      #"doseStatusReason" = if r[#"doseStatusReason"]? = null then null else Table.FromRecords(List.Transform(r[#"doseStatusReason"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?,
      #"series" = r[#"series"]?,
      #"doseNumber" = if r[#"doseNumber"]? = null then null else ImmunizationEvaluation_doseNumber.ApplySchema(r[#"doseNumber"]),
      #"seriesDoses" = if r[#"seriesDoses"]? = null then null else ImmunizationEvaluation_seriesDoses.ApplySchema(r[#"seriesDoses"])
    ],

  ImmunizationEvaluation_doseNumber.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  ImmunizationEvaluation_seriesDoses.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  ImmunizationRecommendation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"authority" = if r[#"authority"]? = null then null else Reference.ApplySchema(r[#"authority"]),
      #"recommendation" = if r[#"recommendation"]? = null then null else Table.FromRecords(List.Transform(r[#"recommendation"], ImmunizationRecommendation_recommendation.ApplySchema))
    ],

  ImmunizationRecommendation_recommendation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"vaccineCode" = if r[#"vaccineCode"]? = null then null else Table.FromRecords(List.Transform(r[#"vaccineCode"], CodeableConcept.ApplySchema)),
      #"targetDisease" = if r[#"targetDisease"]? = null then null else CodeableConcept.ApplySchema(r[#"targetDisease"]),
      #"contraindicatedVaccineCode" = if r[#"contraindicatedVaccineCode"]? = null then null else Table.FromRecords(List.Transform(r[#"contraindicatedVaccineCode"], CodeableConcept.ApplySchema)),
      #"forecastStatus" = if r[#"forecastStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"forecastStatus"]),
      #"forecastReason" = if r[#"forecastReason"]? = null then null else Table.FromRecords(List.Transform(r[#"forecastReason"], CodeableConcept.ApplySchema)),
      #"dateCriterion" = if r[#"dateCriterion"]? = null then null else Table.FromRecords(List.Transform(r[#"dateCriterion"], ImmunizationRecommendation_recommendation_dateCriterion.ApplySchema)),
      #"description" = r[#"description"]?,
      #"series" = r[#"series"]?,
      #"doseNumber" = if r[#"doseNumber"]? = null then null else ImmunizationRecommendation_recommendation_doseNumber.ApplySchema(r[#"doseNumber"]),
      #"seriesDoses" = if r[#"seriesDoses"]? = null then null else ImmunizationRecommendation_recommendation_seriesDoses.ApplySchema(r[#"seriesDoses"]),
      #"supportingImmunization" = if r[#"supportingImmunization"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingImmunization"], Reference.ApplySchema)),
      #"supportingPatientInformation" = if r[#"supportingPatientInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingPatientInformation"], Reference.ApplySchema))
    ],

  ImmunizationRecommendation_recommendation_dateCriterion.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? <> null then DateTimeZone.From(r[#"value"]) else null
    ],

  ImmunizationRecommendation_recommendation_doseNumber.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  ImmunizationRecommendation_recommendation_seriesDoses.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?
    ],

  ImplementationGuide.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"packageId" = r[#"packageId"]?,
      #"license" = r[#"license"]?,
      #"fhirVersion" = if r[#"fhirVersion"]? <> null then List.Transform(r[#"fhirVersion"], each _) else null,
      #"dependsOn" = if r[#"dependsOn"]? = null then null else Table.FromRecords(List.Transform(r[#"dependsOn"], ImplementationGuide_dependsOn.ApplySchema)),
      #"global" = if r[#"global"]? = null then null else Table.FromRecords(List.Transform(r[#"global"], ImplementationGuide_global.ApplySchema)),
      #"definition" = if r[#"definition"]? = null then null else ImplementationGuide_definition.ApplySchema(r[#"definition"]),
      #"manifest" = if r[#"manifest"]? = null then null else ImplementationGuide_manifest.ApplySchema(r[#"manifest"])
    ],

  ImplementationGuide_dependsOn.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"uri" = r[#"uri"]?,
      #"packageId" = r[#"packageId"]?,
      #"version" = r[#"version"]?
    ],

  ImplementationGuide_global.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"profile" = r[#"profile"]?
    ],

  ImplementationGuide_definition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"grouping" = if r[#"grouping"]? = null then null else Table.FromRecords(List.Transform(r[#"grouping"], ImplementationGuide_definition_grouping.ApplySchema)),
      #"resource" = if r[#"resource"]? = null then null else Table.FromRecords(List.Transform(r[#"resource"], ImplementationGuide_definition_resource.ApplySchema)),
      #"page" = if r[#"page"]? = null then null else ImplementationGuide_definition_page.ApplySchema(r[#"page"]),
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], ImplementationGuide_definition_parameter.ApplySchema)),
      #"template" = if r[#"template"]? = null then null else Table.FromRecords(List.Transform(r[#"template"], ImplementationGuide_definition_template.ApplySchema))
    ],

  ImplementationGuide_definition_grouping.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?
    ],

  ImplementationGuide_definition_resource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"]),
      #"fhirVersion" = if r[#"fhirVersion"]? <> null then List.Transform(r[#"fhirVersion"], each _) else null,
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"example" = if r[#"example"]? = null then null else ImplementationGuide_definition_resource_example.ApplySchema(r[#"example"]),
      #"groupingId" = r[#"groupingId"]?
    ],

  ImplementationGuide_definition_resource_example.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?
    ],

  ImplementationGuide_definition_page.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else ImplementationGuide_definition_page_name.ApplySchema(r[#"name"]),
      #"title" = r[#"title"]?,
      #"generation" = r[#"generation"]?,
      #"page" = if r[#"page"]? = null then null else Table.FromRecords(List.Transform(r[#"page"], @ImplementationGuide_definition_page.ApplySchema))
    ],

  ImplementationGuide_definition_page_name.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"url" = r[#"url"]?,
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ImplementationGuide_definition_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"value" = r[#"value"]?
    ],

  ImplementationGuide_definition_template.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"source" = r[#"source"]?,
      #"scope" = r[#"scope"]?
    ],

  ImplementationGuide_manifest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"rendering" = r[#"rendering"]?,
      #"resource" = if r[#"resource"]? = null then null else Table.FromRecords(List.Transform(r[#"resource"], ImplementationGuide_manifest_resource.ApplySchema)),
      #"page" = if r[#"page"]? = null then null else Table.FromRecords(List.Transform(r[#"page"], ImplementationGuide_manifest_page.ApplySchema)),
      #"image" = if r[#"image"]? <> null then List.Transform(r[#"image"], each _) else null,
      #"other" = if r[#"other"]? <> null then List.Transform(r[#"other"], each _) else null
    ],

  ImplementationGuide_manifest_resource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"reference" = if r[#"reference"]? = null then null else Reference.ApplySchema(r[#"reference"]),
      #"example" = if r[#"example"]? = null then null else ImplementationGuide_manifest_resource_example.ApplySchema(r[#"example"]),
      #"relativePath" = r[#"relativePath"]?
    ],

  ImplementationGuide_manifest_resource_example.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?
    ],

  ImplementationGuide_manifest_page.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"anchor" = if r[#"anchor"]? <> null then List.Transform(r[#"anchor"], each _) else null
    ],

  InsurancePlan.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"name" = r[#"name"]?,
      #"alias" = if r[#"alias"]? <> null then List.Transform(r[#"alias"], each _) else null,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"ownedBy" = if r[#"ownedBy"]? = null then null else Reference.ApplySchema(r[#"ownedBy"]),
      #"administeredBy" = if r[#"administeredBy"]? = null then null else Reference.ApplySchema(r[#"administeredBy"]),
      #"coverageArea" = if r[#"coverageArea"]? = null then null else Table.FromRecords(List.Transform(r[#"coverageArea"], Reference.ApplySchema)),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], InsurancePlan_contact.ApplySchema)),
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema)),
      #"network" = if r[#"network"]? = null then null else Table.FromRecords(List.Transform(r[#"network"], Reference.ApplySchema)),
      #"coverage" = if r[#"coverage"]? = null then null else Table.FromRecords(List.Transform(r[#"coverage"], InsurancePlan_coverage.ApplySchema)),
      #"plan" = if r[#"plan"]? = null then null else Table.FromRecords(List.Transform(r[#"plan"], InsurancePlan_plan.ApplySchema))
    ],

  InsurancePlan_contact.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"purpose" = if r[#"purpose"]? = null then null else CodeableConcept.ApplySchema(r[#"purpose"]),
      #"name" = if r[#"name"]? = null then null else HumanName.ApplySchema(r[#"name"]),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Address.ApplySchema(r[#"address"])
    ],

  InsurancePlan_coverage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"network" = if r[#"network"]? = null then null else Table.FromRecords(List.Transform(r[#"network"], Reference.ApplySchema)),
      #"benefit" = if r[#"benefit"]? = null then null else Table.FromRecords(List.Transform(r[#"benefit"], InsurancePlan_coverage_benefit.ApplySchema))
    ],

  InsurancePlan_coverage_benefit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"requirement" = r[#"requirement"]?,
      #"limit" = if r[#"limit"]? = null then null else Table.FromRecords(List.Transform(r[#"limit"], InsurancePlan_coverage_benefit_limit.ApplySchema))
    ],

  InsurancePlan_coverage_benefit_limit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Quantity.ApplySchema(r[#"value"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"])
    ],

  InsurancePlan_plan.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"coverageArea" = if r[#"coverageArea"]? = null then null else Table.FromRecords(List.Transform(r[#"coverageArea"], Reference.ApplySchema)),
      #"network" = if r[#"network"]? = null then null else Table.FromRecords(List.Transform(r[#"network"], Reference.ApplySchema)),
      #"generalCost" = if r[#"generalCost"]? = null then null else Table.FromRecords(List.Transform(r[#"generalCost"], InsurancePlan_plan_generalCost.ApplySchema)),
      #"specificCost" = if r[#"specificCost"]? = null then null else Table.FromRecords(List.Transform(r[#"specificCost"], InsurancePlan_plan_specificCost.ApplySchema))
    ],

  InsurancePlan_plan_generalCost.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"groupSize" = r[#"groupSize"]?,
      #"cost" = if r[#"cost"]? = null then null else Money.ApplySchema(r[#"cost"]),
      #"comment" = r[#"comment"]?
    ],

  InsurancePlan_plan_specificCost.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"benefit" = if r[#"benefit"]? = null then null else Table.FromRecords(List.Transform(r[#"benefit"], InsurancePlan_plan_specificCost_benefit.ApplySchema))
    ],

  InsurancePlan_plan_specificCost_benefit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"cost" = if r[#"cost"]? = null then null else Table.FromRecords(List.Transform(r[#"cost"], InsurancePlan_plan_specificCost_benefit_cost.ApplySchema))
    ],

  InsurancePlan_plan_specificCost_benefit_cost.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"applicability" = if r[#"applicability"]? = null then null else CodeableConcept.ApplySchema(r[#"applicability"]),
      #"qualifiers" = if r[#"qualifiers"]? = null then null else Table.FromRecords(List.Transform(r[#"qualifiers"], CodeableConcept.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Quantity.ApplySchema(r[#"value"])
    ],

  Invoice.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"cancelledReason" = r[#"cancelledReason"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"recipient" = if r[#"recipient"]? = null then null else Reference.ApplySchema(r[#"recipient"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], Invoice_participant.ApplySchema)),
      #"issuer" = if r[#"issuer"]? = null then null else Reference.ApplySchema(r[#"issuer"]),
      #"account" = if r[#"account"]? = null then null else Reference.ApplySchema(r[#"account"]),
      #"lineItem" = if r[#"lineItem"]? = null then null else Table.FromRecords(List.Transform(r[#"lineItem"], Invoice_lineItem.ApplySchema)),
      #"totalNet" = if r[#"totalNet"]? = null then null else Money.ApplySchema(r[#"totalNet"]),
      #"totalGross" = if r[#"totalGross"]? = null then null else Money.ApplySchema(r[#"totalGross"]),
      #"paymentTerms" = r[#"paymentTerms"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"totalPriceComponent" = if r[#"totalPriceComponent"]? = null then null else Table.FromRecords(List.Transform(r[#"totalPriceComponent"], Invoice_lineItem_priceComponent.ApplySchema))
    ],

  Invoice_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  Invoice_lineItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequence" = r[#"sequence"]?,
      #"chargeItem" = if r[#"chargeItem"]? = null then null else Invoice_lineItem_chargeItem.ApplySchema(r[#"chargeItem"]),
      #"priceComponent" = if r[#"priceComponent"]? = null then null else Table.FromRecords(List.Transform(r[#"priceComponent"], Invoice_lineItem_priceComponent.ApplySchema))
    ],

  Invoice_lineItem_chargeItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  Invoice_lineItem_priceComponent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"factor" = r[#"factor"]?,
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"])
    ],

  Library.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subject" = if r[#"subject"]? = null then null else Library_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], ParameterDefinition.ApplySchema)),
      #"dataRequirement" = if r[#"dataRequirement"]? = null then null else Table.FromRecords(List.Transform(r[#"dataRequirement"], DataRequirement.ApplySchema)),
      #"content" = if r[#"content"]? = null then null else Table.FromRecords(List.Transform(r[#"content"], Attachment.ApplySchema))
    ],

  Library_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Linkage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"active" = r[#"active"]?,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], Linkage_item.ApplySchema))
    ],

  Linkage_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"resource" = if r[#"resource"]? = null then null else Reference.ApplySchema(r[#"resource"])
    ],

  List.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"mode" = r[#"mode"]?,
      #"title" = r[#"title"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"]),
      #"orderedBy" = if r[#"orderedBy"]? = null then null else CodeableConcept.ApplySchema(r[#"orderedBy"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"entry" = if r[#"entry"]? = null then null else Table.FromRecords(List.Transform(r[#"entry"], List_entry.ApplySchema)),
      #"emptyReason" = if r[#"emptyReason"]? = null then null else CodeableConcept.ApplySchema(r[#"emptyReason"])
    ],

  List_entry.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"flag" = if r[#"flag"]? = null then null else CodeableConcept.ApplySchema(r[#"flag"]),
      #"deleted" = r[#"deleted"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"item" = if r[#"item"]? = null then null else Reference.ApplySchema(r[#"item"])
    ],

  Location.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"operationalStatus" = if r[#"operationalStatus"]? = null then null else Coding.ApplySchema(r[#"operationalStatus"]),
      #"name" = r[#"name"]?,
      #"alias" = if r[#"alias"]? <> null then List.Transform(r[#"alias"], each _) else null,
      #"description" = r[#"description"]?,
      #"mode" = r[#"mode"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Address.ApplySchema(r[#"address"]),
      #"physicalType" = if r[#"physicalType"]? = null then null else CodeableConcept.ApplySchema(r[#"physicalType"]),
      #"position" = if r[#"position"]? = null then null else Location_position.ApplySchema(r[#"position"]),
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Reference.ApplySchema(r[#"managingOrganization"]),
      #"partOf" = if r[#"partOf"]? = null then null else Reference.ApplySchema(r[#"partOf"]),
      #"hoursOfOperation" = if r[#"hoursOfOperation"]? = null then null else Table.FromRecords(List.Transform(r[#"hoursOfOperation"], Location_hoursOfOperation.ApplySchema)),
      #"availabilityExceptions" = r[#"availabilityExceptions"]?,
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema))
    ],

  Location_position.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"longitude" = r[#"longitude"]?,
      #"latitude" = r[#"latitude"]?,
      #"altitude" = r[#"altitude"]?
    ],

  Location_hoursOfOperation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"daysOfWeek" = if r[#"daysOfWeek"]? <> null then List.Transform(r[#"daysOfWeek"], each _) else null,
      #"allDay" = r[#"allDay"]?,
      #"openingTime" = if r[#"openingTime"]? <> null then Time.From(r[#"openingTime"]) else null,
      #"closingTime" = if r[#"closingTime"]? <> null then Time.From(r[#"closingTime"]) else null
    ],

  Measure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else Measure_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"library" = if r[#"library"]? <> null then List.Transform(r[#"library"], each _) else null,
      #"disclaimer" = r[#"disclaimer"]?,
      #"scoring" = if r[#"scoring"]? = null then null else CodeableConcept.ApplySchema(r[#"scoring"]),
      #"compositeScoring" = if r[#"compositeScoring"]? = null then null else CodeableConcept.ApplySchema(r[#"compositeScoring"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"riskAdjustment" = r[#"riskAdjustment"]?,
      #"rateAggregation" = r[#"rateAggregation"]?,
      #"rationale" = r[#"rationale"]?,
      #"clinicalRecommendationStatement" = r[#"clinicalRecommendationStatement"]?,
      #"improvementNotation" = if r[#"improvementNotation"]? = null then null else CodeableConcept.ApplySchema(r[#"improvementNotation"]),
      #"definition" = if r[#"definition"]? <> null then List.Transform(r[#"definition"], each _) else null,
      #"guidance" = r[#"guidance"]?,
      #"group" = if r[#"group"]? = null then null else Table.FromRecords(List.Transform(r[#"group"], Measure_group.ApplySchema)),
      #"supplementalData" = if r[#"supplementalData"]? = null then null else Table.FromRecords(List.Transform(r[#"supplementalData"], Measure_supplementalData.ApplySchema))
    ],

  Measure_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Measure_group.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], Measure_group_population.ApplySchema)),
      #"stratifier" = if r[#"stratifier"]? = null then null else Table.FromRecords(List.Transform(r[#"stratifier"], Measure_group_stratifier.ApplySchema))
    ],

  Measure_group_population.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"criteria" = if r[#"criteria"]? = null then null else Expression.ApplySchema(r[#"criteria"])
    ],

  Measure_group_stratifier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"criteria" = if r[#"criteria"]? = null then null else Expression.ApplySchema(r[#"criteria"]),
      #"component" = if r[#"component"]? = null then null else Table.FromRecords(List.Transform(r[#"component"], Measure_group_stratifier_component.ApplySchema))
    ],

  Measure_group_stratifier_component.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"criteria" = if r[#"criteria"]? = null then null else Expression.ApplySchema(r[#"criteria"])
    ],

  Measure_supplementalData.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"usage" = if r[#"usage"]? = null then null else Table.FromRecords(List.Transform(r[#"usage"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?,
      #"criteria" = if r[#"criteria"]? = null then null else Expression.ApplySchema(r[#"criteria"])
    ],

  MeasureReport.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = r[#"type"]?,
      #"measure" = r[#"measure"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"reporter" = if r[#"reporter"]? = null then null else Reference.ApplySchema(r[#"reporter"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"improvementNotation" = if r[#"improvementNotation"]? = null then null else CodeableConcept.ApplySchema(r[#"improvementNotation"]),
      #"group" = if r[#"group"]? = null then null else Table.FromRecords(List.Transform(r[#"group"], MeasureReport_group.ApplySchema)),
      #"evaluatedResource" = if r[#"evaluatedResource"]? = null then null else Table.FromRecords(List.Transform(r[#"evaluatedResource"], Reference.ApplySchema))
    ],

  MeasureReport_group.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], MeasureReport_group_population.ApplySchema)),
      #"measureScore" = if r[#"measureScore"]? = null then null else Quantity.ApplySchema(r[#"measureScore"]),
      #"stratifier" = if r[#"stratifier"]? = null then null else Table.FromRecords(List.Transform(r[#"stratifier"], MeasureReport_group_stratifier.ApplySchema))
    ],

  MeasureReport_group_population.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"count" = r[#"count"]?,
      #"subjectResults" = if r[#"subjectResults"]? = null then null else Reference.ApplySchema(r[#"subjectResults"])
    ],

  MeasureReport_group_stratifier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"stratum" = if r[#"stratum"]? = null then null else Table.FromRecords(List.Transform(r[#"stratum"], MeasureReport_group_stratifier_stratum.ApplySchema))
    ],

  MeasureReport_group_stratifier_stratum.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else CodeableConcept.ApplySchema(r[#"value"]),
      #"component" = if r[#"component"]? = null then null else Table.FromRecords(List.Transform(r[#"component"], MeasureReport_group_stratifier_stratum_component.ApplySchema)),
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], MeasureReport_group_stratifier_stratum_population.ApplySchema)),
      #"measureScore" = if r[#"measureScore"]? = null then null else Quantity.ApplySchema(r[#"measureScore"])
    ],

  MeasureReport_group_stratifier_stratum_component.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else CodeableConcept.ApplySchema(r[#"value"])
    ],

  MeasureReport_group_stratifier_stratum_population.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"count" = r[#"count"]?,
      #"subjectResults" = if r[#"subjectResults"]? = null then null else Reference.ApplySchema(r[#"subjectResults"])
    ],

  Media.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"modality" = if r[#"modality"]? = null then null else CodeableConcept.ApplySchema(r[#"modality"]),
      #"view" = if r[#"view"]? = null then null else CodeableConcept.ApplySchema(r[#"view"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"created" = if r[#"created"]? = null then null else Media_created.ApplySchema(r[#"created"]),
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"operator" = if r[#"operator"]? = null then null else Reference.ApplySchema(r[#"operator"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"deviceName" = r[#"deviceName"]?,
      #"device" = if r[#"device"]? = null then null else Reference.ApplySchema(r[#"device"]),
      #"height" = r[#"height"]?,
      #"width" = r[#"width"]?,
      #"frames" = r[#"frames"]?,
      #"duration" = r[#"duration"]?,
      #"content" = if r[#"content"]? = null then null else Attachment.ApplySchema(r[#"content"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Media_created.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"status" = r[#"status"]?,
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Reference.ApplySchema(r[#"manufacturer"]),
      #"form" = if r[#"form"]? = null then null else CodeableConcept.ApplySchema(r[#"form"]),
      #"amount" = if r[#"amount"]? = null then null else Ratio.ApplySchema(r[#"amount"]),
      #"ingredient" = if r[#"ingredient"]? = null then null else Table.FromRecords(List.Transform(r[#"ingredient"], Medication_ingredient.ApplySchema)),
      #"batch" = if r[#"batch"]? = null then null else Medication_batch.ApplySchema(r[#"batch"])
    ],

  Medication_ingredient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else Medication_ingredient_item.ApplySchema(r[#"item"]),
      #"isActive" = r[#"isActive"]?,
      #"strength" = if r[#"strength"]? = null then null else Ratio.ApplySchema(r[#"strength"])
    ],

  Medication_ingredient_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Medication_batch.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"lotNumber" = r[#"lotNumber"]?,
      #"expirationDate" = if r[#"expirationDate"]? <> null then DateTimeZone.From(r[#"expirationDate"]) else null
    ],

  MedicationAdministration.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiates" = if r[#"instantiates"]? <> null then List.Transform(r[#"instantiates"], each _) else null,
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else Table.FromRecords(List.Transform(r[#"statusReason"], CodeableConcept.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"medication" = if r[#"medication"]? = null then null else MedicationAdministration_medication.ApplySchema(r[#"medication"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"context" = if r[#"context"]? = null then null else Reference.ApplySchema(r[#"context"]),
      #"supportingInformation" = if r[#"supportingInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInformation"], Reference.ApplySchema)),
      #"effective" = if r[#"effective"]? = null then null else MedicationAdministration_effective.ApplySchema(r[#"effective"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], MedicationAdministration_performer.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"device" = if r[#"device"]? = null then null else Table.FromRecords(List.Transform(r[#"device"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"dosage" = if r[#"dosage"]? = null then null else MedicationAdministration_dosage.ApplySchema(r[#"dosage"]),
      #"eventHistory" = if r[#"eventHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"eventHistory"], Reference.ApplySchema))
    ],

  MedicationAdministration_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationAdministration_effective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  MedicationAdministration_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  MedicationAdministration_dosage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"text" = r[#"text"]?,
      #"site" = if r[#"site"]? = null then null else CodeableConcept.ApplySchema(r[#"site"]),
      #"route" = if r[#"route"]? = null then null else CodeableConcept.ApplySchema(r[#"route"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"dose" = if r[#"dose"]? = null then null else Quantity.ApplySchema(r[#"dose"]),
      #"rate" = if r[#"rate"]? = null then null else MedicationAdministration_dosage_rate.ApplySchema(r[#"rate"])
    ],

  MedicationAdministration_dosage_rate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  MedicationDispense.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else MedicationDispense_statusReason.ApplySchema(r[#"statusReason"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"medication" = if r[#"medication"]? = null then null else MedicationDispense_medication.ApplySchema(r[#"medication"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"context" = if r[#"context"]? = null then null else Reference.ApplySchema(r[#"context"]),
      #"supportingInformation" = if r[#"supportingInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInformation"], Reference.ApplySchema)),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], MedicationDispense_performer.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"authorizingPrescription" = if r[#"authorizingPrescription"]? = null then null else Table.FromRecords(List.Transform(r[#"authorizingPrescription"], Reference.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"daysSupply" = if r[#"daysSupply"]? = null then null else Quantity.ApplySchema(r[#"daysSupply"]),
      #"whenPrepared" = if r[#"whenPrepared"]? <> null then DateTimeZone.From(r[#"whenPrepared"]) else null,
      #"whenHandedOver" = if r[#"whenHandedOver"]? <> null then DateTimeZone.From(r[#"whenHandedOver"]) else null,
      #"destination" = if r[#"destination"]? = null then null else Reference.ApplySchema(r[#"destination"]),
      #"receiver" = if r[#"receiver"]? = null then null else Table.FromRecords(List.Transform(r[#"receiver"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else Table.FromRecords(List.Transform(r[#"dosageInstruction"], Dosage.ApplySchema)),
      #"substitution" = if r[#"substitution"]? = null then null else MedicationDispense_substitution.ApplySchema(r[#"substitution"]),
      #"detectedIssue" = if r[#"detectedIssue"]? = null then null else Table.FromRecords(List.Transform(r[#"detectedIssue"], Reference.ApplySchema)),
      #"eventHistory" = if r[#"eventHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"eventHistory"], Reference.ApplySchema))
    ],

  MedicationDispense_statusReason.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationDispense_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationDispense_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"])
    ],

  MedicationDispense_substitution.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"wasSubstituted" = r[#"wasSubstituted"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"reason" = if r[#"reason"]? = null then null else Table.FromRecords(List.Transform(r[#"reason"], CodeableConcept.ApplySchema)),
      #"responsibleParty" = if r[#"responsibleParty"]? = null then null else Table.FromRecords(List.Transform(r[#"responsibleParty"], Reference.ApplySchema))
    ],

  MedicationKnowledge.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"status" = r[#"status"]?,
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Reference.ApplySchema(r[#"manufacturer"]),
      #"doseForm" = if r[#"doseForm"]? = null then null else CodeableConcept.ApplySchema(r[#"doseForm"]),
      #"amount" = if r[#"amount"]? = null then null else Quantity.ApplySchema(r[#"amount"]),
      #"synonym" = if r[#"synonym"]? <> null then List.Transform(r[#"synonym"], each _) else null,
      #"relatedMedicationKnowledge" = if r[#"relatedMedicationKnowledge"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedMedicationKnowledge"], MedicationKnowledge_relatedMedicationKnowledge.ApplySchema)),
      #"associatedMedication" = if r[#"associatedMedication"]? = null then null else Table.FromRecords(List.Transform(r[#"associatedMedication"], Reference.ApplySchema)),
      #"productType" = if r[#"productType"]? = null then null else Table.FromRecords(List.Transform(r[#"productType"], CodeableConcept.ApplySchema)),
      #"monograph" = if r[#"monograph"]? = null then null else Table.FromRecords(List.Transform(r[#"monograph"], MedicationKnowledge_monograph.ApplySchema)),
      #"ingredient" = if r[#"ingredient"]? = null then null else Table.FromRecords(List.Transform(r[#"ingredient"], MedicationKnowledge_ingredient.ApplySchema)),
      #"preparationInstruction" = r[#"preparationInstruction"]?,
      #"intendedRoute" = if r[#"intendedRoute"]? = null then null else Table.FromRecords(List.Transform(r[#"intendedRoute"], CodeableConcept.ApplySchema)),
      #"cost" = if r[#"cost"]? = null then null else Table.FromRecords(List.Transform(r[#"cost"], MedicationKnowledge_cost.ApplySchema)),
      #"monitoringProgram" = if r[#"monitoringProgram"]? = null then null else Table.FromRecords(List.Transform(r[#"monitoringProgram"], MedicationKnowledge_monitoringProgram.ApplySchema)),
      #"administrationGuidelines" = if r[#"administrationGuidelines"]? = null then null else Table.FromRecords(List.Transform(r[#"administrationGuidelines"], MedicationKnowledge_administrationGuidelines.ApplySchema)),
      #"medicineClassification" = if r[#"medicineClassification"]? = null then null else Table.FromRecords(List.Transform(r[#"medicineClassification"], MedicationKnowledge_medicineClassification.ApplySchema)),
      #"packaging" = if r[#"packaging"]? = null then null else MedicationKnowledge_packaging.ApplySchema(r[#"packaging"]),
      #"drugCharacteristic" = if r[#"drugCharacteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"drugCharacteristic"], MedicationKnowledge_drugCharacteristic.ApplySchema)),
      #"contraindication" = if r[#"contraindication"]? = null then null else Table.FromRecords(List.Transform(r[#"contraindication"], Reference.ApplySchema)),
      #"regulatory" = if r[#"regulatory"]? = null then null else Table.FromRecords(List.Transform(r[#"regulatory"], MedicationKnowledge_regulatory.ApplySchema)),
      #"kinetics" = if r[#"kinetics"]? = null then null else Table.FromRecords(List.Transform(r[#"kinetics"], MedicationKnowledge_kinetics.ApplySchema))
    ],

  MedicationKnowledge_relatedMedicationKnowledge.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"reference" = if r[#"reference"]? = null then null else Table.FromRecords(List.Transform(r[#"reference"], Reference.ApplySchema))
    ],

  MedicationKnowledge_monograph.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"])
    ],

  MedicationKnowledge_ingredient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else MedicationKnowledge_ingredient_item.ApplySchema(r[#"item"]),
      #"isActive" = r[#"isActive"]?,
      #"strength" = if r[#"strength"]? = null then null else Ratio.ApplySchema(r[#"strength"])
    ],

  MedicationKnowledge_ingredient_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationKnowledge_cost.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"source" = r[#"source"]?,
      #"cost" = if r[#"cost"]? = null then null else Money.ApplySchema(r[#"cost"])
    ],

  MedicationKnowledge_monitoringProgram.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"name" = r[#"name"]?
    ],

  MedicationKnowledge_administrationGuidelines.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"dosage" = if r[#"dosage"]? = null then null else Table.FromRecords(List.Transform(r[#"dosage"], MedicationKnowledge_administrationGuidelines_dosage.ApplySchema)),
      #"indication" = if r[#"indication"]? = null then null else MedicationKnowledge_administrationGuidelines_indication.ApplySchema(r[#"indication"]),
      #"patientCharacteristics" = if r[#"patientCharacteristics"]? = null then null else Table.FromRecords(List.Transform(r[#"patientCharacteristics"], MedicationKnowledge_administrationGuidelines_patientCharacteristics.ApplySchema))
    ],

  MedicationKnowledge_administrationGuidelines_dosage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"dosage" = if r[#"dosage"]? = null then null else Table.FromRecords(List.Transform(r[#"dosage"], Dosage.ApplySchema))
    ],

  MedicationKnowledge_administrationGuidelines_indication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationKnowledge_administrationGuidelines_patientCharacteristics.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"characteristic" = if r[#"characteristic"]? = null then null else MedicationKnowledge_administrationGuidelines_patientCharacteristics_characteristic.ApplySchema(r[#"characteristic"]),
      #"value" = if r[#"value"]? <> null then List.Transform(r[#"value"], each _) else null
    ],

  MedicationKnowledge_administrationGuidelines_patientCharacteristics_characteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"])
    ],

  MedicationKnowledge_medicineClassification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"classification" = if r[#"classification"]? = null then null else Table.FromRecords(List.Transform(r[#"classification"], CodeableConcept.ApplySchema))
    ],

  MedicationKnowledge_packaging.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"])
    ],

  MedicationKnowledge_drugCharacteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = if r[#"value"]? = null then null else MedicationKnowledge_drugCharacteristic_value.ApplySchema(r[#"value"])
    ],

  MedicationKnowledge_drugCharacteristic_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"string" = r[#"string"]?,
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"base64Binary" = r[#"base64Binary"]?
    ],

  MedicationKnowledge_regulatory.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"regulatoryAuthority" = if r[#"regulatoryAuthority"]? = null then null else Reference.ApplySchema(r[#"regulatoryAuthority"]),
      #"substitution" = if r[#"substitution"]? = null then null else Table.FromRecords(List.Transform(r[#"substitution"], MedicationKnowledge_regulatory_substitution.ApplySchema)),
      #"schedule" = if r[#"schedule"]? = null then null else Table.FromRecords(List.Transform(r[#"schedule"], MedicationKnowledge_regulatory_schedule.ApplySchema)),
      #"maxDispense" = if r[#"maxDispense"]? = null then null else MedicationKnowledge_regulatory_maxDispense.ApplySchema(r[#"maxDispense"])
    ],

  MedicationKnowledge_regulatory_substitution.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"allowed" = r[#"allowed"]?
    ],

  MedicationKnowledge_regulatory_schedule.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"schedule" = if r[#"schedule"]? = null then null else CodeableConcept.ApplySchema(r[#"schedule"])
    ],

  MedicationKnowledge_regulatory_maxDispense.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"period" = if r[#"period"]? = null then null else Duration.ApplySchema(r[#"period"])
    ],

  MedicationKnowledge_kinetics.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"areaUnderCurve" = if r[#"areaUnderCurve"]? = null then null else Table.FromRecords(List.Transform(r[#"areaUnderCurve"], Quantity.ApplySchema)),
      #"lethalDose50" = if r[#"lethalDose50"]? = null then null else Table.FromRecords(List.Transform(r[#"lethalDose50"], Quantity.ApplySchema)),
      #"halfLifePeriod" = if r[#"halfLifePeriod"]? = null then null else Duration.ApplySchema(r[#"halfLifePeriod"])
    ],

  MedicationRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"intent" = r[#"intent"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"priority" = r[#"priority"]?,
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"reported" = if r[#"reported"]? = null then null else MedicationRequest_reported.ApplySchema(r[#"reported"]),
      #"medication" = if r[#"medication"]? = null then null else MedicationRequest_medication.ApplySchema(r[#"medication"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"supportingInformation" = if r[#"supportingInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInformation"], Reference.ApplySchema)),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"performerType" = if r[#"performerType"]? = null then null else CodeableConcept.ApplySchema(r[#"performerType"]),
      #"recorder" = if r[#"recorder"]? = null then null else Reference.ApplySchema(r[#"recorder"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"groupIdentifier" = if r[#"groupIdentifier"]? = null then null else Identifier.ApplySchema(r[#"groupIdentifier"]),
      #"courseOfTherapyType" = if r[#"courseOfTherapyType"]? = null then null else CodeableConcept.ApplySchema(r[#"courseOfTherapyType"]),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else Table.FromRecords(List.Transform(r[#"dosageInstruction"], Dosage.ApplySchema)),
      #"dispenseRequest" = if r[#"dispenseRequest"]? = null then null else MedicationRequest_dispenseRequest.ApplySchema(r[#"dispenseRequest"]),
      #"substitution" = if r[#"substitution"]? = null then null else MedicationRequest_substitution.ApplySchema(r[#"substitution"]),
      #"priorPrescription" = if r[#"priorPrescription"]? = null then null else Reference.ApplySchema(r[#"priorPrescription"]),
      #"detectedIssue" = if r[#"detectedIssue"]? = null then null else Table.FromRecords(List.Transform(r[#"detectedIssue"], Reference.ApplySchema)),
      #"eventHistory" = if r[#"eventHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"eventHistory"], Reference.ApplySchema))
    ],

  MedicationRequest_reported.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationRequest_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationRequest_dispenseRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"initialFill" = if r[#"initialFill"]? = null then null else MedicationRequest_dispenseRequest_initialFill.ApplySchema(r[#"initialFill"]),
      #"dispenseInterval" = if r[#"dispenseInterval"]? = null then null else Duration.ApplySchema(r[#"dispenseInterval"]),
      #"validityPeriod" = if r[#"validityPeriod"]? = null then null else Period.ApplySchema(r[#"validityPeriod"]),
      #"numberOfRepeatsAllowed" = r[#"numberOfRepeatsAllowed"]?,
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"expectedSupplyDuration" = if r[#"expectedSupplyDuration"]? = null then null else Duration.ApplySchema(r[#"expectedSupplyDuration"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"])
    ],

  MedicationRequest_dispenseRequest_initialFill.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"duration" = if r[#"duration"]? = null then null else Duration.ApplySchema(r[#"duration"])
    ],

  MedicationRequest_substitution.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"allowed" = if r[#"allowed"]? = null then null else MedicationRequest_substitution_allowed.ApplySchema(r[#"allowed"]),
      #"reason" = if r[#"reason"]? = null then null else CodeableConcept.ApplySchema(r[#"reason"])
    ],

  MedicationRequest_substitution_allowed.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  MedicationStatement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else Table.FromRecords(List.Transform(r[#"statusReason"], CodeableConcept.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"medication" = if r[#"medication"]? = null then null else MedicationStatement_medication.ApplySchema(r[#"medication"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"context" = if r[#"context"]? = null then null else Reference.ApplySchema(r[#"context"]),
      #"effective" = if r[#"effective"]? = null then null else MedicationStatement_effective.ApplySchema(r[#"effective"]),
      #"dateAsserted" = if r[#"dateAsserted"]? <> null then DateTimeZone.From(r[#"dateAsserted"]) else null,
      #"informationSource" = if r[#"informationSource"]? = null then null else Reference.ApplySchema(r[#"informationSource"]),
      #"derivedFrom" = if r[#"derivedFrom"]? = null then null else Table.FromRecords(List.Transform(r[#"derivedFrom"], Reference.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"dosage" = if r[#"dosage"]? = null then null else Table.FromRecords(List.Transform(r[#"dosage"], Dosage.ApplySchema))
    ],

  MedicationStatement_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicationStatement_effective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  MedicinalProduct.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"domain" = if r[#"domain"]? = null then null else Coding.ApplySchema(r[#"domain"]),
      #"combinedPharmaceuticalDoseForm" = if r[#"combinedPharmaceuticalDoseForm"]? = null then null else CodeableConcept.ApplySchema(r[#"combinedPharmaceuticalDoseForm"]),
      #"legalStatusOfSupply" = if r[#"legalStatusOfSupply"]? = null then null else CodeableConcept.ApplySchema(r[#"legalStatusOfSupply"]),
      #"additionalMonitoringIndicator" = if r[#"additionalMonitoringIndicator"]? = null then null else CodeableConcept.ApplySchema(r[#"additionalMonitoringIndicator"]),
      #"specialMeasures" = if r[#"specialMeasures"]? <> null then List.Transform(r[#"specialMeasures"], each _) else null,
      #"paediatricUseIndicator" = if r[#"paediatricUseIndicator"]? = null then null else CodeableConcept.ApplySchema(r[#"paediatricUseIndicator"]),
      #"productClassification" = if r[#"productClassification"]? = null then null else Table.FromRecords(List.Transform(r[#"productClassification"], CodeableConcept.ApplySchema)),
      #"marketingStatus" = if r[#"marketingStatus"]? = null then null else Table.FromRecords(List.Transform(r[#"marketingStatus"], MarketingStatus.ApplySchema)),
      #"pharmaceuticalProduct" = if r[#"pharmaceuticalProduct"]? = null then null else Table.FromRecords(List.Transform(r[#"pharmaceuticalProduct"], Reference.ApplySchema)),
      #"packagedMedicinalProduct" = if r[#"packagedMedicinalProduct"]? = null then null else Table.FromRecords(List.Transform(r[#"packagedMedicinalProduct"], Reference.ApplySchema)),
      #"attachedDocument" = if r[#"attachedDocument"]? = null then null else Table.FromRecords(List.Transform(r[#"attachedDocument"], Reference.ApplySchema)),
      #"masterFile" = if r[#"masterFile"]? = null then null else Table.FromRecords(List.Transform(r[#"masterFile"], Reference.ApplySchema)),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], Reference.ApplySchema)),
      #"clinicalTrial" = if r[#"clinicalTrial"]? = null then null else Table.FromRecords(List.Transform(r[#"clinicalTrial"], Reference.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], MedicinalProduct_name.ApplySchema)),
      #"crossReference" = if r[#"crossReference"]? = null then null else Table.FromRecords(List.Transform(r[#"crossReference"], Identifier.ApplySchema)),
      #"manufacturingBusinessOperation" = if r[#"manufacturingBusinessOperation"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturingBusinessOperation"], MedicinalProduct_manufacturingBusinessOperation.ApplySchema)),
      #"specialDesignation" = if r[#"specialDesignation"]? = null then null else Table.FromRecords(List.Transform(r[#"specialDesignation"], MedicinalProduct_specialDesignation.ApplySchema))
    ],

  MedicinalProduct_name.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"productName" = r[#"productName"]?,
      #"namePart" = if r[#"namePart"]? = null then null else Table.FromRecords(List.Transform(r[#"namePart"], MedicinalProduct_name_namePart.ApplySchema)),
      #"countryLanguage" = if r[#"countryLanguage"]? = null then null else Table.FromRecords(List.Transform(r[#"countryLanguage"], MedicinalProduct_name_countryLanguage.ApplySchema))
    ],

  MedicinalProduct_name_namePart.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"part" = r[#"part"]?,
      #"type" = if r[#"type"]? = null then null else Coding.ApplySchema(r[#"type"])
    ],

  MedicinalProduct_name_countryLanguage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"country" = if r[#"country"]? = null then null else CodeableConcept.ApplySchema(r[#"country"]),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else CodeableConcept.ApplySchema(r[#"jurisdiction"]),
      #"language" = if r[#"language"]? = null then null else CodeableConcept.ApplySchema(r[#"language"])
    ],

  MedicinalProduct_manufacturingBusinessOperation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operationType" = if r[#"operationType"]? = null then null else CodeableConcept.ApplySchema(r[#"operationType"]),
      #"authorisationReferenceNumber" = if r[#"authorisationReferenceNumber"]? = null then null else Identifier.ApplySchema(r[#"authorisationReferenceNumber"]),
      #"effectiveDate" = if r[#"effectiveDate"]? <> null then DateTimeZone.From(r[#"effectiveDate"]) else null,
      #"confidentialityIndicator" = if r[#"confidentialityIndicator"]? = null then null else CodeableConcept.ApplySchema(r[#"confidentialityIndicator"]),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturer"], Reference.ApplySchema)),
      #"regulator" = if r[#"regulator"]? = null then null else Reference.ApplySchema(r[#"regulator"])
    ],

  MedicinalProduct_specialDesignation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"intendedUse" = if r[#"intendedUse"]? = null then null else CodeableConcept.ApplySchema(r[#"intendedUse"]),
      #"indication" = if r[#"indication"]? = null then null else MedicinalProduct_specialDesignation_indication.ApplySchema(r[#"indication"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"species" = if r[#"species"]? = null then null else CodeableConcept.ApplySchema(r[#"species"])
    ],

  MedicinalProduct_specialDesignation_indication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicinalProductAuthorization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"country" = if r[#"country"]? = null then null else Table.FromRecords(List.Transform(r[#"country"], CodeableConcept.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"statusDate" = if r[#"statusDate"]? <> null then DateTimeZone.From(r[#"statusDate"]) else null,
      #"restoreDate" = if r[#"restoreDate"]? <> null then DateTimeZone.From(r[#"restoreDate"]) else null,
      #"validityPeriod" = if r[#"validityPeriod"]? = null then null else Period.ApplySchema(r[#"validityPeriod"]),
      #"dataExclusivityPeriod" = if r[#"dataExclusivityPeriod"]? = null then null else Period.ApplySchema(r[#"dataExclusivityPeriod"]),
      #"dateOfFirstAuthorization" = if r[#"dateOfFirstAuthorization"]? <> null then DateTimeZone.From(r[#"dateOfFirstAuthorization"]) else null,
      #"internationalBirthDate" = if r[#"internationalBirthDate"]? <> null then DateTimeZone.From(r[#"internationalBirthDate"]) else null,
      #"legalBasis" = if r[#"legalBasis"]? = null then null else CodeableConcept.ApplySchema(r[#"legalBasis"]),
      #"jurisdictionalAuthorization" = if r[#"jurisdictionalAuthorization"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdictionalAuthorization"], MedicinalProductAuthorization_jurisdictionalAuthorization.ApplySchema)),
      #"holder" = if r[#"holder"]? = null then null else Reference.ApplySchema(r[#"holder"]),
      #"regulator" = if r[#"regulator"]? = null then null else Reference.ApplySchema(r[#"regulator"]),
      #"procedure" = if r[#"procedure"]? = null then null else MedicinalProductAuthorization_procedure.ApplySchema(r[#"procedure"])
    ],

  MedicinalProductAuthorization_jurisdictionalAuthorization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"country" = if r[#"country"]? = null then null else CodeableConcept.ApplySchema(r[#"country"]),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"legalStatusOfSupply" = if r[#"legalStatusOfSupply"]? = null then null else CodeableConcept.ApplySchema(r[#"legalStatusOfSupply"]),
      #"validityPeriod" = if r[#"validityPeriod"]? = null then null else Period.ApplySchema(r[#"validityPeriod"])
    ],

  MedicinalProductAuthorization_procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"date" = if r[#"date"]? = null then null else MedicinalProductAuthorization_procedure_date.ApplySchema(r[#"date"]),
      #"application" = if r[#"application"]? = null then null else Table.FromRecords(List.Transform(r[#"application"], @MedicinalProductAuthorization_procedure.ApplySchema))
    ],

  MedicinalProductAuthorization_procedure_date.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  MedicinalProductContraindication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"disease" = if r[#"disease"]? = null then null else CodeableConcept.ApplySchema(r[#"disease"]),
      #"diseaseStatus" = if r[#"diseaseStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"diseaseStatus"]),
      #"comorbidity" = if r[#"comorbidity"]? = null then null else Table.FromRecords(List.Transform(r[#"comorbidity"], CodeableConcept.ApplySchema)),
      #"therapeuticIndication" = if r[#"therapeuticIndication"]? = null then null else Table.FromRecords(List.Transform(r[#"therapeuticIndication"], Reference.ApplySchema)),
      #"otherTherapy" = if r[#"otherTherapy"]? = null then null else Table.FromRecords(List.Transform(r[#"otherTherapy"], MedicinalProductContraindication_otherTherapy.ApplySchema)),
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], Population.ApplySchema))
    ],

  MedicinalProductContraindication_otherTherapy.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"therapyRelationshipType" = if r[#"therapyRelationshipType"]? = null then null else CodeableConcept.ApplySchema(r[#"therapyRelationshipType"]),
      #"medication" = if r[#"medication"]? = null then null else MedicinalProductContraindication_otherTherapy_medication.ApplySchema(r[#"medication"])
    ],

  MedicinalProductContraindication_otherTherapy_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicinalProductIndication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"diseaseSymptomProcedure" = if r[#"diseaseSymptomProcedure"]? = null then null else CodeableConcept.ApplySchema(r[#"diseaseSymptomProcedure"]),
      #"diseaseStatus" = if r[#"diseaseStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"diseaseStatus"]),
      #"comorbidity" = if r[#"comorbidity"]? = null then null else Table.FromRecords(List.Transform(r[#"comorbidity"], CodeableConcept.ApplySchema)),
      #"intendedEffect" = if r[#"intendedEffect"]? = null then null else CodeableConcept.ApplySchema(r[#"intendedEffect"]),
      #"duration" = if r[#"duration"]? = null then null else Quantity.ApplySchema(r[#"duration"]),
      #"otherTherapy" = if r[#"otherTherapy"]? = null then null else Table.FromRecords(List.Transform(r[#"otherTherapy"], MedicinalProductIndication_otherTherapy.ApplySchema)),
      #"undesirableEffect" = if r[#"undesirableEffect"]? = null then null else Table.FromRecords(List.Transform(r[#"undesirableEffect"], Reference.ApplySchema)),
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], Population.ApplySchema))
    ],

  MedicinalProductIndication_otherTherapy.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"therapyRelationshipType" = if r[#"therapyRelationshipType"]? = null then null else CodeableConcept.ApplySchema(r[#"therapyRelationshipType"]),
      #"medication" = if r[#"medication"]? = null then null else MedicinalProductIndication_otherTherapy_medication.ApplySchema(r[#"medication"])
    ],

  MedicinalProductIndication_otherTherapy_medication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  MedicinalProductIngredient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"allergenicIndicator" = r[#"allergenicIndicator"]?,
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturer"], Reference.ApplySchema)),
      #"specifiedSubstance" = if r[#"specifiedSubstance"]? = null then null else Table.FromRecords(List.Transform(r[#"specifiedSubstance"], MedicinalProductIngredient_specifiedSubstance.ApplySchema)),
      #"substance" = if r[#"substance"]? = null then null else MedicinalProductIngredient_substance.ApplySchema(r[#"substance"])
    ],

  MedicinalProductIngredient_specifiedSubstance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"group" = if r[#"group"]? = null then null else CodeableConcept.ApplySchema(r[#"group"]),
      #"confidentiality" = if r[#"confidentiality"]? = null then null else CodeableConcept.ApplySchema(r[#"confidentiality"]),
      #"strength" = if r[#"strength"]? = null then null else Table.FromRecords(List.Transform(r[#"strength"], MedicinalProductIngredient_specifiedSubstance_strength.ApplySchema))
    ],

  MedicinalProductIngredient_specifiedSubstance_strength.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"presentation" = if r[#"presentation"]? = null then null else Ratio.ApplySchema(r[#"presentation"]),
      #"presentationLowLimit" = if r[#"presentationLowLimit"]? = null then null else Ratio.ApplySchema(r[#"presentationLowLimit"]),
      #"concentration" = if r[#"concentration"]? = null then null else Ratio.ApplySchema(r[#"concentration"]),
      #"concentrationLowLimit" = if r[#"concentrationLowLimit"]? = null then null else Ratio.ApplySchema(r[#"concentrationLowLimit"]),
      #"measurementPoint" = r[#"measurementPoint"]?,
      #"country" = if r[#"country"]? = null then null else Table.FromRecords(List.Transform(r[#"country"], CodeableConcept.ApplySchema)),
      #"referenceStrength" = if r[#"referenceStrength"]? = null then null else Table.FromRecords(List.Transform(r[#"referenceStrength"], MedicinalProductIngredient_specifiedSubstance_strength_referenceStrength.ApplySchema))
    ],

  MedicinalProductIngredient_specifiedSubstance_strength_referenceStrength.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"substance" = if r[#"substance"]? = null then null else CodeableConcept.ApplySchema(r[#"substance"]),
      #"strength" = if r[#"strength"]? = null then null else Ratio.ApplySchema(r[#"strength"]),
      #"strengthLowLimit" = if r[#"strengthLowLimit"]? = null then null else Ratio.ApplySchema(r[#"strengthLowLimit"]),
      #"measurementPoint" = r[#"measurementPoint"]?,
      #"country" = if r[#"country"]? = null then null else Table.FromRecords(List.Transform(r[#"country"], CodeableConcept.ApplySchema))
    ],

  MedicinalProductIngredient_substance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"strength" = if r[#"strength"]? = null then null else Table.FromRecords(List.Transform(r[#"strength"], MedicinalProductIngredient_specifiedSubstance_strength.ApplySchema))
    ],

  MedicinalProductInteraction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"description" = r[#"description"]?,
      #"interactant" = if r[#"interactant"]? = null then null else Table.FromRecords(List.Transform(r[#"interactant"], MedicinalProductInteraction_interactant.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"effect" = if r[#"effect"]? = null then null else CodeableConcept.ApplySchema(r[#"effect"]),
      #"incidence" = if r[#"incidence"]? = null then null else CodeableConcept.ApplySchema(r[#"incidence"]),
      #"management" = if r[#"management"]? = null then null else CodeableConcept.ApplySchema(r[#"management"])
    ],

  MedicinalProductInteraction_interactant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else MedicinalProductInteraction_interactant_item.ApplySchema(r[#"item"])
    ],

  MedicinalProductInteraction_interactant_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  MedicinalProductManufactured.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"manufacturedDoseForm" = if r[#"manufacturedDoseForm"]? = null then null else CodeableConcept.ApplySchema(r[#"manufacturedDoseForm"]),
      #"unitOfPresentation" = if r[#"unitOfPresentation"]? = null then null else CodeableConcept.ApplySchema(r[#"unitOfPresentation"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturer"], Reference.ApplySchema)),
      #"ingredient" = if r[#"ingredient"]? = null then null else Table.FromRecords(List.Transform(r[#"ingredient"], Reference.ApplySchema)),
      #"physicalCharacteristics" = if r[#"physicalCharacteristics"]? = null then null else ProdCharacteristic.ApplySchema(r[#"physicalCharacteristics"]),
      #"otherCharacteristics" = if r[#"otherCharacteristics"]? = null then null else Table.FromRecords(List.Transform(r[#"otherCharacteristics"], CodeableConcept.ApplySchema))
    ],

  MedicinalProductPackaged.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"description" = r[#"description"]?,
      #"legalStatusOfSupply" = if r[#"legalStatusOfSupply"]? = null then null else CodeableConcept.ApplySchema(r[#"legalStatusOfSupply"]),
      #"marketingStatus" = if r[#"marketingStatus"]? = null then null else Table.FromRecords(List.Transform(r[#"marketingStatus"], MarketingStatus.ApplySchema)),
      #"marketingAuthorization" = if r[#"marketingAuthorization"]? = null then null else Reference.ApplySchema(r[#"marketingAuthorization"]),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturer"], Reference.ApplySchema)),
      #"batchIdentifier" = if r[#"batchIdentifier"]? = null then null else Table.FromRecords(List.Transform(r[#"batchIdentifier"], MedicinalProductPackaged_batchIdentifier.ApplySchema)),
      #"packageItem" = if r[#"packageItem"]? = null then null else Table.FromRecords(List.Transform(r[#"packageItem"], MedicinalProductPackaged_packageItem.ApplySchema))
    ],

  MedicinalProductPackaged_batchIdentifier.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"outerPackaging" = if r[#"outerPackaging"]? = null then null else Identifier.ApplySchema(r[#"outerPackaging"]),
      #"immediatePackaging" = if r[#"immediatePackaging"]? = null then null else Identifier.ApplySchema(r[#"immediatePackaging"])
    ],

  MedicinalProductPackaged_packageItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"material" = if r[#"material"]? = null then null else Table.FromRecords(List.Transform(r[#"material"], CodeableConcept.ApplySchema)),
      #"alternateMaterial" = if r[#"alternateMaterial"]? = null then null else Table.FromRecords(List.Transform(r[#"alternateMaterial"], CodeableConcept.ApplySchema)),
      #"device" = if r[#"device"]? = null then null else Table.FromRecords(List.Transform(r[#"device"], Reference.ApplySchema)),
      #"manufacturedItem" = if r[#"manufacturedItem"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturedItem"], Reference.ApplySchema)),
      #"physicalCharacteristics" = if r[#"physicalCharacteristics"]? = null then null else ProdCharacteristic.ApplySchema(r[#"physicalCharacteristics"]),
      #"otherCharacteristics" = if r[#"otherCharacteristics"]? = null then null else Table.FromRecords(List.Transform(r[#"otherCharacteristics"], CodeableConcept.ApplySchema)),
      #"shelfLifeStorage" = if r[#"shelfLifeStorage"]? = null then null else Table.FromRecords(List.Transform(r[#"shelfLifeStorage"], ProductShelfLife.ApplySchema)),
      #"manufacturer" = if r[#"manufacturer"]? = null then null else Table.FromRecords(List.Transform(r[#"manufacturer"], Reference.ApplySchema)),
      #"packageItem" = if r[#"packageItem"]? = null then null else Table.FromRecords(List.Transform(r[#"packageItem"], @MedicinalProductPackaged_packageItem.ApplySchema))
    ],

  MedicinalProductPharmaceutical.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"administrableDoseForm" = if r[#"administrableDoseForm"]? = null then null else CodeableConcept.ApplySchema(r[#"administrableDoseForm"]),
      #"unitOfPresentation" = if r[#"unitOfPresentation"]? = null then null else CodeableConcept.ApplySchema(r[#"unitOfPresentation"]),
      #"ingredient" = if r[#"ingredient"]? = null then null else Table.FromRecords(List.Transform(r[#"ingredient"], Reference.ApplySchema)),
      #"device" = if r[#"device"]? = null then null else Table.FromRecords(List.Transform(r[#"device"], Reference.ApplySchema)),
      #"characteristics" = if r[#"characteristics"]? = null then null else Table.FromRecords(List.Transform(r[#"characteristics"], MedicinalProductPharmaceutical_characteristics.ApplySchema)),
      #"routeOfAdministration" = if r[#"routeOfAdministration"]? = null then null else Table.FromRecords(List.Transform(r[#"routeOfAdministration"], MedicinalProductPharmaceutical_routeOfAdministration.ApplySchema))
    ],

  MedicinalProductPharmaceutical_characteristics.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"])
    ],

  MedicinalProductPharmaceutical_routeOfAdministration.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"firstDose" = if r[#"firstDose"]? = null then null else Quantity.ApplySchema(r[#"firstDose"]),
      #"maxSingleDose" = if r[#"maxSingleDose"]? = null then null else Quantity.ApplySchema(r[#"maxSingleDose"]),
      #"maxDosePerDay" = if r[#"maxDosePerDay"]? = null then null else Quantity.ApplySchema(r[#"maxDosePerDay"]),
      #"maxDosePerTreatmentPeriod" = if r[#"maxDosePerTreatmentPeriod"]? = null then null else Ratio.ApplySchema(r[#"maxDosePerTreatmentPeriod"]),
      #"maxTreatmentPeriod" = if r[#"maxTreatmentPeriod"]? = null then null else Duration.ApplySchema(r[#"maxTreatmentPeriod"]),
      #"targetSpecies" = if r[#"targetSpecies"]? = null then null else Table.FromRecords(List.Transform(r[#"targetSpecies"], MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies.ApplySchema))
    ],

  MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"withdrawalPeriod" = if r[#"withdrawalPeriod"]? = null then null else Table.FromRecords(List.Transform(r[#"withdrawalPeriod"], MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies_withdrawalPeriod.ApplySchema))
    ],

  MedicinalProductPharmaceutical_routeOfAdministration_targetSpecies_withdrawalPeriod.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"tissue" = if r[#"tissue"]? = null then null else CodeableConcept.ApplySchema(r[#"tissue"]),
      #"value" = if r[#"value"]? = null then null else Quantity.ApplySchema(r[#"value"]),
      #"supportingInformation" = r[#"supportingInformation"]?
    ],

  MedicinalProductUndesirableEffect.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subject" = if r[#"subject"]? = null then null else Table.FromRecords(List.Transform(r[#"subject"], Reference.ApplySchema)),
      #"symptomConditionEffect" = if r[#"symptomConditionEffect"]? = null then null else CodeableConcept.ApplySchema(r[#"symptomConditionEffect"]),
      #"classification" = if r[#"classification"]? = null then null else CodeableConcept.ApplySchema(r[#"classification"]),
      #"frequencyOfOccurrence" = if r[#"frequencyOfOccurrence"]? = null then null else CodeableConcept.ApplySchema(r[#"frequencyOfOccurrence"]),
      #"population" = if r[#"population"]? = null then null else Table.FromRecords(List.Transform(r[#"population"], Population.ApplySchema))
    ],

  MessageDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"replaces" = if r[#"replaces"]? <> null then List.Transform(r[#"replaces"], each _) else null,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"base" = r[#"base"]?,
      #"parent" = if r[#"parent"]? <> null then List.Transform(r[#"parent"], each _) else null,
      #"event" = if r[#"event"]? = null then null else MessageDefinition_event.ApplySchema(r[#"event"]),
      #"category" = r[#"category"]?,
      #"focus" = if r[#"focus"]? = null then null else Table.FromRecords(List.Transform(r[#"focus"], MessageDefinition_focus.ApplySchema)),
      #"responseRequired" = r[#"responseRequired"]?,
      #"allowedResponse" = if r[#"allowedResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"allowedResponse"], MessageDefinition_allowedResponse.ApplySchema)),
      #"graph" = if r[#"graph"]? <> null then List.Transform(r[#"graph"], each _) else null
    ],

  MessageDefinition_event.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"uri" = r[#"uri"]?
    ],

  MessageDefinition_focus.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"profile" = r[#"profile"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?
    ],

  MessageDefinition_allowedResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"message" = r[#"message"]?,
      #"situation" = r[#"situation"]?
    ],

  MessageHeader.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"event" = if r[#"event"]? = null then null else MessageHeader_event.ApplySchema(r[#"event"]),
      #"destination" = if r[#"destination"]? = null then null else Table.FromRecords(List.Transform(r[#"destination"], MessageHeader_destination.ApplySchema)),
      #"sender" = if r[#"sender"]? = null then null else Reference.ApplySchema(r[#"sender"]),
      #"enterer" = if r[#"enterer"]? = null then null else Reference.ApplySchema(r[#"enterer"]),
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"source" = if r[#"source"]? = null then null else MessageHeader_source.ApplySchema(r[#"source"]),
      #"responsible" = if r[#"responsible"]? = null then null else Reference.ApplySchema(r[#"responsible"]),
      #"reason" = if r[#"reason"]? = null then null else CodeableConcept.ApplySchema(r[#"reason"]),
      #"response" = if r[#"response"]? = null then null else MessageHeader_response.ApplySchema(r[#"response"]),
      #"focus" = if r[#"focus"]? = null then null else Table.FromRecords(List.Transform(r[#"focus"], Reference.ApplySchema)),
      #"definition" = r[#"definition"]?
    ],

  MessageHeader_event.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"uri" = r[#"uri"]?
    ],

  MessageHeader_destination.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"target" = if r[#"target"]? = null then null else Reference.ApplySchema(r[#"target"]),
      #"endpoint" = r[#"endpoint"]?,
      #"receiver" = if r[#"receiver"]? = null then null else Reference.ApplySchema(r[#"receiver"])
    ],

  MessageHeader_source.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"software" = r[#"software"]?,
      #"version" = r[#"version"]?,
      #"contact" = if r[#"contact"]? = null then null else ContactPoint.ApplySchema(r[#"contact"]),
      #"endpoint" = r[#"endpoint"]?
    ],

  MessageHeader_response.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = r[#"identifier"]?,
      #"code" = r[#"code"]?,
      #"details" = if r[#"details"]? = null then null else Reference.ApplySchema(r[#"details"])
    ],

  MetadataResource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema))
    ],

  MolecularSequence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"type" = r[#"type"]?,
      #"coordinateSystem" = r[#"coordinateSystem"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"specimen" = if r[#"specimen"]? = null then null else Reference.ApplySchema(r[#"specimen"]),
      #"device" = if r[#"device"]? = null then null else Reference.ApplySchema(r[#"device"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"referenceSeq" = if r[#"referenceSeq"]? = null then null else MolecularSequence_referenceSeq.ApplySchema(r[#"referenceSeq"]),
      #"variant" = if r[#"variant"]? = null then null else Table.FromRecords(List.Transform(r[#"variant"], MolecularSequence_variant.ApplySchema)),
      #"observedSeq" = r[#"observedSeq"]?,
      #"quality" = if r[#"quality"]? = null then null else Table.FromRecords(List.Transform(r[#"quality"], MolecularSequence_quality.ApplySchema)),
      #"readCoverage" = r[#"readCoverage"]?,
      #"repository" = if r[#"repository"]? = null then null else Table.FromRecords(List.Transform(r[#"repository"], MolecularSequence_repository.ApplySchema)),
      #"pointer" = if r[#"pointer"]? = null then null else Table.FromRecords(List.Transform(r[#"pointer"], Reference.ApplySchema)),
      #"structureVariant" = if r[#"structureVariant"]? = null then null else Table.FromRecords(List.Transform(r[#"structureVariant"], MolecularSequence_structureVariant.ApplySchema))
    ],

  MolecularSequence_referenceSeq.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"chromosome" = if r[#"chromosome"]? = null then null else CodeableConcept.ApplySchema(r[#"chromosome"]),
      #"genomeBuild" = r[#"genomeBuild"]?,
      #"orientation" = r[#"orientation"]?,
      #"referenceSeqId" = if r[#"referenceSeqId"]? = null then null else CodeableConcept.ApplySchema(r[#"referenceSeqId"]),
      #"referenceSeqPointer" = if r[#"referenceSeqPointer"]? = null then null else Reference.ApplySchema(r[#"referenceSeqPointer"]),
      #"referenceSeqString" = r[#"referenceSeqString"]?,
      #"strand" = r[#"strand"]?,
      #"windowStart" = r[#"windowStart"]?,
      #"windowEnd" = r[#"windowEnd"]?
    ],

  MolecularSequence_variant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"start" = r[#"start"]?,
      #"end" = r[#"end"]?,
      #"observedAllele" = r[#"observedAllele"]?,
      #"referenceAllele" = r[#"referenceAllele"]?,
      #"cigar" = r[#"cigar"]?,
      #"variantPointer" = if r[#"variantPointer"]? = null then null else Reference.ApplySchema(r[#"variantPointer"])
    ],

  MolecularSequence_quality.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"standardSequence" = if r[#"standardSequence"]? = null then null else CodeableConcept.ApplySchema(r[#"standardSequence"]),
      #"start" = r[#"start"]?,
      #"end" = r[#"end"]?,
      #"score" = if r[#"score"]? = null then null else Quantity.ApplySchema(r[#"score"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"truthTP" = r[#"truthTP"]?,
      #"queryTP" = r[#"queryTP"]?,
      #"truthFN" = r[#"truthFN"]?,
      #"queryFP" = r[#"queryFP"]?,
      #"gtFP" = r[#"gtFP"]?,
      #"precision" = r[#"precision"]?,
      #"recall" = r[#"recall"]?,
      #"fScore" = r[#"fScore"]?,
      #"roc" = if r[#"roc"]? = null then null else MolecularSequence_quality_roc.ApplySchema(r[#"roc"])
    ],

  MolecularSequence_quality_roc.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"score" = if r[#"score"]? <> null then List.Transform(r[#"score"], each _) else null,
      #"numTP" = if r[#"numTP"]? <> null then List.Transform(r[#"numTP"], each _) else null,
      #"numFP" = if r[#"numFP"]? <> null then List.Transform(r[#"numFP"], each _) else null,
      #"numFN" = if r[#"numFN"]? <> null then List.Transform(r[#"numFN"], each _) else null,
      #"precision" = if r[#"precision"]? <> null then List.Transform(r[#"precision"], each _) else null,
      #"sensitivity" = if r[#"sensitivity"]? <> null then List.Transform(r[#"sensitivity"], each _) else null,
      #"fMeasure" = if r[#"fMeasure"]? <> null then List.Transform(r[#"fMeasure"], each _) else null
    ],

  MolecularSequence_repository.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"url" = r[#"url"]?,
      #"name" = r[#"name"]?,
      #"datasetId" = r[#"datasetId"]?,
      #"variantsetId" = r[#"variantsetId"]?,
      #"readsetId" = r[#"readsetId"]?
    ],

  MolecularSequence_structureVariant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"variantType" = if r[#"variantType"]? = null then null else CodeableConcept.ApplySchema(r[#"variantType"]),
      #"exact" = r[#"exact"]?,
      #"length" = r[#"length"]?,
      #"outer" = if r[#"outer"]? = null then null else MolecularSequence_structureVariant_outer.ApplySchema(r[#"outer"]),
      #"inner" = if r[#"inner"]? = null then null else MolecularSequence_structureVariant_inner.ApplySchema(r[#"inner"])
    ],

  MolecularSequence_structureVariant_outer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"start" = r[#"start"]?,
      #"end" = r[#"end"]?
    ],

  MolecularSequence_structureVariant_inner.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"start" = r[#"start"]?,
      #"end" = r[#"end"]?
    ],

  NamingSystem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"status" = r[#"status"]?,
      #"kind" = r[#"kind"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"responsible" = r[#"responsible"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"usage" = r[#"usage"]?,
      #"uniqueId" = if r[#"uniqueId"]? = null then null else Table.FromRecords(List.Transform(r[#"uniqueId"], NamingSystem_uniqueId.ApplySchema))
    ],

  NamingSystem_uniqueId.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"value" = r[#"value"]?,
      #"preferred" = r[#"preferred"]?,
      #"comment" = r[#"comment"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  NutritionOrder.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"instantiates" = if r[#"instantiates"]? <> null then List.Transform(r[#"instantiates"], each _) else null,
      #"status" = r[#"status"]?,
      #"intent" = r[#"intent"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"orderer" = if r[#"orderer"]? = null then null else Reference.ApplySchema(r[#"orderer"]),
      #"allergyIntolerance" = if r[#"allergyIntolerance"]? = null then null else Table.FromRecords(List.Transform(r[#"allergyIntolerance"], Reference.ApplySchema)),
      #"foodPreferenceModifier" = if r[#"foodPreferenceModifier"]? = null then null else Table.FromRecords(List.Transform(r[#"foodPreferenceModifier"], CodeableConcept.ApplySchema)),
      #"excludeFoodModifier" = if r[#"excludeFoodModifier"]? = null then null else Table.FromRecords(List.Transform(r[#"excludeFoodModifier"], CodeableConcept.ApplySchema)),
      #"oralDiet" = if r[#"oralDiet"]? = null then null else NutritionOrder_oralDiet.ApplySchema(r[#"oralDiet"]),
      #"supplement" = if r[#"supplement"]? = null then null else Table.FromRecords(List.Transform(r[#"supplement"], NutritionOrder_supplement.ApplySchema)),
      #"enteralFormula" = if r[#"enteralFormula"]? = null then null else NutritionOrder_enteralFormula.ApplySchema(r[#"enteralFormula"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  NutritionOrder_oralDiet.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"schedule" = if r[#"schedule"]? = null then null else Table.FromRecords(List.Transform(r[#"schedule"], Timing.ApplySchema)),
      #"nutrient" = if r[#"nutrient"]? = null then null else Table.FromRecords(List.Transform(r[#"nutrient"], NutritionOrder_oralDiet_nutrient.ApplySchema)),
      #"texture" = if r[#"texture"]? = null then null else Table.FromRecords(List.Transform(r[#"texture"], NutritionOrder_oralDiet_texture.ApplySchema)),
      #"fluidConsistencyType" = if r[#"fluidConsistencyType"]? = null then null else Table.FromRecords(List.Transform(r[#"fluidConsistencyType"], CodeableConcept.ApplySchema)),
      #"instruction" = r[#"instruction"]?
    ],

  NutritionOrder_oralDiet_nutrient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"modifier" = if r[#"modifier"]? = null then null else CodeableConcept.ApplySchema(r[#"modifier"]),
      #"amount" = if r[#"amount"]? = null then null else Quantity.ApplySchema(r[#"amount"])
    ],

  NutritionOrder_oralDiet_texture.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"modifier" = if r[#"modifier"]? = null then null else CodeableConcept.ApplySchema(r[#"modifier"]),
      #"foodType" = if r[#"foodType"]? = null then null else CodeableConcept.ApplySchema(r[#"foodType"])
    ],

  NutritionOrder_supplement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"productName" = r[#"productName"]?,
      #"schedule" = if r[#"schedule"]? = null then null else Table.FromRecords(List.Transform(r[#"schedule"], Timing.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"instruction" = r[#"instruction"]?
    ],

  NutritionOrder_enteralFormula.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"baseFormulaType" = if r[#"baseFormulaType"]? = null then null else CodeableConcept.ApplySchema(r[#"baseFormulaType"]),
      #"baseFormulaProductName" = r[#"baseFormulaProductName"]?,
      #"additiveType" = if r[#"additiveType"]? = null then null else CodeableConcept.ApplySchema(r[#"additiveType"]),
      #"additiveProductName" = r[#"additiveProductName"]?,
      #"caloricDensity" = if r[#"caloricDensity"]? = null then null else Quantity.ApplySchema(r[#"caloricDensity"]),
      #"routeofAdministration" = if r[#"routeofAdministration"]? = null then null else CodeableConcept.ApplySchema(r[#"routeofAdministration"]),
      #"administration" = if r[#"administration"]? = null then null else Table.FromRecords(List.Transform(r[#"administration"], NutritionOrder_enteralFormula_administration.ApplySchema)),
      #"maxVolumeToDeliver" = if r[#"maxVolumeToDeliver"]? = null then null else Quantity.ApplySchema(r[#"maxVolumeToDeliver"]),
      #"administrationInstruction" = r[#"administrationInstruction"]?
    ],

  NutritionOrder_enteralFormula_administration.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"schedule" = if r[#"schedule"]? = null then null else Timing.ApplySchema(r[#"schedule"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"rate" = if r[#"rate"]? = null then null else NutritionOrder_enteralFormula_administration_rate.ApplySchema(r[#"rate"])
    ],

  NutritionOrder_enteralFormula_administration_rate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"])
    ],

  Observation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"focus" = if r[#"focus"]? = null then null else Table.FromRecords(List.Transform(r[#"focus"], Reference.ApplySchema)),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"effective" = if r[#"effective"]? = null then null else Observation_effective.ApplySchema(r[#"effective"]),
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Reference.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Observation_value.ApplySchema(r[#"value"]),
      #"dataAbsentReason" = if r[#"dataAbsentReason"]? = null then null else CodeableConcept.ApplySchema(r[#"dataAbsentReason"]),
      #"interpretation" = if r[#"interpretation"]? = null then null else Table.FromRecords(List.Transform(r[#"interpretation"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"specimen" = if r[#"specimen"]? = null then null else Reference.ApplySchema(r[#"specimen"]),
      #"device" = if r[#"device"]? = null then null else Reference.ApplySchema(r[#"device"]),
      #"referenceRange" = if r[#"referenceRange"]? = null then null else Table.FromRecords(List.Transform(r[#"referenceRange"], Observation_referenceRange.ApplySchema)),
      #"hasMember" = if r[#"hasMember"]? = null then null else Table.FromRecords(List.Transform(r[#"hasMember"], Reference.ApplySchema)),
      #"derivedFrom" = if r[#"derivedFrom"]? = null then null else Table.FromRecords(List.Transform(r[#"derivedFrom"], Reference.ApplySchema)),
      #"component" = if r[#"component"]? = null then null else Table.FromRecords(List.Transform(r[#"component"], Observation_component.ApplySchema))
    ],

  Observation_effective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null
    ],

  Observation_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"string" = r[#"string"]?,
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?,
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Observation_referenceRange.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"low" = if r[#"low"]? = null then null else Quantity.ApplySchema(r[#"low"]),
      #"high" = if r[#"high"]? = null then null else Quantity.ApplySchema(r[#"high"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"appliesTo" = if r[#"appliesTo"]? = null then null else Table.FromRecords(List.Transform(r[#"appliesTo"], CodeableConcept.ApplySchema)),
      #"age" = if r[#"age"]? = null then null else Range.ApplySchema(r[#"age"]),
      #"text" = r[#"text"]?
    ],

  Observation_component.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else Observation_component_value.ApplySchema(r[#"value"]),
      #"dataAbsentReason" = if r[#"dataAbsentReason"]? = null then null else CodeableConcept.ApplySchema(r[#"dataAbsentReason"]),
      #"interpretation" = if r[#"interpretation"]? = null then null else Table.FromRecords(List.Transform(r[#"interpretation"], CodeableConcept.ApplySchema)),
      #"referenceRange" = if r[#"referenceRange"]? = null then null else Table.FromRecords(List.Transform(r[#"referenceRange"], Observation_referenceRange.ApplySchema))
    ],

  Observation_component_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"string" = r[#"string"]?,
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?,
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  ObservationDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"permittedDataType" = if r[#"permittedDataType"]? <> null then List.Transform(r[#"permittedDataType"], each _) else null,
      #"multipleResultsAllowed" = r[#"multipleResultsAllowed"]?,
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"preferredReportName" = r[#"preferredReportName"]?,
      #"quantitativeDetails" = if r[#"quantitativeDetails"]? = null then null else ObservationDefinition_quantitativeDetails.ApplySchema(r[#"quantitativeDetails"]),
      #"qualifiedInterval" = if r[#"qualifiedInterval"]? = null then null else Table.FromRecords(List.Transform(r[#"qualifiedInterval"], ObservationDefinition_qualifiedInterval.ApplySchema)),
      #"validCodedValueSet" = if r[#"validCodedValueSet"]? = null then null else Reference.ApplySchema(r[#"validCodedValueSet"]),
      #"normalCodedValueSet" = if r[#"normalCodedValueSet"]? = null then null else Reference.ApplySchema(r[#"normalCodedValueSet"]),
      #"abnormalCodedValueSet" = if r[#"abnormalCodedValueSet"]? = null then null else Reference.ApplySchema(r[#"abnormalCodedValueSet"]),
      #"criticalCodedValueSet" = if r[#"criticalCodedValueSet"]? = null then null else Reference.ApplySchema(r[#"criticalCodedValueSet"])
    ],

  ObservationDefinition_quantitativeDetails.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"customaryUnit" = if r[#"customaryUnit"]? = null then null else CodeableConcept.ApplySchema(r[#"customaryUnit"]),
      #"unit" = if r[#"unit"]? = null then null else CodeableConcept.ApplySchema(r[#"unit"]),
      #"conversionFactor" = r[#"conversionFactor"]?,
      #"decimalPrecision" = r[#"decimalPrecision"]?
    ],

  ObservationDefinition_qualifiedInterval.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = r[#"category"]?,
      #"range" = if r[#"range"]? = null then null else Range.ApplySchema(r[#"range"]),
      #"context" = if r[#"context"]? = null then null else CodeableConcept.ApplySchema(r[#"context"]),
      #"appliesTo" = if r[#"appliesTo"]? = null then null else Table.FromRecords(List.Transform(r[#"appliesTo"], CodeableConcept.ApplySchema)),
      #"gender" = r[#"gender"]?,
      #"age" = if r[#"age"]? = null then null else Range.ApplySchema(r[#"age"]),
      #"gestationalAge" = if r[#"gestationalAge"]? = null then null else Range.ApplySchema(r[#"gestationalAge"]),
      #"condition" = r[#"condition"]?
    ],

  OperationDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"kind" = r[#"kind"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"affectsState" = r[#"affectsState"]?,
      #"code" = r[#"code"]?,
      #"comment" = r[#"comment"]?,
      #"base" = r[#"base"]?,
      #"resource" = if r[#"resource"]? <> null then List.Transform(r[#"resource"], each _) else null,
      #"system" = r[#"system"]?,
      #"type" = r[#"type"]?,
      #"instance" = r[#"instance"]?,
      #"inputProfile" = r[#"inputProfile"]?,
      #"outputProfile" = r[#"outputProfile"]?,
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], OperationDefinition_parameter.ApplySchema)),
      #"overload" = if r[#"overload"]? = null then null else Table.FromRecords(List.Transform(r[#"overload"], OperationDefinition_overload.ApplySchema))
    ],

  OperationDefinition_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"use" = r[#"use"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?,
      #"documentation" = r[#"documentation"]?,
      #"type" = r[#"type"]?,
      #"targetProfile" = if r[#"targetProfile"]? <> null then List.Transform(r[#"targetProfile"], each _) else null,
      #"searchType" = r[#"searchType"]?,
      #"binding" = if r[#"binding"]? = null then null else OperationDefinition_parameter_binding.ApplySchema(r[#"binding"]),
      #"referencedFrom" = if r[#"referencedFrom"]? = null then null else Table.FromRecords(List.Transform(r[#"referencedFrom"], OperationDefinition_parameter_referencedFrom.ApplySchema)),
      #"part" = if r[#"part"]? = null then null else Table.FromRecords(List.Transform(r[#"part"], @OperationDefinition_parameter.ApplySchema))
    ],

  OperationDefinition_parameter_binding.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"strength" = r[#"strength"]?,
      #"valueSet" = r[#"valueSet"]?
    ],

  OperationDefinition_parameter_referencedFrom.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"source" = r[#"source"]?,
      #"sourceId" = r[#"sourceId"]?
    ],

  OperationDefinition_overload.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"parameterName" = if r[#"parameterName"]? <> null then List.Transform(r[#"parameterName"], each _) else null,
      #"comment" = r[#"comment"]?
    ],

  OperationOutcome.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"issue" = if r[#"issue"]? = null then null else Table.FromRecords(List.Transform(r[#"issue"], OperationOutcome_issue.ApplySchema))
    ],

  OperationOutcome_issue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"severity" = r[#"severity"]?,
      #"code" = r[#"code"]?,
      #"details" = if r[#"details"]? = null then null else CodeableConcept.ApplySchema(r[#"details"]),
      #"diagnostics" = r[#"diagnostics"]?,
      #"location" = if r[#"location"]? <> null then List.Transform(r[#"location"], each _) else null,
      #"expression" = if r[#"expression"]? <> null then List.Transform(r[#"expression"], each _) else null
    ],

  Organization.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"name" = r[#"name"]?,
      #"alias" = if r[#"alias"]? <> null then List.Transform(r[#"alias"], each _) else null,
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Table.FromRecords(List.Transform(r[#"address"], Address.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Reference.ApplySchema(r[#"partOf"]),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], Organization_contact.ApplySchema)),
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema))
    ],

  Organization_contact.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"purpose" = if r[#"purpose"]? = null then null else CodeableConcept.ApplySchema(r[#"purpose"]),
      #"name" = if r[#"name"]? = null then null else HumanName.ApplySchema(r[#"name"]),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Address.ApplySchema(r[#"address"])
    ],

  OrganizationAffiliation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"organization" = if r[#"organization"]? = null then null else Reference.ApplySchema(r[#"organization"]),
      #"participatingOrganization" = if r[#"participatingOrganization"]? = null then null else Reference.ApplySchema(r[#"participatingOrganization"]),
      #"network" = if r[#"network"]? = null then null else Table.FromRecords(List.Transform(r[#"network"], Reference.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Table.FromRecords(List.Transform(r[#"location"], Reference.ApplySchema)),
      #"healthcareService" = if r[#"healthcareService"]? = null then null else Table.FromRecords(List.Transform(r[#"healthcareService"], Reference.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema))
    ],

  Parameters.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], Parameters_parameter.ApplySchema))
    ],

  Parameters_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"value" = if r[#"value"]? = null then null else Parameters_parameter_value.ApplySchema(r[#"value"]),
      #"resource" = if r[#"resource"]? = null then null else Resource.ApplySchema(r[#"resource"]),
      #"part" = if r[#"part"]? = null then null else Table.FromRecords(List.Transform(r[#"part"], @Parameters_parameter.ApplySchema))
    ],

  Parameters_parameter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  Patient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], HumanName.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"gender" = r[#"gender"]?,
      #"birthDate" = if r[#"birthDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"birthDate"]) else null,
      #"deceased" = if r[#"deceased"]? = null then null else Patient_deceased.ApplySchema(r[#"deceased"]),
      #"address" = if r[#"address"]? = null then null else Table.FromRecords(List.Transform(r[#"address"], Address.ApplySchema)),
      #"maritalStatus" = if r[#"maritalStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"maritalStatus"]),
      #"multipleBirth" = if r[#"multipleBirth"]? = null then null else Patient_multipleBirth.ApplySchema(r[#"multipleBirth"]),
      #"photo" = if r[#"photo"]? = null then null else Table.FromRecords(List.Transform(r[#"photo"], Attachment.ApplySchema)),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], Patient_contact.ApplySchema)),
      #"communication" = if r[#"communication"]? = null then null else Table.FromRecords(List.Transform(r[#"communication"], Patient_communication.ApplySchema)),
      #"generalPractitioner" = if r[#"generalPractitioner"]? = null then null else Table.FromRecords(List.Transform(r[#"generalPractitioner"], Reference.ApplySchema)),
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Reference.ApplySchema(r[#"managingOrganization"]),
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], Patient_link.ApplySchema))
    ],

  Patient_deceased.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  Patient_multipleBirth.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?
    ],

  Patient_contact.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"relationship" = if r[#"relationship"]? = null then null else Table.FromRecords(List.Transform(r[#"relationship"], CodeableConcept.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else HumanName.ApplySchema(r[#"name"]),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Address.ApplySchema(r[#"address"]),
      #"gender" = r[#"gender"]?,
      #"organization" = if r[#"organization"]? = null then null else Reference.ApplySchema(r[#"organization"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"])
    ],

  Patient_communication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"language" = if r[#"language"]? = null then null else CodeableConcept.ApplySchema(r[#"language"]),
      #"preferred" = r[#"preferred"]?
    ],

  Patient_link.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"other" = if r[#"other"]? = null then null else Reference.ApplySchema(r[#"other"]),
      #"type" = r[#"type"]?
    ],

  PaymentNotice.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"response" = if r[#"response"]? = null then null else Reference.ApplySchema(r[#"response"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"provider" = if r[#"provider"]? = null then null else Reference.ApplySchema(r[#"provider"]),
      #"payment" = if r[#"payment"]? = null then null else Reference.ApplySchema(r[#"payment"]),
      #"paymentDate" = if r[#"paymentDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"paymentDate"]) else null,
      #"payee" = if r[#"payee"]? = null then null else Reference.ApplySchema(r[#"payee"]),
      #"recipient" = if r[#"recipient"]? = null then null else Reference.ApplySchema(r[#"recipient"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"]),
      #"paymentStatus" = if r[#"paymentStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"paymentStatus"])
    ],

  PaymentReconciliation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"paymentIssuer" = if r[#"paymentIssuer"]? = null then null else Reference.ApplySchema(r[#"paymentIssuer"]),
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"requestor" = if r[#"requestor"]? = null then null else Reference.ApplySchema(r[#"requestor"]),
      #"outcome" = r[#"outcome"]?,
      #"disposition" = r[#"disposition"]?,
      #"paymentDate" = if r[#"paymentDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"paymentDate"]) else null,
      #"paymentAmount" = if r[#"paymentAmount"]? = null then null else Money.ApplySchema(r[#"paymentAmount"]),
      #"paymentIdentifier" = if r[#"paymentIdentifier"]? = null then null else Identifier.ApplySchema(r[#"paymentIdentifier"]),
      #"detail" = if r[#"detail"]? = null then null else Table.FromRecords(List.Transform(r[#"detail"], PaymentReconciliation_detail.ApplySchema)),
      #"formCode" = if r[#"formCode"]? = null then null else CodeableConcept.ApplySchema(r[#"formCode"]),
      #"processNote" = if r[#"processNote"]? = null then null else Table.FromRecords(List.Transform(r[#"processNote"], PaymentReconciliation_processNote.ApplySchema))
    ],

  PaymentReconciliation_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"predecessor" = if r[#"predecessor"]? = null then null else Identifier.ApplySchema(r[#"predecessor"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"request" = if r[#"request"]? = null then null else Reference.ApplySchema(r[#"request"]),
      #"submitter" = if r[#"submitter"]? = null then null else Reference.ApplySchema(r[#"submitter"]),
      #"response" = if r[#"response"]? = null then null else Reference.ApplySchema(r[#"response"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"responsible" = if r[#"responsible"]? = null then null else Reference.ApplySchema(r[#"responsible"]),
      #"payee" = if r[#"payee"]? = null then null else Reference.ApplySchema(r[#"payee"]),
      #"amount" = if r[#"amount"]? = null then null else Money.ApplySchema(r[#"amount"])
    ],

  PaymentReconciliation_processNote.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"text" = r[#"text"]?
    ],

  Person.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], HumanName.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"gender" = r[#"gender"]?,
      #"birthDate" = if r[#"birthDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"birthDate"]) else null,
      #"address" = if r[#"address"]? = null then null else Table.FromRecords(List.Transform(r[#"address"], Address.ApplySchema)),
      #"photo" = if r[#"photo"]? = null then null else Attachment.ApplySchema(r[#"photo"]),
      #"managingOrganization" = if r[#"managingOrganization"]? = null then null else Reference.ApplySchema(r[#"managingOrganization"]),
      #"active" = r[#"active"]?,
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], Person_link.ApplySchema))
    ],

  Person_link.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Reference.ApplySchema(r[#"target"]),
      #"assurance" = r[#"assurance"]?
    ],

  PlanDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else PlanDefinition_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"library" = if r[#"library"]? <> null then List.Transform(r[#"library"], each _) else null,
      #"goal" = if r[#"goal"]? = null then null else Table.FromRecords(List.Transform(r[#"goal"], PlanDefinition_goal.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], PlanDefinition_action.ApplySchema))
    ],

  PlanDefinition_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  PlanDefinition_goal.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"description" = if r[#"description"]? = null then null else CodeableConcept.ApplySchema(r[#"description"]),
      #"priority" = if r[#"priority"]? = null then null else CodeableConcept.ApplySchema(r[#"priority"]),
      #"start" = if r[#"start"]? = null then null else CodeableConcept.ApplySchema(r[#"start"]),
      #"addresses" = if r[#"addresses"]? = null then null else Table.FromRecords(List.Transform(r[#"addresses"], CodeableConcept.ApplySchema)),
      #"documentation" = if r[#"documentation"]? = null then null else Table.FromRecords(List.Transform(r[#"documentation"], RelatedArtifact.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], PlanDefinition_goal_target.ApplySchema))
    ],

  PlanDefinition_goal_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"measure" = if r[#"measure"]? = null then null else CodeableConcept.ApplySchema(r[#"measure"]),
      #"detail" = if r[#"detail"]? = null then null else PlanDefinition_goal_target_detail.ApplySchema(r[#"detail"]),
      #"due" = if r[#"due"]? = null then null else Duration.ApplySchema(r[#"due"])
    ],

  PlanDefinition_goal_target_detail.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  PlanDefinition_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"prefix" = r[#"prefix"]?,
      #"title" = r[#"title"]?,
      #"description" = r[#"description"]?,
      #"textEquivalent" = r[#"textEquivalent"]?,
      #"priority" = r[#"priority"]?,
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"reason" = if r[#"reason"]? = null then null else Table.FromRecords(List.Transform(r[#"reason"], CodeableConcept.ApplySchema)),
      #"documentation" = if r[#"documentation"]? = null then null else Table.FromRecords(List.Transform(r[#"documentation"], RelatedArtifact.ApplySchema)),
      #"goalId" = if r[#"goalId"]? <> null then List.Transform(r[#"goalId"], each _) else null,
      #"subject" = if r[#"subject"]? = null then null else PlanDefinition_action_subject.ApplySchema(r[#"subject"]),
      #"trigger" = if r[#"trigger"]? = null then null else Table.FromRecords(List.Transform(r[#"trigger"], TriggerDefinition.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Table.FromRecords(List.Transform(r[#"condition"], PlanDefinition_action_condition.ApplySchema)),
      #"input" = if r[#"input"]? = null then null else Table.FromRecords(List.Transform(r[#"input"], DataRequirement.ApplySchema)),
      #"output" = if r[#"output"]? = null then null else Table.FromRecords(List.Transform(r[#"output"], DataRequirement.ApplySchema)),
      #"relatedAction" = if r[#"relatedAction"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedAction"], PlanDefinition_action_relatedAction.ApplySchema)),
      #"timing" = if r[#"timing"]? = null then null else PlanDefinition_action_timing.ApplySchema(r[#"timing"]),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], PlanDefinition_action_participant.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"groupingBehavior" = r[#"groupingBehavior"]?,
      #"selectionBehavior" = r[#"selectionBehavior"]?,
      #"requiredBehavior" = r[#"requiredBehavior"]?,
      #"precheckBehavior" = r[#"precheckBehavior"]?,
      #"cardinalityBehavior" = r[#"cardinalityBehavior"]?,
      #"definition" = if r[#"definition"]? = null then null else PlanDefinition_action_definition.ApplySchema(r[#"definition"]),
      #"transform" = r[#"transform"]?,
      #"dynamicValue" = if r[#"dynamicValue"]? = null then null else Table.FromRecords(List.Transform(r[#"dynamicValue"], PlanDefinition_action_dynamicValue.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], @PlanDefinition_action.ApplySchema))
    ],

  PlanDefinition_action_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  PlanDefinition_action_condition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"kind" = r[#"kind"]?,
      #"expression" = if r[#"expression"]? = null then null else Expression.ApplySchema(r[#"expression"])
    ],

  PlanDefinition_action_relatedAction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"actionId" = r[#"actionId"]?,
      #"relationship" = r[#"relationship"]?,
      #"offset" = if r[#"offset"]? = null then null else PlanDefinition_action_relatedAction_offset.ApplySchema(r[#"offset"])
    ],

  PlanDefinition_action_relatedAction_offset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  PlanDefinition_action_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  PlanDefinition_action_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"])
    ],

  PlanDefinition_action_definition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"canonical" = r[#"canonical"]?,
      #"uri" = r[#"uri"]?
    ],

  PlanDefinition_action_dynamicValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"path" = r[#"path"]?,
      #"expression" = if r[#"expression"]? = null then null else Expression.ApplySchema(r[#"expression"])
    ],

  Practitioner.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], HumanName.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"address" = if r[#"address"]? = null then null else Table.FromRecords(List.Transform(r[#"address"], Address.ApplySchema)),
      #"gender" = r[#"gender"]?,
      #"birthDate" = if r[#"birthDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"birthDate"]) else null,
      #"photo" = if r[#"photo"]? = null then null else Table.FromRecords(List.Transform(r[#"photo"], Attachment.ApplySchema)),
      #"qualification" = if r[#"qualification"]? = null then null else Table.FromRecords(List.Transform(r[#"qualification"], Practitioner_qualification.ApplySchema)),
      #"communication" = if r[#"communication"]? = null then null else Table.FromRecords(List.Transform(r[#"communication"], CodeableConcept.ApplySchema))
    ],

  Practitioner_qualification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"issuer" = if r[#"issuer"]? = null then null else Reference.ApplySchema(r[#"issuer"])
    ],

  PractitionerRole.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"practitioner" = if r[#"practitioner"]? = null then null else Reference.ApplySchema(r[#"practitioner"]),
      #"organization" = if r[#"organization"]? = null then null else Reference.ApplySchema(r[#"organization"]),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Table.FromRecords(List.Transform(r[#"location"], Reference.ApplySchema)),
      #"healthcareService" = if r[#"healthcareService"]? = null then null else Table.FromRecords(List.Transform(r[#"healthcareService"], Reference.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"availableTime" = if r[#"availableTime"]? = null then null else Table.FromRecords(List.Transform(r[#"availableTime"], PractitionerRole_availableTime.ApplySchema)),
      #"notAvailable" = if r[#"notAvailable"]? = null then null else Table.FromRecords(List.Transform(r[#"notAvailable"], PractitionerRole_notAvailable.ApplySchema)),
      #"availabilityExceptions" = r[#"availabilityExceptions"]?,
      #"endpoint" = if r[#"endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"endpoint"], Reference.ApplySchema))
    ],

  PractitionerRole_availableTime.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"daysOfWeek" = if r[#"daysOfWeek"]? <> null then List.Transform(r[#"daysOfWeek"], each _) else null,
      #"allDay" = r[#"allDay"]?,
      #"availableStartTime" = if r[#"availableStartTime"]? <> null then Time.From(r[#"availableStartTime"]) else null,
      #"availableEndTime" = if r[#"availableEndTime"]? <> null then Time.From(r[#"availableEndTime"]) else null
    ],

  PractitionerRole_notAvailable.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"during" = if r[#"during"]? = null then null else Period.ApplySchema(r[#"during"])
    ],

  Procedure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"performed" = if r[#"performed"]? = null then null else Procedure_performed.ApplySchema(r[#"performed"]),
      #"recorder" = if r[#"recorder"]? = null then null else Reference.ApplySchema(r[#"recorder"]),
      #"asserter" = if r[#"asserter"]? = null then null else Reference.ApplySchema(r[#"asserter"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Procedure_performer.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else Table.FromRecords(List.Transform(r[#"bodySite"], CodeableConcept.ApplySchema)),
      #"outcome" = if r[#"outcome"]? = null then null else CodeableConcept.ApplySchema(r[#"outcome"]),
      #"report" = if r[#"report"]? = null then null else Table.FromRecords(List.Transform(r[#"report"], Reference.ApplySchema)),
      #"complication" = if r[#"complication"]? = null then null else Table.FromRecords(List.Transform(r[#"complication"], CodeableConcept.ApplySchema)),
      #"complicationDetail" = if r[#"complicationDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"complicationDetail"], Reference.ApplySchema)),
      #"followUp" = if r[#"followUp"]? = null then null else Table.FromRecords(List.Transform(r[#"followUp"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"focalDevice" = if r[#"focalDevice"]? = null then null else Table.FromRecords(List.Transform(r[#"focalDevice"], Procedure_focalDevice.ApplySchema)),
      #"usedReference" = if r[#"usedReference"]? = null then null else Table.FromRecords(List.Transform(r[#"usedReference"], Reference.ApplySchema)),
      #"usedCode" = if r[#"usedCode"]? = null then null else Table.FromRecords(List.Transform(r[#"usedCode"], CodeableConcept.ApplySchema))
    ],

  Procedure_performed.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"string" = r[#"string"]?,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  Procedure_performer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"function" = if r[#"function"]? = null then null else CodeableConcept.ApplySchema(r[#"function"]),
      #"actor" = if r[#"actor"]? = null then null else Reference.ApplySchema(r[#"actor"]),
      #"onBehalfOf" = if r[#"onBehalfOf"]? = null then null else Reference.ApplySchema(r[#"onBehalfOf"])
    ],

  Procedure_focalDevice.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else CodeableConcept.ApplySchema(r[#"action"]),
      #"manipulated" = if r[#"manipulated"]? = null then null else Reference.ApplySchema(r[#"manipulated"])
    ],

  Provenance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], Reference.ApplySchema)),
      #"occurred" = if r[#"occurred"]? = null then null else Provenance_occurred.ApplySchema(r[#"occurred"]),
      #"recorded" = if r[#"recorded"]? <> null then DateTimeZone.From(r[#"recorded"]) else null,
      #"policy" = if r[#"policy"]? <> null then List.Transform(r[#"policy"], each _) else null,
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"reason" = if r[#"reason"]? = null then null else Table.FromRecords(List.Transform(r[#"reason"], CodeableConcept.ApplySchema)),
      #"activity" = if r[#"activity"]? = null then null else CodeableConcept.ApplySchema(r[#"activity"]),
      #"agent" = if r[#"agent"]? = null then null else Table.FromRecords(List.Transform(r[#"agent"], Provenance_agent.ApplySchema)),
      #"entity" = if r[#"entity"]? = null then null else Table.FromRecords(List.Transform(r[#"entity"], Provenance_entity.ApplySchema)),
      #"signature" = if r[#"signature"]? = null then null else Table.FromRecords(List.Transform(r[#"signature"], Signature.ApplySchema))
    ],

  Provenance_occurred.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  Provenance_agent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"role" = if r[#"role"]? = null then null else Table.FromRecords(List.Transform(r[#"role"], CodeableConcept.ApplySchema)),
      #"who" = if r[#"who"]? = null then null else Reference.ApplySchema(r[#"who"]),
      #"onBehalfOf" = if r[#"onBehalfOf"]? = null then null else Reference.ApplySchema(r[#"onBehalfOf"])
    ],

  Provenance_entity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"role" = r[#"role"]?,
      #"what" = if r[#"what"]? = null then null else Reference.ApplySchema(r[#"what"]),
      #"agent" = if r[#"agent"]? = null then null else Table.FromRecords(List.Transform(r[#"agent"], Provenance_agent.ApplySchema))
    ],

  Questionnaire.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"derivedFrom" = if r[#"derivedFrom"]? <> null then List.Transform(r[#"derivedFrom"], each _) else null,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subjectType" = if r[#"subjectType"]? <> null then List.Transform(r[#"subjectType"], each _) else null,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], Coding.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], Questionnaire_item.ApplySchema))
    ],

  Questionnaire_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"linkId" = r[#"linkId"]?,
      #"definition" = r[#"definition"]?,
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], Coding.ApplySchema)),
      #"prefix" = r[#"prefix"]?,
      #"text" = r[#"text"]?,
      #"type" = r[#"type"]?,
      #"enableWhen" = if r[#"enableWhen"]? = null then null else Table.FromRecords(List.Transform(r[#"enableWhen"], Questionnaire_item_enableWhen.ApplySchema)),
      #"enableBehavior" = r[#"enableBehavior"]?,
      #"required" = r[#"required"]?,
      #"repeats" = r[#"repeats"]?,
      #"readOnly" = r[#"readOnly"]?,
      #"maxLength" = r[#"maxLength"]?,
      #"answerValueSet" = r[#"answerValueSet"]?,
      #"answerOption" = if r[#"answerOption"]? = null then null else Table.FromRecords(List.Transform(r[#"answerOption"], Questionnaire_item_answerOption.ApplySchema)),
      #"initial" = if r[#"initial"]? = null then null else Table.FromRecords(List.Transform(r[#"initial"], Questionnaire_item_initial.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], @Questionnaire_item.ApplySchema))
    ],

  Questionnaire_item_enableWhen.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"question" = r[#"question"]?,
      #"operator" = r[#"operator"]?,
      #"answer" = if r[#"answer"]? = null then null else Questionnaire_item_enableWhen_answer.ApplySchema(r[#"answer"])
    ],

  Questionnaire_item_enableWhen_answer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"string" = r[#"string"]?,
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Questionnaire_item_answerOption.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Questionnaire_item_answerOption_value.ApplySchema(r[#"value"]),
      #"initialSelected" = r[#"initialSelected"]?
    ],

  Questionnaire_item_answerOption_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"integer" = r[#"integer"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"string" = r[#"string"]?,
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  Questionnaire_item_initial.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else Questionnaire_item_initial_value.ApplySchema(r[#"value"])
    ],

  Questionnaire_item_initial_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"string" = r[#"string"]?,
      #"uri" = r[#"uri"]?,
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  QuestionnaireResponse.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"questionnaire" = r[#"questionnaire"]?,
      #"status" = r[#"status"]?,
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"authored" = if r[#"authored"]? <> null then DateTimeZone.From(r[#"authored"]) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"source" = if r[#"source"]? = null then null else Reference.ApplySchema(r[#"source"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], QuestionnaireResponse_item.ApplySchema))
    ],

  QuestionnaireResponse_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"linkId" = r[#"linkId"]?,
      #"definition" = r[#"definition"]?,
      #"text" = r[#"text"]?,
      #"answer" = if r[#"answer"]? = null then null else Table.FromRecords(List.Transform(r[#"answer"], QuestionnaireResponse_item_answer.ApplySchema)),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], @QuestionnaireResponse_item.ApplySchema))
    ],

  QuestionnaireResponse_item_answer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else QuestionnaireResponse_item_answer_value.ApplySchema(r[#"value"]),
      #"item" = if r[#"item"]? = null then null else Table.FromRecords(List.Transform(r[#"item"], QuestionnaireResponse_item.ApplySchema))
    ],

  QuestionnaireResponse_item_answer_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"decimal" = r[#"decimal"]?,
      #"integer" = r[#"integer"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"string" = r[#"string"]?,
      #"uri" = r[#"uri"]?,
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  RelatedPerson.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"relationship" = if r[#"relationship"]? = null then null else Table.FromRecords(List.Transform(r[#"relationship"], CodeableConcept.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], HumanName.ApplySchema)),
      #"telecom" = if r[#"telecom"]? = null then null else Table.FromRecords(List.Transform(r[#"telecom"], ContactPoint.ApplySchema)),
      #"gender" = r[#"gender"]?,
      #"birthDate" = if r[#"birthDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"birthDate"]) else null,
      #"address" = if r[#"address"]? = null then null else Table.FromRecords(List.Transform(r[#"address"], Address.ApplySchema)),
      #"photo" = if r[#"photo"]? = null then null else Table.FromRecords(List.Transform(r[#"photo"], Attachment.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"communication" = if r[#"communication"]? = null then null else Table.FromRecords(List.Transform(r[#"communication"], RelatedPerson_communication.ApplySchema))
    ],

  RelatedPerson_communication.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"language" = if r[#"language"]? = null then null else CodeableConcept.ApplySchema(r[#"language"]),
      #"preferred" = r[#"preferred"]?
    ],

  RequestGroup.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"replaces" = if r[#"replaces"]? = null then null else Table.FromRecords(List.Transform(r[#"replaces"], Reference.ApplySchema)),
      #"groupIdentifier" = if r[#"groupIdentifier"]? = null then null else Identifier.ApplySchema(r[#"groupIdentifier"]),
      #"status" = r[#"status"]?,
      #"intent" = r[#"intent"]?,
      #"priority" = r[#"priority"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"author" = if r[#"author"]? = null then null else Reference.ApplySchema(r[#"author"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], RequestGroup_action.ApplySchema))
    ],

  RequestGroup_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"prefix" = r[#"prefix"]?,
      #"title" = r[#"title"]?,
      #"description" = r[#"description"]?,
      #"textEquivalent" = r[#"textEquivalent"]?,
      #"priority" = r[#"priority"]?,
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], CodeableConcept.ApplySchema)),
      #"documentation" = if r[#"documentation"]? = null then null else Table.FromRecords(List.Transform(r[#"documentation"], RelatedArtifact.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Table.FromRecords(List.Transform(r[#"condition"], RequestGroup_action_condition.ApplySchema)),
      #"relatedAction" = if r[#"relatedAction"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedAction"], RequestGroup_action_relatedAction.ApplySchema)),
      #"timing" = if r[#"timing"]? = null then null else RequestGroup_action_timing.ApplySchema(r[#"timing"]),
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], Reference.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"groupingBehavior" = r[#"groupingBehavior"]?,
      #"selectionBehavior" = r[#"selectionBehavior"]?,
      #"requiredBehavior" = r[#"requiredBehavior"]?,
      #"precheckBehavior" = r[#"precheckBehavior"]?,
      #"cardinalityBehavior" = r[#"cardinalityBehavior"]?,
      #"resource" = if r[#"resource"]? = null then null else Reference.ApplySchema(r[#"resource"]),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], @RequestGroup_action.ApplySchema))
    ],

  RequestGroup_action_condition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"kind" = r[#"kind"]?,
      #"expression" = if r[#"expression"]? = null then null else Expression.ApplySchema(r[#"expression"])
    ],

  RequestGroup_action_relatedAction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"actionId" = r[#"actionId"]?,
      #"relationship" = r[#"relationship"]?,
      #"offset" = if r[#"offset"]? = null then null else RequestGroup_action_relatedAction_offset.ApplySchema(r[#"offset"])
    ],

  RequestGroup_action_relatedAction_offset.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  RequestGroup_action_timing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ResearchDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"shortTitle" = r[#"shortTitle"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else ResearchDefinition_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"comment" = if r[#"comment"]? <> null then List.Transform(r[#"comment"], each _) else null,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"library" = if r[#"library"]? <> null then List.Transform(r[#"library"], each _) else null,
      #"population" = if r[#"population"]? = null then null else Reference.ApplySchema(r[#"population"]),
      #"exposure" = if r[#"exposure"]? = null then null else Reference.ApplySchema(r[#"exposure"]),
      #"exposureAlternative" = if r[#"exposureAlternative"]? = null then null else Reference.ApplySchema(r[#"exposureAlternative"]),
      #"outcome" = if r[#"outcome"]? = null then null else Reference.ApplySchema(r[#"outcome"])
    ],

  ResearchDefinition_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ResearchElementDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"shortTitle" = r[#"shortTitle"]?,
      #"subtitle" = r[#"subtitle"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"subject" = if r[#"subject"]? = null then null else ResearchElementDefinition_subject.ApplySchema(r[#"subject"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"comment" = if r[#"comment"]? <> null then List.Transform(r[#"comment"], each _) else null,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"usage" = r[#"usage"]?,
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"library" = if r[#"library"]? <> null then List.Transform(r[#"library"], each _) else null,
      #"type" = r[#"type"]?,
      #"variableType" = r[#"variableType"]?,
      #"characteristic" = if r[#"characteristic"]? = null then null else Table.FromRecords(List.Transform(r[#"characteristic"], ResearchElementDefinition_characteristic.ApplySchema))
    ],

  ResearchElementDefinition_subject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  ResearchElementDefinition_characteristic.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"definition" = if r[#"definition"]? = null then null else ResearchElementDefinition_characteristic_definition.ApplySchema(r[#"definition"]),
      #"usageContext" = if r[#"usageContext"]? = null then null else Table.FromRecords(List.Transform(r[#"usageContext"], UsageContext.ApplySchema)),
      #"exclude" = r[#"exclude"]?,
      #"unitOfMeasure" = if r[#"unitOfMeasure"]? = null then null else CodeableConcept.ApplySchema(r[#"unitOfMeasure"]),
      #"studyEffectiveDescription" = r[#"studyEffectiveDescription"]?,
      #"studyEffective" = if r[#"studyEffective"]? = null then null else ResearchElementDefinition_characteristic_studyEffective.ApplySchema(r[#"studyEffective"]),
      #"studyEffectiveTimeFromStart" = if r[#"studyEffectiveTimeFromStart"]? = null then null else Duration.ApplySchema(r[#"studyEffectiveTimeFromStart"]),
      #"studyEffectiveGroupMeasure" = r[#"studyEffectiveGroupMeasure"]?,
      #"participantEffectiveDescription" = r[#"participantEffectiveDescription"]?,
      #"participantEffective" = if r[#"participantEffective"]? = null then null else ResearchElementDefinition_characteristic_participantEffective.ApplySchema(r[#"participantEffective"]),
      #"participantEffectiveTimeFromStart" = if r[#"participantEffectiveTimeFromStart"]? = null then null else Duration.ApplySchema(r[#"participantEffectiveTimeFromStart"]),
      #"participantEffectiveGroupMeasure" = r[#"participantEffectiveGroupMeasure"]?
    ],

  ResearchElementDefinition_characteristic_definition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"canonical" = r[#"canonical"]?,
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"])
    ],

  ResearchElementDefinition_characteristic_studyEffective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ResearchElementDefinition_characteristic_participantEffective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ResearchStudy.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"title" = r[#"title"]?,
      #"protocol" = if r[#"protocol"]? = null then null else Table.FromRecords(List.Transform(r[#"protocol"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"primaryPurposeType" = if r[#"primaryPurposeType"]? = null then null else CodeableConcept.ApplySchema(r[#"primaryPurposeType"]),
      #"phase" = if r[#"phase"]? = null then null else CodeableConcept.ApplySchema(r[#"phase"]),
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"focus" = if r[#"focus"]? = null then null else Table.FromRecords(List.Transform(r[#"focus"], CodeableConcept.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Table.FromRecords(List.Transform(r[#"condition"], CodeableConcept.ApplySchema)),
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"keyword" = if r[#"keyword"]? = null then null else Table.FromRecords(List.Transform(r[#"keyword"], CodeableConcept.ApplySchema)),
      #"location" = if r[#"location"]? = null then null else Table.FromRecords(List.Transform(r[#"location"], CodeableConcept.ApplySchema)),
      #"description" = r[#"description"]?,
      #"enrollment" = if r[#"enrollment"]? = null then null else Table.FromRecords(List.Transform(r[#"enrollment"], Reference.ApplySchema)),
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"sponsor" = if r[#"sponsor"]? = null then null else Reference.ApplySchema(r[#"sponsor"]),
      #"principalInvestigator" = if r[#"principalInvestigator"]? = null then null else Reference.ApplySchema(r[#"principalInvestigator"]),
      #"site" = if r[#"site"]? = null then null else Table.FromRecords(List.Transform(r[#"site"], Reference.ApplySchema)),
      #"reasonStopped" = if r[#"reasonStopped"]? = null then null else CodeableConcept.ApplySchema(r[#"reasonStopped"]),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"arm" = if r[#"arm"]? = null then null else Table.FromRecords(List.Transform(r[#"arm"], ResearchStudy_arm.ApplySchema)),
      #"objective" = if r[#"objective"]? = null then null else Table.FromRecords(List.Transform(r[#"objective"], ResearchStudy_objective.ApplySchema))
    ],

  ResearchStudy_arm.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"description" = r[#"description"]?
    ],

  ResearchStudy_objective.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"])
    ],

  ResearchSubject.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"study" = if r[#"study"]? = null then null else Reference.ApplySchema(r[#"study"]),
      #"individual" = if r[#"individual"]? = null then null else Reference.ApplySchema(r[#"individual"]),
      #"assignedArm" = r[#"assignedArm"]?,
      #"actualArm" = r[#"actualArm"]?,
      #"consent" = if r[#"consent"]? = null then null else Reference.ApplySchema(r[#"consent"])
    ],

  Resource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?
    ],

  RiskAssessment.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Reference.ApplySchema(r[#"basedOn"]),
      #"parent" = if r[#"parent"]? = null then null else Reference.ApplySchema(r[#"parent"]),
      #"status" = r[#"status"]?,
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else RiskAssessment_occurrence.ApplySchema(r[#"occurrence"]),
      #"condition" = if r[#"condition"]? = null then null else Reference.ApplySchema(r[#"condition"]),
      #"performer" = if r[#"performer"]? = null then null else Reference.ApplySchema(r[#"performer"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"basis" = if r[#"basis"]? = null then null else Table.FromRecords(List.Transform(r[#"basis"], Reference.ApplySchema)),
      #"prediction" = if r[#"prediction"]? = null then null else Table.FromRecords(List.Transform(r[#"prediction"], RiskAssessment_prediction.ApplySchema)),
      #"mitigation" = r[#"mitigation"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  RiskAssessment_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  RiskAssessment_prediction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"outcome" = if r[#"outcome"]? = null then null else CodeableConcept.ApplySchema(r[#"outcome"]),
      #"probability" = if r[#"probability"]? = null then null else RiskAssessment_prediction_probability.ApplySchema(r[#"probability"]),
      #"qualitativeRisk" = if r[#"qualitativeRisk"]? = null then null else CodeableConcept.ApplySchema(r[#"qualitativeRisk"]),
      #"relativeRisk" = r[#"relativeRisk"]?,
      #"when" = if r[#"when"]? = null then null else RiskAssessment_prediction_when.ApplySchema(r[#"when"]),
      #"rationale" = r[#"rationale"]?
    ],

  RiskAssessment_prediction_probability.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"decimal" = r[#"decimal"]?,
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  RiskAssessment_prediction_when.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  RiskEvidenceSynthesis.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"copyright" = r[#"copyright"]?,
      #"approvalDate" = if r[#"approvalDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"approvalDate"]) else null,
      #"lastReviewDate" = if r[#"lastReviewDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lastReviewDate"]) else null,
      #"effectivePeriod" = if r[#"effectivePeriod"]? = null then null else Period.ApplySchema(r[#"effectivePeriod"]),
      #"topic" = if r[#"topic"]? = null then null else Table.FromRecords(List.Transform(r[#"topic"], CodeableConcept.ApplySchema)),
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], ContactDetail.ApplySchema)),
      #"editor" = if r[#"editor"]? = null then null else Table.FromRecords(List.Transform(r[#"editor"], ContactDetail.ApplySchema)),
      #"reviewer" = if r[#"reviewer"]? = null then null else Table.FromRecords(List.Transform(r[#"reviewer"], ContactDetail.ApplySchema)),
      #"endorser" = if r[#"endorser"]? = null then null else Table.FromRecords(List.Transform(r[#"endorser"], ContactDetail.ApplySchema)),
      #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else Table.FromRecords(List.Transform(r[#"relatedArtifact"], RelatedArtifact.ApplySchema)),
      #"synthesisType" = if r[#"synthesisType"]? = null then null else CodeableConcept.ApplySchema(r[#"synthesisType"]),
      #"studyType" = if r[#"studyType"]? = null then null else CodeableConcept.ApplySchema(r[#"studyType"]),
      #"population" = if r[#"population"]? = null then null else Reference.ApplySchema(r[#"population"]),
      #"exposure" = if r[#"exposure"]? = null then null else Reference.ApplySchema(r[#"exposure"]),
      #"outcome" = if r[#"outcome"]? = null then null else Reference.ApplySchema(r[#"outcome"]),
      #"sampleSize" = if r[#"sampleSize"]? = null then null else RiskEvidenceSynthesis_sampleSize.ApplySchema(r[#"sampleSize"]),
      #"riskEstimate" = if r[#"riskEstimate"]? = null then null else RiskEvidenceSynthesis_riskEstimate.ApplySchema(r[#"riskEstimate"]),
      #"certainty" = if r[#"certainty"]? = null then null else Table.FromRecords(List.Transform(r[#"certainty"], RiskEvidenceSynthesis_certainty.ApplySchema))
    ],

  RiskEvidenceSynthesis_sampleSize.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"numberOfStudies" = r[#"numberOfStudies"]?,
      #"numberOfParticipants" = r[#"numberOfParticipants"]?
    ],

  RiskEvidenceSynthesis_riskEstimate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = r[#"value"]?,
      #"unitOfMeasure" = if r[#"unitOfMeasure"]? = null then null else CodeableConcept.ApplySchema(r[#"unitOfMeasure"]),
      #"denominatorCount" = r[#"denominatorCount"]?,
      #"numeratorCount" = r[#"numeratorCount"]?,
      #"precisionEstimate" = if r[#"precisionEstimate"]? = null then null else Table.FromRecords(List.Transform(r[#"precisionEstimate"], RiskEvidenceSynthesis_riskEstimate_precisionEstimate.ApplySchema))
    ],

  RiskEvidenceSynthesis_riskEstimate_precisionEstimate.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"level" = r[#"level"]?,
      #"from" = r[#"from"]?,
      #"to" = r[#"to"]?
    ],

  RiskEvidenceSynthesis_certainty.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"rating" = if r[#"rating"]? = null then null else Table.FromRecords(List.Transform(r[#"rating"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"certaintySubcomponent" = if r[#"certaintySubcomponent"]? = null then null else Table.FromRecords(List.Transform(r[#"certaintySubcomponent"], RiskEvidenceSynthesis_certainty_certaintySubcomponent.ApplySchema))
    ],

  RiskEvidenceSynthesis_certainty_certaintySubcomponent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"rating" = if r[#"rating"]? = null then null else Table.FromRecords(List.Transform(r[#"rating"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Schedule.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"active" = r[#"active"]?,
      #"serviceCategory" = if r[#"serviceCategory"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceCategory"], CodeableConcept.ApplySchema)),
      #"serviceType" = if r[#"serviceType"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceType"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"actor" = if r[#"actor"]? = null then null else Table.FromRecords(List.Transform(r[#"actor"], Reference.ApplySchema)),
      #"planningHorizon" = if r[#"planningHorizon"]? = null then null else Period.ApplySchema(r[#"planningHorizon"]),
      #"comment" = r[#"comment"]?
    ],

  SearchParameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"derivedFrom" = r[#"derivedFrom"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"code" = r[#"code"]?,
      #"base" = if r[#"base"]? <> null then List.Transform(r[#"base"], each _) else null,
      #"type" = r[#"type"]?,
      #"expression" = r[#"expression"]?,
      #"xpath" = r[#"xpath"]?,
      #"xpathUsage" = r[#"xpathUsage"]?,
      #"target" = if r[#"target"]? <> null then List.Transform(r[#"target"], each _) else null,
      #"multipleOr" = r[#"multipleOr"]?,
      #"multipleAnd" = r[#"multipleAnd"]?,
      #"comparator" = if r[#"comparator"]? <> null then List.Transform(r[#"comparator"], each _) else null,
      #"modifier" = if r[#"modifier"]? <> null then List.Transform(r[#"modifier"], each _) else null,
      #"chain" = if r[#"chain"]? <> null then List.Transform(r[#"chain"], each _) else null,
      #"component" = if r[#"component"]? = null then null else Table.FromRecords(List.Transform(r[#"component"], SearchParameter_component.ApplySchema))
    ],

  SearchParameter_component.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"definition" = r[#"definition"]?,
      #"expression" = r[#"expression"]?
    ],

  ServiceRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = if r[#"instantiatesCanonical"]? <> null then List.Transform(r[#"instantiatesCanonical"], each _) else null,
      #"instantiatesUri" = if r[#"instantiatesUri"]? <> null then List.Transform(r[#"instantiatesUri"], each _) else null,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"replaces" = if r[#"replaces"]? = null then null else Table.FromRecords(List.Transform(r[#"replaces"], Reference.ApplySchema)),
      #"requisition" = if r[#"requisition"]? = null then null else Identifier.ApplySchema(r[#"requisition"]),
      #"status" = r[#"status"]?,
      #"intent" = r[#"intent"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"priority" = r[#"priority"]?,
      #"doNotPerform" = r[#"doNotPerform"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"orderDetail" = if r[#"orderDetail"]? = null then null else Table.FromRecords(List.Transform(r[#"orderDetail"], CodeableConcept.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else ServiceRequest_quantity.ApplySchema(r[#"quantity"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else ServiceRequest_occurrence.ApplySchema(r[#"occurrence"]),
      #"asNeeded" = if r[#"asNeeded"]? = null then null else ServiceRequest_asNeeded.ApplySchema(r[#"asNeeded"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"performerType" = if r[#"performerType"]? = null then null else CodeableConcept.ApplySchema(r[#"performerType"]),
      #"performer" = if r[#"performer"]? = null then null else Table.FromRecords(List.Transform(r[#"performer"], Reference.ApplySchema)),
      #"locationCode" = if r[#"locationCode"]? = null then null else Table.FromRecords(List.Transform(r[#"locationCode"], CodeableConcept.ApplySchema)),
      #"locationReference" = if r[#"locationReference"]? = null then null else Table.FromRecords(List.Transform(r[#"locationReference"], Reference.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], Reference.ApplySchema)),
      #"supportingInfo" = if r[#"supportingInfo"]? = null then null else Table.FromRecords(List.Transform(r[#"supportingInfo"], Reference.ApplySchema)),
      #"specimen" = if r[#"specimen"]? = null then null else Table.FromRecords(List.Transform(r[#"specimen"], Reference.ApplySchema)),
      #"bodySite" = if r[#"bodySite"]? = null then null else Table.FromRecords(List.Transform(r[#"bodySite"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"patientInstruction" = r[#"patientInstruction"]?,
      #"relevantHistory" = if r[#"relevantHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"relevantHistory"], Reference.ApplySchema))
    ],

  ServiceRequest_quantity.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"])
    ],

  ServiceRequest_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  ServiceRequest_asNeeded.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"boolean" = r[#"boolean"]?,
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  Slot.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"serviceCategory" = if r[#"serviceCategory"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceCategory"], CodeableConcept.ApplySchema)),
      #"serviceType" = if r[#"serviceType"]? = null then null else Table.FromRecords(List.Transform(r[#"serviceType"], CodeableConcept.ApplySchema)),
      #"specialty" = if r[#"specialty"]? = null then null else Table.FromRecords(List.Transform(r[#"specialty"], CodeableConcept.ApplySchema)),
      #"appointmentType" = if r[#"appointmentType"]? = null then null else CodeableConcept.ApplySchema(r[#"appointmentType"]),
      #"schedule" = if r[#"schedule"]? = null then null else Reference.ApplySchema(r[#"schedule"]),
      #"status" = r[#"status"]?,
      #"start" = if r[#"start"]? <> null then DateTimeZone.From(r[#"start"]) else null,
      #"end" = if r[#"end"]? <> null then DateTimeZone.From(r[#"end"]) else null,
      #"overbooked" = r[#"overbooked"]?,
      #"comment" = r[#"comment"]?
    ],

  Specimen.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"accessionIdentifier" = if r[#"accessionIdentifier"]? = null then null else Identifier.ApplySchema(r[#"accessionIdentifier"]),
      #"status" = r[#"status"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"subject" = if r[#"subject"]? = null then null else Reference.ApplySchema(r[#"subject"]),
      #"receivedTime" = if r[#"receivedTime"]? <> null then DateTimeZone.From(r[#"receivedTime"]) else null,
      #"parent" = if r[#"parent"]? = null then null else Table.FromRecords(List.Transform(r[#"parent"], Reference.ApplySchema)),
      #"request" = if r[#"request"]? = null then null else Table.FromRecords(List.Transform(r[#"request"], Reference.ApplySchema)),
      #"collection" = if r[#"collection"]? = null then null else Specimen_collection.ApplySchema(r[#"collection"]),
      #"processing" = if r[#"processing"]? = null then null else Table.FromRecords(List.Transform(r[#"processing"], Specimen_processing.ApplySchema)),
      #"container" = if r[#"container"]? = null then null else Table.FromRecords(List.Transform(r[#"container"], Specimen_container.ApplySchema)),
      #"condition" = if r[#"condition"]? = null then null else Table.FromRecords(List.Transform(r[#"condition"], CodeableConcept.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  Specimen_collection.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"collector" = if r[#"collector"]? = null then null else Reference.ApplySchema(r[#"collector"]),
      #"collected" = if r[#"collected"]? = null then null else Specimen_collection_collected.ApplySchema(r[#"collected"]),
      #"duration" = if r[#"duration"]? = null then null else Duration.ApplySchema(r[#"duration"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"bodySite" = if r[#"bodySite"]? = null then null else CodeableConcept.ApplySchema(r[#"bodySite"]),
      #"fastingStatus" = if r[#"fastingStatus"]? = null then null else Specimen_collection_fastingStatus.ApplySchema(r[#"fastingStatus"])
    ],

  Specimen_collection_collected.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Specimen_collection_fastingStatus.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"])
    ],

  Specimen_processing.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"procedure" = if r[#"procedure"]? = null then null else CodeableConcept.ApplySchema(r[#"procedure"]),
      #"additive" = if r[#"additive"]? = null then null else Table.FromRecords(List.Transform(r[#"additive"], Reference.ApplySchema)),
      #"time" = if r[#"time"]? = null then null else Specimen_processing_time.ApplySchema(r[#"time"])
    ],

  Specimen_processing_time.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"])
    ],

  Specimen_container.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"description" = r[#"description"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"capacity" = if r[#"capacity"]? = null then null else Quantity.ApplySchema(r[#"capacity"]),
      #"specimenQuantity" = if r[#"specimenQuantity"]? = null then null else Quantity.ApplySchema(r[#"specimenQuantity"]),
      #"additive" = if r[#"additive"]? = null then null else Specimen_container_additive.ApplySchema(r[#"additive"])
    ],

  Specimen_container_additive.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  SpecimenDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"typeCollected" = if r[#"typeCollected"]? = null then null else CodeableConcept.ApplySchema(r[#"typeCollected"]),
      #"patientPreparation" = if r[#"patientPreparation"]? = null then null else Table.FromRecords(List.Transform(r[#"patientPreparation"], CodeableConcept.ApplySchema)),
      #"timeAspect" = r[#"timeAspect"]?,
      #"collection" = if r[#"collection"]? = null then null else Table.FromRecords(List.Transform(r[#"collection"], CodeableConcept.ApplySchema)),
      #"typeTested" = if r[#"typeTested"]? = null then null else Table.FromRecords(List.Transform(r[#"typeTested"], SpecimenDefinition_typeTested.ApplySchema))
    ],

  SpecimenDefinition_typeTested.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"isDerived" = r[#"isDerived"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"preference" = r[#"preference"]?,
      #"container" = if r[#"container"]? = null then null else SpecimenDefinition_typeTested_container.ApplySchema(r[#"container"]),
      #"requirement" = r[#"requirement"]?,
      #"retentionTime" = if r[#"retentionTime"]? = null then null else Duration.ApplySchema(r[#"retentionTime"]),
      #"rejectionCriterion" = if r[#"rejectionCriterion"]? = null then null else Table.FromRecords(List.Transform(r[#"rejectionCriterion"], CodeableConcept.ApplySchema)),
      #"handling" = if r[#"handling"]? = null then null else Table.FromRecords(List.Transform(r[#"handling"], SpecimenDefinition_typeTested_handling.ApplySchema))
    ],

  SpecimenDefinition_typeTested_container.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"material" = if r[#"material"]? = null then null else CodeableConcept.ApplySchema(r[#"material"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"cap" = if r[#"cap"]? = null then null else CodeableConcept.ApplySchema(r[#"cap"]),
      #"description" = r[#"description"]?,
      #"capacity" = if r[#"capacity"]? = null then null else Quantity.ApplySchema(r[#"capacity"]),
      #"minimumVolume" = if r[#"minimumVolume"]? = null then null else SpecimenDefinition_typeTested_container_minimumVolume.ApplySchema(r[#"minimumVolume"]),
      #"additive" = if r[#"additive"]? = null then null else Table.FromRecords(List.Transform(r[#"additive"], SpecimenDefinition_typeTested_container_additive.ApplySchema)),
      #"preparation" = r[#"preparation"]?
    ],

  SpecimenDefinition_typeTested_container_minimumVolume.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"string" = r[#"string"]?
    ],

  SpecimenDefinition_typeTested_container_additive.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"additive" = if r[#"additive"]? = null then null else SpecimenDefinition_typeTested_container_additive_additive.ApplySchema(r[#"additive"])
    ],

  SpecimenDefinition_typeTested_container_additive_additive.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  SpecimenDefinition_typeTested_handling.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"temperatureQualifier" = if r[#"temperatureQualifier"]? = null then null else CodeableConcept.ApplySchema(r[#"temperatureQualifier"]),
      #"temperatureRange" = if r[#"temperatureRange"]? = null then null else Range.ApplySchema(r[#"temperatureRange"]),
      #"maxDuration" = if r[#"maxDuration"]? = null then null else Duration.ApplySchema(r[#"maxDuration"]),
      #"instruction" = r[#"instruction"]?
    ],

  StructureDefinition.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"keyword" = if r[#"keyword"]? = null then null else Table.FromRecords(List.Transform(r[#"keyword"], Coding.ApplySchema)),
      #"fhirVersion" = r[#"fhirVersion"]?,
      #"mapping" = if r[#"mapping"]? = null then null else Table.FromRecords(List.Transform(r[#"mapping"], StructureDefinition_mapping.ApplySchema)),
      #"kind" = r[#"kind"]?,
      #"abstract" = r[#"abstract"]?,
      #"context" = if r[#"context"]? = null then null else Table.FromRecords(List.Transform(r[#"context"], StructureDefinition_context.ApplySchema)),
      #"contextInvariant" = if r[#"contextInvariant"]? <> null then List.Transform(r[#"contextInvariant"], each _) else null,
      #"type" = r[#"type"]?,
      #"baseDefinition" = r[#"baseDefinition"]?,
      #"derivation" = r[#"derivation"]?,
      #"snapshot" = if r[#"snapshot"]? = null then null else StructureDefinition_snapshot.ApplySchema(r[#"snapshot"]),
      #"differential" = if r[#"differential"]? = null then null else StructureDefinition_differential.ApplySchema(r[#"differential"])
    ],

  StructureDefinition_mapping.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identity" = r[#"identity"]?,
      #"uri" = r[#"uri"]?,
      #"name" = r[#"name"]?,
      #"comment" = r[#"comment"]?
    ],

  StructureDefinition_context.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"expression" = r[#"expression"]?
    ],

  StructureDefinition_snapshot.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"element" = if r[#"element"]? = null then null else Table.FromRecords(List.Transform(r[#"element"], ElementDefinition.ApplySchema))
    ],

  StructureDefinition_differential.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"element" = if r[#"element"]? = null then null else Table.FromRecords(List.Transform(r[#"element"], ElementDefinition.ApplySchema))
    ],

  StructureMap.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"structure" = if r[#"structure"]? = null then null else Table.FromRecords(List.Transform(r[#"structure"], StructureMap_structure.ApplySchema)),
      #"import" = if r[#"import"]? <> null then List.Transform(r[#"import"], each _) else null,
      #"group" = if r[#"group"]? = null then null else Table.FromRecords(List.Transform(r[#"group"], StructureMap_group.ApplySchema))
    ],

  StructureMap_structure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"mode" = r[#"mode"]?,
      #"alias" = r[#"alias"]?,
      #"documentation" = r[#"documentation"]?
    ],

  StructureMap_group.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"extends" = r[#"extends"]?,
      #"typeMode" = r[#"typeMode"]?,
      #"documentation" = r[#"documentation"]?,
      #"input" = if r[#"input"]? = null then null else Table.FromRecords(List.Transform(r[#"input"], StructureMap_group_input.ApplySchema)),
      #"rule" = if r[#"rule"]? = null then null else Table.FromRecords(List.Transform(r[#"rule"], StructureMap_group_rule.ApplySchema))
    ],

  StructureMap_group_input.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = r[#"type"]?,
      #"mode" = r[#"mode"]?,
      #"documentation" = r[#"documentation"]?
    ],

  StructureMap_group_rule.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], StructureMap_group_rule_source.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], StructureMap_group_rule_target.ApplySchema)),
      #"dependent" = if r[#"dependent"]? = null then null else Table.FromRecords(List.Transform(r[#"dependent"], StructureMap_group_rule_dependent.ApplySchema)),
      #"documentation" = r[#"documentation"]?,
      #"rule" = if r[#"rule"]? = null then null else Table.FromRecords(List.Transform(r[#"rule"], @StructureMap_group_rule.ApplySchema))
    ],

  StructureMap_group_rule_source.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"context" = r[#"context"]?,
      #"min" = r[#"min"]?,
      #"max" = r[#"max"]?,
      #"type" = r[#"type"]?,
      #"defaultValue" = if r[#"defaultValue"]? = null then null else StructureMap_group_rule_source_defaultValue.ApplySchema(r[#"defaultValue"]),
      #"element" = r[#"element"]?,
      #"listMode" = r[#"listMode"]?,
      #"variable" = r[#"variable"]?,
      #"condition" = r[#"condition"]?,
      #"check" = r[#"check"]?,
      #"logMessage" = r[#"logMessage"]?
    ],

  StructureMap_group_rule_source_defaultValue.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  StructureMap_group_rule_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"context" = r[#"context"]?,
      #"contextType" = r[#"contextType"]?,
      #"element" = r[#"element"]?,
      #"variable" = r[#"variable"]?,
      #"listMode" = if r[#"listMode"]? <> null then List.Transform(r[#"listMode"], each _) else null,
      #"listRuleId" = r[#"listRuleId"]?,
      #"transform" = r[#"transform"]?,
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], StructureMap_group_rule_target_parameter.ApplySchema))
    ],

  StructureMap_group_rule_target_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"value" = if r[#"value"]? = null then null else StructureMap_group_rule_target_parameter_value.ApplySchema(r[#"value"])
    ],

  StructureMap_group_rule_target_parameter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"string" = r[#"string"]?,
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?,
      #"decimal" = r[#"decimal"]?
    ],

  StructureMap_group_rule_dependent.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"variable" = if r[#"variable"]? <> null then List.Transform(r[#"variable"], each _) else null
    ],

  Subscription.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"status" = r[#"status"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactPoint.ApplySchema)),
      #"end" = if r[#"end"]? <> null then DateTimeZone.From(r[#"end"]) else null,
      #"reason" = r[#"reason"]?,
      #"criteria" = r[#"criteria"]?,
      #"error" = r[#"error"]?,
      #"channel" = if r[#"channel"]? = null then null else Subscription_channel.ApplySchema(r[#"channel"])
    ],

  Subscription_channel.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"endpoint" = r[#"endpoint"]?,
      #"payload" = r[#"payload"]?,
      #"header" = if r[#"header"]? <> null then List.Transform(r[#"header"], each _) else null
    ],

  Substance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else Table.FromRecords(List.Transform(r[#"category"], CodeableConcept.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"instance" = if r[#"instance"]? = null then null else Table.FromRecords(List.Transform(r[#"instance"], Substance_instance.ApplySchema)),
      #"ingredient" = if r[#"ingredient"]? = null then null else Table.FromRecords(List.Transform(r[#"ingredient"], Substance_ingredient.ApplySchema))
    ],

  Substance_instance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"expiry" = if r[#"expiry"]? <> null then DateTimeZone.From(r[#"expiry"]) else null,
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"])
    ],

  Substance_ingredient.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Ratio.ApplySchema(r[#"quantity"]),
      #"substance" = if r[#"substance"]? = null then null else Substance_ingredient_substance.ApplySchema(r[#"substance"])
    ],

  Substance_ingredient_substance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  SubstanceNucleicAcid.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequenceType" = if r[#"sequenceType"]? = null then null else CodeableConcept.ApplySchema(r[#"sequenceType"]),
      #"numberOfSubunits" = r[#"numberOfSubunits"]?,
      #"areaOfHybridisation" = r[#"areaOfHybridisation"]?,
      #"oligoNucleotideType" = if r[#"oligoNucleotideType"]? = null then null else CodeableConcept.ApplySchema(r[#"oligoNucleotideType"]),
      #"subunit" = if r[#"subunit"]? = null then null else Table.FromRecords(List.Transform(r[#"subunit"], SubstanceNucleicAcid_subunit.ApplySchema))
    ],

  SubstanceNucleicAcid_subunit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subunit" = r[#"subunit"]?,
      #"sequence" = r[#"sequence"]?,
      #"length" = r[#"length"]?,
      #"sequenceAttachment" = if r[#"sequenceAttachment"]? = null then null else Attachment.ApplySchema(r[#"sequenceAttachment"]),
      #"fivePrime" = if r[#"fivePrime"]? = null then null else CodeableConcept.ApplySchema(r[#"fivePrime"]),
      #"threePrime" = if r[#"threePrime"]? = null then null else CodeableConcept.ApplySchema(r[#"threePrime"]),
      #"linkage" = if r[#"linkage"]? = null then null else Table.FromRecords(List.Transform(r[#"linkage"], SubstanceNucleicAcid_subunit_linkage.ApplySchema)),
      #"sugar" = if r[#"sugar"]? = null then null else Table.FromRecords(List.Transform(r[#"sugar"], SubstanceNucleicAcid_subunit_sugar.ApplySchema))
    ],

  SubstanceNucleicAcid_subunit_linkage.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"connectivity" = r[#"connectivity"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"name" = r[#"name"]?,
      #"residueSite" = r[#"residueSite"]?
    ],

  SubstanceNucleicAcid_subunit_sugar.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"name" = r[#"name"]?,
      #"residueSite" = r[#"residueSite"]?
    ],

  SubstancePolymer.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"class" = if r[#"class"]? = null then null else CodeableConcept.ApplySchema(r[#"class"]),
      #"geometry" = if r[#"geometry"]? = null then null else CodeableConcept.ApplySchema(r[#"geometry"]),
      #"copolymerConnectivity" = if r[#"copolymerConnectivity"]? = null then null else Table.FromRecords(List.Transform(r[#"copolymerConnectivity"], CodeableConcept.ApplySchema)),
      #"modification" = if r[#"modification"]? <> null then List.Transform(r[#"modification"], each _) else null,
      #"monomerSet" = if r[#"monomerSet"]? = null then null else Table.FromRecords(List.Transform(r[#"monomerSet"], SubstancePolymer_monomerSet.ApplySchema)),
      #"repeat" = if r[#"repeat"]? = null then null else Table.FromRecords(List.Transform(r[#"repeat"], SubstancePolymer_repeat.ApplySchema))
    ],

  SubstancePolymer_monomerSet.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"ratioType" = if r[#"ratioType"]? = null then null else CodeableConcept.ApplySchema(r[#"ratioType"]),
      #"startingMaterial" = if r[#"startingMaterial"]? = null then null else Table.FromRecords(List.Transform(r[#"startingMaterial"], SubstancePolymer_monomerSet_startingMaterial.ApplySchema))
    ],

  SubstancePolymer_monomerSet_startingMaterial.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"material" = if r[#"material"]? = null then null else CodeableConcept.ApplySchema(r[#"material"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"isDefining" = r[#"isDefining"]?,
      #"amount" = if r[#"amount"]? = null then null else SubstanceAmount.ApplySchema(r[#"amount"])
    ],

  SubstancePolymer_repeat.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"numberOfUnits" = r[#"numberOfUnits"]?,
      #"averageMolecularFormula" = r[#"averageMolecularFormula"]?,
      #"repeatUnitAmountType" = if r[#"repeatUnitAmountType"]? = null then null else CodeableConcept.ApplySchema(r[#"repeatUnitAmountType"]),
      #"repeatUnit" = if r[#"repeatUnit"]? = null then null else Table.FromRecords(List.Transform(r[#"repeatUnit"], SubstancePolymer_repeat_repeatUnit.ApplySchema))
    ],

  SubstancePolymer_repeat_repeatUnit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"orientationOfPolymerisation" = if r[#"orientationOfPolymerisation"]? = null then null else CodeableConcept.ApplySchema(r[#"orientationOfPolymerisation"]),
      #"repeatUnit" = r[#"repeatUnit"]?,
      #"amount" = if r[#"amount"]? = null then null else SubstanceAmount.ApplySchema(r[#"amount"]),
      #"degreeOfPolymerisation" = if r[#"degreeOfPolymerisation"]? = null then null else Table.FromRecords(List.Transform(r[#"degreeOfPolymerisation"], SubstancePolymer_repeat_repeatUnit_degreeOfPolymerisation.ApplySchema)),
      #"structuralRepresentation" = if r[#"structuralRepresentation"]? = null then null else Table.FromRecords(List.Transform(r[#"structuralRepresentation"], SubstancePolymer_repeat_repeatUnit_structuralRepresentation.ApplySchema))
    ],

  SubstancePolymer_repeat_repeatUnit_degreeOfPolymerisation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"degree" = if r[#"degree"]? = null then null else CodeableConcept.ApplySchema(r[#"degree"]),
      #"amount" = if r[#"amount"]? = null then null else SubstanceAmount.ApplySchema(r[#"amount"])
    ],

  SubstancePolymer_repeat_repeatUnit_structuralRepresentation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"representation" = r[#"representation"]?,
      #"attachment" = if r[#"attachment"]? = null then null else Attachment.ApplySchema(r[#"attachment"])
    ],

  SubstanceProtein.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sequenceType" = if r[#"sequenceType"]? = null then null else CodeableConcept.ApplySchema(r[#"sequenceType"]),
      #"numberOfSubunits" = r[#"numberOfSubunits"]?,
      #"disulfideLinkage" = if r[#"disulfideLinkage"]? <> null then List.Transform(r[#"disulfideLinkage"], each _) else null,
      #"subunit" = if r[#"subunit"]? = null then null else Table.FromRecords(List.Transform(r[#"subunit"], SubstanceProtein_subunit.ApplySchema))
    ],

  SubstanceProtein_subunit.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"subunit" = r[#"subunit"]?,
      #"sequence" = r[#"sequence"]?,
      #"length" = r[#"length"]?,
      #"sequenceAttachment" = if r[#"sequenceAttachment"]? = null then null else Attachment.ApplySchema(r[#"sequenceAttachment"]),
      #"nTerminalModificationId" = if r[#"nTerminalModificationId"]? = null then null else Identifier.ApplySchema(r[#"nTerminalModificationId"]),
      #"nTerminalModification" = r[#"nTerminalModification"]?,
      #"cTerminalModificationId" = if r[#"cTerminalModificationId"]? = null then null else Identifier.ApplySchema(r[#"cTerminalModificationId"]),
      #"cTerminalModification" = r[#"cTerminalModification"]?
    ],

  SubstanceReferenceInformation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"comment" = r[#"comment"]?,
      #"gene" = if r[#"gene"]? = null then null else Table.FromRecords(List.Transform(r[#"gene"], SubstanceReferenceInformation_gene.ApplySchema)),
      #"geneElement" = if r[#"geneElement"]? = null then null else Table.FromRecords(List.Transform(r[#"geneElement"], SubstanceReferenceInformation_geneElement.ApplySchema)),
      #"classification" = if r[#"classification"]? = null then null else Table.FromRecords(List.Transform(r[#"classification"], SubstanceReferenceInformation_classification.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], SubstanceReferenceInformation_target.ApplySchema))
    ],

  SubstanceReferenceInformation_gene.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"geneSequenceOrigin" = if r[#"geneSequenceOrigin"]? = null then null else CodeableConcept.ApplySchema(r[#"geneSequenceOrigin"]),
      #"gene" = if r[#"gene"]? = null then null else CodeableConcept.ApplySchema(r[#"gene"]),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceReferenceInformation_geneElement.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"element" = if r[#"element"]? = null then null else Identifier.ApplySchema(r[#"element"]),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceReferenceInformation_classification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"domain" = if r[#"domain"]? = null then null else CodeableConcept.ApplySchema(r[#"domain"]),
      #"classification" = if r[#"classification"]? = null then null else CodeableConcept.ApplySchema(r[#"classification"]),
      #"subtype" = if r[#"subtype"]? = null then null else Table.FromRecords(List.Transform(r[#"subtype"], CodeableConcept.ApplySchema)),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceReferenceInformation_target.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Identifier.ApplySchema(r[#"target"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"interaction" = if r[#"interaction"]? = null then null else CodeableConcept.ApplySchema(r[#"interaction"]),
      #"organism" = if r[#"organism"]? = null then null else CodeableConcept.ApplySchema(r[#"organism"]),
      #"organismType" = if r[#"organismType"]? = null then null else CodeableConcept.ApplySchema(r[#"organismType"]),
      #"amount" = if r[#"amount"]? = null then null else SubstanceReferenceInformation_target_amount.ApplySchema(r[#"amount"]),
      #"amountType" = if r[#"amountType"]? = null then null else CodeableConcept.ApplySchema(r[#"amountType"]),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceReferenceInformation_target_amount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"string" = r[#"string"]?
    ],

  SubstanceSourceMaterial.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"sourceMaterialClass" = if r[#"sourceMaterialClass"]? = null then null else CodeableConcept.ApplySchema(r[#"sourceMaterialClass"]),
      #"sourceMaterialType" = if r[#"sourceMaterialType"]? = null then null else CodeableConcept.ApplySchema(r[#"sourceMaterialType"]),
      #"sourceMaterialState" = if r[#"sourceMaterialState"]? = null then null else CodeableConcept.ApplySchema(r[#"sourceMaterialState"]),
      #"organismId" = if r[#"organismId"]? = null then null else Identifier.ApplySchema(r[#"organismId"]),
      #"organismName" = r[#"organismName"]?,
      #"parentSubstanceId" = if r[#"parentSubstanceId"]? = null then null else Table.FromRecords(List.Transform(r[#"parentSubstanceId"], Identifier.ApplySchema)),
      #"parentSubstanceName" = if r[#"parentSubstanceName"]? <> null then List.Transform(r[#"parentSubstanceName"], each _) else null,
      #"countryOfOrigin" = if r[#"countryOfOrigin"]? = null then null else Table.FromRecords(List.Transform(r[#"countryOfOrigin"], CodeableConcept.ApplySchema)),
      #"geographicalLocation" = if r[#"geographicalLocation"]? <> null then List.Transform(r[#"geographicalLocation"], each _) else null,
      #"developmentStage" = if r[#"developmentStage"]? = null then null else CodeableConcept.ApplySchema(r[#"developmentStage"]),
      #"fractionDescription" = if r[#"fractionDescription"]? = null then null else Table.FromRecords(List.Transform(r[#"fractionDescription"], SubstanceSourceMaterial_fractionDescription.ApplySchema)),
      #"organism" = if r[#"organism"]? = null then null else SubstanceSourceMaterial_organism.ApplySchema(r[#"organism"]),
      #"partDescription" = if r[#"partDescription"]? = null then null else Table.FromRecords(List.Transform(r[#"partDescription"], SubstanceSourceMaterial_partDescription.ApplySchema))
    ],

  SubstanceSourceMaterial_fractionDescription.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"fraction" = r[#"fraction"]?,
      #"materialType" = if r[#"materialType"]? = null then null else CodeableConcept.ApplySchema(r[#"materialType"])
    ],

  SubstanceSourceMaterial_organism.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"family" = if r[#"family"]? = null then null else CodeableConcept.ApplySchema(r[#"family"]),
      #"genus" = if r[#"genus"]? = null then null else CodeableConcept.ApplySchema(r[#"genus"]),
      #"species" = if r[#"species"]? = null then null else CodeableConcept.ApplySchema(r[#"species"]),
      #"intraspecificType" = if r[#"intraspecificType"]? = null then null else CodeableConcept.ApplySchema(r[#"intraspecificType"]),
      #"intraspecificDescription" = r[#"intraspecificDescription"]?,
      #"author" = if r[#"author"]? = null then null else Table.FromRecords(List.Transform(r[#"author"], SubstanceSourceMaterial_organism_author.ApplySchema)),
      #"hybrid" = if r[#"hybrid"]? = null then null else SubstanceSourceMaterial_organism_hybrid.ApplySchema(r[#"hybrid"]),
      #"organismGeneral" = if r[#"organismGeneral"]? = null then null else SubstanceSourceMaterial_organism_organismGeneral.ApplySchema(r[#"organismGeneral"])
    ],

  SubstanceSourceMaterial_organism_author.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"authorType" = if r[#"authorType"]? = null then null else CodeableConcept.ApplySchema(r[#"authorType"]),
      #"authorDescription" = r[#"authorDescription"]?
    ],

  SubstanceSourceMaterial_organism_hybrid.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"maternalOrganismId" = r[#"maternalOrganismId"]?,
      #"maternalOrganismName" = r[#"maternalOrganismName"]?,
      #"paternalOrganismId" = r[#"paternalOrganismId"]?,
      #"paternalOrganismName" = r[#"paternalOrganismName"]?,
      #"hybridType" = if r[#"hybridType"]? = null then null else CodeableConcept.ApplySchema(r[#"hybridType"])
    ],

  SubstanceSourceMaterial_organism_organismGeneral.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"kingdom" = if r[#"kingdom"]? = null then null else CodeableConcept.ApplySchema(r[#"kingdom"]),
      #"phylum" = if r[#"phylum"]? = null then null else CodeableConcept.ApplySchema(r[#"phylum"]),
      #"class" = if r[#"class"]? = null then null else CodeableConcept.ApplySchema(r[#"class"]),
      #"order" = if r[#"order"]? = null then null else CodeableConcept.ApplySchema(r[#"order"])
    ],

  SubstanceSourceMaterial_partDescription.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"part" = if r[#"part"]? = null then null else CodeableConcept.ApplySchema(r[#"part"]),
      #"partLocation" = if r[#"partLocation"]? = null then null else CodeableConcept.ApplySchema(r[#"partLocation"])
    ],

  SubstanceSpecification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"domain" = if r[#"domain"]? = null then null else CodeableConcept.ApplySchema(r[#"domain"]),
      #"description" = r[#"description"]?,
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema)),
      #"comment" = r[#"comment"]?,
      #"moiety" = if r[#"moiety"]? = null then null else Table.FromRecords(List.Transform(r[#"moiety"], SubstanceSpecification_moiety.ApplySchema)),
      #"property" = if r[#"property"]? = null then null else Table.FromRecords(List.Transform(r[#"property"], SubstanceSpecification_property.ApplySchema)),
      #"referenceInformation" = if r[#"referenceInformation"]? = null then null else Reference.ApplySchema(r[#"referenceInformation"]),
      #"structure" = if r[#"structure"]? = null then null else SubstanceSpecification_structure.ApplySchema(r[#"structure"]),
      #"code" = if r[#"code"]? = null then null else Table.FromRecords(List.Transform(r[#"code"], SubstanceSpecification_code.ApplySchema)),
      #"name" = if r[#"name"]? = null then null else Table.FromRecords(List.Transform(r[#"name"], SubstanceSpecification_name.ApplySchema)),
      #"relationship" = if r[#"relationship"]? = null then null else Table.FromRecords(List.Transform(r[#"relationship"], SubstanceSpecification_relationship.ApplySchema)),
      #"nucleicAcid" = if r[#"nucleicAcid"]? = null then null else Reference.ApplySchema(r[#"nucleicAcid"]),
      #"polymer" = if r[#"polymer"]? = null then null else Reference.ApplySchema(r[#"polymer"]),
      #"protein" = if r[#"protein"]? = null then null else Reference.ApplySchema(r[#"protein"]),
      #"sourceMaterial" = if r[#"sourceMaterial"]? = null then null else Reference.ApplySchema(r[#"sourceMaterial"]),
      #"molecularWeight" = if r[#"molecularWeight"]? = null then null else Table.FromRecords(List.Transform(r[#"molecularWeight"], SubstanceSpecification_structure_isotope_molecularWeight.ApplySchema))
    ],

  SubstanceSpecification_moiety.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"role" = if r[#"role"]? = null then null else CodeableConcept.ApplySchema(r[#"role"]),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"name" = r[#"name"]?,
      #"stereochemistry" = if r[#"stereochemistry"]? = null then null else CodeableConcept.ApplySchema(r[#"stereochemistry"]),
      #"opticalActivity" = if r[#"opticalActivity"]? = null then null else CodeableConcept.ApplySchema(r[#"opticalActivity"]),
      #"molecularFormula" = r[#"molecularFormula"]?,
      #"amount" = if r[#"amount"]? = null then null else SubstanceSpecification_moiety_amount.ApplySchema(r[#"amount"])
    ],

  SubstanceSpecification_moiety_amount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"string" = r[#"string"]?
    ],

  SubstanceSpecification_property.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"parameters" = r[#"parameters"]?,
      #"definingSubstance" = if r[#"definingSubstance"]? = null then null else SubstanceSpecification_property_definingSubstance.ApplySchema(r[#"definingSubstance"]),
      #"amount" = if r[#"amount"]? = null then null else SubstanceSpecification_property_amount.ApplySchema(r[#"amount"])
    ],

  SubstanceSpecification_property_definingSubstance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  SubstanceSpecification_property_amount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"string" = r[#"string"]?
    ],

  SubstanceSpecification_structure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"stereochemistry" = if r[#"stereochemistry"]? = null then null else CodeableConcept.ApplySchema(r[#"stereochemistry"]),
      #"opticalActivity" = if r[#"opticalActivity"]? = null then null else CodeableConcept.ApplySchema(r[#"opticalActivity"]),
      #"molecularFormula" = r[#"molecularFormula"]?,
      #"molecularFormulaByMoiety" = r[#"molecularFormulaByMoiety"]?,
      #"isotope" = if r[#"isotope"]? = null then null else Table.FromRecords(List.Transform(r[#"isotope"], SubstanceSpecification_structure_isotope.ApplySchema)),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema)),
      #"representation" = if r[#"representation"]? = null then null else Table.FromRecords(List.Transform(r[#"representation"], SubstanceSpecification_structure_representation.ApplySchema)),
      #"molecularWeight" = if r[#"molecularWeight"]? = null then null else SubstanceSpecification_structure_isotope_molecularWeight.ApplySchema(r[#"molecularWeight"])
    ],

  SubstanceSpecification_structure_isotope.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"name" = if r[#"name"]? = null then null else CodeableConcept.ApplySchema(r[#"name"]),
      #"substitution" = if r[#"substitution"]? = null then null else CodeableConcept.ApplySchema(r[#"substitution"]),
      #"halfLife" = if r[#"halfLife"]? = null then null else Quantity.ApplySchema(r[#"halfLife"]),
      #"molecularWeight" = if r[#"molecularWeight"]? = null then null else SubstanceSpecification_structure_isotope_molecularWeight.ApplySchema(r[#"molecularWeight"])
    ],

  SubstanceSpecification_structure_isotope_molecularWeight.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"method" = if r[#"method"]? = null then null else CodeableConcept.ApplySchema(r[#"method"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"amount" = if r[#"amount"]? = null then null else Quantity.ApplySchema(r[#"amount"])
    ],

  SubstanceSpecification_structure_representation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"representation" = r[#"representation"]?,
      #"attachment" = if r[#"attachment"]? = null then null else Attachment.ApplySchema(r[#"attachment"])
    ],

  SubstanceSpecification_code.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"statusDate" = if r[#"statusDate"]? <> null then DateTimeZone.From(r[#"statusDate"]) else null,
      #"comment" = r[#"comment"]?,
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceSpecification_name.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"preferred" = r[#"preferred"]?,
      #"language" = if r[#"language"]? = null then null else Table.FromRecords(List.Transform(r[#"language"], CodeableConcept.ApplySchema)),
      #"domain" = if r[#"domain"]? = null then null else Table.FromRecords(List.Transform(r[#"domain"], CodeableConcept.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"official" = if r[#"official"]? = null then null else Table.FromRecords(List.Transform(r[#"official"], SubstanceSpecification_name_official.ApplySchema)),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema)),
      #"synonym" = if r[#"synonym"]? = null then null else Table.FromRecords(List.Transform(r[#"synonym"], @SubstanceSpecification_name.ApplySchema)),
      #"translation" = if r[#"translation"]? = null then null else Table.FromRecords(List.Transform(r[#"translation"], @SubstanceSpecification_name.ApplySchema))
    ],

  SubstanceSpecification_name_official.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"authority" = if r[#"authority"]? = null then null else CodeableConcept.ApplySchema(r[#"authority"]),
      #"status" = if r[#"status"]? = null then null else CodeableConcept.ApplySchema(r[#"status"]),
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null
    ],

  SubstanceSpecification_relationship.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"substance" = if r[#"substance"]? = null then null else SubstanceSpecification_relationship_substance.ApplySchema(r[#"substance"]),
      #"relationship" = if r[#"relationship"]? = null then null else CodeableConcept.ApplySchema(r[#"relationship"]),
      #"isDefining" = r[#"isDefining"]?,
      #"amount" = if r[#"amount"]? = null then null else SubstanceSpecification_relationship_amount.ApplySchema(r[#"amount"]),
      #"amountRatioLowLimit" = if r[#"amountRatioLowLimit"]? = null then null else Ratio.ApplySchema(r[#"amountRatioLowLimit"]),
      #"amountType" = if r[#"amountType"]? = null then null else CodeableConcept.ApplySchema(r[#"amountType"]),
      #"source" = if r[#"source"]? = null then null else Table.FromRecords(List.Transform(r[#"source"], Reference.ApplySchema))
    ],

  SubstanceSpecification_relationship_substance.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"])
    ],

  SubstanceSpecification_relationship_amount.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"string" = r[#"string"]?
    ],

  SupplyDelivery.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"suppliedItem" = if r[#"suppliedItem"]? = null then null else SupplyDelivery_suppliedItem.ApplySchema(r[#"suppliedItem"]),
      #"occurrence" = if r[#"occurrence"]? = null then null else SupplyDelivery_occurrence.ApplySchema(r[#"occurrence"]),
      #"supplier" = if r[#"supplier"]? = null then null else Reference.ApplySchema(r[#"supplier"]),
      #"destination" = if r[#"destination"]? = null then null else Reference.ApplySchema(r[#"destination"]),
      #"receiver" = if r[#"receiver"]? = null then null else Table.FromRecords(List.Transform(r[#"receiver"], Reference.ApplySchema))
    ],

  SupplyDelivery_suppliedItem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"item" = if r[#"item"]? = null then null else SupplyDelivery_suppliedItem_item.ApplySchema(r[#"item"])
    ],

  SupplyDelivery_suppliedItem_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  SupplyDelivery_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  SupplyRequest.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"category" = if r[#"category"]? = null then null else CodeableConcept.ApplySchema(r[#"category"]),
      #"priority" = r[#"priority"]?,
      #"item" = if r[#"item"]? = null then null else SupplyRequest_item.ApplySchema(r[#"item"]),
      #"quantity" = if r[#"quantity"]? = null then null else Quantity.ApplySchema(r[#"quantity"]),
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], SupplyRequest_parameter.ApplySchema)),
      #"occurrence" = if r[#"occurrence"]? = null then null else SupplyRequest_occurrence.ApplySchema(r[#"occurrence"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"supplier" = if r[#"supplier"]? = null then null else Table.FromRecords(List.Transform(r[#"supplier"], Reference.ApplySchema)),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonCode"], CodeableConcept.ApplySchema)),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Table.FromRecords(List.Transform(r[#"reasonReference"], Reference.ApplySchema)),
      #"deliverFrom" = if r[#"deliverFrom"]? = null then null else Reference.ApplySchema(r[#"deliverFrom"]),
      #"deliverTo" = if r[#"deliverTo"]? = null then null else Reference.ApplySchema(r[#"deliverTo"])
    ],

  SupplyRequest_item.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"])
    ],

  SupplyRequest_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"value" = if r[#"value"]? = null then null else SupplyRequest_parameter_value.ApplySchema(r[#"value"])
    ],

  SupplyRequest_parameter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"boolean" = r[#"boolean"]?
    ],

  SupplyRequest_occurrence.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"])
    ],

  Task.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"instantiatesCanonical" = r[#"instantiatesCanonical"]?,
      #"instantiatesUri" = r[#"instantiatesUri"]?,
      #"basedOn" = if r[#"basedOn"]? = null then null else Table.FromRecords(List.Transform(r[#"basedOn"], Reference.ApplySchema)),
      #"groupIdentifier" = if r[#"groupIdentifier"]? = null then null else Identifier.ApplySchema(r[#"groupIdentifier"]),
      #"partOf" = if r[#"partOf"]? = null then null else Table.FromRecords(List.Transform(r[#"partOf"], Reference.ApplySchema)),
      #"status" = r[#"status"]?,
      #"statusReason" = if r[#"statusReason"]? = null then null else CodeableConcept.ApplySchema(r[#"statusReason"]),
      #"businessStatus" = if r[#"businessStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"businessStatus"]),
      #"intent" = r[#"intent"]?,
      #"priority" = r[#"priority"]?,
      #"code" = if r[#"code"]? = null then null else CodeableConcept.ApplySchema(r[#"code"]),
      #"description" = r[#"description"]?,
      #"focus" = if r[#"focus"]? = null then null else Reference.ApplySchema(r[#"focus"]),
      #"for" = if r[#"for"]? = null then null else Reference.ApplySchema(r[#"for"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"executionPeriod" = if r[#"executionPeriod"]? = null then null else Period.ApplySchema(r[#"executionPeriod"]),
      #"authoredOn" = if r[#"authoredOn"]? <> null then DateTimeZone.From(r[#"authoredOn"]) else null,
      #"lastModified" = if r[#"lastModified"]? <> null then DateTimeZone.From(r[#"lastModified"]) else null,
      #"requester" = if r[#"requester"]? = null then null else Reference.ApplySchema(r[#"requester"]),
      #"performerType" = if r[#"performerType"]? = null then null else Table.FromRecords(List.Transform(r[#"performerType"], CodeableConcept.ApplySchema)),
      #"owner" = if r[#"owner"]? = null then null else Reference.ApplySchema(r[#"owner"]),
      #"location" = if r[#"location"]? = null then null else Reference.ApplySchema(r[#"location"]),
      #"reasonCode" = if r[#"reasonCode"]? = null then null else CodeableConcept.ApplySchema(r[#"reasonCode"]),
      #"reasonReference" = if r[#"reasonReference"]? = null then null else Reference.ApplySchema(r[#"reasonReference"]),
      #"insurance" = if r[#"insurance"]? = null then null else Table.FromRecords(List.Transform(r[#"insurance"], Reference.ApplySchema)),
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema)),
      #"relevantHistory" = if r[#"relevantHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"relevantHistory"], Reference.ApplySchema)),
      #"restriction" = if r[#"restriction"]? = null then null else Task_restriction.ApplySchema(r[#"restriction"]),
      #"input" = if r[#"input"]? = null then null else Table.FromRecords(List.Transform(r[#"input"], Task_input.ApplySchema)),
      #"output" = if r[#"output"]? = null then null else Table.FromRecords(List.Transform(r[#"output"], Task_output.ApplySchema))
    ],

  Task_restriction.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"repetitions" = r[#"repetitions"]?,
      #"period" = if r[#"period"]? = null then null else Period.ApplySchema(r[#"period"]),
      #"recipient" = if r[#"recipient"]? = null then null else Table.FromRecords(List.Transform(r[#"recipient"], Reference.ApplySchema))
    ],

  Task_input.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = if r[#"value"]? = null then null else Task_input_value.ApplySchema(r[#"value"])
    ],

  Task_input_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  Task_output.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else CodeableConcept.ApplySchema(r[#"type"]),
      #"value" = if r[#"value"]? = null then null else Task_output_value.ApplySchema(r[#"value"])
    ],

  Task_output_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"base64Binary" = r[#"base64Binary"]?,
      #"boolean" = r[#"boolean"]?,
      #"canonical" = r[#"canonical"]?,
      #"code" = r[#"code"]?,
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null,
      #"decimal" = r[#"decimal"]?,
      #"id" = r[#"id"]?,
      #"instant" = if r[#"instant"]? <> null then DateTimeZone.From(r[#"instant"]) else null,
      #"integer" = r[#"integer"]?,
      #"markdown" = r[#"markdown"]?,
      #"oid" = r[#"oid"]?,
      #"positiveInt" = r[#"positiveInt"]?,
      #"string" = r[#"string"]?,
      #"time" = if r[#"time"]? <> null then Time.From(r[#"time"]) else null,
      #"unsignedInt" = r[#"unsignedInt"]?,
      #"uri" = r[#"uri"]?,
      #"url" = r[#"url"]?,
      #"uuid" = r[#"uuid"]?,
      #"Address" = if r[#"Address"]? = null then null else Address.ApplySchema(r[#"Address"]),
      #"Age" = if r[#"Age"]? = null then null else Age.ApplySchema(r[#"Age"]),
      #"Annotation" = if r[#"Annotation"]? = null then null else Annotation.ApplySchema(r[#"Annotation"]),
      #"Attachment" = if r[#"Attachment"]? = null then null else Attachment.ApplySchema(r[#"Attachment"]),
      #"CodeableConcept" = if r[#"CodeableConcept"]? = null then null else CodeableConcept.ApplySchema(r[#"CodeableConcept"]),
      #"Coding" = if r[#"Coding"]? = null then null else Coding.ApplySchema(r[#"Coding"]),
      #"ContactPoint" = if r[#"ContactPoint"]? = null then null else ContactPoint.ApplySchema(r[#"ContactPoint"]),
      #"Count" = if r[#"Count"]? = null then null else Count.ApplySchema(r[#"Count"]),
      #"Distance" = if r[#"Distance"]? = null then null else Distance.ApplySchema(r[#"Distance"]),
      #"Duration" = if r[#"Duration"]? = null then null else Duration.ApplySchema(r[#"Duration"]),
      #"HumanName" = if r[#"HumanName"]? = null then null else HumanName.ApplySchema(r[#"HumanName"]),
      #"Identifier" = if r[#"Identifier"]? = null then null else Identifier.ApplySchema(r[#"Identifier"]),
      #"Money" = if r[#"Money"]? = null then null else Money.ApplySchema(r[#"Money"]),
      #"Period" = if r[#"Period"]? = null then null else Period.ApplySchema(r[#"Period"]),
      #"Quantity" = if r[#"Quantity"]? = null then null else Quantity.ApplySchema(r[#"Quantity"]),
      #"Range" = if r[#"Range"]? = null then null else Range.ApplySchema(r[#"Range"]),
      #"Ratio" = if r[#"Ratio"]? = null then null else Ratio.ApplySchema(r[#"Ratio"]),
      #"Reference" = if r[#"Reference"]? = null then null else Reference.ApplySchema(r[#"Reference"]),
      #"SampledData" = if r[#"SampledData"]? = null then null else SampledData.ApplySchema(r[#"SampledData"]),
      #"Signature" = if r[#"Signature"]? = null then null else Signature.ApplySchema(r[#"Signature"]),
      #"Timing" = if r[#"Timing"]? = null then null else Timing.ApplySchema(r[#"Timing"]),
      #"ContactDetail" = if r[#"ContactDetail"]? = null then null else ContactDetail.ApplySchema(r[#"ContactDetail"]),
      #"Contributor" = if r[#"Contributor"]? = null then null else Contributor.ApplySchema(r[#"Contributor"]),
      #"DataRequirement" = if r[#"DataRequirement"]? = null then null else DataRequirement.ApplySchema(r[#"DataRequirement"]),
      #"Expression" = if r[#"Expression"]? = null then null else Expression.ApplySchema(r[#"Expression"]),
      #"ParameterDefinition" = if r[#"ParameterDefinition"]? = null then null else ParameterDefinition.ApplySchema(r[#"ParameterDefinition"]),
      #"RelatedArtifact" = if r[#"RelatedArtifact"]? = null then null else RelatedArtifact.ApplySchema(r[#"RelatedArtifact"]),
      #"TriggerDefinition" = if r[#"TriggerDefinition"]? = null then null else TriggerDefinition.ApplySchema(r[#"TriggerDefinition"]),
      #"UsageContext" = if r[#"UsageContext"]? = null then null else UsageContext.ApplySchema(r[#"UsageContext"]),
      #"Dosage" = if r[#"Dosage"]? = null then null else Dosage.ApplySchema(r[#"Dosage"]),
      #"Meta" = if r[#"Meta"]? = null then null else Meta.ApplySchema(r[#"Meta"])
    ],

  TerminologyCapabilities.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"kind" = r[#"kind"]?,
      #"software" = if r[#"software"]? = null then null else TerminologyCapabilities_software.ApplySchema(r[#"software"]),
      #"implementation" = if r[#"implementation"]? = null then null else TerminologyCapabilities_implementation.ApplySchema(r[#"implementation"]),
      #"lockedDate" = r[#"lockedDate"]?,
      #"codeSystem" = if r[#"codeSystem"]? = null then null else Table.FromRecords(List.Transform(r[#"codeSystem"], TerminologyCapabilities_codeSystem.ApplySchema)),
      #"expansion" = if r[#"expansion"]? = null then null else TerminologyCapabilities_expansion.ApplySchema(r[#"expansion"]),
      #"codeSearch" = r[#"codeSearch"]?,
      #"validateCode" = if r[#"validateCode"]? = null then null else TerminologyCapabilities_validateCode.ApplySchema(r[#"validateCode"]),
      #"translation" = if r[#"translation"]? = null then null else TerminologyCapabilities_translation.ApplySchema(r[#"translation"]),
      #"closure" = if r[#"closure"]? = null then null else TerminologyCapabilities_closure.ApplySchema(r[#"closure"])
    ],

  TerminologyCapabilities_software.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"version" = r[#"version"]?
    ],

  TerminologyCapabilities_implementation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"description" = r[#"description"]?,
      #"url" = r[#"url"]?
    ],

  TerminologyCapabilities_codeSystem.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"uri" = r[#"uri"]?,
      #"version" = if r[#"version"]? = null then null else Table.FromRecords(List.Transform(r[#"version"], TerminologyCapabilities_codeSystem_version.ApplySchema)),
      #"subsumption" = r[#"subsumption"]?
    ],

  TerminologyCapabilities_codeSystem_version.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"isDefault" = r[#"isDefault"]?,
      #"compositional" = r[#"compositional"]?,
      #"language" = if r[#"language"]? <> null then List.Transform(r[#"language"], each _) else null,
      #"filter" = if r[#"filter"]? = null then null else Table.FromRecords(List.Transform(r[#"filter"], TerminologyCapabilities_codeSystem_version_filter.ApplySchema)),
      #"property" = if r[#"property"]? <> null then List.Transform(r[#"property"], each _) else null
    ],

  TerminologyCapabilities_codeSystem_version_filter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"op" = if r[#"op"]? <> null then List.Transform(r[#"op"], each _) else null
    ],

  TerminologyCapabilities_expansion.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"hierarchical" = r[#"hierarchical"]?,
      #"paging" = r[#"paging"]?,
      #"incomplete" = r[#"incomplete"]?,
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], TerminologyCapabilities_expansion_parameter.ApplySchema)),
      #"textFilter" = r[#"textFilter"]?
    ],

  TerminologyCapabilities_expansion_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"documentation" = r[#"documentation"]?
    ],

  TerminologyCapabilities_validateCode.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"translations" = r[#"translations"]?
    ],

  TerminologyCapabilities_translation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"needsMap" = r[#"needsMap"]?
    ],

  TerminologyCapabilities_closure.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"translation" = r[#"translation"]?
    ],

  TestReport.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"name" = r[#"name"]?,
      #"status" = r[#"status"]?,
      #"testScript" = if r[#"testScript"]? = null then null else Reference.ApplySchema(r[#"testScript"]),
      #"result" = r[#"result"]?,
      #"score" = r[#"score"]?,
      #"tester" = r[#"tester"]?,
      #"issued" = if r[#"issued"]? <> null then DateTimeZone.From(r[#"issued"]) else null,
      #"participant" = if r[#"participant"]? = null then null else Table.FromRecords(List.Transform(r[#"participant"], TestReport_participant.ApplySchema)),
      #"setup" = if r[#"setup"]? = null then null else TestReport_setup.ApplySchema(r[#"setup"]),
      #"test" = if r[#"test"]? = null then null else Table.FromRecords(List.Transform(r[#"test"], TestReport_test.ApplySchema)),
      #"teardown" = if r[#"teardown"]? = null then null else TestReport_teardown.ApplySchema(r[#"teardown"])
    ],

  TestReport_participant.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = r[#"type"]?,
      #"uri" = r[#"uri"]?,
      #"display" = r[#"display"]?
    ],

  TestReport_setup.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestReport_setup_action.ApplySchema))
    ],

  TestReport_setup_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestReport_setup_action_operation.ApplySchema(r[#"operation"]),
      #"assert" = if r[#"assert"]? = null then null else TestReport_setup_action_assert.ApplySchema(r[#"assert"])
    ],

  TestReport_setup_action_operation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"result" = r[#"result"]?,
      #"message" = r[#"message"]?,
      #"detail" = r[#"detail"]?
    ],

  TestReport_setup_action_assert.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"result" = r[#"result"]?,
      #"message" = r[#"message"]?,
      #"detail" = r[#"detail"]?
    ],

  TestReport_test.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestReport_test_action.ApplySchema))
    ],

  TestReport_test_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestReport_setup_action_operation.ApplySchema(r[#"operation"]),
      #"assert" = if r[#"assert"]? = null then null else TestReport_setup_action_assert.ApplySchema(r[#"assert"])
    ],

  TestReport_teardown.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestReport_teardown_action.ApplySchema))
    ],

  TestReport_teardown_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestReport_setup_action_operation.ApplySchema(r[#"operation"])
    ],

  TestScript.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Identifier.ApplySchema(r[#"identifier"]),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"origin" = if r[#"origin"]? = null then null else Table.FromRecords(List.Transform(r[#"origin"], TestScript_origin.ApplySchema)),
      #"destination" = if r[#"destination"]? = null then null else Table.FromRecords(List.Transform(r[#"destination"], TestScript_destination.ApplySchema)),
      #"metadata" = if r[#"metadata"]? = null then null else TestScript_metadata.ApplySchema(r[#"metadata"]),
      #"fixture" = if r[#"fixture"]? = null then null else Table.FromRecords(List.Transform(r[#"fixture"], TestScript_fixture.ApplySchema)),
      #"profile" = if r[#"profile"]? = null then null else Table.FromRecords(List.Transform(r[#"profile"], Reference.ApplySchema)),
      #"variable" = if r[#"variable"]? = null then null else Table.FromRecords(List.Transform(r[#"variable"], TestScript_variable.ApplySchema)),
      #"setup" = if r[#"setup"]? = null then null else TestScript_setup.ApplySchema(r[#"setup"]),
      #"test" = if r[#"test"]? = null then null else Table.FromRecords(List.Transform(r[#"test"], TestScript_test.ApplySchema)),
      #"teardown" = if r[#"teardown"]? = null then null else TestScript_teardown.ApplySchema(r[#"teardown"])
    ],

  TestScript_origin.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"index" = r[#"index"]?,
      #"profile" = if r[#"profile"]? = null then null else Coding.ApplySchema(r[#"profile"])
    ],

  TestScript_destination.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"index" = r[#"index"]?,
      #"profile" = if r[#"profile"]? = null then null else Coding.ApplySchema(r[#"profile"])
    ],

  TestScript_metadata.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"link" = if r[#"link"]? = null then null else Table.FromRecords(List.Transform(r[#"link"], TestScript_metadata_link.ApplySchema)),
      #"capability" = if r[#"capability"]? = null then null else Table.FromRecords(List.Transform(r[#"capability"], TestScript_metadata_capability.ApplySchema))
    ],

  TestScript_metadata_link.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"description" = r[#"description"]?
    ],

  TestScript_metadata_capability.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"required" = r[#"required"]?,
      #"validated" = r[#"validated"]?,
      #"description" = r[#"description"]?,
      #"origin" = if r[#"origin"]? <> null then List.Transform(r[#"origin"], each _) else null,
      #"destination" = r[#"destination"]?,
      #"link" = if r[#"link"]? <> null then List.Transform(r[#"link"], each _) else null,
      #"capabilities" = r[#"capabilities"]?
    ],

  TestScript_fixture.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"autocreate" = r[#"autocreate"]?,
      #"autodelete" = r[#"autodelete"]?,
      #"resource" = if r[#"resource"]? = null then null else Reference.ApplySchema(r[#"resource"])
    ],

  TestScript_variable.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"defaultValue" = r[#"defaultValue"]?,
      #"description" = r[#"description"]?,
      #"expression" = r[#"expression"]?,
      #"headerField" = r[#"headerField"]?,
      #"hint" = r[#"hint"]?,
      #"path" = r[#"path"]?,
      #"sourceId" = r[#"sourceId"]?
    ],

  TestScript_setup.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestScript_setup_action.ApplySchema))
    ],

  TestScript_setup_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestScript_setup_action_operation.ApplySchema(r[#"operation"]),
      #"assert" = if r[#"assert"]? = null then null else TestScript_setup_action_assert.ApplySchema(r[#"assert"])
    ],

  TestScript_setup_action_operation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"type" = if r[#"type"]? = null then null else Coding.ApplySchema(r[#"type"]),
      #"resource" = r[#"resource"]?,
      #"label" = r[#"label"]?,
      #"description" = r[#"description"]?,
      #"accept" = r[#"accept"]?,
      #"contentType" = r[#"contentType"]?,
      #"destination" = r[#"destination"]?,
      #"encodeRequestUrl" = r[#"encodeRequestUrl"]?,
      #"method" = r[#"method"]?,
      #"origin" = r[#"origin"]?,
      #"params" = r[#"params"]?,
      #"requestHeader" = if r[#"requestHeader"]? = null then null else Table.FromRecords(List.Transform(r[#"requestHeader"], TestScript_setup_action_operation_requestHeader.ApplySchema)),
      #"requestId" = r[#"requestId"]?,
      #"responseId" = r[#"responseId"]?,
      #"sourceId" = r[#"sourceId"]?,
      #"targetId" = r[#"targetId"]?,
      #"url" = r[#"url"]?
    ],

  TestScript_setup_action_operation_requestHeader.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"field" = r[#"field"]?,
      #"value" = r[#"value"]?
    ],

  TestScript_setup_action_assert.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"label" = r[#"label"]?,
      #"description" = r[#"description"]?,
      #"direction" = r[#"direction"]?,
      #"compareToSourceId" = r[#"compareToSourceId"]?,
      #"compareToSourceExpression" = r[#"compareToSourceExpression"]?,
      #"compareToSourcePath" = r[#"compareToSourcePath"]?,
      #"contentType" = r[#"contentType"]?,
      #"expression" = r[#"expression"]?,
      #"headerField" = r[#"headerField"]?,
      #"minimumId" = r[#"minimumId"]?,
      #"navigationLinks" = r[#"navigationLinks"]?,
      #"operator" = r[#"operator"]?,
      #"path" = r[#"path"]?,
      #"requestMethod" = r[#"requestMethod"]?,
      #"requestURL" = r[#"requestURL"]?,
      #"resource" = r[#"resource"]?,
      #"response" = r[#"response"]?,
      #"responseCode" = r[#"responseCode"]?,
      #"sourceId" = r[#"sourceId"]?,
      #"validateProfileId" = r[#"validateProfileId"]?,
      #"value" = r[#"value"]?,
      #"warningOnly" = r[#"warningOnly"]?
    ],

  TestScript_test.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"description" = r[#"description"]?,
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestScript_test_action.ApplySchema))
    ],

  TestScript_test_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestScript_setup_action_operation.ApplySchema(r[#"operation"]),
      #"assert" = if r[#"assert"]? = null then null else TestScript_setup_action_assert.ApplySchema(r[#"assert"])
    ],

  TestScript_teardown.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"action" = if r[#"action"]? = null then null else Table.FromRecords(List.Transform(r[#"action"], TestScript_teardown_action.ApplySchema))
    ],

  TestScript_teardown_action.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"operation" = if r[#"operation"]? = null then null else TestScript_setup_action_operation.ApplySchema(r[#"operation"])
    ],

  ValueSet.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"url" = r[#"url"]?,
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"version" = r[#"version"]?,
      #"name" = r[#"name"]?,
      #"title" = r[#"title"]?,
      #"status" = r[#"status"]?,
      #"experimental" = r[#"experimental"]?,
      #"date" = if r[#"date"]? <> null then DateTimeZone.From(r[#"date"]) else null,
      #"publisher" = r[#"publisher"]?,
      #"contact" = if r[#"contact"]? = null then null else Table.FromRecords(List.Transform(r[#"contact"], ContactDetail.ApplySchema)),
      #"description" = r[#"description"]?,
      #"useContext" = if r[#"useContext"]? = null then null else Table.FromRecords(List.Transform(r[#"useContext"], UsageContext.ApplySchema)),
      #"jurisdiction" = if r[#"jurisdiction"]? = null then null else Table.FromRecords(List.Transform(r[#"jurisdiction"], CodeableConcept.ApplySchema)),
      #"immutable" = r[#"immutable"]?,
      #"purpose" = r[#"purpose"]?,
      #"copyright" = r[#"copyright"]?,
      #"compose" = if r[#"compose"]? = null then null else ValueSet_compose.ApplySchema(r[#"compose"]),
      #"expansion" = if r[#"expansion"]? = null then null else ValueSet_expansion.ApplySchema(r[#"expansion"])
    ],

  ValueSet_compose.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"lockedDate" = if r[#"lockedDate"]? <> null then Date.FromDateOrDateTimeZone(r[#"lockedDate"]) else null,
      #"inactive" = r[#"inactive"]?,
      #"include" = if r[#"include"]? = null then null else Table.FromRecords(List.Transform(r[#"include"], ValueSet_compose_include.ApplySchema)),
      #"exclude" = if r[#"exclude"]? = null then null else Table.FromRecords(List.Transform(r[#"exclude"], ValueSet_compose_include.ApplySchema))
    ],

  ValueSet_compose_include.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"system" = r[#"system"]?,
      #"version" = r[#"version"]?,
      #"concept" = if r[#"concept"]? = null then null else Table.FromRecords(List.Transform(r[#"concept"], ValueSet_compose_include_concept.ApplySchema)),
      #"filter" = if r[#"filter"]? = null then null else Table.FromRecords(List.Transform(r[#"filter"], ValueSet_compose_include_filter.ApplySchema)),
      #"valueSet" = if r[#"valueSet"]? <> null then List.Transform(r[#"valueSet"], each _) else null
    ],

  ValueSet_compose_include_concept.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"designation" = if r[#"designation"]? = null then null else Table.FromRecords(List.Transform(r[#"designation"], ValueSet_compose_include_concept_designation.ApplySchema))
    ],

  ValueSet_compose_include_concept_designation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"language" = r[#"language"]?,
      #"use" = if r[#"use"]? = null then null else Coding.ApplySchema(r[#"use"]),
      #"value" = r[#"value"]?
    ],

  ValueSet_compose_include_filter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"property" = r[#"property"]?,
      #"op" = r[#"op"]?,
      #"value" = r[#"value"]?
    ],

  ValueSet_expansion.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = r[#"identifier"]?,
      #"timestamp" = if r[#"timestamp"]? <> null then DateTimeZone.From(r[#"timestamp"]) else null,
      #"total" = r[#"total"]?,
      #"offset" = r[#"offset"]?,
      #"parameter" = if r[#"parameter"]? = null then null else Table.FromRecords(List.Transform(r[#"parameter"], ValueSet_expansion_parameter.ApplySchema)),
      #"contains" = if r[#"contains"]? = null then null else Table.FromRecords(List.Transform(r[#"contains"], ValueSet_expansion_contains.ApplySchema))
    ],

  ValueSet_expansion_parameter.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"name" = r[#"name"]?,
      #"value" = if r[#"value"]? = null then null else ValueSet_expansion_parameter_value.ApplySchema(r[#"value"])
    ],

  ValueSet_expansion_parameter_value.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"string" = r[#"string"]?,
      #"boolean" = r[#"boolean"]?,
      #"integer" = r[#"integer"]?,
      #"decimal" = r[#"decimal"]?,
      #"uri" = r[#"uri"]?,
      #"code" = r[#"code"]?,
      #"dateTime" = if r[#"dateTime"]? <> null then DateTimeZone.From(r[#"dateTime"]) else null
    ],

  ValueSet_expansion_contains.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"system" = r[#"system"]?,
      #"abstract" = r[#"abstract"]?,
      #"inactive" = r[#"inactive"]?,
      #"version" = r[#"version"]?,
      #"code" = r[#"code"]?,
      #"display" = r[#"display"]?,
      #"designation" = if r[#"designation"]? = null then null else Table.FromRecords(List.Transform(r[#"designation"], ValueSet_compose_include_concept_designation.ApplySchema)),
      #"contains" = if r[#"contains"]? = null then null else Table.FromRecords(List.Transform(r[#"contains"], @ValueSet_expansion_contains.ApplySchema))
    ],

  VerificationResult.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"target" = if r[#"target"]? = null then null else Table.FromRecords(List.Transform(r[#"target"], Reference.ApplySchema)),
      #"targetLocation" = if r[#"targetLocation"]? <> null then List.Transform(r[#"targetLocation"], each _) else null,
      #"need" = if r[#"need"]? = null then null else CodeableConcept.ApplySchema(r[#"need"]),
      #"status" = r[#"status"]?,
      #"statusDate" = if r[#"statusDate"]? <> null then DateTimeZone.From(r[#"statusDate"]) else null,
      #"validationType" = if r[#"validationType"]? = null then null else CodeableConcept.ApplySchema(r[#"validationType"]),
      #"validationProcess" = if r[#"validationProcess"]? = null then null else Table.FromRecords(List.Transform(r[#"validationProcess"], CodeableConcept.ApplySchema)),
      #"frequency" = if r[#"frequency"]? = null then null else Timing.ApplySchema(r[#"frequency"]),
      #"lastPerformed" = if r[#"lastPerformed"]? <> null then DateTimeZone.From(r[#"lastPerformed"]) else null,
      #"nextScheduled" = if r[#"nextScheduled"]? <> null then Date.FromDateOrDateTimeZone(r[#"nextScheduled"]) else null,
      #"failureAction" = if r[#"failureAction"]? = null then null else CodeableConcept.ApplySchema(r[#"failureAction"]),
      #"primarySource" = if r[#"primarySource"]? = null then null else Table.FromRecords(List.Transform(r[#"primarySource"], VerificationResult_primarySource.ApplySchema)),
      #"attestation" = if r[#"attestation"]? = null then null else VerificationResult_attestation.ApplySchema(r[#"attestation"]),
      #"validator" = if r[#"validator"]? = null then null else Table.FromRecords(List.Transform(r[#"validator"], VerificationResult_validator.ApplySchema))
    ],

  VerificationResult_primarySource.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"who" = if r[#"who"]? = null then null else Reference.ApplySchema(r[#"who"]),
      #"type" = if r[#"type"]? = null then null else Table.FromRecords(List.Transform(r[#"type"], CodeableConcept.ApplySchema)),
      #"communicationMethod" = if r[#"communicationMethod"]? = null then null else Table.FromRecords(List.Transform(r[#"communicationMethod"], CodeableConcept.ApplySchema)),
      #"validationStatus" = if r[#"validationStatus"]? = null then null else CodeableConcept.ApplySchema(r[#"validationStatus"]),
      #"validationDate" = if r[#"validationDate"]? <> null then DateTimeZone.From(r[#"validationDate"]) else null,
      #"canPushUpdates" = if r[#"canPushUpdates"]? = null then null else CodeableConcept.ApplySchema(r[#"canPushUpdates"]),
      #"pushTypeAvailable" = if r[#"pushTypeAvailable"]? = null then null else Table.FromRecords(List.Transform(r[#"pushTypeAvailable"], CodeableConcept.ApplySchema))
    ],

  VerificationResult_attestation.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"who" = if r[#"who"]? = null then null else Reference.ApplySchema(r[#"who"]),
      #"onBehalfOf" = if r[#"onBehalfOf"]? = null then null else Reference.ApplySchema(r[#"onBehalfOf"]),
      #"communicationMethod" = if r[#"communicationMethod"]? = null then null else CodeableConcept.ApplySchema(r[#"communicationMethod"]),
      #"date" = if r[#"date"]? <> null then Date.FromDateOrDateTimeZone(r[#"date"]) else null,
      #"sourceIdentityCertificate" = r[#"sourceIdentityCertificate"]?,
      #"proxyIdentityCertificate" = r[#"proxyIdentityCertificate"]?,
      #"proxySignature" = if r[#"proxySignature"]? = null then null else Signature.ApplySchema(r[#"proxySignature"]),
      #"sourceSignature" = if r[#"sourceSignature"]? = null then null else Signature.ApplySchema(r[#"sourceSignature"])
    ],

  VerificationResult_validator.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"organization" = if r[#"organization"]? = null then null else Reference.ApplySchema(r[#"organization"]),
      #"identityCertificate" = r[#"identityCertificate"]?,
      #"attestationSignature" = if r[#"attestationSignature"]? = null then null else Signature.ApplySchema(r[#"attestationSignature"])
    ],

  VisionPrescription.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"meta" = if r[#"meta"]? = null then null else Meta.ApplySchema(r[#"meta"]),
      #"implicitRules" = r[#"implicitRules"]?,
      #"language" = r[#"language"]?,
      #"<referenceId>" = r[#"<referenceId>"]?,
      #"text" = if r[#"text"]? = null then null else Narrative.ApplySchema(r[#"text"]),
      #"contained" = if r[#"contained"]? = null then null else Contained.ApplySchema(r[#"contained"]),
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"identifier" = if r[#"identifier"]? = null then null else Table.FromRecords(List.Transform(r[#"identifier"], Identifier.ApplySchema)),
      #"status" = r[#"status"]?,
      #"created" = if r[#"created"]? <> null then DateTimeZone.From(r[#"created"]) else null,
      #"patient" = if r[#"patient"]? = null then null else Reference.ApplySchema(r[#"patient"]),
      #"encounter" = if r[#"encounter"]? = null then null else Reference.ApplySchema(r[#"encounter"]),
      #"dateWritten" = if r[#"dateWritten"]? <> null then DateTimeZone.From(r[#"dateWritten"]) else null,
      #"prescriber" = if r[#"prescriber"]? = null then null else Reference.ApplySchema(r[#"prescriber"]),
      #"lensSpecification" = if r[#"lensSpecification"]? = null then null else Table.FromRecords(List.Transform(r[#"lensSpecification"], VisionPrescription_lensSpecification.ApplySchema))
    ],

  VisionPrescription_lensSpecification.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"product" = if r[#"product"]? = null then null else CodeableConcept.ApplySchema(r[#"product"]),
      #"eye" = r[#"eye"]?,
      #"sphere" = r[#"sphere"]?,
      #"cylinder" = r[#"cylinder"]?,
      #"axis" = r[#"axis"]?,
      #"prism" = if r[#"prism"]? = null then null else Table.FromRecords(List.Transform(r[#"prism"], VisionPrescription_lensSpecification_prism.ApplySchema)),
      #"add" = r[#"add"]?,
      #"power" = r[#"power"]?,
      #"backCurve" = r[#"backCurve"]?,
      #"diameter" = r[#"diameter"]?,
      #"duration" = if r[#"duration"]? = null then null else Quantity.ApplySchema(r[#"duration"]),
      #"color" = r[#"color"]?,
      #"brand" = r[#"brand"]?,
      #"note" = if r[#"note"]? = null then null else Table.FromRecords(List.Transform(r[#"note"], Annotation.ApplySchema))
    ],

  VisionPrescription_lensSpecification_prism.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"id" = r[#"id"]?,
      #"extension" = if r[#"extension"]? = null then null else Table.FromRecords(List.Transform(r[#"extension"], Extension.ApplySchema)),
      #"modifierExtension" = if r[#"modifierExtension"]? = null then null else Table.FromRecords(List.Transform(r[#"modifierExtension"], Extension.ApplySchema)),
      #"amount" = r[#"amount"]?,
      #"base" = r[#"base"]?
    ],

  Contained.ApplySchema = (r as nullable record) as nullable record => 
    if r = null then null else
    [
      #"Account" = if r[#"Account"]? = null then null else Table.FromRecords(List.Transform(r[#"Account"], Account.ApplySchema)),
      #"ActivityDefinition" = if r[#"ActivityDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"ActivityDefinition"], ActivityDefinition.ApplySchema)),
      #"AdverseEvent" = if r[#"AdverseEvent"]? = null then null else Table.FromRecords(List.Transform(r[#"AdverseEvent"], AdverseEvent.ApplySchema)),
      #"AllergyIntolerance" = if r[#"AllergyIntolerance"]? = null then null else Table.FromRecords(List.Transform(r[#"AllergyIntolerance"], AllergyIntolerance.ApplySchema)),
      #"Appointment" = if r[#"Appointment"]? = null then null else Table.FromRecords(List.Transform(r[#"Appointment"], Appointment.ApplySchema)),
      #"AppointmentResponse" = if r[#"AppointmentResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"AppointmentResponse"], AppointmentResponse.ApplySchema)),
      #"AuditEvent" = if r[#"AuditEvent"]? = null then null else Table.FromRecords(List.Transform(r[#"AuditEvent"], AuditEvent.ApplySchema)),
      #"Basic" = if r[#"Basic"]? = null then null else Table.FromRecords(List.Transform(r[#"Basic"], Basic.ApplySchema)),
      #"Binary" = if r[#"Binary"]? = null then null else Table.FromRecords(List.Transform(r[#"Binary"], Binary.ApplySchema)),
      #"BiologicallyDerivedProduct" = if r[#"BiologicallyDerivedProduct"]? = null then null else Table.FromRecords(List.Transform(r[#"BiologicallyDerivedProduct"], BiologicallyDerivedProduct.ApplySchema)),
      #"BodyStructure" = if r[#"BodyStructure"]? = null then null else Table.FromRecords(List.Transform(r[#"BodyStructure"], BodyStructure.ApplySchema)),
      #"Bundle" = if r[#"Bundle"]? = null then null else Table.FromRecords(List.Transform(r[#"Bundle"], Bundle.ApplySchema)),
      #"CapabilityStatement" = if r[#"CapabilityStatement"]? = null then null else Table.FromRecords(List.Transform(r[#"CapabilityStatement"], CapabilityStatement.ApplySchema)),
      #"CarePlan" = if r[#"CarePlan"]? = null then null else Table.FromRecords(List.Transform(r[#"CarePlan"], CarePlan.ApplySchema)),
      #"CareTeam" = if r[#"CareTeam"]? = null then null else Table.FromRecords(List.Transform(r[#"CareTeam"], CareTeam.ApplySchema)),
      #"CatalogEntry" = if r[#"CatalogEntry"]? = null then null else Table.FromRecords(List.Transform(r[#"CatalogEntry"], CatalogEntry.ApplySchema)),
      #"ChargeItem" = if r[#"ChargeItem"]? = null then null else Table.FromRecords(List.Transform(r[#"ChargeItem"], ChargeItem.ApplySchema)),
      #"ChargeItemDefinition" = if r[#"ChargeItemDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"ChargeItemDefinition"], ChargeItemDefinition.ApplySchema)),
      #"Claim" = if r[#"Claim"]? = null then null else Table.FromRecords(List.Transform(r[#"Claim"], Claim.ApplySchema)),
      #"ClaimResponse" = if r[#"ClaimResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"ClaimResponse"], ClaimResponse.ApplySchema)),
      #"ClinicalImpression" = if r[#"ClinicalImpression"]? = null then null else Table.FromRecords(List.Transform(r[#"ClinicalImpression"], ClinicalImpression.ApplySchema)),
      #"CodeSystem" = if r[#"CodeSystem"]? = null then null else Table.FromRecords(List.Transform(r[#"CodeSystem"], CodeSystem.ApplySchema)),
      #"Communication" = if r[#"Communication"]? = null then null else Table.FromRecords(List.Transform(r[#"Communication"], Communication.ApplySchema)),
      #"CommunicationRequest" = if r[#"CommunicationRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"CommunicationRequest"], CommunicationRequest.ApplySchema)),
      #"CompartmentDefinition" = if r[#"CompartmentDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"CompartmentDefinition"], CompartmentDefinition.ApplySchema)),
      #"Composition" = if r[#"Composition"]? = null then null else Table.FromRecords(List.Transform(r[#"Composition"], Composition.ApplySchema)),
      #"ConceptMap" = if r[#"ConceptMap"]? = null then null else Table.FromRecords(List.Transform(r[#"ConceptMap"], ConceptMap.ApplySchema)),
      #"Condition" = if r[#"Condition"]? = null then null else Table.FromRecords(List.Transform(r[#"Condition"], Condition.ApplySchema)),
      #"Consent" = if r[#"Consent"]? = null then null else Table.FromRecords(List.Transform(r[#"Consent"], Consent.ApplySchema)),
      #"Contract" = if r[#"Contract"]? = null then null else Table.FromRecords(List.Transform(r[#"Contract"], Contract.ApplySchema)),
      #"Coverage" = if r[#"Coverage"]? = null then null else Table.FromRecords(List.Transform(r[#"Coverage"], Coverage.ApplySchema)),
      #"CoverageEligibilityRequest" = if r[#"CoverageEligibilityRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"CoverageEligibilityRequest"], CoverageEligibilityRequest.ApplySchema)),
      #"CoverageEligibilityResponse" = if r[#"CoverageEligibilityResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"CoverageEligibilityResponse"], CoverageEligibilityResponse.ApplySchema)),
      #"DetectedIssue" = if r[#"DetectedIssue"]? = null then null else Table.FromRecords(List.Transform(r[#"DetectedIssue"], DetectedIssue.ApplySchema)),
      #"Device" = if r[#"Device"]? = null then null else Table.FromRecords(List.Transform(r[#"Device"], Device.ApplySchema)),
      #"DeviceDefinition" = if r[#"DeviceDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"DeviceDefinition"], DeviceDefinition.ApplySchema)),
      #"DeviceMetric" = if r[#"DeviceMetric"]? = null then null else Table.FromRecords(List.Transform(r[#"DeviceMetric"], DeviceMetric.ApplySchema)),
      #"DeviceRequest" = if r[#"DeviceRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"DeviceRequest"], DeviceRequest.ApplySchema)),
      #"DeviceUseStatement" = if r[#"DeviceUseStatement"]? = null then null else Table.FromRecords(List.Transform(r[#"DeviceUseStatement"], DeviceUseStatement.ApplySchema)),
      #"DiagnosticReport" = if r[#"DiagnosticReport"]? = null then null else Table.FromRecords(List.Transform(r[#"DiagnosticReport"], DiagnosticReport.ApplySchema)),
      #"DocumentManifest" = if r[#"DocumentManifest"]? = null then null else Table.FromRecords(List.Transform(r[#"DocumentManifest"], DocumentManifest.ApplySchema)),
      #"DocumentReference" = if r[#"DocumentReference"]? = null then null else Table.FromRecords(List.Transform(r[#"DocumentReference"], DocumentReference.ApplySchema)),
      #"DomainResource" = if r[#"DomainResource"]? = null then null else Table.FromRecords(List.Transform(r[#"DomainResource"], DomainResource.ApplySchema)),
      #"EffectEvidenceSynthesis" = if r[#"EffectEvidenceSynthesis"]? = null then null else Table.FromRecords(List.Transform(r[#"EffectEvidenceSynthesis"], EffectEvidenceSynthesis.ApplySchema)),
      #"Encounter" = if r[#"Encounter"]? = null then null else Table.FromRecords(List.Transform(r[#"Encounter"], Encounter.ApplySchema)),
      #"Endpoint" = if r[#"Endpoint"]? = null then null else Table.FromRecords(List.Transform(r[#"Endpoint"], Endpoint.ApplySchema)),
      #"EnrollmentRequest" = if r[#"EnrollmentRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"EnrollmentRequest"], EnrollmentRequest.ApplySchema)),
      #"EnrollmentResponse" = if r[#"EnrollmentResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"EnrollmentResponse"], EnrollmentResponse.ApplySchema)),
      #"EpisodeOfCare" = if r[#"EpisodeOfCare"]? = null then null else Table.FromRecords(List.Transform(r[#"EpisodeOfCare"], EpisodeOfCare.ApplySchema)),
      #"EventDefinition" = if r[#"EventDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"EventDefinition"], EventDefinition.ApplySchema)),
      #"Evidence" = if r[#"Evidence"]? = null then null else Table.FromRecords(List.Transform(r[#"Evidence"], Evidence.ApplySchema)),
      #"EvidenceVariable" = if r[#"EvidenceVariable"]? = null then null else Table.FromRecords(List.Transform(r[#"EvidenceVariable"], EvidenceVariable.ApplySchema)),
      #"ExampleScenario" = if r[#"ExampleScenario"]? = null then null else Table.FromRecords(List.Transform(r[#"ExampleScenario"], ExampleScenario.ApplySchema)),
      #"ExplanationOfBenefit" = if r[#"ExplanationOfBenefit"]? = null then null else Table.FromRecords(List.Transform(r[#"ExplanationOfBenefit"], ExplanationOfBenefit.ApplySchema)),
      #"FamilyMemberHistory" = if r[#"FamilyMemberHistory"]? = null then null else Table.FromRecords(List.Transform(r[#"FamilyMemberHistory"], FamilyMemberHistory.ApplySchema)),
      #"Flag" = if r[#"Flag"]? = null then null else Table.FromRecords(List.Transform(r[#"Flag"], Flag.ApplySchema)),
      #"Goal" = if r[#"Goal"]? = null then null else Table.FromRecords(List.Transform(r[#"Goal"], Goal.ApplySchema)),
      #"GraphDefinition" = if r[#"GraphDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"GraphDefinition"], GraphDefinition.ApplySchema)),
      #"Group" = if r[#"Group"]? = null then null else Table.FromRecords(List.Transform(r[#"Group"], Group.ApplySchema)),
      #"GuidanceResponse" = if r[#"GuidanceResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"GuidanceResponse"], GuidanceResponse.ApplySchema)),
      #"HealthcareService" = if r[#"HealthcareService"]? = null then null else Table.FromRecords(List.Transform(r[#"HealthcareService"], HealthcareService.ApplySchema)),
      #"ImagingStudy" = if r[#"ImagingStudy"]? = null then null else Table.FromRecords(List.Transform(r[#"ImagingStudy"], ImagingStudy.ApplySchema)),
      #"Immunization" = if r[#"Immunization"]? = null then null else Table.FromRecords(List.Transform(r[#"Immunization"], Immunization.ApplySchema)),
      #"ImmunizationEvaluation" = if r[#"ImmunizationEvaluation"]? = null then null else Table.FromRecords(List.Transform(r[#"ImmunizationEvaluation"], ImmunizationEvaluation.ApplySchema)),
      #"ImmunizationRecommendation" = if r[#"ImmunizationRecommendation"]? = null then null else Table.FromRecords(List.Transform(r[#"ImmunizationRecommendation"], ImmunizationRecommendation.ApplySchema)),
      #"ImplementationGuide" = if r[#"ImplementationGuide"]? = null then null else Table.FromRecords(List.Transform(r[#"ImplementationGuide"], ImplementationGuide.ApplySchema)),
      #"InsurancePlan" = if r[#"InsurancePlan"]? = null then null else Table.FromRecords(List.Transform(r[#"InsurancePlan"], InsurancePlan.ApplySchema)),
      #"Invoice" = if r[#"Invoice"]? = null then null else Table.FromRecords(List.Transform(r[#"Invoice"], Invoice.ApplySchema)),
      #"Library" = if r[#"Library"]? = null then null else Table.FromRecords(List.Transform(r[#"Library"], Library.ApplySchema)),
      #"Linkage" = if r[#"Linkage"]? = null then null else Table.FromRecords(List.Transform(r[#"Linkage"], Linkage.ApplySchema)),
      #"List" = if r[#"List"]? = null then null else Table.FromRecords(List.Transform(r[#"List"], List.ApplySchema)),
      #"Location" = if r[#"Location"]? = null then null else Table.FromRecords(List.Transform(r[#"Location"], Location.ApplySchema)),
      #"Measure" = if r[#"Measure"]? = null then null else Table.FromRecords(List.Transform(r[#"Measure"], Measure.ApplySchema)),
      #"MeasureReport" = if r[#"MeasureReport"]? = null then null else Table.FromRecords(List.Transform(r[#"MeasureReport"], MeasureReport.ApplySchema)),
      #"Media" = if r[#"Media"]? = null then null else Table.FromRecords(List.Transform(r[#"Media"], Media.ApplySchema)),
      #"Medication" = if r[#"Medication"]? = null then null else Table.FromRecords(List.Transform(r[#"Medication"], Medication.ApplySchema)),
      #"MedicationAdministration" = if r[#"MedicationAdministration"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicationAdministration"], MedicationAdministration.ApplySchema)),
      #"MedicationDispense" = if r[#"MedicationDispense"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicationDispense"], MedicationDispense.ApplySchema)),
      #"MedicationKnowledge" = if r[#"MedicationKnowledge"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicationKnowledge"], MedicationKnowledge.ApplySchema)),
      #"MedicationRequest" = if r[#"MedicationRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicationRequest"], MedicationRequest.ApplySchema)),
      #"MedicationStatement" = if r[#"MedicationStatement"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicationStatement"], MedicationStatement.ApplySchema)),
      #"MedicinalProduct" = if r[#"MedicinalProduct"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProduct"], MedicinalProduct.ApplySchema)),
      #"MedicinalProductAuthorization" = if r[#"MedicinalProductAuthorization"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductAuthorization"], MedicinalProductAuthorization.ApplySchema)),
      #"MedicinalProductContraindication" = if r[#"MedicinalProductContraindication"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductContraindication"], MedicinalProductContraindication.ApplySchema)),
      #"MedicinalProductIndication" = if r[#"MedicinalProductIndication"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductIndication"], MedicinalProductIndication.ApplySchema)),
      #"MedicinalProductIngredient" = if r[#"MedicinalProductIngredient"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductIngredient"], MedicinalProductIngredient.ApplySchema)),
      #"MedicinalProductInteraction" = if r[#"MedicinalProductInteraction"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductInteraction"], MedicinalProductInteraction.ApplySchema)),
      #"MedicinalProductManufactured" = if r[#"MedicinalProductManufactured"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductManufactured"], MedicinalProductManufactured.ApplySchema)),
      #"MedicinalProductPackaged" = if r[#"MedicinalProductPackaged"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductPackaged"], MedicinalProductPackaged.ApplySchema)),
      #"MedicinalProductPharmaceutical" = if r[#"MedicinalProductPharmaceutical"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductPharmaceutical"], MedicinalProductPharmaceutical.ApplySchema)),
      #"MedicinalProductUndesirableEffect" = if r[#"MedicinalProductUndesirableEffect"]? = null then null else Table.FromRecords(List.Transform(r[#"MedicinalProductUndesirableEffect"], MedicinalProductUndesirableEffect.ApplySchema)),
      #"MessageDefinition" = if r[#"MessageDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"MessageDefinition"], MessageDefinition.ApplySchema)),
      #"MessageHeader" = if r[#"MessageHeader"]? = null then null else Table.FromRecords(List.Transform(r[#"MessageHeader"], MessageHeader.ApplySchema)),
      #"MolecularSequence" = if r[#"MolecularSequence"]? = null then null else Table.FromRecords(List.Transform(r[#"MolecularSequence"], MolecularSequence.ApplySchema)),
      #"NamingSystem" = if r[#"NamingSystem"]? = null then null else Table.FromRecords(List.Transform(r[#"NamingSystem"], NamingSystem.ApplySchema)),
      #"NutritionOrder" = if r[#"NutritionOrder"]? = null then null else Table.FromRecords(List.Transform(r[#"NutritionOrder"], NutritionOrder.ApplySchema)),
      #"Observation" = if r[#"Observation"]? = null then null else Table.FromRecords(List.Transform(r[#"Observation"], Observation.ApplySchema)),
      #"ObservationDefinition" = if r[#"ObservationDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"ObservationDefinition"], ObservationDefinition.ApplySchema)),
      #"OperationDefinition" = if r[#"OperationDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"OperationDefinition"], OperationDefinition.ApplySchema)),
      #"OperationOutcome" = if r[#"OperationOutcome"]? = null then null else Table.FromRecords(List.Transform(r[#"OperationOutcome"], OperationOutcome.ApplySchema)),
      #"Organization" = if r[#"Organization"]? = null then null else Table.FromRecords(List.Transform(r[#"Organization"], Organization.ApplySchema)),
      #"OrganizationAffiliation" = if r[#"OrganizationAffiliation"]? = null then null else Table.FromRecords(List.Transform(r[#"OrganizationAffiliation"], OrganizationAffiliation.ApplySchema)),
      #"Parameters" = if r[#"Parameters"]? = null then null else Table.FromRecords(List.Transform(r[#"Parameters"], Parameters.ApplySchema)),
      #"Patient" = if r[#"Patient"]? = null then null else Table.FromRecords(List.Transform(r[#"Patient"], Patient.ApplySchema)),
      #"PaymentNotice" = if r[#"PaymentNotice"]? = null then null else Table.FromRecords(List.Transform(r[#"PaymentNotice"], PaymentNotice.ApplySchema)),
      #"PaymentReconciliation" = if r[#"PaymentReconciliation"]? = null then null else Table.FromRecords(List.Transform(r[#"PaymentReconciliation"], PaymentReconciliation.ApplySchema)),
      #"Person" = if r[#"Person"]? = null then null else Table.FromRecords(List.Transform(r[#"Person"], Person.ApplySchema)),
      #"PlanDefinition" = if r[#"PlanDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"PlanDefinition"], PlanDefinition.ApplySchema)),
      #"Practitioner" = if r[#"Practitioner"]? = null then null else Table.FromRecords(List.Transform(r[#"Practitioner"], Practitioner.ApplySchema)),
      #"PractitionerRole" = if r[#"PractitionerRole"]? = null then null else Table.FromRecords(List.Transform(r[#"PractitionerRole"], PractitionerRole.ApplySchema)),
      #"Procedure" = if r[#"Procedure"]? = null then null else Table.FromRecords(List.Transform(r[#"Procedure"], Procedure.ApplySchema)),
      #"Provenance" = if r[#"Provenance"]? = null then null else Table.FromRecords(List.Transform(r[#"Provenance"], Provenance.ApplySchema)),
      #"Questionnaire" = if r[#"Questionnaire"]? = null then null else Table.FromRecords(List.Transform(r[#"Questionnaire"], Questionnaire.ApplySchema)),
      #"QuestionnaireResponse" = if r[#"QuestionnaireResponse"]? = null then null else Table.FromRecords(List.Transform(r[#"QuestionnaireResponse"], QuestionnaireResponse.ApplySchema)),
      #"RelatedPerson" = if r[#"RelatedPerson"]? = null then null else Table.FromRecords(List.Transform(r[#"RelatedPerson"], RelatedPerson.ApplySchema)),
      #"RequestGroup" = if r[#"RequestGroup"]? = null then null else Table.FromRecords(List.Transform(r[#"RequestGroup"], RequestGroup.ApplySchema)),
      #"ResearchDefinition" = if r[#"ResearchDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"ResearchDefinition"], ResearchDefinition.ApplySchema)),
      #"ResearchElementDefinition" = if r[#"ResearchElementDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"ResearchElementDefinition"], ResearchElementDefinition.ApplySchema)),
      #"ResearchStudy" = if r[#"ResearchStudy"]? = null then null else Table.FromRecords(List.Transform(r[#"ResearchStudy"], ResearchStudy.ApplySchema)),
      #"ResearchSubject" = if r[#"ResearchSubject"]? = null then null else Table.FromRecords(List.Transform(r[#"ResearchSubject"], ResearchSubject.ApplySchema)),
      #"Resource" = if r[#"Resource"]? = null then null else Table.FromRecords(List.Transform(r[#"Resource"], Resource.ApplySchema)),
      #"RiskAssessment" = if r[#"RiskAssessment"]? = null then null else Table.FromRecords(List.Transform(r[#"RiskAssessment"], RiskAssessment.ApplySchema)),
      #"RiskEvidenceSynthesis" = if r[#"RiskEvidenceSynthesis"]? = null then null else Table.FromRecords(List.Transform(r[#"RiskEvidenceSynthesis"], RiskEvidenceSynthesis.ApplySchema)),
      #"Schedule" = if r[#"Schedule"]? = null then null else Table.FromRecords(List.Transform(r[#"Schedule"], Schedule.ApplySchema)),
      #"SearchParameter" = if r[#"SearchParameter"]? = null then null else Table.FromRecords(List.Transform(r[#"SearchParameter"], SearchParameter.ApplySchema)),
      #"ServiceRequest" = if r[#"ServiceRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"ServiceRequest"], ServiceRequest.ApplySchema)),
      #"Slot" = if r[#"Slot"]? = null then null else Table.FromRecords(List.Transform(r[#"Slot"], Slot.ApplySchema)),
      #"Specimen" = if r[#"Specimen"]? = null then null else Table.FromRecords(List.Transform(r[#"Specimen"], Specimen.ApplySchema)),
      #"SpecimenDefinition" = if r[#"SpecimenDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"SpecimenDefinition"], SpecimenDefinition.ApplySchema)),
      #"StructureDefinition" = if r[#"StructureDefinition"]? = null then null else Table.FromRecords(List.Transform(r[#"StructureDefinition"], StructureDefinition.ApplySchema)),
      #"StructureMap" = if r[#"StructureMap"]? = null then null else Table.FromRecords(List.Transform(r[#"StructureMap"], StructureMap.ApplySchema)),
      #"Subscription" = if r[#"Subscription"]? = null then null else Table.FromRecords(List.Transform(r[#"Subscription"], Subscription.ApplySchema)),
      #"Substance" = if r[#"Substance"]? = null then null else Table.FromRecords(List.Transform(r[#"Substance"], Substance.ApplySchema)),
      #"SubstanceNucleicAcid" = if r[#"SubstanceNucleicAcid"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstanceNucleicAcid"], SubstanceNucleicAcid.ApplySchema)),
      #"SubstancePolymer" = if r[#"SubstancePolymer"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstancePolymer"], SubstancePolymer.ApplySchema)),
      #"SubstanceProtein" = if r[#"SubstanceProtein"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstanceProtein"], SubstanceProtein.ApplySchema)),
      #"SubstanceReferenceInformation" = if r[#"SubstanceReferenceInformation"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstanceReferenceInformation"], SubstanceReferenceInformation.ApplySchema)),
      #"SubstanceSourceMaterial" = if r[#"SubstanceSourceMaterial"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstanceSourceMaterial"], SubstanceSourceMaterial.ApplySchema)),
      #"SubstanceSpecification" = if r[#"SubstanceSpecification"]? = null then null else Table.FromRecords(List.Transform(r[#"SubstanceSpecification"], SubstanceSpecification.ApplySchema)),
      #"SupplyDelivery" = if r[#"SupplyDelivery"]? = null then null else Table.FromRecords(List.Transform(r[#"SupplyDelivery"], SupplyDelivery.ApplySchema)),
      #"SupplyRequest" = if r[#"SupplyRequest"]? = null then null else Table.FromRecords(List.Transform(r[#"SupplyRequest"], SupplyRequest.ApplySchema)),
      #"Task" = if r[#"Task"]? = null then null else Table.FromRecords(List.Transform(r[#"Task"], Task.ApplySchema)),
      #"TerminologyCapabilities" = if r[#"TerminologyCapabilities"]? = null then null else Table.FromRecords(List.Transform(r[#"TerminologyCapabilities"], TerminologyCapabilities.ApplySchema)),
      #"TestReport" = if r[#"TestReport"]? = null then null else Table.FromRecords(List.Transform(r[#"TestReport"], TestReport.ApplySchema)),
      #"TestScript" = if r[#"TestScript"]? = null then null else Table.FromRecords(List.Transform(r[#"TestScript"], TestScript.ApplySchema)),
      #"ValueSet" = if r[#"ValueSet"]? = null then null else Table.FromRecords(List.Transform(r[#"ValueSet"], ValueSet.ApplySchema)),
      #"VerificationResult" = if r[#"VerificationResult"]? = null then null else Table.FromRecords(List.Transform(r[#"VerificationResult"], VerificationResult.ApplySchema)),
      #"VisionPrescription" = if r[#"VisionPrescription"]? = null then null else Table.FromRecords(List.Transform(r[#"VisionPrescription"], VisionPrescription.ApplySchema))
    ]
in
  #table(type table [ResourceTypeName = text, Type = Type.Type, SchemaApplyFunction = function ], {
    {"Account", type table Account.Type, Account.ApplySchema},
    {"ActivityDefinition", type table ActivityDefinition.Type, ActivityDefinition.ApplySchema},
    {"AdverseEvent", type table AdverseEvent.Type, AdverseEvent.ApplySchema},
    {"AllergyIntolerance", type table AllergyIntolerance.Type, AllergyIntolerance.ApplySchema},
    {"Appointment", type table Appointment.Type, Appointment.ApplySchema},
    {"AppointmentResponse", type table AppointmentResponse.Type, AppointmentResponse.ApplySchema},
    {"AuditEvent", type table AuditEvent.Type, AuditEvent.ApplySchema},
    {"Basic", type table Basic.Type, Basic.ApplySchema},
    {"Binary", type table Binary.Type, Binary.ApplySchema},
    {"BiologicallyDerivedProduct", type table BiologicallyDerivedProduct.Type, BiologicallyDerivedProduct.ApplySchema},
    {"BodyStructure", type table BodyStructure.Type, BodyStructure.ApplySchema},
    {"Bundle", type table Bundle.Type, Bundle.ApplySchema},
    {"CapabilityStatement", type table CapabilityStatement.Type, CapabilityStatement.ApplySchema},
    {"CarePlan", type table CarePlan.Type, CarePlan.ApplySchema},
    {"CareTeam", type table CareTeam.Type, CareTeam.ApplySchema},
    {"CatalogEntry", type table CatalogEntry.Type, CatalogEntry.ApplySchema},
    {"ChargeItem", type table ChargeItem.Type, ChargeItem.ApplySchema},
    {"ChargeItemDefinition", type table ChargeItemDefinition.Type, ChargeItemDefinition.ApplySchema},
    {"Claim", type table Claim.Type, Claim.ApplySchema},
    {"ClaimResponse", type table ClaimResponse.Type, ClaimResponse.ApplySchema},
    {"ClinicalImpression", type table ClinicalImpression.Type, ClinicalImpression.ApplySchema},
    {"CodeSystem", type table CodeSystem.Type, CodeSystem.ApplySchema},
    {"Communication", type table Communication.Type, Communication.ApplySchema},
    {"CommunicationRequest", type table CommunicationRequest.Type, CommunicationRequest.ApplySchema},
    {"CompartmentDefinition", type table CompartmentDefinition.Type, CompartmentDefinition.ApplySchema},
    {"Composition", type table Composition.Type, Composition.ApplySchema},
    {"ConceptMap", type table ConceptMap.Type, ConceptMap.ApplySchema},
    {"Condition", type table Condition.Type, Condition.ApplySchema},
    {"Consent", type table Consent.Type, Consent.ApplySchema},
    {"Contract", type table Contract.Type, Contract.ApplySchema},
    {"Coverage", type table Coverage.Type, Coverage.ApplySchema},
    {"CoverageEligibilityRequest", type table CoverageEligibilityRequest.Type, CoverageEligibilityRequest.ApplySchema},
    {"CoverageEligibilityResponse", type table CoverageEligibilityResponse.Type, CoverageEligibilityResponse.ApplySchema},
    {"DetectedIssue", type table DetectedIssue.Type, DetectedIssue.ApplySchema},
    {"Device", type table Device.Type, Device.ApplySchema},
    {"DeviceDefinition", type table DeviceDefinition.Type, DeviceDefinition.ApplySchema},
    {"DeviceMetric", type table DeviceMetric.Type, DeviceMetric.ApplySchema},
    {"DeviceRequest", type table DeviceRequest.Type, DeviceRequest.ApplySchema},
    {"DeviceUseStatement", type table DeviceUseStatement.Type, DeviceUseStatement.ApplySchema},
    {"DiagnosticReport", type table DiagnosticReport.Type, DiagnosticReport.ApplySchema},
    {"DocumentManifest", type table DocumentManifest.Type, DocumentManifest.ApplySchema},
    {"DocumentReference", type table DocumentReference.Type, DocumentReference.ApplySchema},
    {"EffectEvidenceSynthesis", type table EffectEvidenceSynthesis.Type, EffectEvidenceSynthesis.ApplySchema},
    {"Encounter", type table Encounter.Type, Encounter.ApplySchema},
    {"Endpoint", type table Endpoint.Type, Endpoint.ApplySchema},
    {"EnrollmentRequest", type table EnrollmentRequest.Type, EnrollmentRequest.ApplySchema},
    {"EnrollmentResponse", type table EnrollmentResponse.Type, EnrollmentResponse.ApplySchema},
    {"EpisodeOfCare", type table EpisodeOfCare.Type, EpisodeOfCare.ApplySchema},
    {"EventDefinition", type table EventDefinition.Type, EventDefinition.ApplySchema},
    {"Evidence", type table Evidence.Type, Evidence.ApplySchema},
    {"EvidenceVariable", type table EvidenceVariable.Type, EvidenceVariable.ApplySchema},
    {"ExampleScenario", type table ExampleScenario.Type, ExampleScenario.ApplySchema},
    {"ExplanationOfBenefit", type table ExplanationOfBenefit.Type, ExplanationOfBenefit.ApplySchema},
    {"FamilyMemberHistory", type table FamilyMemberHistory.Type, FamilyMemberHistory.ApplySchema},
    {"Flag", type table Flag.Type, Flag.ApplySchema},
    {"Goal", type table Goal.Type, Goal.ApplySchema},
    {"GraphDefinition", type table GraphDefinition.Type, GraphDefinition.ApplySchema},
    {"Group", type table Group.Type, Group.ApplySchema},
    {"GuidanceResponse", type table GuidanceResponse.Type, GuidanceResponse.ApplySchema},
    {"HealthcareService", type table HealthcareService.Type, HealthcareService.ApplySchema},
    {"ImagingStudy", type table ImagingStudy.Type, ImagingStudy.ApplySchema},
    {"Immunization", type table Immunization.Type, Immunization.ApplySchema},
    {"ImmunizationEvaluation", type table ImmunizationEvaluation.Type, ImmunizationEvaluation.ApplySchema},
    {"ImmunizationRecommendation", type table ImmunizationRecommendation.Type, ImmunizationRecommendation.ApplySchema},
    {"ImplementationGuide", type table ImplementationGuide.Type, ImplementationGuide.ApplySchema},
    {"InsurancePlan", type table InsurancePlan.Type, InsurancePlan.ApplySchema},
    {"Invoice", type table Invoice.Type, Invoice.ApplySchema},
    {"Library", type table Library.Type, Library.ApplySchema},
    {"Linkage", type table Linkage.Type, Linkage.ApplySchema},
    {"List", type table List.Type, List.ApplySchema},
    {"Location", type table Location.Type, Location.ApplySchema},
    {"Measure", type table Measure.Type, Measure.ApplySchema},
    {"MeasureReport", type table MeasureReport.Type, MeasureReport.ApplySchema},
    {"Media", type table Media.Type, Media.ApplySchema},
    {"Medication", type table Medication.Type, Medication.ApplySchema},
    {"MedicationAdministration", type table MedicationAdministration.Type, MedicationAdministration.ApplySchema},
    {"MedicationDispense", type table MedicationDispense.Type, MedicationDispense.ApplySchema},
    {"MedicationKnowledge", type table MedicationKnowledge.Type, MedicationKnowledge.ApplySchema},
    {"MedicationRequest", type table MedicationRequest.Type, MedicationRequest.ApplySchema},
    {"MedicationStatement", type table MedicationStatement.Type, MedicationStatement.ApplySchema},
    {"MedicinalProduct", type table MedicinalProduct.Type, MedicinalProduct.ApplySchema},
    {"MedicinalProductAuthorization", type table MedicinalProductAuthorization.Type, MedicinalProductAuthorization.ApplySchema},
    {"MedicinalProductContraindication", type table MedicinalProductContraindication.Type, MedicinalProductContraindication.ApplySchema},
    {"MedicinalProductIndication", type table MedicinalProductIndication.Type, MedicinalProductIndication.ApplySchema},
    {"MedicinalProductIngredient", type table MedicinalProductIngredient.Type, MedicinalProductIngredient.ApplySchema},
    {"MedicinalProductInteraction", type table MedicinalProductInteraction.Type, MedicinalProductInteraction.ApplySchema},
    {"MedicinalProductManufactured", type table MedicinalProductManufactured.Type, MedicinalProductManufactured.ApplySchema},
    {"MedicinalProductPackaged", type table MedicinalProductPackaged.Type, MedicinalProductPackaged.ApplySchema},
    {"MedicinalProductPharmaceutical", type table MedicinalProductPharmaceutical.Type, MedicinalProductPharmaceutical.ApplySchema},
    {"MedicinalProductUndesirableEffect", type table MedicinalProductUndesirableEffect.Type, MedicinalProductUndesirableEffect.ApplySchema},
    {"MessageDefinition", type table MessageDefinition.Type, MessageDefinition.ApplySchema},
    {"MessageHeader", type table MessageHeader.Type, MessageHeader.ApplySchema},
    {"MolecularSequence", type table MolecularSequence.Type, MolecularSequence.ApplySchema},
    {"NamingSystem", type table NamingSystem.Type, NamingSystem.ApplySchema},
    {"NutritionOrder", type table NutritionOrder.Type, NutritionOrder.ApplySchema},
    {"Observation", type table Observation.Type, Observation.ApplySchema},
    {"ObservationDefinition", type table ObservationDefinition.Type, ObservationDefinition.ApplySchema},
    {"OperationDefinition", type table OperationDefinition.Type, OperationDefinition.ApplySchema},
    {"OperationOutcome", type table OperationOutcome.Type, OperationOutcome.ApplySchema},
    {"Organization", type table Organization.Type, Organization.ApplySchema},
    {"OrganizationAffiliation", type table OrganizationAffiliation.Type, OrganizationAffiliation.ApplySchema},
    {"Parameters", type table Parameters.Type, Parameters.ApplySchema},
    {"Patient", type table Patient.Type, Patient.ApplySchema},
    {"PaymentNotice", type table PaymentNotice.Type, PaymentNotice.ApplySchema},
    {"PaymentReconciliation", type table PaymentReconciliation.Type, PaymentReconciliation.ApplySchema},
    {"Person", type table Person.Type, Person.ApplySchema},
    {"PlanDefinition", type table PlanDefinition.Type, PlanDefinition.ApplySchema},
    {"Practitioner", type table Practitioner.Type, Practitioner.ApplySchema},
    {"PractitionerRole", type table PractitionerRole.Type, PractitionerRole.ApplySchema},
    {"Procedure", type table Procedure.Type, Procedure.ApplySchema},
    {"Provenance", type table Provenance.Type, Provenance.ApplySchema},
    {"Questionnaire", type table Questionnaire.Type, Questionnaire.ApplySchema},
    {"QuestionnaireResponse", type table QuestionnaireResponse.Type, QuestionnaireResponse.ApplySchema},
    {"RelatedPerson", type table RelatedPerson.Type, RelatedPerson.ApplySchema},
    {"RequestGroup", type table RequestGroup.Type, RequestGroup.ApplySchema},
    {"ResearchDefinition", type table ResearchDefinition.Type, ResearchDefinition.ApplySchema},
    {"ResearchElementDefinition", type table ResearchElementDefinition.Type, ResearchElementDefinition.ApplySchema},
    {"ResearchStudy", type table ResearchStudy.Type, ResearchStudy.ApplySchema},
    {"ResearchSubject", type table ResearchSubject.Type, ResearchSubject.ApplySchema},
    {"RiskAssessment", type table RiskAssessment.Type, RiskAssessment.ApplySchema},
    {"RiskEvidenceSynthesis", type table RiskEvidenceSynthesis.Type, RiskEvidenceSynthesis.ApplySchema},
    {"Schedule", type table Schedule.Type, Schedule.ApplySchema},
    {"SearchParameter", type table SearchParameter.Type, SearchParameter.ApplySchema},
    {"ServiceRequest", type table ServiceRequest.Type, ServiceRequest.ApplySchema},
    {"Slot", type table Slot.Type, Slot.ApplySchema},
    {"Specimen", type table Specimen.Type, Specimen.ApplySchema},
    {"SpecimenDefinition", type table SpecimenDefinition.Type, SpecimenDefinition.ApplySchema},
    {"StructureDefinition", type table StructureDefinition.Type, StructureDefinition.ApplySchema},
    {"StructureMap", type table StructureMap.Type, StructureMap.ApplySchema},
    {"Subscription", type table Subscription.Type, Subscription.ApplySchema},
    {"Substance", type table Substance.Type, Substance.ApplySchema},
    {"SubstanceNucleicAcid", type table SubstanceNucleicAcid.Type, SubstanceNucleicAcid.ApplySchema},
    {"SubstancePolymer", type table SubstancePolymer.Type, SubstancePolymer.ApplySchema},
    {"SubstanceProtein", type table SubstanceProtein.Type, SubstanceProtein.ApplySchema},
    {"SubstanceReferenceInformation", type table SubstanceReferenceInformation.Type, SubstanceReferenceInformation.ApplySchema},
    {"SubstanceSourceMaterial", type table SubstanceSourceMaterial.Type, SubstanceSourceMaterial.ApplySchema},
    {"SubstanceSpecification", type table SubstanceSpecification.Type, SubstanceSpecification.ApplySchema},
    {"SupplyDelivery", type table SupplyDelivery.Type, SupplyDelivery.ApplySchema},
    {"SupplyRequest", type table SupplyRequest.Type, SupplyRequest.ApplySchema},
    {"Task", type table Task.Type, Task.ApplySchema},
    {"TerminologyCapabilities", type table TerminologyCapabilities.Type, TerminologyCapabilities.ApplySchema},
    {"TestReport", type table TestReport.Type, TestReport.ApplySchema},
    {"TestScript", type table TestScript.Type, TestScript.ApplySchema},
    {"ValueSet", type table ValueSet.Type, ValueSet.ApplySchema},
    {"VerificationResult", type table VerificationResult.Type, VerificationResult.ApplySchema},
    {"VisionPrescription", type table VisionPrescription.Type, VisionPrescription.ApplySchema}
  })

