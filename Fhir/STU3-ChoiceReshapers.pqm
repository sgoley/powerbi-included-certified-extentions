//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

let
  DataRequirement_codeFilter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValueSet = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueSetString", "valueSetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueSetString", "valueSetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueSetString", "string"}, { "valueSetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ valueSet = null ] else choicesRemoved & [ valueSet = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"valueCoding" = if r[#"valueCoding"]? = null then null else List.Transform(r[#"valueCoding"]?, Coding.Reshape),
        #"valueCodeableConcept" = if r[#"valueCodeableConcept"]? = null then null else List.Transform(r[#"valueCodeableConcept"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValueSet(
          childrenReshaped),

  DataRequirement_dateFilter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueDateTime", "valuePeriod", "valueDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueDateTime", "valuePeriod", "valueDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"}, { "valueDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Timing_repeat.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBounds = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "boundsDuration", "boundsRange", "boundsPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "boundsDuration", "boundsRange", "boundsPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "boundsDuration", "Duration"}, { "boundsRange", "Range"}, { "boundsPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ bounds = null ] else choicesRemoved & [ bounds = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeBounds(
          childrenReshaped),

  ElementDefinition_slicing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"discriminator" = if r[#"discriminator"]? = null then null else List.Transform(r[#"discriminator"]?, ElementDefinition_slicing_discriminator.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_slicing_discriminator.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_base.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_type.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_example.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ElementDefinition_constraint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition_binding.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValueSet = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueSetUri", "valueSetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueSetUri", "valueSetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueSetUri", "uri"}, { "valueSetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ valueSet = null ] else choicesRemoved & [ valueSet = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValueSet(
          childrenReshaped),

  ElementDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account_coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account_guarantor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"party" = Reference.Reshape(r[#"party"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition_dynamicValue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AdverseEvent_suspectEntity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"instance" = Reference.Reshape(r[#"instance"]?),
        #"causalityAssessment" = CodeableConcept.Reshape(r[#"causalityAssessment"]?),
        #"causalityMethod" = CodeableConcept.Reshape(r[#"causalityMethod"]?),
        #"causalityAuthor" = Reference.Reshape(r[#"causalityAuthor"]?),
        #"causalityResult" = CodeableConcept.Reshape(r[#"causalityResult"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AllergyIntolerance_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"substance" = CodeableConcept.Reshape(r[#"substance"]?),
        #"manifestation" = if r[#"manifestation"]? = null then null else List.Transform(r[#"manifestation"]?, CodeableConcept.Reshape),
        #"exposureRoute" = CodeableConcept.Reshape(r[#"exposureRoute"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Appointment_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"userId" = Identifier.Reshape(r[#"userId"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"media" = Coding.Reshape(r[#"media"]?),
        #"network" = AuditEvent_agent_network.Reshape(r[#"network"]?),
        #"purposeOfUse" = if r[#"purposeOfUse"]? = null then null else List.Transform(r[#"purposeOfUse"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_agent_network.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_entity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"role" = Coding.Reshape(r[#"role"]?),
        #"lifecycle" = Coding.Reshape(r[#"lifecycle"]?),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, AuditEvent_entity_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent_entity_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"search" = Bundle_entry_search.Reshape(r[#"search"]?),
        #"request" = Bundle_entry_request.Reshape(r[#"request"]?),
        #"response" = Bundle_entry_response.Reshape(r[#"response"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_search.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_request.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle_entry_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcome" = Resource.Reshape(r[#"outcome"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_software.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_implementation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"security" = CapabilityStatement_rest_security.Reshape(r[#"security"]?),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, CapabilityStatement_rest_resource.Reshape),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, CapabilityStatement_rest_interaction.Reshape),
        #"operation" = if r[#"operation"]? = null then null else List.Transform(r[#"operation"]?, CapabilityStatement_rest_operation.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, CapabilityStatement_rest_searchParam.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_security.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"service" = if r[#"service"]? = null then null else List.Transform(r[#"service"]?, CodeableConcept.Reshape),
        #"certificate" = if r[#"certificate"]? = null then null else List.Transform(r[#"certificate"]?, CapabilityStatement_rest_security_certificate.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_security_certificate.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?),
        #"interaction" = if r[#"interaction"]? = null then null else List.Transform(r[#"interaction"]?, CapabilityStatement_rest_resource_interaction.Reshape),
        #"searchParam" = if r[#"searchParam"]? = null then null else List.Transform(r[#"searchParam"]?, CapabilityStatement_rest_searchParam.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_resource_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_searchParam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_interaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_rest_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"definition" = Reference.Reshape(r[#"definition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, CapabilityStatement_messaging_endpoint.Reshape),
        #"supportedMessage" = if r[#"supportedMessage"]? = null then null else List.Transform(r[#"supportedMessage"]?, CapabilityStatement_messaging_supportedMessage.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, CapabilityStatement_messaging_event.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging_endpoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"protocol" = Coding.Reshape(r[#"protocol"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging_supportedMessage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"definition" = Reference.Reshape(r[#"definition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_messaging_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement_document.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcomeCodeableConcept" = if r[#"outcomeCodeableConcept"]? = null then null else List.Transform(r[#"outcomeCodeableConcept"]?, CodeableConcept.Reshape),
        #"outcomeReference" = if r[#"outcomeReference"]? = null then null else List.Transform(r[#"outcomeReference"]?, Reference.Reshape),
        #"progress" = if r[#"progress"]? = null then null else List.Transform(r[#"progress"]?, Annotation.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?),
        #"detail" = CarePlan_activity_detail.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan_activity_detail.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeScheduled = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "scheduledTiming", "scheduledPeriod", "scheduledString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "scheduledTiming", "Timing"}, { "scheduledPeriod", "Period"}, { "scheduledString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ scheduled = null ] else choicesRemoved & [ scheduled = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productCodeableConcept", "productReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productCodeableConcept", "productReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productCodeableConcept", "CodeableConcept"}, { "productReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"definition" = Reference.Reshape(r[#"definition"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dailyAmount" = Quantity.Reshape(r[#"dailyAmount"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeScheduled(
            childrenReshaped)),

  CareTeam_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"member" = Reference.Reshape(r[#"member"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItem_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"reference" = Identifier.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_payee.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"resourceType" = Coding.Reshape(r[#"resourceType"]?),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_careTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"qualification" = CodeableConcept.Reshape(r[#"qualification"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_information.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDate", "timingPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDate", "timingPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDate", "date"}, { "timingPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueQuantity", "valueAttachment", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueQuantity", "valueAttachment", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueQuantity", "Quantity"}, { "valueAttachment", "Attachment"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeTiming(
            childrenReshaped)),

  Claim_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDiagnosis = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "diagnosisCodeableConcept", "diagnosisReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "diagnosisCodeableConcept", "diagnosisReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "diagnosisCodeableConcept", "CodeableConcept"}, { "diagnosisReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ diagnosis = null ] else choicesRemoved & [ diagnosis = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"packageCode" = CodeableConcept.Reshape(r[#"packageCode"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDiagnosis(
          childrenReshaped),

  Claim_procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProcedure = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "procedureCodeableConcept", "procedureReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "procedureCodeableConcept", "procedureReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "procedureCodeableConcept", "CodeableConcept"}, { "procedureReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ procedure = null ] else choicesRemoved & [ procedure = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProcedure(
          childrenReshaped),

  Claim_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_accident.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          childrenReshaped),

  Claim_item.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"encounter" = if r[#"encounter"]? = null then null else List.Transform(r[#"encounter"]?, Reference.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Claim_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  Claim_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, Claim_item_detail_subDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Claim_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ClaimResponse_item_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"fee" = Money.Reshape(r[#"fee"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ClaimResponse_addItem_detail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_addItem_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"fee" = Money.Reshape(r[#"fee"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ClaimResponse_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_error.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_payment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"adjustment" = Money.Reshape(r[#"adjustment"]?),
        #"adjustmentReason" = CodeableConcept.Reshape(r[#"adjustmentReason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_investigation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression_finding.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  CodeSystem_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_property.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, CodeSystem_concept_designation.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, CodeSystem_concept_property.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, @CodeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem_concept_property.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCode", "valueCoding", "valueString", "valueInteger", "valueBoolean", "valueDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCode", "valueCoding", "valueString", "valueInteger", "valueBoolean", "valueDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCode", "code"}, { "valueCoding", "Coding"}, { "valueString", "string"}, { "valueInteger", "integer"}, { "valueBoolean", "boolean"}, { "valueDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Communication_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  CommunicationRequest_payload.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentString", "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentString", "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentString", "string"}, { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  CommunicationRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CompartmentDefinition_resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_attester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_relatesTo.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetIdentifier", "targetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetIdentifier", "targetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetIdentifier", "Identifier"}, { "targetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          childrenReshaped),

  Composition_event.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition_section.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Reference.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, @Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ConceptMap_group_element.Reshape),
        #"unmapped" = ConceptMap_group_unmapped.Reshape(r[#"unmapped"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, ConceptMap_group_element_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"dependsOn" = if r[#"dependsOn"]? = null then null else List.Transform(r[#"dependsOn"]?, ConceptMap_group_element_target_dependsOn.Reshape),
        #"product" = if r[#"product"]? = null then null else List.Transform(r[#"product"]?, ConceptMap_group_element_target_dependsOn.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_element_target_dependsOn.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap_group_unmapped.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_stage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"summary" = CodeableConcept.Reshape(r[#"summary"]?),
        #"assessment" = if r[#"assessment"]? = null then null else List.Transform(r[#"assessment"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Condition_evidence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_policy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_data.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_except.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Consent_except_actor.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"purpose" = if r[#"purpose"]? = null then null else List.Transform(r[#"purpose"]?, Coding.Reshape),
        #"class" = if r[#"class"]? = null then null else List.Transform(r[#"class"]?, Coding.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"dataPeriod" = Period.Reshape(r[#"dataPeriod"]?),
        #"data" = if r[#"data"]? = null then null else List.Transform(r[#"data"]?, Consent_except_data.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_except_actor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Consent_except_data.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reference" = Reference.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_signer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"party" = Reference.Reshape(r[#"party"]?),
        #"signature" = if r[#"signature"]? = null then null else List.Transform(r[#"signature"]?, Signature.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_valuedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEntity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "entityCodeableConcept", "entityReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "entityCodeableConcept", "entityReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "entityCodeableConcept", "CodeableConcept"}, { "entityReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ entity = null ] else choicesRemoved & [ entity = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEntity(
          childrenReshaped),

  Contract_term.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = CodeableConcept.Reshape(r[#"subType"]?),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, Reference.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"actionReason" = if r[#"actionReason"]? = null then null else List.Transform(r[#"actionReason"]?, CodeableConcept.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Contract_term_agent.Reshape),
        #"valuedItem" = if r[#"valuedItem"]? = null then null else List.Transform(r[#"valuedItem"]?, Contract_term_valuedItem.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, @Contract_term.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_agent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract_term_valuedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEntity = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "entityCodeableConcept", "entityReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "entityCodeableConcept", "entityReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "entityCodeableConcept", "CodeableConcept"}, { "entityReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ entity = null ] else choicesRemoved & [ entity = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEntity(
          childrenReshaped),

  Contract_friendly.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_legal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Contract_rule.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeContent = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "contentAttachment", "contentReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "contentAttachment", "contentReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "contentAttachment", "Attachment"}, { "contentReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ content = null ] else choicesRemoved & [ content = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeContent(
          childrenReshaped),

  Coverage_grouping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataElement_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue_mitigation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device_udi.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceComponent_productionSpecification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"specType" = CodeableConcept.Reshape(r[#"specType"]?),
        #"componentId" = Identifier.Reshape(r[#"componentId"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceMetric_calibration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticReport_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DiagnosticReport_image.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = Reference.Reshape(r[#"link"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest_content.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeP = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "pAttachment", "pReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "pAttachment", "pReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "pAttachment", "Attachment"}, { "pReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ p = null ] else choicesRemoved & [ p = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeP(
          childrenReshaped),

  DocumentManifest_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"ref" = Reference.Reshape(r[#"ref"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_relatesTo.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_content.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"attachment" = Attachment.Reshape(r[#"attachment"]?),
        #"format" = Coding.Reshape(r[#"format"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_context.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"facilityType" = CodeableConcept.Reshape(r[#"facilityType"]?),
        #"practiceSetting" = CodeableConcept.Reshape(r[#"practiceSetting"]?),
        #"sourcePatientInfo" = Reference.Reshape(r[#"sourcePatientInfo"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, DocumentReference_context_related.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference_context_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"ref" = Reference.Reshape(r[#"ref"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EligibilityResponse_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"contract" = Reference.Reshape(r[#"contract"]?),
        #"benefitBalance" = if r[#"benefitBalance"]? = null then null else List.Transform(r[#"benefitBalance"]?, EligibilityResponse_insurance_benefitBalance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EligibilityResponse_insurance_benefitBalance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subCategory" = CodeableConcept.Reshape(r[#"subCategory"]?),
        #"network" = CodeableConcept.Reshape(r[#"network"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"term" = CodeableConcept.Reshape(r[#"term"]?),
        #"financial" = if r[#"financial"]? = null then null else List.Transform(r[#"financial"]?, EligibilityResponse_insurance_benefitBalance_financial.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EligibilityResponse_insurance_benefitBalance_financial.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAllowed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "allowedUnsignedInt", "unsignedInt"}, { "allowedString", "string"}, { "allowedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ allowed = null ] else choicesRemoved & [ allowed = choiceRecord ],
      ReshapeUsed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "usedUnsignedInt", "usedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "usedUnsignedInt", "usedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "usedUnsignedInt", "unsignedInt"}, { "usedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ used = null ] else choicesRemoved & [ used = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeUsed(
          ReshapeAllowed(
            childrenReshaped)),

  EligibilityResponse_error.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_classHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"class" = Coding.Reshape(r[#"class"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"individual" = Reference.Reshape(r[#"individual"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_hospitalization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"preAdmissionIdentifier" = Identifier.Reshape(r[#"preAdmissionIdentifier"]?),
        #"origin" = Reference.Reshape(r[#"origin"]?),
        #"admitSource" = CodeableConcept.Reshape(r[#"admitSource"]?),
        #"reAdmission" = CodeableConcept.Reshape(r[#"reAdmission"]?),
        #"dietPreference" = if r[#"dietPreference"]? = null then null else List.Transform(r[#"dietPreference"]?, CodeableConcept.Reshape),
        #"specialCourtesy" = if r[#"specialCourtesy"]? = null then null else List.Transform(r[#"specialCourtesy"]?, CodeableConcept.Reshape),
        #"specialArrangement" = if r[#"specialArrangement"]? = null then null else List.Transform(r[#"specialArrangement"]?, CodeableConcept.Reshape),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"dischargeDisposition" = CodeableConcept.Reshape(r[#"dischargeDisposition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter_location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_statusHistory.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_fixedVersion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_excludedSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"include" = ExpansionProfile_designation_include.Reshape(r[#"include"]?),
        #"exclude" = ExpansionProfile_designation_exclude.Reshape(r[#"exclude"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_designation_include.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ExpansionProfile_designation_include_designation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_designation_include_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_designation_exclude.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ExpansionProfile_designation_exclude_designation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile_designation_exclude_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"reference" = Identifier.Reshape(r[#"reference"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_payee.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"resourceType" = CodeableConcept.Reshape(r[#"resourceType"]?),
        #"party" = Reference.Reshape(r[#"party"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_information.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDate", "timingPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDate", "timingPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDate", "date"}, { "timingPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueQuantity", "valueAttachment", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueQuantity", "valueAttachment", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueQuantity", "Quantity"}, { "valueAttachment", "Attachment"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"reason" = Coding.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeTiming(
            childrenReshaped)),

  ExplanationOfBenefit_careTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"qualification" = CodeableConcept.Reshape(r[#"qualification"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_diagnosis.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDiagnosis = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "diagnosisCodeableConcept", "diagnosisReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "diagnosisCodeableConcept", "diagnosisReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "diagnosisCodeableConcept", "CodeableConcept"}, { "diagnosisReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ diagnosis = null ] else choicesRemoved & [ diagnosis = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"packageCode" = CodeableConcept.Reshape(r[#"packageCode"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDiagnosis(
          childrenReshaped),

  ExplanationOfBenefit_procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProcedure = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "procedureCodeableConcept", "procedureReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "procedureCodeableConcept", "procedureReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "procedureCodeableConcept", "CodeableConcept"}, { "procedureReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ procedure = null ] else choicesRemoved & [ procedure = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProcedure(
          childrenReshaped),

  ExplanationOfBenefit_insurance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_accident.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          childrenReshaped),

  ExplanationOfBenefit_item.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      ReshapeLocation = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "locationCodeableConcept", "locationAddress", "locationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "locationCodeableConcept", "locationAddress", "locationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "locationCodeableConcept", "CodeableConcept"}, { "locationAddress", "Address"}, { "locationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ location = null ] else choicesRemoved & [ location = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"subSite" = if r[#"subSite"]? = null then null else List.Transform(r[#"subSite"]?, CodeableConcept.Reshape),
        #"encounter" = if r[#"encounter"]? = null then null else List.Transform(r[#"encounter"]?, Reference.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_item_adjudication.Reshape),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ExplanationOfBenefit_item_detail.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeLocation(
          ReshapeServiced(
            childrenReshaped)),

  ExplanationOfBenefit_item_adjudication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_item_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"subDetail" = if r[#"subDetail"]? = null then null else List.Transform(r[#"subDetail"]?, ExplanationOfBenefit_item_detail_subDetail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_item_detail_subDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"programCode" = if r[#"programCode"]? = null then null else List.Transform(r[#"programCode"]?, CodeableConcept.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"unitPrice" = Money.Reshape(r[#"unitPrice"]?),
        #"net" = Money.Reshape(r[#"net"]?),
        #"udi" = if r[#"udi"]? = null then null else List.Transform(r[#"udi"]?, Reference.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_addItem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"fee" = Money.Reshape(r[#"fee"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, ExplanationOfBenefit_addItem_detail.Reshape),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_addItem_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"revenue" = CodeableConcept.Reshape(r[#"revenue"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"service" = CodeableConcept.Reshape(r[#"service"]?),
        #"modifier" = if r[#"modifier"]? = null then null else List.Transform(r[#"modifier"]?, CodeableConcept.Reshape),
        #"fee" = Money.Reshape(r[#"fee"]?),
        #"adjudication" = if r[#"adjudication"]? = null then null else List.Transform(r[#"adjudication"]?, ExplanationOfBenefit_item_adjudication.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_payment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"adjustment" = Money.Reshape(r[#"adjustment"]?),
        #"adjustmentReason" = CodeableConcept.Reshape(r[#"adjustmentReason"]?),
        #"amount" = Money.Reshape(r[#"amount"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_benefitBalance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subCategory" = CodeableConcept.Reshape(r[#"subCategory"]?),
        #"network" = CodeableConcept.Reshape(r[#"network"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"term" = CodeableConcept.Reshape(r[#"term"]?),
        #"financial" = if r[#"financial"]? = null then null else List.Transform(r[#"financial"]?, ExplanationOfBenefit_benefitBalance_financial.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit_benefitBalance_financial.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAllowed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "allowedUnsignedInt", "allowedString", "allowedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "allowedUnsignedInt", "unsignedInt"}, { "allowedString", "string"}, { "allowedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ allowed = null ] else choicesRemoved & [ allowed = choiceRecord ],
      ReshapeUsed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "usedUnsignedInt", "usedMoney"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "usedUnsignedInt", "usedMoney" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "usedUnsignedInt", "unsignedInt"}, { "usedMoney", "Money"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ used = null ] else choicesRemoved & [ used = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeUsed(
          ReshapeAllowed(
            childrenReshaped)),

  FamilyMemberHistory_condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetAge", "onsetRange", "onsetPeriod", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetAge", "onsetRange", "onsetPeriod", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetAge", "Age"}, { "onsetRange", "Range"}, { "onsetPeriod", "Period"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnset(
          childrenReshaped),

  Goal_target.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDetail = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "detailQuantity", "Quantity"}, { "detailRange", "Range"}, { "detailCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ detail = null ] else choicesRemoved & [ detail = choiceRecord ],
      ReshapeDue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "dueDate", "dueDuration"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "dueDate", "dueDuration" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "dueDate", "date"}, { "dueDuration", "Duration"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ due = null ] else choicesRemoved & [ due = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"measure" = CodeableConcept.Reshape(r[#"measure"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDue(
          ReshapeDetail(
            childrenReshaped)),

  GraphDefinition_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, GraphDefinition_link_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GraphDefinition_link_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"compartment" = if r[#"compartment"]? = null then null else List.Transform(r[#"compartment"]?, GraphDefinition_link_target_compartment.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, GraphDefinition_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GraphDefinition_link_target_compartment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Group_characteristic.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueBoolean", "valueQuantity", "valueRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueBoolean", "boolean"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Group_member.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"entity" = Reference.Reshape(r[#"entity"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_availableTime.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HealthcareService_notAvailable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"during" = Period.Reshape(r[#"during"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingManifest_study.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"imagingStudy" = Reference.Reshape(r[#"imagingStudy"]?),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"series" = if r[#"series"]? = null then null else List.Transform(r[#"series"]?, ImagingManifest_study_series.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingManifest_study_series.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ImagingManifest_study_series_instance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingManifest_study_series_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modality" = Coding.Reshape(r[#"modality"]?),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"bodySite" = Coding.Reshape(r[#"bodySite"]?),
        #"laterality" = Coding.Reshape(r[#"laterality"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, ImagingStudy_series_instance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy_series_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_practitioner.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_explanation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"reasonNotGiven" = if r[#"reasonNotGiven"]? = null then null else List.Transform(r[#"reasonNotGiven"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_reaction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"detail" = Reference.Reshape(r[#"detail"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization_vaccinationProtocol.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = Reference.Reshape(r[#"authority"]?),
        #"targetDisease" = if r[#"targetDisease"]? = null then null else List.Transform(r[#"targetDisease"]?, CodeableConcept.Reshape),
        #"doseStatus" = CodeableConcept.Reshape(r[#"doseStatus"]?),
        #"doseStatusReason" = CodeableConcept.Reshape(r[#"doseStatusReason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"vaccineCode" = CodeableConcept.Reshape(r[#"vaccineCode"]?),
        #"targetDisease" = CodeableConcept.Reshape(r[#"targetDisease"]?),
        #"forecastStatus" = CodeableConcept.Reshape(r[#"forecastStatus"]?),
        #"dateCriterion" = if r[#"dateCriterion"]? = null then null else List.Transform(r[#"dateCriterion"]?, ImmunizationRecommendation_recommendation_dateCriterion.Reshape),
        #"protocol" = ImmunizationRecommendation_recommendation_protocol.Reshape(r[#"protocol"]?),
        #"supportingImmunization" = if r[#"supportingImmunization"]? = null then null else List.Transform(r[#"supportingImmunization"]?, Reference.Reshape),
        #"supportingPatientInformation" = if r[#"supportingPatientInformation"]? = null then null else List.Transform(r[#"supportingPatientInformation"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation_dateCriterion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation_recommendation_protocol.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"authority" = Reference.Reshape(r[#"authority"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_dependency.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_package.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, ImplementationGuide_package_resource.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_package_resource.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceUri", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceUri", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceUri", "uri"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"exampleFor" = Reference.Reshape(r[#"exampleFor"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSource(
          childrenReshaped),

  ImplementationGuide_global.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide_page.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"page" = if r[#"page"]? = null then null else List.Transform(r[#"page"]?, @ImplementationGuide_page.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Linkage_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List_entry.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"flag" = CodeableConcept.Reshape(r[#"flag"]?),
        #"item" = Reference.Reshape(r[#"item"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location_position.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, Measure_group_population.Reshape),
        #"stratifier" = if r[#"stratifier"]? = null then null else List.Transform(r[#"stratifier"]?, Measure_group_stratifier.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_group_stratifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure_supplementalData.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"usage" = if r[#"usage"]? = null then null else List.Transform(r[#"usage"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, MeasureReport_group_population.Reshape),
        #"stratifier" = if r[#"stratifier"]? = null then null else List.Transform(r[#"stratifier"]?, MeasureReport_group_stratifier.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"patients" = Reference.Reshape(r[#"patients"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"stratum" = if r[#"stratum"]? = null then null else List.Transform(r[#"stratum"]?, MeasureReport_group_stratifier_stratum.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier_stratum.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"population" = if r[#"population"]? = null then null else List.Transform(r[#"population"]?, MeasureReport_group_stratifier_stratum_population.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport_group_stratifier_stratum_population.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"patients" = Reference.Reshape(r[#"patients"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"amount" = Ratio.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  Medication_package.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"container" = CodeableConcept.Reshape(r[#"container"]?),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Medication_package_content.Reshape),
        #"batch" = if r[#"batch"]? = null then null else List.Transform(r[#"batch"]?, Medication_package_batch.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Medication_package_content.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  Medication_package_batch.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration_dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"dose" = Quantity.Reshape(r[#"dose"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          childrenReshaped),

  MedicationDispense_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationDispense_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"responsibleParty" = if r[#"responsibleParty"]? = null then null else List.Transform(r[#"responsibleParty"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_dispenseRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"validityPeriod" = Period.Reshape(r[#"validityPeriod"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"expectedSupplyDuration" = Duration.Reshape(r[#"expectedSupplyDuration"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationRequest_substitution.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageDefinition_focus.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageDefinition_allowedResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"message" = Reference.Reshape(r[#"message"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_destination.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_source.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = ContactPoint.Reshape(r[#"contact"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader_response.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = Reference.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem_uniqueId.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"nutrient" = if r[#"nutrient"]? = null then null else List.Transform(r[#"nutrient"]?, NutritionOrder_oralDiet_nutrient.Reshape),
        #"texture" = if r[#"texture"]? = null then null else List.Transform(r[#"texture"]?, NutritionOrder_oralDiet_texture.Reshape),
        #"fluidConsistencyType" = if r[#"fluidConsistencyType"]? = null then null else List.Transform(r[#"fluidConsistencyType"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_nutrient.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"amount" = Quantity.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_oralDiet_texture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"modifier" = CodeableConcept.Reshape(r[#"modifier"]?),
        #"foodType" = CodeableConcept.Reshape(r[#"foodType"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_supplement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"schedule" = if r[#"schedule"]? = null then null else List.Transform(r[#"schedule"]?, Timing.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"baseFormulaType" = CodeableConcept.Reshape(r[#"baseFormulaType"]?),
        #"additiveType" = CodeableConcept.Reshape(r[#"additiveType"]?),
        #"caloricDensity" = Quantity.Reshape(r[#"caloricDensity"]?),
        #"routeofAdministration" = CodeableConcept.Reshape(r[#"routeofAdministration"]?),
        #"administration" = if r[#"administration"]? = null then null else List.Transform(r[#"administration"]?, NutritionOrder_enteralFormula_administration.Reshape),
        #"maxVolumeToDeliver" = Quantity.Reshape(r[#"maxVolumeToDeliver"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder_enteralFormula_administration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateQuantity", "rateRatio"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateQuantity", "rateRatio" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateQuantity", "Quantity"}, { "rateRatio", "Ratio"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"schedule" = Timing.Reshape(r[#"schedule"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          childrenReshaped),

  Observation_referenceRange.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"appliesTo" = if r[#"appliesTo"]? = null then null else List.Transform(r[#"appliesTo"]?, CodeableConcept.Reshape),
        #"age" = Range.Reshape(r[#"age"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation_related.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation_component.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueAttachment", "Attachment"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"interpretation" = CodeableConcept.Reshape(r[#"interpretation"]?),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  OperationDefinition_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?),
        #"binding" = OperationDefinition_parameter_binding.Reshape(r[#"binding"]?),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @OperationDefinition_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationDefinition_parameter_binding.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValueSet = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueSetUri", "valueSetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueSetUri", "valueSetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueSetUri", "uri"}, { "valueSetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ valueSet = null ] else choicesRemoved & [ valueSet = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValueSet(
          childrenReshaped),

  OperationDefinition_overload.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationOutcome_issue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"details" = CodeableConcept.Reshape(r[#"details"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"purpose" = CodeableConcept.Reshape(r[#"purpose"]?),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Resource.Reshape(r[#"resource"]?),
        #"part" = if r[#"part"]? = null then null else List.Transform(r[#"part"]?, @Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Patient_contact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"relationship" = if r[#"relationship"]? = null then null else List.Transform(r[#"relationship"]?, CodeableConcept.Reshape),
        #"name" = HumanName.Reshape(r[#"name"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_animal.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"species" = CodeableConcept.Reshape(r[#"species"]?),
        #"breed" = CodeableConcept.Reshape(r[#"breed"]?),
        #"genderStatus" = CodeableConcept.Reshape(r[#"genderStatus"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"language" = CodeableConcept.Reshape(r[#"language"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"other" = Reference.Reshape(r[#"other"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_detail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"submitter" = Reference.Reshape(r[#"submitter"]?),
        #"payee" = Reference.Reshape(r[#"payee"]?),
        #"amount" = Money.Reshape(r[#"amount"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_goal.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"description" = CodeableConcept.Reshape(r[#"description"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"start" = CodeableConcept.Reshape(r[#"start"]?),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, PlanDefinition_goal_target.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_goal_target.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDetail = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "detailQuantity", "detailRange", "detailCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "detailQuantity", "Quantity"}, { "detailRange", "Range"}, { "detailCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ detail = null ] else choicesRemoved & [ detail = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"measure" = CodeableConcept.Reshape(r[#"measure"]?),
        #"due" = Duration.Reshape(r[#"due"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeDetail(
          childrenReshaped),

  PlanDefinition_action.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDateTime", "timingPeriod", "timingDuration", "timingRange", "timingTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDateTime", "timingPeriod", "timingDuration", "timingRange", "timingTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDateTime", "dateTime"}, { "timingPeriod", "Period"}, { "timingDuration", "Duration"}, { "timingRange", "Range"}, { "timingTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"triggerDefinition" = if r[#"triggerDefinition"]? = null then null else List.Transform(r[#"triggerDefinition"]?, TriggerDefinition.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, PlanDefinition_action_condition.Reshape),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, DataRequirement.Reshape),
        #"output" = if r[#"output"]? = null then null else List.Transform(r[#"output"]?, DataRequirement.Reshape),
        #"relatedAction" = if r[#"relatedAction"]? = null then null else List.Transform(r[#"relatedAction"]?, PlanDefinition_action_relatedAction.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, PlanDefinition_action_participant.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"definition" = Reference.Reshape(r[#"definition"]?),
        #"transform" = Reference.Reshape(r[#"transform"]?),
        #"dynamicValue" = if r[#"dynamicValue"]? = null then null else List.Transform(r[#"dynamicValue"]?, PlanDefinition_action_dynamicValue.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, @PlanDefinition_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  PlanDefinition_action_condition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_action_relatedAction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOffset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "offsetDuration", "offsetRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "offsetDuration", "offsetRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "offsetDuration", "Duration"}, { "offsetRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ offset = null ] else choicesRemoved & [ offset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOffset(
          childrenReshaped),

  PlanDefinition_action_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition_action_dynamicValue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner_qualification.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"issuer" = Reference.Reshape(r[#"issuer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole_availableTime.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole_notAvailable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"during" = Period.Reshape(r[#"during"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_performer.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = CodeableConcept.Reshape(r[#"role"]?),
        #"actor" = Reference.Reshape(r[#"actor"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure_focalDevice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = CodeableConcept.Reshape(r[#"action"]?),
        #"manipulated" = Reference.Reshape(r[#"manipulated"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcedureRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessRequest_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessResponse_processNote.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance_agent.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeWho = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whoUri", "whoReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whoUri", "whoReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whoUri", "uri"}, { "whoReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ who = null ] else choicesRemoved & [ who = choiceRecord ],
      ReshapeOnBehalfOf = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onBehalfOfUri", "onBehalfOfReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onBehalfOfUri", "onBehalfOfReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onBehalfOfUri", "uri"}, { "onBehalfOfReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onBehalfOf = null ] else choicesRemoved & [ onBehalfOf = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"role" = if r[#"role"]? = null then null else List.Transform(r[#"role"]?, CodeableConcept.Reshape),
        #"relatedAgentType" = CodeableConcept.Reshape(r[#"relatedAgentType"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnBehalfOf(
          ReshapeWho(
            childrenReshaped)),

  Provenance_entity.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeWhat = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whatUri", "whatReference", "whatIdentifier"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whatUri", "whatReference", "whatIdentifier" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whatUri", "uri"}, { "whatReference", "Reference"}, { "whatIdentifier", "Identifier"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ what = null ] else choicesRemoved & [ what = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Provenance_agent.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeWhat(
          childrenReshaped),

  Questionnaire_item.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeInitial = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "initialBoolean", "initialDecimal", "initialInteger", "initialDate", "initialDateTime", "initialTime", "initialString", "initialUri", "initialAttachment", "initialCoding", "initialQuantity", "initialReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "initialBoolean", "initialDecimal", "initialInteger", "initialDate", "initialDateTime", "initialTime", "initialString", "initialUri", "initialAttachment", "initialCoding", "initialQuantity", "initialReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "initialBoolean", "boolean"}, { "initialDecimal", "decimal"}, { "initialInteger", "integer"}, { "initialDate", "date"}, { "initialDateTime", "dateTime"}, { "initialTime", "time"}, { "initialString", "string"}, { "initialUri", "uri"}, { "initialAttachment", "Attachment"}, { "initialCoding", "Coding"}, { "initialQuantity", "Quantity"}, { "initialReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ initial = null ] else choicesRemoved & [ initial = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"enableWhen" = if r[#"enableWhen"]? = null then null else List.Transform(r[#"enableWhen"]?, Questionnaire_item_enableWhen.Reshape),
        #"options" = Reference.Reshape(r[#"options"]?),
        #"option" = if r[#"option"]? = null then null else List.Transform(r[#"option"]?, Questionnaire_item_option.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, @Questionnaire_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeInitial(
          childrenReshaped),

  Questionnaire_item_enableWhen.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAnswer = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "answerBoolean", "answerDecimal", "answerInteger", "answerDate", "answerDateTime", "answerTime", "answerString", "answerUri", "answerAttachment", "answerCoding", "answerQuantity", "answerReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "answerBoolean", "answerDecimal", "answerInteger", "answerDate", "answerDateTime", "answerTime", "answerString", "answerUri", "answerAttachment", "answerCoding", "answerQuantity", "answerReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "answerBoolean", "boolean"}, { "answerDecimal", "decimal"}, { "answerInteger", "integer"}, { "answerDate", "date"}, { "answerDateTime", "dateTime"}, { "answerTime", "time"}, { "answerString", "string"}, { "answerUri", "uri"}, { "answerAttachment", "Attachment"}, { "answerCoding", "Coding"}, { "answerQuantity", "Quantity"}, { "answerReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ answer = null ] else choicesRemoved & [ answer = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAnswer(
          childrenReshaped),

  Questionnaire_item_option.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueInteger", "valueDate", "valueTime", "valueString", "valueCoding"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueInteger", "valueDate", "valueTime", "valueString", "valueCoding" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueCoding", "Coding"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  QuestionnaireResponse_item.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"answer" = if r[#"answer"]? = null then null else List.Transform(r[#"answer"]?, QuestionnaireResponse_item_answer.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, @QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse_item_answer.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBoolean", "boolean"}, { "valueDecimal", "decimal"}, { "valueInteger", "integer"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueTime", "time"}, { "valueString", "string"}, { "valueUri", "uri"}, { "valueAttachment", "Attachment"}, { "valueCoding", "Coding"}, { "valueQuantity", "Quantity"}, { "valueReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ReferralRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup_action.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingDateTime", "timingPeriod", "timingDuration", "timingRange", "timingTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingDateTime", "timingPeriod", "timingDuration", "timingRange", "timingTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingDateTime", "dateTime"}, { "timingPeriod", "Period"}, { "timingDuration", "Duration"}, { "timingRange", "Range"}, { "timingTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"documentation" = if r[#"documentation"]? = null then null else List.Transform(r[#"documentation"]?, RelatedArtifact.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, RequestGroup_action_condition.Reshape),
        #"relatedAction" = if r[#"relatedAction"]? = null then null else List.Transform(r[#"relatedAction"]?, RequestGroup_action_relatedAction.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Reference.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"resource" = Reference.Reshape(r[#"resource"]?),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, @RequestGroup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  RequestGroup_action_condition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup_action_relatedAction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOffset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "offsetDuration", "offsetRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "offsetDuration", "offsetRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "offsetDuration", "Duration"}, { "offsetRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ offset = null ] else choicesRemoved & [ offset = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOffset(
          childrenReshaped),

  ResearchStudy_arm.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskAssessment_prediction.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeProbability = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "probabilityDecimal", "probabilityRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "probabilityDecimal", "probabilityRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "probabilityDecimal", "decimal"}, { "probabilityRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ probability = null ] else choicesRemoved & [ probability = choiceRecord ],
      ReshapeWhen = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whenPeriod", "whenRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whenPeriod", "whenRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whenPeriod", "Period"}, { "whenRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ when = null ] else choicesRemoved & [ when = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"qualitativeRisk" = CodeableConcept.Reshape(r[#"qualitativeRisk"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeWhen(
          ReshapeProbability(
            childrenReshaped)),

  SearchParameter_component.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"definition" = Reference.Reshape(r[#"definition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Sequence_referenceSeq.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"chromosome" = CodeableConcept.Reshape(r[#"chromosome"]?),
        #"referenceSeqId" = CodeableConcept.Reshape(r[#"referenceSeqId"]?),
        #"referenceSeqPointer" = Reference.Reshape(r[#"referenceSeqPointer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Sequence_variant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"variantPointer" = Reference.Reshape(r[#"variantPointer"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Sequence_quality.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"standardSequence" = CodeableConcept.Reshape(r[#"standardSequence"]?),
        #"score" = Quantity.Reshape(r[#"score"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Sequence_repository.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen_collection.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCollected = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "collectedDateTime", "collectedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "collectedDateTime", "collectedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "collectedDateTime", "dateTime"}, { "collectedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ collected = null ] else choicesRemoved & [ collected = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"collector" = Reference.Reshape(r[#"collector"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeCollected(
          childrenReshaped),

  Specimen_processing.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTime = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timeDateTime", "timePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timeDateTime", "timePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timeDateTime", "dateTime"}, { "timePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ time = null ] else choicesRemoved & [ time = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"procedure" = CodeableConcept.Reshape(r[#"procedure"]?),
        #"additive" = if r[#"additive"]? = null then null else List.Transform(r[#"additive"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTime(
          childrenReshaped),

  Specimen_container.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAdditive = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "additiveCodeableConcept", "additiveReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "additiveCodeableConcept", "additiveReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "additiveCodeableConcept", "CodeableConcept"}, { "additiveReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ additive = null ] else choicesRemoved & [ additive = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"capacity" = Quantity.Reshape(r[#"capacity"]?),
        #"specimenQuantity" = Quantity.Reshape(r[#"specimenQuantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeAdditive(
          childrenReshaped),

  StructureDefinition_mapping.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_snapshot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition_differential.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_structure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, StructureMap_group_input.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, StructureMap_group_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_input.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"source" = if r[#"source"]? = null then null else List.Transform(r[#"source"]?, StructureMap_group_rule_source.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, StructureMap_group_rule_target.Reshape),
        #"dependent" = if r[#"dependent"]? = null then null else List.Transform(r[#"dependent"]?, StructureMap_group_rule_dependent.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, @StructureMap_group_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule_source.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefaultValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "defaultValueBase64Binary", "base64Binary"}, { "defaultValueBoolean", "boolean"}, { "defaultValueCode", "code"}, { "defaultValueDate", "date"}, { "defaultValueDateTime", "dateTime"}, { "defaultValueDecimal", "decimal"}, { "defaultValueId", "id"}, { "defaultValueInstant", "instant"}, { "defaultValueInteger", "integer"}, { "defaultValueMarkdown", "markdown"}, { "defaultValueOid", "oid"}, { "defaultValuePositiveInt", "positiveInt"}, { "defaultValueString", "string"}, { "defaultValueTime", "time"}, { "defaultValueUnsignedInt", "unsignedInt"}, { "defaultValueUri", "uri"}, { "defaultValueAddress", "Address"}, { "defaultValueAge", "Age"}, { "defaultValueAnnotation", "Annotation"}, { "defaultValueAttachment", "Attachment"}, { "defaultValueCodeableConcept", "CodeableConcept"}, { "defaultValueCoding", "Coding"}, { "defaultValueContactPoint", "ContactPoint"}, { "defaultValueCount", "Count"}, { "defaultValueDistance", "Distance"}, { "defaultValueDuration", "Duration"}, { "defaultValueHumanName", "HumanName"}, { "defaultValueIdentifier", "Identifier"}, { "defaultValueMoney", "Money"}, { "defaultValuePeriod", "Period"}, { "defaultValueQuantity", "Quantity"}, { "defaultValueRange", "Range"}, { "defaultValueRatio", "Ratio"}, { "defaultValueReference", "Reference"}, { "defaultValueSampledData", "SampledData"}, { "defaultValueSignature", "Signature"}, { "defaultValueTiming", "Timing"}, { "defaultValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ defaultValue = null ] else choicesRemoved & [ defaultValue = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDefaultValue(
          childrenReshaped),

  StructureMap_group_rule_target.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, StructureMap_group_rule_target_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap_group_rule_target_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueId", "valueString", "valueBoolean", "valueInteger", "valueDecimal"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueId", "valueString", "valueBoolean", "valueInteger", "valueDecimal" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueId", "id"}, { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  StructureMap_group_rule_dependent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription_channel.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_instance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance_ingredient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSubstance = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "substanceCodeableConcept", "substanceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "substanceCodeableConcept", "substanceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "substanceCodeableConcept", "CodeableConcept"}, { "substanceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ substance = null ] else choicesRemoved & [ substance = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Ratio.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeSubstance(
          childrenReshaped),

  SupplyDelivery_suppliedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  SupplyRequest_orderedItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeItem = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "itemCodeableConcept", "itemReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "itemCodeableConcept", "itemReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "itemCodeableConcept", "CodeableConcept"}, { "itemReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ item = null ] else choicesRemoved & [ item = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeItem(
          childrenReshaped),

  SupplyRequest_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Task_requester.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"agent" = Reference.Reshape(r[#"agent"]?),
        #"onBehalfOf" = Reference.Reshape(r[#"onBehalfOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Task_restriction.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Task_input.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  Task_output.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  TestReport_participant.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_setup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestReport_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_setup_action_assert.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_test.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_test_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_test_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestReport_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_teardown.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestReport_teardown_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestReport_teardown_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestReport_setup_action_operation.Reshape(r[#"operation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_origin.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Coding.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_destination.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"profile" = Coding.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, TestScript_metadata_link.Reshape),
        #"capability" = if r[#"capability"]? = null then null else List.Transform(r[#"capability"]?, TestScript_metadata_capability.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_link.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_metadata_capability.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"capabilities" = Reference.Reshape(r[#"capabilities"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_fixture.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_variable.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?),
        #"param" = if r[#"param"]? = null then null else List.Transform(r[#"param"]?, TestScript_rule_param.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_rule_param.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_ruleset.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"resource" = Reference.Reshape(r[#"resource"]?),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, TestScript_ruleset_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_ruleset_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"param" = if r[#"param"]? = null then null else List.Transform(r[#"param"]?, TestScript_ruleset_rule_param.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_ruleset_rule_param.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_setup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"requestHeader" = if r[#"requestHeader"]? = null then null else List.Transform(r[#"requestHeader"]?, TestScript_setup_action_operation_requestHeader.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_operation_requestHeader.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"rule" = TestScript_setup_action_assert_rule.Reshape(r[#"rule"]?),
        #"ruleset" = TestScript_setup_action_assert_ruleset.Reshape(r[#"ruleset"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"param" = if r[#"param"]? = null then null else List.Transform(r[#"param"]?, TestScript_setup_action_assert_rule_param.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert_rule_param.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert_ruleset.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, TestScript_setup_action_assert_ruleset_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert_ruleset_rule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"param" = if r[#"param"]? = null then null else List.Transform(r[#"param"]?, TestScript_setup_action_assert_ruleset_rule_param.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_setup_action_assert_ruleset_rule_param.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_test_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_test_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?),
        #"assert" = TestScript_setup_action_assert.Reshape(r[#"assert"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, TestScript_teardown_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript_teardown_action.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"operation" = TestScript_setup_action_operation.Reshape(r[#"operation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"include" = if r[#"include"]? = null then null else List.Transform(r[#"include"]?, ValueSet_compose_include.Reshape),
        #"exclude" = if r[#"exclude"]? = null then null else List.Transform(r[#"exclude"]?, ValueSet_compose_include.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, ValueSet_compose_include_concept.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, ValueSet_compose_include_filter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_concept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_expansion_contains_designation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion_contains_designation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"use" = Coding.Reshape(r[#"use"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_compose_include_filter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ValueSet_expansion_parameter.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ValueSet_expansion_parameter.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueString", "valueBoolean", "valueInteger", "valueDecimal", "valueUri", "valueCode" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueInteger", "integer"}, { "valueDecimal", "decimal"}, { "valueUri", "uri"}, { "valueCode", "code"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ValueSet_expansion_contains.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"designation" = if r[#"designation"]? = null then null else List.Transform(r[#"designation"]?, ValueSet_expansion_contains_designation.Reshape),
        #"contains" = if r[#"contains"]? = null then null else List.Transform(r[#"contains"]?, @ValueSet_expansion_contains.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription_dispense.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"product" = CodeableConcept.Reshape(r[#"product"]?),
        #"duration" = Quantity.Reshape(r[#"duration"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Account.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"active" = Period.Reshape(r[#"active"]?),
        #"balance" = Money.Reshape(r[#"balance"]?),
        #"coverage" = if r[#"coverage"]? = null then null else List.Transform(r[#"coverage"]?, Account_coverage.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"guarantor" = if r[#"guarantor"]? = null then null else List.Transform(r[#"guarantor"]?, Account_guarantor.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ActivityDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingDateTime", "timingPeriod", "timingRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingDateTime", "timingPeriod", "timingRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingDateTime", "dateTime"}, { "timingPeriod", "Period"}, { "timingRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      ReshapeProduct = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "productReference", "productCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "productReference", "productCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "productReference", "Reference"}, { "productCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ product = null ] else choicesRemoved & [ product = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Contributor.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"library" = if r[#"library"]? = null then null else List.Transform(r[#"library"]?, Reference.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, ActivityDefinition_participant.Reshape),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, Dosage.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"transform" = Reference.Reshape(r[#"transform"]?),
        #"dynamicValue" = if r[#"dynamicValue"]? = null then null else List.Transform(r[#"dynamicValue"]?, ActivityDefinition_dynamicValue.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeProduct(
          ReshapeTiming(
            childrenReshaped)),

  Address.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AdverseEvent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, Reference.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"seriousness" = CodeableConcept.Reshape(r[#"seriousness"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"eventParticipant" = Reference.Reshape(r[#"eventParticipant"]?),
        #"suspectEntity" = if r[#"suspectEntity"]? = null then null else List.Transform(r[#"suspectEntity"]?, AdverseEvent_suspectEntity.Reshape),
        #"subjectMedicalHistory" = if r[#"subjectMedicalHistory"]? = null then null else List.Transform(r[#"subjectMedicalHistory"]?, Reference.Reshape),
        #"referenceDocument" = if r[#"referenceDocument"]? = null then null else List.Transform(r[#"referenceDocument"]?, Reference.Reshape),
        #"study" = if r[#"study"]? = null then null else List.Transform(r[#"study"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Age.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AllergyIntolerance.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetDateTime", "dateTime"}, { "onsetAge", "Age"}, { "onsetPeriod", "Period"}, { "onsetRange", "Range"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, AllergyIntolerance_reaction.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnset(
          childrenReshaped),

  Annotation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAuthor = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "authorReference", "authorString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "authorReference", "authorString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "authorReference", "Reference"}, { "authorString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ author = null ] else choicesRemoved & [ author = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAuthor(
          childrenReshaped),

  Appointment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"serviceCategory" = CodeableConcept.Reshape(r[#"serviceCategory"]?),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"appointmentType" = CodeableConcept.Reshape(r[#"appointmentType"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"indication" = if r[#"indication"]? = null then null else List.Transform(r[#"indication"]?, Reference.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"slot" = if r[#"slot"]? = null then null else List.Transform(r[#"slot"]?, Reference.Reshape),
        #"incomingReferral" = if r[#"incomingReferral"]? = null then null else List.Transform(r[#"incomingReferral"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Appointment_participant.Reshape),
        #"requestedPeriod" = if r[#"requestedPeriod"]? = null then null else List.Transform(r[#"requestedPeriod"]?, Period.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AppointmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"appointment" = Reference.Reshape(r[#"appointment"]?),
        #"participantType" = if r[#"participantType"]? = null then null else List.Transform(r[#"participantType"]?, CodeableConcept.Reshape),
        #"actor" = Reference.Reshape(r[#"actor"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Attachment.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  AuditEvent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"type" = Coding.Reshape(r[#"type"]?),
        #"subtype" = if r[#"subtype"]? = null then null else List.Transform(r[#"subtype"]?, Coding.Reshape),
        #"purposeOfEvent" = if r[#"purposeOfEvent"]? = null then null else List.Transform(r[#"purposeOfEvent"]?, CodeableConcept.Reshape),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, AuditEvent_agent.Reshape),
        #"source" = AuditEvent_source.Reshape(r[#"source"]?),
        #"entity" = if r[#"entity"]? = null then null else List.Transform(r[#"entity"]?, AuditEvent_entity.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BackboneElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Basic.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Binary.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"securityContext" = Reference.Reshape(r[#"securityContext"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  BodySite.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"qualifier" = if r[#"qualifier"]? = null then null else List.Transform(r[#"qualifier"]?, CodeableConcept.Reshape),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, Attachment.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Bundle.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Bundle_link.Reshape),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, Bundle_entry.Reshape),
        #"signature" = Signature.Reshape(r[#"signature"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CapabilityStatement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"software" = CapabilityStatement_software.Reshape(r[#"software"]?),
        #"implementation" = CapabilityStatement_implementation.Reshape(r[#"implementation"]?),
        #"profile" = if r[#"profile"]? = null then null else List.Transform(r[#"profile"]?, Reference.Reshape),
        #"rest" = if r[#"rest"]? = null then null else List.Transform(r[#"rest"]?, CapabilityStatement_rest.Reshape),
        #"messaging" = if r[#"messaging"]? = null then null else List.Transform(r[#"messaging"]?, CapabilityStatement_messaging.Reshape),
        #"document" = if r[#"document"]? = null then null else List.Transform(r[#"document"]?, CapabilityStatement_document.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CarePlan.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, Reference.Reshape),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, Reference.Reshape),
        #"activity" = if r[#"activity"]? = null then null else List.Transform(r[#"activity"]?, CarePlan_activity.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CareTeam.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, CareTeam_participant.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"managingOrganization" = if r[#"managingOrganization"]? = null then null else List.Transform(r[#"managingOrganization"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ChargeItem.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, ChargeItem_participant.Reshape),
        #"performingOrganization" = Reference.Reshape(r[#"performingOrganization"]?),
        #"requestingOrganization" = Reference.Reshape(r[#"requestingOrganization"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"bodysite" = if r[#"bodysite"]? = null then null else List.Transform(r[#"bodysite"]?, CodeableConcept.Reshape),
        #"priceOverride" = Money.Reshape(r[#"priceOverride"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"service" = if r[#"service"]? = null then null else List.Transform(r[#"service"]?, Reference.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  Claim.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = if r[#"subType"]? = null then null else List.Transform(r[#"subType"]?, CodeableConcept.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"billablePeriod" = Period.Reshape(r[#"billablePeriod"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"fundsReserve" = CodeableConcept.Reshape(r[#"fundsReserve"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, Claim_related.Reshape),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"originalPrescription" = Reference.Reshape(r[#"originalPrescription"]?),
        #"payee" = Claim_payee.Reshape(r[#"payee"]?),
        #"referral" = Reference.Reshape(r[#"referral"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, Claim_careTeam.Reshape),
        #"information" = if r[#"information"]? = null then null else List.Transform(r[#"information"]?, Claim_information.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, Claim_diagnosis.Reshape),
        #"procedure" = if r[#"procedure"]? = null then null else List.Transform(r[#"procedure"]?, Claim_procedure.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, Claim_insurance.Reshape),
        #"accident" = Claim_accident.Reshape(r[#"accident"]?),
        #"employmentImpacted" = Period.Reshape(r[#"employmentImpacted"]?),
        #"hospitalization" = Period.Reshape(r[#"hospitalization"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Claim_item.Reshape),
        #"total" = Money.Reshape(r[#"total"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClaimResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"payeeType" = CodeableConcept.Reshape(r[#"payeeType"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ClaimResponse_item.Reshape),
        #"addItem" = if r[#"addItem"]? = null then null else List.Transform(r[#"addItem"]?, ClaimResponse_addItem.Reshape),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, ClaimResponse_error.Reshape),
        #"totalCost" = Money.Reshape(r[#"totalCost"]?),
        #"unallocDeductable" = Money.Reshape(r[#"unallocDeductable"]?),
        #"totalBenefit" = Money.Reshape(r[#"totalBenefit"]?),
        #"payment" = ClaimResponse_payment.Reshape(r[#"payment"]?),
        #"reserved" = Coding.Reshape(r[#"reserved"]?),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, ClaimResponse_processNote.Reshape),
        #"communicationRequest" = if r[#"communicationRequest"]? = null then null else List.Transform(r[#"communicationRequest"]?, Reference.Reshape),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, ClaimResponse_insurance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ClinicalImpression.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"assessor" = Reference.Reshape(r[#"assessor"]?),
        #"previous" = Reference.Reshape(r[#"previous"]?),
        #"problem" = if r[#"problem"]? = null then null else List.Transform(r[#"problem"]?, Reference.Reshape),
        #"investigation" = if r[#"investigation"]? = null then null else List.Transform(r[#"investigation"]?, ClinicalImpression_investigation.Reshape),
        #"finding" = if r[#"finding"]? = null then null else List.Transform(r[#"finding"]?, ClinicalImpression_finding.Reshape),
        #"prognosisCodeableConcept" = if r[#"prognosisCodeableConcept"]? = null then null else List.Transform(r[#"prognosisCodeableConcept"]?, CodeableConcept.Reshape),
        #"prognosisReference" = if r[#"prognosisReference"]? = null then null else List.Transform(r[#"prognosisReference"]?, Reference.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          childrenReshaped),

  CodeableConcept.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"coding" = if r[#"coding"]? = null then null else List.Transform(r[#"coding"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CodeSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"filter" = if r[#"filter"]? = null then null else List.Transform(r[#"filter"]?, CodeSystem_filter.Reshape),
        #"property" = if r[#"property"]? = null then null else List.Transform(r[#"property"]?, CodeSystem_property.Reshape),
        #"concept" = if r[#"concept"]? = null then null else List.Transform(r[#"concept"]?, CodeSystem_concept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coding.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Communication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"notDoneReason" = CodeableConcept.Reshape(r[#"notDoneReason"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, Reference.Reshape),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, Communication_payload.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  CommunicationRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"medium" = if r[#"medium"]? = null then null else List.Transform(r[#"medium"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, Reference.Reshape),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"payload" = if r[#"payload"]? = null then null else List.Transform(r[#"payload"]?, CommunicationRequest_payload.Reshape),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"requester" = CommunicationRequest_requester.Reshape(r[#"requester"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  CompartmentDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"resource" = if r[#"resource"]? = null then null else List.Transform(r[#"resource"]?, CompartmentDefinition_resource.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Composition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"attester" = if r[#"attester"]? = null then null else List.Transform(r[#"attester"]?, Composition_attester.Reshape),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"relatesTo" = if r[#"relatesTo"]? = null then null else List.Transform(r[#"relatesTo"]?, Composition_relatesTo.Reshape),
        #"event" = if r[#"event"]? = null then null else List.Transform(r[#"event"]?, Composition_event.Reshape),
        #"section" = if r[#"section"]? = null then null else List.Transform(r[#"section"]?, Composition_section.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ConceptMap.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceUri", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceUri", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceUri", "uri"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      ReshapeTarget = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "targetUri", "targetReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "targetUri", "targetReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "targetUri", "uri"}, { "targetReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ target = null ] else choicesRemoved & [ target = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, ConceptMap_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTarget(
          ReshapeSource(
            childrenReshaped)),

  Condition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOnset = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onsetDateTime", "onsetAge", "onsetPeriod", "onsetRange", "onsetString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onsetDateTime", "dateTime"}, { "onsetAge", "Age"}, { "onsetPeriod", "Period"}, { "onsetRange", "Range"}, { "onsetString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onset = null ] else choicesRemoved & [ onset = choiceRecord ],
      ReshapeAbatement = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "abatementDateTime", "abatementAge", "abatementBoolean", "abatementPeriod", "abatementRange", "abatementString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "abatementDateTime", "abatementAge", "abatementBoolean", "abatementPeriod", "abatementRange", "abatementString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "abatementDateTime", "dateTime"}, { "abatementAge", "Age"}, { "abatementBoolean", "boolean"}, { "abatementPeriod", "Period"}, { "abatementRange", "Range"}, { "abatementString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ abatement = null ] else choicesRemoved & [ abatement = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"severity" = CodeableConcept.Reshape(r[#"severity"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"asserter" = Reference.Reshape(r[#"asserter"]?),
        #"stage" = Condition_stage.Reshape(r[#"stage"]?),
        #"evidence" = if r[#"evidence"]? = null then null else List.Transform(r[#"evidence"]?, Condition_evidence.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAbatement(
          ReshapeOnset(
            childrenReshaped)),

  Consent.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeSource = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "sourceAttachment", "sourceIdentifier", "sourceReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "sourceAttachment", "sourceIdentifier", "sourceReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "sourceAttachment", "Attachment"}, { "sourceIdentifier", "Identifier"}, { "sourceReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ source = null ] else choicesRemoved & [ source = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"consentingParty" = if r[#"consentingParty"]? = null then null else List.Transform(r[#"consentingParty"]?, Reference.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Consent_actor.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"organization" = if r[#"organization"]? = null then null else List.Transform(r[#"organization"]?, Reference.Reshape),
        #"policy" = if r[#"policy"]? = null then null else List.Transform(r[#"policy"]?, Consent_policy.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"purpose" = if r[#"purpose"]? = null then null else List.Transform(r[#"purpose"]?, Coding.Reshape),
        #"dataPeriod" = Period.Reshape(r[#"dataPeriod"]?),
        #"data" = if r[#"data"]? = null then null else List.Transform(r[#"data"]?, Consent_data.Reshape),
        #"except" = if r[#"except"]? = null then null else List.Transform(r[#"except"]?, Consent_except.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeSource(
          childrenReshaped),

  ContactDetail.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ContactPoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contained.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"Account" = if r[#"Account"]? = null then null else List.Transform(r[#"Account"]?, Account.Reshape),
        #"ActivityDefinition" = if r[#"ActivityDefinition"]? = null then null else List.Transform(r[#"ActivityDefinition"]?, ActivityDefinition.Reshape),
        #"AdverseEvent" = if r[#"AdverseEvent"]? = null then null else List.Transform(r[#"AdverseEvent"]?, AdverseEvent.Reshape),
        #"AllergyIntolerance" = if r[#"AllergyIntolerance"]? = null then null else List.Transform(r[#"AllergyIntolerance"]?, AllergyIntolerance.Reshape),
        #"Appointment" = if r[#"Appointment"]? = null then null else List.Transform(r[#"Appointment"]?, Appointment.Reshape),
        #"AppointmentResponse" = if r[#"AppointmentResponse"]? = null then null else List.Transform(r[#"AppointmentResponse"]?, AppointmentResponse.Reshape),
        #"AuditEvent" = if r[#"AuditEvent"]? = null then null else List.Transform(r[#"AuditEvent"]?, AuditEvent.Reshape),
        #"Basic" = if r[#"Basic"]? = null then null else List.Transform(r[#"Basic"]?, Basic.Reshape),
        #"Binary" = if r[#"Binary"]? = null then null else List.Transform(r[#"Binary"]?, Binary.Reshape),
        #"BodySite" = if r[#"BodySite"]? = null then null else List.Transform(r[#"BodySite"]?, BodySite.Reshape),
        #"Bundle" = if r[#"Bundle"]? = null then null else List.Transform(r[#"Bundle"]?, Bundle.Reshape),
        #"CapabilityStatement" = if r[#"CapabilityStatement"]? = null then null else List.Transform(r[#"CapabilityStatement"]?, CapabilityStatement.Reshape),
        #"CarePlan" = if r[#"CarePlan"]? = null then null else List.Transform(r[#"CarePlan"]?, CarePlan.Reshape),
        #"CareTeam" = if r[#"CareTeam"]? = null then null else List.Transform(r[#"CareTeam"]?, CareTeam.Reshape),
        #"ChargeItem" = if r[#"ChargeItem"]? = null then null else List.Transform(r[#"ChargeItem"]?, ChargeItem.Reshape),
        #"Claim" = if r[#"Claim"]? = null then null else List.Transform(r[#"Claim"]?, Claim.Reshape),
        #"ClaimResponse" = if r[#"ClaimResponse"]? = null then null else List.Transform(r[#"ClaimResponse"]?, ClaimResponse.Reshape),
        #"ClinicalImpression" = if r[#"ClinicalImpression"]? = null then null else List.Transform(r[#"ClinicalImpression"]?, ClinicalImpression.Reshape),
        #"CodeSystem" = if r[#"CodeSystem"]? = null then null else List.Transform(r[#"CodeSystem"]?, CodeSystem.Reshape),
        #"Communication" = if r[#"Communication"]? = null then null else List.Transform(r[#"Communication"]?, Communication.Reshape),
        #"CommunicationRequest" = if r[#"CommunicationRequest"]? = null then null else List.Transform(r[#"CommunicationRequest"]?, CommunicationRequest.Reshape),
        #"CompartmentDefinition" = if r[#"CompartmentDefinition"]? = null then null else List.Transform(r[#"CompartmentDefinition"]?, CompartmentDefinition.Reshape),
        #"Composition" = if r[#"Composition"]? = null then null else List.Transform(r[#"Composition"]?, Composition.Reshape),
        #"ConceptMap" = if r[#"ConceptMap"]? = null then null else List.Transform(r[#"ConceptMap"]?, ConceptMap.Reshape),
        #"Condition" = if r[#"Condition"]? = null then null else List.Transform(r[#"Condition"]?, Condition.Reshape),
        #"Consent" = if r[#"Consent"]? = null then null else List.Transform(r[#"Consent"]?, Consent.Reshape),
        #"Contract" = if r[#"Contract"]? = null then null else List.Transform(r[#"Contract"]?, Contract.Reshape),
        #"Coverage" = if r[#"Coverage"]? = null then null else List.Transform(r[#"Coverage"]?, Coverage.Reshape),
        #"DataElement" = if r[#"DataElement"]? = null then null else List.Transform(r[#"DataElement"]?, DataElement.Reshape),
        #"DetectedIssue" = if r[#"DetectedIssue"]? = null then null else List.Transform(r[#"DetectedIssue"]?, DetectedIssue.Reshape),
        #"Device" = if r[#"Device"]? = null then null else List.Transform(r[#"Device"]?, Device.Reshape),
        #"DeviceComponent" = if r[#"DeviceComponent"]? = null then null else List.Transform(r[#"DeviceComponent"]?, DeviceComponent.Reshape),
        #"DeviceMetric" = if r[#"DeviceMetric"]? = null then null else List.Transform(r[#"DeviceMetric"]?, DeviceMetric.Reshape),
        #"DeviceRequest" = if r[#"DeviceRequest"]? = null then null else List.Transform(r[#"DeviceRequest"]?, DeviceRequest.Reshape),
        #"DeviceUseStatement" = if r[#"DeviceUseStatement"]? = null then null else List.Transform(r[#"DeviceUseStatement"]?, DeviceUseStatement.Reshape),
        #"DiagnosticReport" = if r[#"DiagnosticReport"]? = null then null else List.Transform(r[#"DiagnosticReport"]?, DiagnosticReport.Reshape),
        #"DocumentManifest" = if r[#"DocumentManifest"]? = null then null else List.Transform(r[#"DocumentManifest"]?, DocumentManifest.Reshape),
        #"DocumentReference" = if r[#"DocumentReference"]? = null then null else List.Transform(r[#"DocumentReference"]?, DocumentReference.Reshape),
        #"DomainResource" = if r[#"DomainResource"]? = null then null else List.Transform(r[#"DomainResource"]?, DomainResource.Reshape),
        #"EligibilityRequest" = if r[#"EligibilityRequest"]? = null then null else List.Transform(r[#"EligibilityRequest"]?, EligibilityRequest.Reshape),
        #"EligibilityResponse" = if r[#"EligibilityResponse"]? = null then null else List.Transform(r[#"EligibilityResponse"]?, EligibilityResponse.Reshape),
        #"Encounter" = if r[#"Encounter"]? = null then null else List.Transform(r[#"Encounter"]?, Encounter.Reshape),
        #"Endpoint" = if r[#"Endpoint"]? = null then null else List.Transform(r[#"Endpoint"]?, Endpoint.Reshape),
        #"EnrollmentRequest" = if r[#"EnrollmentRequest"]? = null then null else List.Transform(r[#"EnrollmentRequest"]?, EnrollmentRequest.Reshape),
        #"EnrollmentResponse" = if r[#"EnrollmentResponse"]? = null then null else List.Transform(r[#"EnrollmentResponse"]?, EnrollmentResponse.Reshape),
        #"EpisodeOfCare" = if r[#"EpisodeOfCare"]? = null then null else List.Transform(r[#"EpisodeOfCare"]?, EpisodeOfCare.Reshape),
        #"ExpansionProfile" = if r[#"ExpansionProfile"]? = null then null else List.Transform(r[#"ExpansionProfile"]?, ExpansionProfile.Reshape),
        #"ExplanationOfBenefit" = if r[#"ExplanationOfBenefit"]? = null then null else List.Transform(r[#"ExplanationOfBenefit"]?, ExplanationOfBenefit.Reshape),
        #"FamilyMemberHistory" = if r[#"FamilyMemberHistory"]? = null then null else List.Transform(r[#"FamilyMemberHistory"]?, FamilyMemberHistory.Reshape),
        #"Flag" = if r[#"Flag"]? = null then null else List.Transform(r[#"Flag"]?, Flag.Reshape),
        #"Goal" = if r[#"Goal"]? = null then null else List.Transform(r[#"Goal"]?, Goal.Reshape),
        #"GraphDefinition" = if r[#"GraphDefinition"]? = null then null else List.Transform(r[#"GraphDefinition"]?, GraphDefinition.Reshape),
        #"Group" = if r[#"Group"]? = null then null else List.Transform(r[#"Group"]?, Group.Reshape),
        #"GuidanceResponse" = if r[#"GuidanceResponse"]? = null then null else List.Transform(r[#"GuidanceResponse"]?, GuidanceResponse.Reshape),
        #"HealthcareService" = if r[#"HealthcareService"]? = null then null else List.Transform(r[#"HealthcareService"]?, HealthcareService.Reshape),
        #"ImagingManifest" = if r[#"ImagingManifest"]? = null then null else List.Transform(r[#"ImagingManifest"]?, ImagingManifest.Reshape),
        #"ImagingStudy" = if r[#"ImagingStudy"]? = null then null else List.Transform(r[#"ImagingStudy"]?, ImagingStudy.Reshape),
        #"Immunization" = if r[#"Immunization"]? = null then null else List.Transform(r[#"Immunization"]?, Immunization.Reshape),
        #"ImmunizationRecommendation" = if r[#"ImmunizationRecommendation"]? = null then null else List.Transform(r[#"ImmunizationRecommendation"]?, ImmunizationRecommendation.Reshape),
        #"ImplementationGuide" = if r[#"ImplementationGuide"]? = null then null else List.Transform(r[#"ImplementationGuide"]?, ImplementationGuide.Reshape),
        #"Library" = if r[#"Library"]? = null then null else List.Transform(r[#"Library"]?, Library.Reshape),
        #"Linkage" = if r[#"Linkage"]? = null then null else List.Transform(r[#"Linkage"]?, Linkage.Reshape),
        #"List" = if r[#"List"]? = null then null else List.Transform(r[#"List"]?, List.Reshape),
        #"Location" = if r[#"Location"]? = null then null else List.Transform(r[#"Location"]?, Location.Reshape),
        #"Measure" = if r[#"Measure"]? = null then null else List.Transform(r[#"Measure"]?, Measure.Reshape),
        #"MeasureReport" = if r[#"MeasureReport"]? = null then null else List.Transform(r[#"MeasureReport"]?, MeasureReport.Reshape),
        #"Media" = if r[#"Media"]? = null then null else List.Transform(r[#"Media"]?, Media.Reshape),
        #"Medication" = if r[#"Medication"]? = null then null else List.Transform(r[#"Medication"]?, Medication.Reshape),
        #"MedicationAdministration" = if r[#"MedicationAdministration"]? = null then null else List.Transform(r[#"MedicationAdministration"]?, MedicationAdministration.Reshape),
        #"MedicationDispense" = if r[#"MedicationDispense"]? = null then null else List.Transform(r[#"MedicationDispense"]?, MedicationDispense.Reshape),
        #"MedicationRequest" = if r[#"MedicationRequest"]? = null then null else List.Transform(r[#"MedicationRequest"]?, MedicationRequest.Reshape),
        #"MedicationStatement" = if r[#"MedicationStatement"]? = null then null else List.Transform(r[#"MedicationStatement"]?, MedicationStatement.Reshape),
        #"MessageDefinition" = if r[#"MessageDefinition"]? = null then null else List.Transform(r[#"MessageDefinition"]?, MessageDefinition.Reshape),
        #"MessageHeader" = if r[#"MessageHeader"]? = null then null else List.Transform(r[#"MessageHeader"]?, MessageHeader.Reshape),
        #"NamingSystem" = if r[#"NamingSystem"]? = null then null else List.Transform(r[#"NamingSystem"]?, NamingSystem.Reshape),
        #"NutritionOrder" = if r[#"NutritionOrder"]? = null then null else List.Transform(r[#"NutritionOrder"]?, NutritionOrder.Reshape),
        #"Observation" = if r[#"Observation"]? = null then null else List.Transform(r[#"Observation"]?, Observation.Reshape),
        #"OperationDefinition" = if r[#"OperationDefinition"]? = null then null else List.Transform(r[#"OperationDefinition"]?, OperationDefinition.Reshape),
        #"OperationOutcome" = if r[#"OperationOutcome"]? = null then null else List.Transform(r[#"OperationOutcome"]?, OperationOutcome.Reshape),
        #"Organization" = if r[#"Organization"]? = null then null else List.Transform(r[#"Organization"]?, Organization.Reshape),
        #"Parameters" = if r[#"Parameters"]? = null then null else List.Transform(r[#"Parameters"]?, Parameters.Reshape),
        #"Patient" = if r[#"Patient"]? = null then null else List.Transform(r[#"Patient"]?, Patient.Reshape),
        #"PaymentNotice" = if r[#"PaymentNotice"]? = null then null else List.Transform(r[#"PaymentNotice"]?, PaymentNotice.Reshape),
        #"PaymentReconciliation" = if r[#"PaymentReconciliation"]? = null then null else List.Transform(r[#"PaymentReconciliation"]?, PaymentReconciliation.Reshape),
        #"Person" = if r[#"Person"]? = null then null else List.Transform(r[#"Person"]?, Person.Reshape),
        #"PlanDefinition" = if r[#"PlanDefinition"]? = null then null else List.Transform(r[#"PlanDefinition"]?, PlanDefinition.Reshape),
        #"Practitioner" = if r[#"Practitioner"]? = null then null else List.Transform(r[#"Practitioner"]?, Practitioner.Reshape),
        #"PractitionerRole" = if r[#"PractitionerRole"]? = null then null else List.Transform(r[#"PractitionerRole"]?, PractitionerRole.Reshape),
        #"Procedure" = if r[#"Procedure"]? = null then null else List.Transform(r[#"Procedure"]?, Procedure.Reshape),
        #"ProcedureRequest" = if r[#"ProcedureRequest"]? = null then null else List.Transform(r[#"ProcedureRequest"]?, ProcedureRequest.Reshape),
        #"ProcessRequest" = if r[#"ProcessRequest"]? = null then null else List.Transform(r[#"ProcessRequest"]?, ProcessRequest.Reshape),
        #"ProcessResponse" = if r[#"ProcessResponse"]? = null then null else List.Transform(r[#"ProcessResponse"]?, ProcessResponse.Reshape),
        #"Provenance" = if r[#"Provenance"]? = null then null else List.Transform(r[#"Provenance"]?, Provenance.Reshape),
        #"Questionnaire" = if r[#"Questionnaire"]? = null then null else List.Transform(r[#"Questionnaire"]?, Questionnaire.Reshape),
        #"QuestionnaireResponse" = if r[#"QuestionnaireResponse"]? = null then null else List.Transform(r[#"QuestionnaireResponse"]?, QuestionnaireResponse.Reshape),
        #"ReferralRequest" = if r[#"ReferralRequest"]? = null then null else List.Transform(r[#"ReferralRequest"]?, ReferralRequest.Reshape),
        #"RelatedPerson" = if r[#"RelatedPerson"]? = null then null else List.Transform(r[#"RelatedPerson"]?, RelatedPerson.Reshape),
        #"RequestGroup" = if r[#"RequestGroup"]? = null then null else List.Transform(r[#"RequestGroup"]?, RequestGroup.Reshape),
        #"ResearchStudy" = if r[#"ResearchStudy"]? = null then null else List.Transform(r[#"ResearchStudy"]?, ResearchStudy.Reshape),
        #"ResearchSubject" = if r[#"ResearchSubject"]? = null then null else List.Transform(r[#"ResearchSubject"]?, ResearchSubject.Reshape),
        #"Resource" = if r[#"Resource"]? = null then null else List.Transform(r[#"Resource"]?, Resource.Reshape),
        #"RiskAssessment" = if r[#"RiskAssessment"]? = null then null else List.Transform(r[#"RiskAssessment"]?, RiskAssessment.Reshape),
        #"Schedule" = if r[#"Schedule"]? = null then null else List.Transform(r[#"Schedule"]?, Schedule.Reshape),
        #"SearchParameter" = if r[#"SearchParameter"]? = null then null else List.Transform(r[#"SearchParameter"]?, SearchParameter.Reshape),
        #"Sequence" = if r[#"Sequence"]? = null then null else List.Transform(r[#"Sequence"]?, Sequence.Reshape),
        #"ServiceDefinition" = if r[#"ServiceDefinition"]? = null then null else List.Transform(r[#"ServiceDefinition"]?, ServiceDefinition.Reshape),
        #"Slot" = if r[#"Slot"]? = null then null else List.Transform(r[#"Slot"]?, Slot.Reshape),
        #"Specimen" = if r[#"Specimen"]? = null then null else List.Transform(r[#"Specimen"]?, Specimen.Reshape),
        #"StructureDefinition" = if r[#"StructureDefinition"]? = null then null else List.Transform(r[#"StructureDefinition"]?, StructureDefinition.Reshape),
        #"StructureMap" = if r[#"StructureMap"]? = null then null else List.Transform(r[#"StructureMap"]?, StructureMap.Reshape),
        #"Subscription" = if r[#"Subscription"]? = null then null else List.Transform(r[#"Subscription"]?, Subscription.Reshape),
        #"Substance" = if r[#"Substance"]? = null then null else List.Transform(r[#"Substance"]?, Substance.Reshape),
        #"SupplyDelivery" = if r[#"SupplyDelivery"]? = null then null else List.Transform(r[#"SupplyDelivery"]?, SupplyDelivery.Reshape),
        #"SupplyRequest" = if r[#"SupplyRequest"]? = null then null else List.Transform(r[#"SupplyRequest"]?, SupplyRequest.Reshape),
        #"Task" = if r[#"Task"]? = null then null else List.Transform(r[#"Task"]?, Task.Reshape),
        #"TestReport" = if r[#"TestReport"]? = null then null else List.Transform(r[#"TestReport"]?, TestReport.Reshape),
        #"TestScript" = if r[#"TestScript"]? = null then null else List.Transform(r[#"TestScript"]?, TestScript.Reshape),
        #"ValueSet" = if r[#"ValueSet"]? = null then null else List.Transform(r[#"ValueSet"]?, ValueSet.Reshape),
        #"VisionPrescription" = if r[#"VisionPrescription"]? = null then null else List.Transform(r[#"VisionPrescription"]?, VisionPrescription.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Contract.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBinding = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bindingAttachment", "bindingReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bindingAttachment", "bindingReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bindingAttachment", "Attachment"}, { "bindingReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ binding = null ] else choicesRemoved & [ binding = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"applies" = Period.Reshape(r[#"applies"]?),
        #"subject" = if r[#"subject"]? = null then null else List.Transform(r[#"subject"]?, Reference.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, Reference.Reshape),
        #"authority" = if r[#"authority"]? = null then null else List.Transform(r[#"authority"]?, Reference.Reshape),
        #"domain" = if r[#"domain"]? = null then null else List.Transform(r[#"domain"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = if r[#"subType"]? = null then null else List.Transform(r[#"subType"]?, CodeableConcept.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, CodeableConcept.Reshape),
        #"actionReason" = if r[#"actionReason"]? = null then null else List.Transform(r[#"actionReason"]?, CodeableConcept.Reshape),
        #"decisionType" = CodeableConcept.Reshape(r[#"decisionType"]?),
        #"contentDerivative" = CodeableConcept.Reshape(r[#"contentDerivative"]?),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, Coding.Reshape),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Contract_agent.Reshape),
        #"signer" = if r[#"signer"]? = null then null else List.Transform(r[#"signer"]?, Contract_signer.Reshape),
        #"valuedItem" = if r[#"valuedItem"]? = null then null else List.Transform(r[#"valuedItem"]?, Contract_valuedItem.Reshape),
        #"term" = if r[#"term"]? = null then null else List.Transform(r[#"term"]?, Contract_term.Reshape),
        #"friendly" = if r[#"friendly"]? = null then null else List.Transform(r[#"friendly"]?, Contract_friendly.Reshape),
        #"legal" = if r[#"legal"]? = null then null else List.Transform(r[#"legal"]?, Contract_legal.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, Contract_rule.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeBinding(
          childrenReshaped),

  Contributor.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Count.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Coverage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"policyHolder" = Reference.Reshape(r[#"policyHolder"]?),
        #"subscriber" = Reference.Reshape(r[#"subscriber"]?),
        #"beneficiary" = Reference.Reshape(r[#"beneficiary"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"payor" = if r[#"payor"]? = null then null else List.Transform(r[#"payor"]?, Reference.Reshape),
        #"grouping" = Coverage_grouping.Reshape(r[#"grouping"]?),
        #"contract" = if r[#"contract"]? = null then null else List.Transform(r[#"contract"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataElement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, DataElement_mapping.Reshape),
        #"element" = if r[#"element"]? = null then null else List.Transform(r[#"element"]?, ElementDefinition.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DataRequirement.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"codeFilter" = if r[#"codeFilter"]? = null then null else List.Transform(r[#"codeFilter"]?, DataRequirement_codeFilter.Reshape),
        #"dateFilter" = if r[#"dateFilter"]? = null then null else List.Transform(r[#"dateFilter"]?, DataRequirement_dateFilter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DetectedIssue.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"implicated" = if r[#"implicated"]? = null then null else List.Transform(r[#"implicated"]?, Reference.Reshape),
        #"mitigation" = if r[#"mitigation"]? = null then null else List.Transform(r[#"mitigation"]?, DetectedIssue_mitigation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Device.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"udi" = Device_udi.Reshape(r[#"udi"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"safety" = if r[#"safety"]? = null then null else List.Transform(r[#"safety"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceComponent.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"operationalStatus" = if r[#"operationalStatus"]? = null then null else List.Transform(r[#"operationalStatus"]?, CodeableConcept.Reshape),
        #"parameterGroup" = CodeableConcept.Reshape(r[#"parameterGroup"]?),
        #"productionSpecification" = if r[#"productionSpecification"]? = null then null else List.Transform(r[#"productionSpecification"]?, DeviceComponent_productionSpecification.Reshape),
        #"languageCode" = CodeableConcept.Reshape(r[#"languageCode"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceMetric.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"unit" = CodeableConcept.Reshape(r[#"unit"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"measurementPeriod" = Timing.Reshape(r[#"measurementPeriod"]?),
        #"calibration" = if r[#"calibration"]? = null then null else List.Transform(r[#"calibration"]?, DeviceMetric_calibration.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DeviceRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeCode = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "codeReference", "codeCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "codeReference", "codeCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "codeReference", "Reference"}, { "codeCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ code = null ] else choicesRemoved & [ code = choiceRecord ],
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"priorRequest" = if r[#"priorRequest"]? = null then null else List.Transform(r[#"priorRequest"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"intent" = CodeableConcept.Reshape(r[#"intent"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"requester" = DeviceRequest_requester.Reshape(r[#"requester"]?),
        #"performerType" = CodeableConcept.Reshape(r[#"performerType"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          ReshapeCode(
            childrenReshaped)),

  DeviceUseStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "timingTiming", "timingPeriod", "timingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "timingTiming", "timingPeriod", "timingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "timingTiming", "Timing"}, { "timingPeriod", "Period"}, { "timingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ timing = null ] else choicesRemoved & [ timing = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"whenUsed" = Period.Reshape(r[#"whenUsed"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"indication" = if r[#"indication"]? = null then null else List.Transform(r[#"indication"]?, CodeableConcept.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeTiming(
          childrenReshaped),

  DiagnosticReport.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, DiagnosticReport_performer.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"result" = if r[#"result"]? = null then null else List.Transform(r[#"result"]?, Reference.Reshape),
        #"imagingStudy" = if r[#"imagingStudy"]? = null then null else List.Transform(r[#"imagingStudy"]?, Reference.Reshape),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, DiagnosticReport_image.Reshape),
        #"codedDiagnosis" = if r[#"codedDiagnosis"]? = null then null else List.Transform(r[#"codedDiagnosis"]?, CodeableConcept.Reshape),
        #"presentedForm" = if r[#"presentedForm"]? = null then null else List.Transform(r[#"presentedForm"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          childrenReshaped),

  Distance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentManifest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, DocumentManifest_content.Reshape),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, DocumentManifest_related.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DocumentReference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"masterIdentifier" = Identifier.Reshape(r[#"masterIdentifier"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"class" = CodeableConcept.Reshape(r[#"class"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"author" = if r[#"author"]? = null then null else List.Transform(r[#"author"]?, Reference.Reshape),
        #"authenticator" = Reference.Reshape(r[#"authenticator"]?),
        #"custodian" = Reference.Reshape(r[#"custodian"]?),
        #"relatesTo" = if r[#"relatesTo"]? = null then null else List.Transform(r[#"relatesTo"]?, DocumentReference_relatesTo.Reshape),
        #"securityLabel" = if r[#"securityLabel"]? = null then null else List.Transform(r[#"securityLabel"]?, CodeableConcept.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, DocumentReference_content.Reshape),
        #"context" = DocumentReference_context.Reshape(r[#"context"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  DomainResource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Dosage.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      ReshapeDose = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "doseRange", "doseQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "doseRange", "doseQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "doseRange", "Range"}, { "doseQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ dose = null ] else choicesRemoved & [ dose = choiceRecord ],
      ReshapeRate = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "rateRatio", "rateRange", "rateQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "rateRatio", "rateRange", "rateQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "rateRatio", "Ratio"}, { "rateRange", "Range"}, { "rateQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ rate = null ] else choicesRemoved & [ rate = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"additionalInstruction" = if r[#"additionalInstruction"]? = null then null else List.Transform(r[#"additionalInstruction"]?, CodeableConcept.Reshape),
        #"timing" = Timing.Reshape(r[#"timing"]?),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"maxDosePerPeriod" = Ratio.Reshape(r[#"maxDosePerPeriod"]?),
        #"maxDosePerAdministration" = Quantity.Reshape(r[#"maxDosePerAdministration"]?),
        #"maxDosePerLifetime" = Quantity.Reshape(r[#"maxDosePerLifetime"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeRate(
          ReshapeDose(
            ReshapeAsNeeded(
              childrenReshaped))),

  Duration.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Element.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ElementDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefaultValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "defaultValueBase64Binary", "defaultValueBoolean", "defaultValueCode", "defaultValueDate", "defaultValueDateTime", "defaultValueDecimal", "defaultValueId", "defaultValueInstant", "defaultValueInteger", "defaultValueMarkdown", "defaultValueOid", "defaultValuePositiveInt", "defaultValueString", "defaultValueTime", "defaultValueUnsignedInt", "defaultValueUri", "defaultValueAddress", "defaultValueAge", "defaultValueAnnotation", "defaultValueAttachment", "defaultValueCodeableConcept", "defaultValueCoding", "defaultValueContactPoint", "defaultValueCount", "defaultValueDistance", "defaultValueDuration", "defaultValueHumanName", "defaultValueIdentifier", "defaultValueMoney", "defaultValuePeriod", "defaultValueQuantity", "defaultValueRange", "defaultValueRatio", "defaultValueReference", "defaultValueSampledData", "defaultValueSignature", "defaultValueTiming", "defaultValueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "defaultValueBase64Binary", "base64Binary"}, { "defaultValueBoolean", "boolean"}, { "defaultValueCode", "code"}, { "defaultValueDate", "date"}, { "defaultValueDateTime", "dateTime"}, { "defaultValueDecimal", "decimal"}, { "defaultValueId", "id"}, { "defaultValueInstant", "instant"}, { "defaultValueInteger", "integer"}, { "defaultValueMarkdown", "markdown"}, { "defaultValueOid", "oid"}, { "defaultValuePositiveInt", "positiveInt"}, { "defaultValueString", "string"}, { "defaultValueTime", "time"}, { "defaultValueUnsignedInt", "unsignedInt"}, { "defaultValueUri", "uri"}, { "defaultValueAddress", "Address"}, { "defaultValueAge", "Age"}, { "defaultValueAnnotation", "Annotation"}, { "defaultValueAttachment", "Attachment"}, { "defaultValueCodeableConcept", "CodeableConcept"}, { "defaultValueCoding", "Coding"}, { "defaultValueContactPoint", "ContactPoint"}, { "defaultValueCount", "Count"}, { "defaultValueDistance", "Distance"}, { "defaultValueDuration", "Duration"}, { "defaultValueHumanName", "HumanName"}, { "defaultValueIdentifier", "Identifier"}, { "defaultValueMoney", "Money"}, { "defaultValuePeriod", "Period"}, { "defaultValueQuantity", "Quantity"}, { "defaultValueRange", "Range"}, { "defaultValueRatio", "Ratio"}, { "defaultValueReference", "Reference"}, { "defaultValueSampledData", "SampledData"}, { "defaultValueSignature", "Signature"}, { "defaultValueTiming", "Timing"}, { "defaultValueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ defaultValue = null ] else choicesRemoved & [ defaultValue = choiceRecord ],
      ReshapeFixed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "fixedBase64Binary", "fixedBoolean", "fixedCode", "fixedDate", "fixedDateTime", "fixedDecimal", "fixedId", "fixedInstant", "fixedInteger", "fixedMarkdown", "fixedOid", "fixedPositiveInt", "fixedString", "fixedTime", "fixedUnsignedInt", "fixedUri", "fixedAddress", "fixedAge", "fixedAnnotation", "fixedAttachment", "fixedCodeableConcept", "fixedCoding", "fixedContactPoint", "fixedCount", "fixedDistance", "fixedDuration", "fixedHumanName", "fixedIdentifier", "fixedMoney", "fixedPeriod", "fixedQuantity", "fixedRange", "fixedRatio", "fixedReference", "fixedSampledData", "fixedSignature", "fixedTiming", "fixedMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "fixedBase64Binary", "fixedBoolean", "fixedCode", "fixedDate", "fixedDateTime", "fixedDecimal", "fixedId", "fixedInstant", "fixedInteger", "fixedMarkdown", "fixedOid", "fixedPositiveInt", "fixedString", "fixedTime", "fixedUnsignedInt", "fixedUri", "fixedAddress", "fixedAge", "fixedAnnotation", "fixedAttachment", "fixedCodeableConcept", "fixedCoding", "fixedContactPoint", "fixedCount", "fixedDistance", "fixedDuration", "fixedHumanName", "fixedIdentifier", "fixedMoney", "fixedPeriod", "fixedQuantity", "fixedRange", "fixedRatio", "fixedReference", "fixedSampledData", "fixedSignature", "fixedTiming", "fixedMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "fixedBase64Binary", "base64Binary"}, { "fixedBoolean", "boolean"}, { "fixedCode", "code"}, { "fixedDate", "date"}, { "fixedDateTime", "dateTime"}, { "fixedDecimal", "decimal"}, { "fixedId", "id"}, { "fixedInstant", "instant"}, { "fixedInteger", "integer"}, { "fixedMarkdown", "markdown"}, { "fixedOid", "oid"}, { "fixedPositiveInt", "positiveInt"}, { "fixedString", "string"}, { "fixedTime", "time"}, { "fixedUnsignedInt", "unsignedInt"}, { "fixedUri", "uri"}, { "fixedAddress", "Address"}, { "fixedAge", "Age"}, { "fixedAnnotation", "Annotation"}, { "fixedAttachment", "Attachment"}, { "fixedCodeableConcept", "CodeableConcept"}, { "fixedCoding", "Coding"}, { "fixedContactPoint", "ContactPoint"}, { "fixedCount", "Count"}, { "fixedDistance", "Distance"}, { "fixedDuration", "Duration"}, { "fixedHumanName", "HumanName"}, { "fixedIdentifier", "Identifier"}, { "fixedMoney", "Money"}, { "fixedPeriod", "Period"}, { "fixedQuantity", "Quantity"}, { "fixedRange", "Range"}, { "fixedRatio", "Ratio"}, { "fixedReference", "Reference"}, { "fixedSampledData", "SampledData"}, { "fixedSignature", "Signature"}, { "fixedTiming", "Timing"}, { "fixedMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ fixed = null ] else choicesRemoved & [ fixed = choiceRecord ],
      ReshapePattern = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "patternBase64Binary", "patternBoolean", "patternCode", "patternDate", "patternDateTime", "patternDecimal", "patternId", "patternInstant", "patternInteger", "patternMarkdown", "patternOid", "patternPositiveInt", "patternString", "patternTime", "patternUnsignedInt", "patternUri", "patternAddress", "patternAge", "patternAnnotation", "patternAttachment", "patternCodeableConcept", "patternCoding", "patternContactPoint", "patternCount", "patternDistance", "patternDuration", "patternHumanName", "patternIdentifier", "patternMoney", "patternPeriod", "patternQuantity", "patternRange", "patternRatio", "patternReference", "patternSampledData", "patternSignature", "patternTiming", "patternMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "patternBase64Binary", "patternBoolean", "patternCode", "patternDate", "patternDateTime", "patternDecimal", "patternId", "patternInstant", "patternInteger", "patternMarkdown", "patternOid", "patternPositiveInt", "patternString", "patternTime", "patternUnsignedInt", "patternUri", "patternAddress", "patternAge", "patternAnnotation", "patternAttachment", "patternCodeableConcept", "patternCoding", "patternContactPoint", "patternCount", "patternDistance", "patternDuration", "patternHumanName", "patternIdentifier", "patternMoney", "patternPeriod", "patternQuantity", "patternRange", "patternRatio", "patternReference", "patternSampledData", "patternSignature", "patternTiming", "patternMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "patternBase64Binary", "base64Binary"}, { "patternBoolean", "boolean"}, { "patternCode", "code"}, { "patternDate", "date"}, { "patternDateTime", "dateTime"}, { "patternDecimal", "decimal"}, { "patternId", "id"}, { "patternInstant", "instant"}, { "patternInteger", "integer"}, { "patternMarkdown", "markdown"}, { "patternOid", "oid"}, { "patternPositiveInt", "positiveInt"}, { "patternString", "string"}, { "patternTime", "time"}, { "patternUnsignedInt", "unsignedInt"}, { "patternUri", "uri"}, { "patternAddress", "Address"}, { "patternAge", "Age"}, { "patternAnnotation", "Annotation"}, { "patternAttachment", "Attachment"}, { "patternCodeableConcept", "CodeableConcept"}, { "patternCoding", "Coding"}, { "patternContactPoint", "ContactPoint"}, { "patternCount", "Count"}, { "patternDistance", "Distance"}, { "patternDuration", "Duration"}, { "patternHumanName", "HumanName"}, { "patternIdentifier", "Identifier"}, { "patternMoney", "Money"}, { "patternPeriod", "Period"}, { "patternQuantity", "Quantity"}, { "patternRange", "Range"}, { "patternRatio", "Ratio"}, { "patternReference", "Reference"}, { "patternSampledData", "SampledData"}, { "patternSignature", "Signature"}, { "patternTiming", "Timing"}, { "patternMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ pattern = null ] else choicesRemoved & [ pattern = choiceRecord ],
      ReshapeMinValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "minValueDate", "minValueDateTime", "minValueInstant", "minValueTime", "minValueDecimal", "minValueInteger", "minValuePositiveInt", "minValueUnsignedInt", "minValueQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "minValueDate", "minValueDateTime", "minValueInstant", "minValueTime", "minValueDecimal", "minValueInteger", "minValuePositiveInt", "minValueUnsignedInt", "minValueQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "minValueDate", "date"}, { "minValueDateTime", "dateTime"}, { "minValueInstant", "instant"}, { "minValueTime", "time"}, { "minValueDecimal", "decimal"}, { "minValueInteger", "integer"}, { "minValuePositiveInt", "positiveInt"}, { "minValueUnsignedInt", "unsignedInt"}, { "minValueQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ minValue = null ] else choicesRemoved & [ minValue = choiceRecord ],
      ReshapeMaxValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "maxValueDate", "maxValueDateTime", "maxValueInstant", "maxValueTime", "maxValueDecimal", "maxValueInteger", "maxValuePositiveInt", "maxValueUnsignedInt", "maxValueQuantity"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "maxValueDate", "maxValueDateTime", "maxValueInstant", "maxValueTime", "maxValueDecimal", "maxValueInteger", "maxValuePositiveInt", "maxValueUnsignedInt", "maxValueQuantity" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "maxValueDate", "date"}, { "maxValueDateTime", "dateTime"}, { "maxValueInstant", "instant"}, { "maxValueTime", "time"}, { "maxValueDecimal", "decimal"}, { "maxValueInteger", "integer"}, { "maxValuePositiveInt", "positiveInt"}, { "maxValueUnsignedInt", "unsignedInt"}, { "maxValueQuantity", "Quantity"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ maxValue = null ] else choicesRemoved & [ maxValue = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"slicing" = ElementDefinition_slicing.Reshape(r[#"slicing"]?),
        #"base" = ElementDefinition_base.Reshape(r[#"base"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, ElementDefinition_type.Reshape),
        #"example" = if r[#"example"]? = null then null else List.Transform(r[#"example"]?, ElementDefinition_example.Reshape),
        #"constraint" = if r[#"constraint"]? = null then null else List.Transform(r[#"constraint"]?, ElementDefinition_constraint.Reshape),
        #"binding" = ElementDefinition_binding.Reshape(r[#"binding"]?),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, ElementDefinition_mapping.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMaxValue(
          ReshapeMinValue(
            ReshapePattern(
              ReshapeFixed(
                ReshapeDefaultValue(
                  childrenReshaped))))),

  EligibilityRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeServiced = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "servicedDate", "servicedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "servicedDate", "servicedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "servicedDate", "date"}, { "servicedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ serviced = null ] else choicesRemoved & [ serviced = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"coverage" = Reference.Reshape(r[#"coverage"]?),
        #"benefitCategory" = CodeableConcept.Reshape(r[#"benefitCategory"]?),
        #"benefitSubCategory" = CodeableConcept.Reshape(r[#"benefitSubCategory"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeServiced(
          childrenReshaped),

  EligibilityResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"insurance" = if r[#"insurance"]? = null then null else List.Transform(r[#"insurance"]?, EligibilityResponse_insurance.Reshape),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, EligibilityResponse_error.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Encounter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, Encounter_statusHistory.Reshape),
        #"class" = Coding.Reshape(r[#"class"]?),
        #"classHistory" = if r[#"classHistory"]? = null then null else List.Transform(r[#"classHistory"]?, Encounter_classHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"episodeOfCare" = if r[#"episodeOfCare"]? = null then null else List.Transform(r[#"episodeOfCare"]?, Reference.Reshape),
        #"incomingReferral" = if r[#"incomingReferral"]? = null then null else List.Transform(r[#"incomingReferral"]?, Reference.Reshape),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, Encounter_participant.Reshape),
        #"appointment" = Reference.Reshape(r[#"appointment"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"length" = Duration.Reshape(r[#"length"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, CodeableConcept.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, Encounter_diagnosis.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape),
        #"hospitalization" = Encounter_hospitalization.Reshape(r[#"hospitalization"]?),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Encounter_location.Reshape),
        #"serviceProvider" = Reference.Reshape(r[#"serviceProvider"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Endpoint.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"connectionType" = Coding.Reshape(r[#"connectionType"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"payloadType" = if r[#"payloadType"]? = null then null else List.Transform(r[#"payloadType"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"coverage" = Reference.Reshape(r[#"coverage"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EnrollmentResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  EpisodeOfCare.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"statusHistory" = if r[#"statusHistory"]? = null then null else List.Transform(r[#"statusHistory"]?, EpisodeOfCare_statusHistory.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, EpisodeOfCare_diagnosis.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"referralRequest" = if r[#"referralRequest"]? = null then null else List.Transform(r[#"referralRequest"]?, Reference.Reshape),
        #"careManager" = Reference.Reshape(r[#"careManager"]?),
        #"team" = if r[#"team"]? = null then null else List.Transform(r[#"team"]?, Reference.Reshape),
        #"account" = if r[#"account"]? = null then null else List.Transform(r[#"account"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExpansionProfile.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"fixedVersion" = if r[#"fixedVersion"]? = null then null else List.Transform(r[#"fixedVersion"]?, ExpansionProfile_fixedVersion.Reshape),
        #"excludedSystem" = ExpansionProfile_excludedSystem.Reshape(r[#"excludedSystem"]?),
        #"designation" = ExpansionProfile_designation.Reshape(r[#"designation"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ExplanationOfBenefit.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subType" = if r[#"subType"]? = null then null else List.Transform(r[#"subType"]?, CodeableConcept.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"billablePeriod" = Period.Reshape(r[#"billablePeriod"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"insurer" = Reference.Reshape(r[#"insurer"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"referral" = Reference.Reshape(r[#"referral"]?),
        #"facility" = Reference.Reshape(r[#"facility"]?),
        #"claim" = Reference.Reshape(r[#"claim"]?),
        #"claimResponse" = Reference.Reshape(r[#"claimResponse"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, ExplanationOfBenefit_related.Reshape),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"originalPrescription" = Reference.Reshape(r[#"originalPrescription"]?),
        #"payee" = ExplanationOfBenefit_payee.Reshape(r[#"payee"]?),
        #"information" = if r[#"information"]? = null then null else List.Transform(r[#"information"]?, ExplanationOfBenefit_information.Reshape),
        #"careTeam" = if r[#"careTeam"]? = null then null else List.Transform(r[#"careTeam"]?, ExplanationOfBenefit_careTeam.Reshape),
        #"diagnosis" = if r[#"diagnosis"]? = null then null else List.Transform(r[#"diagnosis"]?, ExplanationOfBenefit_diagnosis.Reshape),
        #"procedure" = if r[#"procedure"]? = null then null else List.Transform(r[#"procedure"]?, ExplanationOfBenefit_procedure.Reshape),
        #"insurance" = ExplanationOfBenefit_insurance.Reshape(r[#"insurance"]?),
        #"accident" = ExplanationOfBenefit_accident.Reshape(r[#"accident"]?),
        #"employmentImpacted" = Period.Reshape(r[#"employmentImpacted"]?),
        #"hospitalization" = Period.Reshape(r[#"hospitalization"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ExplanationOfBenefit_item.Reshape),
        #"addItem" = if r[#"addItem"]? = null then null else List.Transform(r[#"addItem"]?, ExplanationOfBenefit_addItem.Reshape),
        #"totalCost" = Money.Reshape(r[#"totalCost"]?),
        #"unallocDeductable" = Money.Reshape(r[#"unallocDeductable"]?),
        #"totalBenefit" = Money.Reshape(r[#"totalBenefit"]?),
        #"payment" = ExplanationOfBenefit_payment.Reshape(r[#"payment"]?),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, ExplanationOfBenefit_processNote.Reshape),
        #"benefitBalance" = if r[#"benefitBalance"]? = null then null else List.Transform(r[#"benefitBalance"]?, ExplanationOfBenefit_benefitBalance.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Extension.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueBase64Binary", "valueBoolean", "valueCode", "valueDate", "valueDateTime", "valueDecimal", "valueId", "valueInstant", "valueInteger", "valueMarkdown", "valueOid", "valuePositiveInt", "valueString", "valueTime", "valueUnsignedInt", "valueUri", "valueAddress", "valueAge", "valueAnnotation", "valueAttachment", "valueCodeableConcept", "valueCoding", "valueContactPoint", "valueCount", "valueDistance", "valueDuration", "valueHumanName", "valueIdentifier", "valueMoney", "valuePeriod", "valueQuantity", "valueRange", "valueRatio", "valueReference", "valueSampledData", "valueSignature", "valueTiming", "valueMeta" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueBase64Binary", "base64Binary"}, { "valueBoolean", "boolean"}, { "valueCode", "code"}, { "valueDate", "date"}, { "valueDateTime", "dateTime"}, { "valueDecimal", "decimal"}, { "valueId", "id"}, { "valueInstant", "instant"}, { "valueInteger", "integer"}, { "valueMarkdown", "markdown"}, { "valueOid", "oid"}, { "valuePositiveInt", "positiveInt"}, { "valueString", "string"}, { "valueTime", "time"}, { "valueUnsignedInt", "unsignedInt"}, { "valueUri", "uri"}, { "valueAddress", "Address"}, { "valueAge", "Age"}, { "valueAnnotation", "Annotation"}, { "valueAttachment", "Attachment"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueCoding", "Coding"}, { "valueContactPoint", "ContactPoint"}, { "valueCount", "Count"}, { "valueDistance", "Distance"}, { "valueDuration", "Duration"}, { "valueHumanName", "HumanName"}, { "valueIdentifier", "Identifier"}, { "valueMoney", "Money"}, { "valuePeriod", "Period"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueReference", "Reference"}, { "valueSampledData", "SampledData"}, { "valueSignature", "Signature"}, { "valueTiming", "Timing"}, { "valueMeta", "Meta"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, @Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  FamilyMemberHistory.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeBorn = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "bornPeriod", "bornDate", "bornString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "bornPeriod", "bornDate", "bornString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "bornPeriod", "Period"}, { "bornDate", "date"}, { "bornString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ born = null ] else choicesRemoved & [ born = choiceRecord ],
      ReshapeAge = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "ageAge", "ageRange", "ageString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "ageAge", "ageRange", "ageString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "ageAge", "Age"}, { "ageRange", "Range"}, { "ageString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ age = null ] else choicesRemoved & [ age = choiceRecord ],
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedAge", "deceasedRange", "deceasedDate", "deceasedString"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedAge", "deceasedRange", "deceasedDate", "deceasedString" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedAge", "Age"}, { "deceasedRange", "Range"}, { "deceasedDate", "date"}, { "deceasedString", "string"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"notDoneReason" = CodeableConcept.Reshape(r[#"notDoneReason"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"condition" = if r[#"condition"]? = null then null else List.Transform(r[#"condition"]?, FamilyMemberHistory_condition.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDeceased(
          ReshapeAge(
            ReshapeBorn(
              childrenReshaped))),

  Flag.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"author" = Reference.Reshape(r[#"author"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Goal.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeStart = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "startDate", "startCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "startDate", "startCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "startDate", "date"}, { "startCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ start = null ] else choicesRemoved & [ start = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"priority" = CodeableConcept.Reshape(r[#"priority"]?),
        #"description" = CodeableConcept.Reshape(r[#"description"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"target" = Goal_target.Reshape(r[#"target"]?),
        #"expressedBy" = Reference.Reshape(r[#"expressedBy"]?),
        #"addresses" = if r[#"addresses"]? = null then null else List.Transform(r[#"addresses"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"outcomeCode" = if r[#"outcomeCode"]? = null then null else List.Transform(r[#"outcomeCode"]?, CodeableConcept.Reshape),
        #"outcomeReference" = if r[#"outcomeReference"]? = null then null else List.Transform(r[#"outcomeReference"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeStart(
          childrenReshaped),

  GraphDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, GraphDefinition_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Group.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, Group_characteristic.Reshape),
        #"member" = if r[#"member"]? = null then null else List.Transform(r[#"member"]?, Group_member.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  GuidanceResponse.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"module" = Reference.Reshape(r[#"module"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"evaluationMessage" = if r[#"evaluationMessage"]? = null then null else List.Transform(r[#"evaluationMessage"]?, Reference.Reshape),
        #"outputParameters" = Reference.Reshape(r[#"outputParameters"]?),
        #"result" = Reference.Reshape(r[#"result"]?),
        #"dataRequirement" = if r[#"dataRequirement"]? = null then null else List.Transform(r[#"dataRequirement"]?, DataRequirement.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped),

  HealthcareService.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"providedBy" = Reference.Reshape(r[#"providedBy"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"coverageArea" = if r[#"coverageArea"]? = null then null else List.Transform(r[#"coverageArea"]?, Reference.Reshape),
        #"serviceProvisionCode" = if r[#"serviceProvisionCode"]? = null then null else List.Transform(r[#"serviceProvisionCode"]?, CodeableConcept.Reshape),
        #"eligibility" = CodeableConcept.Reshape(r[#"eligibility"]?),
        #"characteristic" = if r[#"characteristic"]? = null then null else List.Transform(r[#"characteristic"]?, CodeableConcept.Reshape),
        #"referralMethod" = if r[#"referralMethod"]? = null then null else List.Transform(r[#"referralMethod"]?, CodeableConcept.Reshape),
        #"availableTime" = if r[#"availableTime"]? = null then null else List.Transform(r[#"availableTime"]?, HealthcareService_availableTime.Reshape),
        #"notAvailable" = if r[#"notAvailable"]? = null then null else List.Transform(r[#"notAvailable"]?, HealthcareService_notAvailable.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  HumanName.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Identifier.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"assigner" = Reference.Reshape(r[#"assigner"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingManifest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"study" = if r[#"study"]? = null then null else List.Transform(r[#"study"]?, ImagingManifest_study.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImagingStudy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"accession" = Identifier.Reshape(r[#"accession"]?),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"modalityList" = if r[#"modalityList"]? = null then null else List.Transform(r[#"modalityList"]?, Coding.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"referrer" = Reference.Reshape(r[#"referrer"]?),
        #"interpreter" = if r[#"interpreter"]? = null then null else List.Transform(r[#"interpreter"]?, Reference.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape),
        #"procedureReference" = if r[#"procedureReference"]? = null then null else List.Transform(r[#"procedureReference"]?, Reference.Reshape),
        #"procedureCode" = if r[#"procedureCode"]? = null then null else List.Transform(r[#"procedureCode"]?, CodeableConcept.Reshape),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"series" = if r[#"series"]? = null then null else List.Transform(r[#"series"]?, ImagingStudy_series.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Immunization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"vaccineCode" = CodeableConcept.Reshape(r[#"vaccineCode"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"reportOrigin" = CodeableConcept.Reshape(r[#"reportOrigin"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"site" = CodeableConcept.Reshape(r[#"site"]?),
        #"route" = CodeableConcept.Reshape(r[#"route"]?),
        #"doseQuantity" = Quantity.Reshape(r[#"doseQuantity"]?),
        #"practitioner" = if r[#"practitioner"]? = null then null else List.Transform(r[#"practitioner"]?, Immunization_practitioner.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"explanation" = Immunization_explanation.Reshape(r[#"explanation"]?),
        #"reaction" = if r[#"reaction"]? = null then null else List.Transform(r[#"reaction"]?, Immunization_reaction.Reshape),
        #"vaccinationProtocol" = if r[#"vaccinationProtocol"]? = null then null else List.Transform(r[#"vaccinationProtocol"]?, Immunization_vaccinationProtocol.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImmunizationRecommendation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"recommendation" = if r[#"recommendation"]? = null then null else List.Transform(r[#"recommendation"]?, ImmunizationRecommendation_recommendation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ImplementationGuide.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"dependency" = if r[#"dependency"]? = null then null else List.Transform(r[#"dependency"]?, ImplementationGuide_dependency.Reshape),
        #"package" = if r[#"package"]? = null then null else List.Transform(r[#"package"]?, ImplementationGuide_package.Reshape),
        #"global" = if r[#"global"]? = null then null else List.Transform(r[#"global"]?, ImplementationGuide_global.Reshape),
        #"page" = ImplementationGuide_page.Reshape(r[#"page"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Library.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Contributor.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, ParameterDefinition.Reshape),
        #"dataRequirement" = if r[#"dataRequirement"]? = null then null else List.Transform(r[#"dataRequirement"]?, DataRequirement.Reshape),
        #"content" = if r[#"content"]? = null then null else List.Transform(r[#"content"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Linkage.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Linkage_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  List.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"orderedBy" = CodeableConcept.Reshape(r[#"orderedBy"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"entry" = if r[#"entry"]? = null then null else List.Transform(r[#"entry"]?, List_entry.Reshape),
        #"emptyReason" = CodeableConcept.Reshape(r[#"emptyReason"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Location.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"operationalStatus" = Coding.Reshape(r[#"operationalStatus"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = Address.Reshape(r[#"address"]?),
        #"physicalType" = CodeableConcept.Reshape(r[#"physicalType"]?),
        #"position" = Location_position.Reshape(r[#"position"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"partOf" = Reference.Reshape(r[#"partOf"]?),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Measure.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Contributor.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"library" = if r[#"library"]? = null then null else List.Transform(r[#"library"]?, Reference.Reshape),
        #"scoring" = CodeableConcept.Reshape(r[#"scoring"]?),
        #"compositeScoring" = CodeableConcept.Reshape(r[#"compositeScoring"]?),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, Measure_group.Reshape),
        #"supplementalData" = if r[#"supplementalData"]? = null then null else List.Transform(r[#"supplementalData"]?, Measure_supplementalData.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MeasureReport.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"measure" = Reference.Reshape(r[#"measure"]?),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"reportingOrganization" = Reference.Reshape(r[#"reportingOrganization"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, MeasureReport_group.Reshape),
        #"evaluatedResources" = Reference.Reshape(r[#"evaluatedResources"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Media.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"subtype" = CodeableConcept.Reshape(r[#"subtype"]?),
        #"view" = CodeableConcept.Reshape(r[#"view"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"operator" = Reference.Reshape(r[#"operator"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"content" = Attachment.Reshape(r[#"content"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  Medication.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"manufacturer" = Reference.Reshape(r[#"manufacturer"]?),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Medication_ingredient.Reshape),
        #"package" = Medication_package.Reshape(r[#"package"]?),
        #"image" = if r[#"image"]? = null then null else List.Transform(r[#"image"]?, Attachment.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MedicationAdministration.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, MedicationAdministration_performer.Reshape),
        #"reasonNotGiven" = if r[#"reasonNotGiven"]? = null then null else List.Transform(r[#"reasonNotGiven"]?, CodeableConcept.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"prescription" = Reference.Reshape(r[#"prescription"]?),
        #"device" = if r[#"device"]? = null then null else List.Transform(r[#"device"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosage" = MedicationAdministration_dosage.Reshape(r[#"dosage"]?),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          ReshapeMedication(
            childrenReshaped)),

  MedicationDispense.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      ReshapeNotDoneReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "notDoneReasonCodeableConcept", "notDoneReasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "notDoneReasonCodeableConcept", "notDoneReasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "notDoneReasonCodeableConcept", "CodeableConcept"}, { "notDoneReasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ notDoneReason = null ] else choicesRemoved & [ notDoneReason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, MedicationDispense_performer.Reshape),
        #"authorizingPrescription" = if r[#"authorizingPrescription"]? = null then null else List.Transform(r[#"authorizingPrescription"]?, Reference.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"daysSupply" = Quantity.Reshape(r[#"daysSupply"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, Dosage.Reshape),
        #"substitution" = MedicationDispense_substitution.Reshape(r[#"substitution"]?),
        #"detectedIssue" = if r[#"detectedIssue"]? = null then null else List.Transform(r[#"detectedIssue"]?, Reference.Reshape),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeNotDoneReason(
          ReshapeMedication(
            childrenReshaped)),

  MedicationRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"supportingInformation" = if r[#"supportingInformation"]? = null then null else List.Transform(r[#"supportingInformation"]?, Reference.Reshape),
        #"requester" = MedicationRequest_requester.Reshape(r[#"requester"]?),
        #"recorder" = Reference.Reshape(r[#"recorder"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosageInstruction" = if r[#"dosageInstruction"]? = null then null else List.Transform(r[#"dosageInstruction"]?, Dosage.Reshape),
        #"dispenseRequest" = MedicationRequest_dispenseRequest.Reshape(r[#"dispenseRequest"]?),
        #"substitution" = MedicationRequest_substitution.Reshape(r[#"substitution"]?),
        #"priorPrescription" = Reference.Reshape(r[#"priorPrescription"]?),
        #"detectedIssue" = if r[#"detectedIssue"]? = null then null else List.Transform(r[#"detectedIssue"]?, Reference.Reshape),
        #"eventHistory" = if r[#"eventHistory"]? = null then null else List.Transform(r[#"eventHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMedication(
          childrenReshaped),

  MedicationStatement.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeMedication = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "medicationCodeableConcept", "medicationReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "medicationCodeableConcept", "medicationReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "medicationCodeableConcept", "CodeableConcept"}, { "medicationReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ medication = null ] else choicesRemoved & [ medication = choiceRecord ],
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"informationSource" = Reference.Reshape(r[#"informationSource"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"derivedFrom" = if r[#"derivedFrom"]? = null then null else List.Transform(r[#"derivedFrom"]?, Reference.Reshape),
        #"reasonNotTaken" = if r[#"reasonNotTaken"]? = null then null else List.Transform(r[#"reasonNotTaken"]?, CodeableConcept.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"dosage" = if r[#"dosage"]? = null then null else List.Transform(r[#"dosage"]?, Dosage.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeEffective(
          ReshapeMedication(
            childrenReshaped)),

  MessageDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"base" = Reference.Reshape(r[#"base"]?),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"event" = Coding.Reshape(r[#"event"]?),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, MessageDefinition_focus.Reshape),
        #"allowedResponse" = if r[#"allowedResponse"]? = null then null else List.Transform(r[#"allowedResponse"]?, MessageDefinition_allowedResponse.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MessageHeader.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"event" = Coding.Reshape(r[#"event"]?),
        #"destination" = if r[#"destination"]? = null then null else List.Transform(r[#"destination"]?, MessageHeader_destination.Reshape),
        #"receiver" = Reference.Reshape(r[#"receiver"]?),
        #"sender" = Reference.Reshape(r[#"sender"]?),
        #"enterer" = Reference.Reshape(r[#"enterer"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"source" = MessageHeader_source.Reshape(r[#"source"]?),
        #"responsible" = Reference.Reshape(r[#"responsible"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"response" = MessageHeader_response.Reshape(r[#"response"]?),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Meta.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"security" = if r[#"security"]? = null then null else List.Transform(r[#"security"]?, Coding.Reshape),
        #"tag" = if r[#"tag"]? = null then null else List.Transform(r[#"tag"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  MetadataResource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Money.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NamingSystem.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"uniqueId" = if r[#"uniqueId"]? = null then null else List.Transform(r[#"uniqueId"]?, NamingSystem_uniqueId.Reshape),
        #"replacedBy" = Reference.Reshape(r[#"replacedBy"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Narrative.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  NutritionOrder.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"orderer" = Reference.Reshape(r[#"orderer"]?),
        #"allergyIntolerance" = if r[#"allergyIntolerance"]? = null then null else List.Transform(r[#"allergyIntolerance"]?, Reference.Reshape),
        #"foodPreferenceModifier" = if r[#"foodPreferenceModifier"]? = null then null else List.Transform(r[#"foodPreferenceModifier"]?, CodeableConcept.Reshape),
        #"excludeFoodModifier" = if r[#"excludeFoodModifier"]? = null then null else List.Transform(r[#"excludeFoodModifier"]?, CodeableConcept.Reshape),
        #"oralDiet" = NutritionOrder_oralDiet.Reshape(r[#"oralDiet"]?),
        #"supplement" = if r[#"supplement"]? = null then null else List.Transform(r[#"supplement"]?, NutritionOrder_supplement.Reshape),
        #"enteralFormula" = NutritionOrder_enteralFormula.Reshape(r[#"enteralFormula"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Observation.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEffective = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "effectiveDateTime", "effectivePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "effectiveDateTime", "effectivePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "effectiveDateTime", "dateTime"}, { "effectivePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ effective = null ] else choicesRemoved & [ effective = choiceRecord ],
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueQuantity", "valueCodeableConcept", "valueString", "valueBoolean", "valueRange", "valueRatio", "valueSampledData", "valueAttachment", "valueTime", "valueDateTime", "valuePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueQuantity", "Quantity"}, { "valueCodeableConcept", "CodeableConcept"}, { "valueString", "string"}, { "valueBoolean", "boolean"}, { "valueRange", "Range"}, { "valueRatio", "Ratio"}, { "valueSampledData", "SampledData"}, { "valueAttachment", "Attachment"}, { "valueTime", "time"}, { "valueDateTime", "dateTime"}, { "valuePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Reference.Reshape),
        #"dataAbsentReason" = CodeableConcept.Reshape(r[#"dataAbsentReason"]?),
        #"interpretation" = CodeableConcept.Reshape(r[#"interpretation"]?),
        #"bodySite" = CodeableConcept.Reshape(r[#"bodySite"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"specimen" = Reference.Reshape(r[#"specimen"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"referenceRange" = if r[#"referenceRange"]? = null then null else List.Transform(r[#"referenceRange"]?, Observation_referenceRange.Reshape),
        #"related" = if r[#"related"]? = null then null else List.Transform(r[#"related"]?, Observation_related.Reshape),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, Observation_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          ReshapeEffective(
            childrenReshaped)),

  OperationDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"base" = Reference.Reshape(r[#"base"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, OperationDefinition_parameter.Reshape),
        #"overload" = if r[#"overload"]? = null then null else List.Transform(r[#"overload"]?, OperationDefinition_overload.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  OperationOutcome.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"issue" = if r[#"issue"]? = null then null else List.Transform(r[#"issue"]?, OperationOutcome_issue.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Organization.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, CodeableConcept.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"partOf" = Reference.Reshape(r[#"partOf"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Organization_contact.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ParameterDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"profile" = Reference.Reshape(r[#"profile"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Parameters.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"parameter" = if r[#"parameter"]? = null then null else List.Transform(r[#"parameter"]?, Parameters_parameter.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Patient.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDeceased = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "deceasedBoolean", "deceasedDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "deceasedBoolean", "deceasedDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "deceasedBoolean", "boolean"}, { "deceasedDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ deceased = null ] else choicesRemoved & [ deceased = choiceRecord ],
      ReshapeMultipleBirth = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "multipleBirthBoolean", "multipleBirthInteger"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "multipleBirthBoolean", "multipleBirthInteger" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "multipleBirthBoolean", "boolean"}, { "multipleBirthInteger", "integer"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ multipleBirth = null ] else choicesRemoved & [ multipleBirth = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"maritalStatus" = CodeableConcept.Reshape(r[#"maritalStatus"]?),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, Patient_contact.Reshape),
        #"animal" = Patient_animal.Reshape(r[#"animal"]?),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, Patient_communication.Reshape),
        #"generalPractitioner" = if r[#"generalPractitioner"]? = null then null else List.Transform(r[#"generalPractitioner"]?, Reference.Reshape),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Patient_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeMultipleBirth(
          ReshapeDeceased(
            childrenReshaped)),

  PaymentNotice.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"paymentStatus" = CodeableConcept.Reshape(r[#"paymentStatus"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PaymentReconciliation.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"detail" = if r[#"detail"]? = null then null else List.Transform(r[#"detail"]?, PaymentReconciliation_detail.Reshape),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"total" = Money.Reshape(r[#"total"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, PaymentReconciliation_processNote.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Period.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Person.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = Attachment.Reshape(r[#"photo"]?),
        #"managingOrganization" = Reference.Reshape(r[#"managingOrganization"]?),
        #"link" = if r[#"link"]? = null then null else List.Transform(r[#"link"]?, Person_link.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PlanDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Contributor.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"library" = if r[#"library"]? = null then null else List.Transform(r[#"library"]?, Reference.Reshape),
        #"goal" = if r[#"goal"]? = null then null else List.Transform(r[#"goal"]?, PlanDefinition_goal.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, PlanDefinition_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Practitioner.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"qualification" = if r[#"qualification"]? = null then null else List.Transform(r[#"qualification"]?, Practitioner_qualification.Reshape),
        #"communication" = if r[#"communication"]? = null then null else List.Transform(r[#"communication"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  PractitionerRole.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"practitioner" = Reference.Reshape(r[#"practitioner"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"location" = if r[#"location"]? = null then null else List.Transform(r[#"location"]?, Reference.Reshape),
        #"healthcareService" = if r[#"healthcareService"]? = null then null else List.Transform(r[#"healthcareService"]?, Reference.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"availableTime" = if r[#"availableTime"]? = null then null else List.Transform(r[#"availableTime"]?, PractitionerRole_availableTime.Reshape),
        #"notAvailable" = if r[#"notAvailable"]? = null then null else List.Transform(r[#"notAvailable"]?, PractitionerRole_notAvailable.Reshape),
        #"endpoint" = if r[#"endpoint"]? = null then null else List.Transform(r[#"endpoint"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Procedure.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapePerformed = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "performedDateTime", "performedPeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "performedDateTime", "performedPeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "performedDateTime", "dateTime"}, { "performedPeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ performed = null ] else choicesRemoved & [ performed = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"notDoneReason" = CodeableConcept.Reshape(r[#"notDoneReason"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"performer" = if r[#"performer"]? = null then null else List.Transform(r[#"performer"]?, Procedure_performer.Reshape),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"report" = if r[#"report"]? = null then null else List.Transform(r[#"report"]?, Reference.Reshape),
        #"complication" = if r[#"complication"]? = null then null else List.Transform(r[#"complication"]?, CodeableConcept.Reshape),
        #"complicationDetail" = if r[#"complicationDetail"]? = null then null else List.Transform(r[#"complicationDetail"]?, Reference.Reshape),
        #"followUp" = if r[#"followUp"]? = null then null else List.Transform(r[#"followUp"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"focalDevice" = if r[#"focalDevice"]? = null then null else List.Transform(r[#"focalDevice"]?, Procedure_focalDevice.Reshape),
        #"usedReference" = if r[#"usedReference"]? = null then null else List.Transform(r[#"usedReference"]?, Reference.Reshape),
        #"usedCode" = if r[#"usedCode"]? = null then null else List.Transform(r[#"usedCode"]?, CodeableConcept.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapePerformed(
          childrenReshaped),

  ProcedureRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      ReshapeAsNeeded = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "asNeededBoolean", "asNeededCodeableConcept"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "asNeededBoolean", "asNeededCodeableConcept" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "asNeededBoolean", "boolean"}, { "asNeededCodeableConcept", "CodeableConcept"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ asNeeded = null ] else choicesRemoved & [ asNeeded = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"requisition" = Identifier.Reshape(r[#"requisition"]?),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"requester" = ProcedureRequest_requester.Reshape(r[#"requester"]?),
        #"performerType" = CodeableConcept.Reshape(r[#"performerType"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"specimen" = if r[#"specimen"]? = null then null else List.Transform(r[#"specimen"]?, Reference.Reshape),
        #"bodySite" = if r[#"bodySite"]? = null then null else List.Transform(r[#"bodySite"]?, CodeableConcept.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeAsNeeded(
          ReshapeOccurrence(
            childrenReshaped)),

  ProcessRequest.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"target" = Reference.Reshape(r[#"target"]?),
        #"provider" = Reference.Reshape(r[#"provider"]?),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"response" = Reference.Reshape(r[#"response"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, ProcessRequest_item.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ProcessResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"organization" = Reference.Reshape(r[#"organization"]?),
        #"request" = Reference.Reshape(r[#"request"]?),
        #"outcome" = CodeableConcept.Reshape(r[#"outcome"]?),
        #"requestProvider" = Reference.Reshape(r[#"requestProvider"]?),
        #"requestOrganization" = Reference.Reshape(r[#"requestOrganization"]?),
        #"form" = CodeableConcept.Reshape(r[#"form"]?),
        #"processNote" = if r[#"processNote"]? = null then null else List.Transform(r[#"processNote"]?, ProcessResponse_processNote.Reshape),
        #"error" = if r[#"error"]? = null then null else List.Transform(r[#"error"]?, CodeableConcept.Reshape),
        #"communicationRequest" = if r[#"communicationRequest"]? = null then null else List.Transform(r[#"communicationRequest"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Provenance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"target" = if r[#"target"]? = null then null else List.Transform(r[#"target"]?, Reference.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"location" = Reference.Reshape(r[#"location"]?),
        #"reason" = if r[#"reason"]? = null then null else List.Transform(r[#"reason"]?, Coding.Reshape),
        #"activity" = Coding.Reshape(r[#"activity"]?),
        #"agent" = if r[#"agent"]? = null then null else List.Transform(r[#"agent"]?, Provenance_agent.Reshape),
        #"entity" = if r[#"entity"]? = null then null else List.Transform(r[#"entity"]?, Provenance_entity.Reshape),
        #"signature" = if r[#"signature"]? = null then null else List.Transform(r[#"signature"]?, Signature.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Quantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Questionnaire.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"code" = if r[#"code"]? = null then null else List.Transform(r[#"code"]?, Coding.Reshape),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, Questionnaire_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  QuestionnaireResponse.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"questionnaire" = Reference.Reshape(r[#"questionnaire"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"source" = Reference.Reshape(r[#"source"]?),
        #"item" = if r[#"item"]? = null then null else List.Transform(r[#"item"]?, QuestionnaireResponse_item.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Range.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"low" = Quantity.Reshape(r[#"low"]?),
        #"high" = Quantity.Reshape(r[#"high"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Ratio.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"numerator" = Quantity.Reshape(r[#"numerator"]?),
        #"denominator" = Quantity.Reshape(r[#"denominator"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Reference.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ReferralRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"serviceRequested" = if r[#"serviceRequested"]? = null then null else List.Transform(r[#"serviceRequested"]?, CodeableConcept.Reshape),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"requester" = ReferralRequest_requester.Reshape(r[#"requester"]?),
        #"specialty" = CodeableConcept.Reshape(r[#"specialty"]?),
        #"recipient" = if r[#"recipient"]? = null then null else List.Transform(r[#"recipient"]?, Reference.Reshape),
        #"reasonCode" = if r[#"reasonCode"]? = null then null else List.Transform(r[#"reasonCode"]?, CodeableConcept.Reshape),
        #"reasonReference" = if r[#"reasonReference"]? = null then null else List.Transform(r[#"reasonReference"]?, Reference.Reshape),
        #"supportingInfo" = if r[#"supportingInfo"]? = null then null else List.Transform(r[#"supportingInfo"]?, Reference.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  RelatedArtifact.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"document" = Attachment.Reshape(r[#"document"]?),
        #"resource" = Reference.Reshape(r[#"resource"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RelatedPerson.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"relationship" = CodeableConcept.Reshape(r[#"relationship"]?),
        #"name" = if r[#"name"]? = null then null else List.Transform(r[#"name"]?, HumanName.Reshape),
        #"telecom" = if r[#"telecom"]? = null then null else List.Transform(r[#"telecom"]?, ContactPoint.Reshape),
        #"address" = if r[#"address"]? = null then null else List.Transform(r[#"address"]?, Address.Reshape),
        #"photo" = if r[#"photo"]? = null then null else List.Transform(r[#"photo"]?, Attachment.Reshape),
        #"period" = Period.Reshape(r[#"period"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RequestGroup.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"definition" = if r[#"definition"]? = null then null else List.Transform(r[#"definition"]?, Reference.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"replaces" = if r[#"replaces"]? = null then null else List.Transform(r[#"replaces"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"author" = Reference.Reshape(r[#"author"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"action" = if r[#"action"]? = null then null else List.Transform(r[#"action"]?, RequestGroup_action.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped),

  ResearchStudy.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"protocol" = if r[#"protocol"]? = null then null else List.Transform(r[#"protocol"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"focus" = if r[#"focus"]? = null then null else List.Transform(r[#"focus"]?, CodeableConcept.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"keyword" = if r[#"keyword"]? = null then null else List.Transform(r[#"keyword"]?, CodeableConcept.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"enrollment" = if r[#"enrollment"]? = null then null else List.Transform(r[#"enrollment"]?, Reference.Reshape),
        #"period" = Period.Reshape(r[#"period"]?),
        #"sponsor" = Reference.Reshape(r[#"sponsor"]?),
        #"principalInvestigator" = Reference.Reshape(r[#"principalInvestigator"]?),
        #"site" = if r[#"site"]? = null then null else List.Transform(r[#"site"]?, Reference.Reshape),
        #"reasonStopped" = CodeableConcept.Reshape(r[#"reasonStopped"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"arm" = if r[#"arm"]? = null then null else List.Transform(r[#"arm"]?, ResearchStudy_arm.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ResearchSubject.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"period" = Period.Reshape(r[#"period"]?),
        #"study" = Reference.Reshape(r[#"study"]?),
        #"individual" = Reference.Reshape(r[#"individual"]?),
        #"consent" = Reference.Reshape(r[#"consent"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Resource.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  RiskAssessment.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"basedOn" = Reference.Reshape(r[#"basedOn"]?),
        #"parent" = Reference.Reshape(r[#"parent"]?),
        #"method" = CodeableConcept.Reshape(r[#"method"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"condition" = Reference.Reshape(r[#"condition"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"basis" = if r[#"basis"]? = null then null else List.Transform(r[#"basis"]?, Reference.Reshape),
        #"prediction" = if r[#"prediction"]? = null then null else List.Transform(r[#"prediction"]?, RiskAssessment_prediction.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          ReshapeOccurrence(
            childrenReshaped)),

  SampledData.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"origin" = Quantity.Reshape(r[#"origin"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Schedule.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"serviceCategory" = CodeableConcept.Reshape(r[#"serviceCategory"]?),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"actor" = if r[#"actor"]? = null then null else List.Transform(r[#"actor"]?, Reference.Reshape),
        #"planningHorizon" = Period.Reshape(r[#"planningHorizon"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SearchParameter.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"component" = if r[#"component"]? = null then null else List.Transform(r[#"component"]?, SearchParameter_component.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Sequence.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"specimen" = Reference.Reshape(r[#"specimen"]?),
        #"device" = Reference.Reshape(r[#"device"]?),
        #"performer" = Reference.Reshape(r[#"performer"]?),
        #"quantity" = Quantity.Reshape(r[#"quantity"]?),
        #"referenceSeq" = Sequence_referenceSeq.Reshape(r[#"referenceSeq"]?),
        #"variant" = if r[#"variant"]? = null then null else List.Transform(r[#"variant"]?, Sequence_variant.Reshape),
        #"quality" = if r[#"quality"]? = null then null else List.Transform(r[#"quality"]?, Sequence_quality.Reshape),
        #"repository" = if r[#"repository"]? = null then null else List.Transform(r[#"repository"]?, Sequence_repository.Reshape),
        #"pointer" = if r[#"pointer"]? = null then null else List.Transform(r[#"pointer"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  ServiceDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"effectivePeriod" = Period.Reshape(r[#"effectivePeriod"]?),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"topic" = if r[#"topic"]? = null then null else List.Transform(r[#"topic"]?, CodeableConcept.Reshape),
        #"contributor" = if r[#"contributor"]? = null then null else List.Transform(r[#"contributor"]?, Contributor.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"relatedArtifact" = if r[#"relatedArtifact"]? = null then null else List.Transform(r[#"relatedArtifact"]?, RelatedArtifact.Reshape),
        #"trigger" = if r[#"trigger"]? = null then null else List.Transform(r[#"trigger"]?, TriggerDefinition.Reshape),
        #"dataRequirement" = if r[#"dataRequirement"]? = null then null else List.Transform(r[#"dataRequirement"]?, DataRequirement.Reshape),
        #"operationDefinition" = Reference.Reshape(r[#"operationDefinition"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Signature.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeWho = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "whoUri", "whoReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "whoUri", "whoReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "whoUri", "uri"}, { "whoReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ who = null ] else choicesRemoved & [ who = choiceRecord ],
      ReshapeOnBehalfOf = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "onBehalfOfUri", "onBehalfOfReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "onBehalfOfUri", "onBehalfOfReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "onBehalfOfUri", "uri"}, { "onBehalfOfReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ onBehalfOf = null ] else choicesRemoved & [ onBehalfOf = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"type" = if r[#"type"]? = null then null else List.Transform(r[#"type"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOnBehalfOf(
          ReshapeWho(
            childrenReshaped)),

  SimpleQuantity.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Slot.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"serviceCategory" = CodeableConcept.Reshape(r[#"serviceCategory"]?),
        #"serviceType" = if r[#"serviceType"]? = null then null else List.Transform(r[#"serviceType"]?, CodeableConcept.Reshape),
        #"specialty" = if r[#"specialty"]? = null then null else List.Transform(r[#"specialty"]?, CodeableConcept.Reshape),
        #"appointmentType" = CodeableConcept.Reshape(r[#"appointmentType"]?),
        #"schedule" = Reference.Reshape(r[#"schedule"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Specimen.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"accessionIdentifier" = Identifier.Reshape(r[#"accessionIdentifier"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"subject" = Reference.Reshape(r[#"subject"]?),
        #"parent" = if r[#"parent"]? = null then null else List.Transform(r[#"parent"]?, Reference.Reshape),
        #"request" = if r[#"request"]? = null then null else List.Transform(r[#"request"]?, Reference.Reshape),
        #"collection" = Specimen_collection.Reshape(r[#"collection"]?),
        #"processing" = if r[#"processing"]? = null then null else List.Transform(r[#"processing"]?, Specimen_processing.Reshape),
        #"container" = if r[#"container"]? = null then null else List.Transform(r[#"container"]?, Specimen_container.Reshape),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"keyword" = if r[#"keyword"]? = null then null else List.Transform(r[#"keyword"]?, Coding.Reshape),
        #"mapping" = if r[#"mapping"]? = null then null else List.Transform(r[#"mapping"]?, StructureDefinition_mapping.Reshape),
        #"snapshot" = StructureDefinition_snapshot.Reshape(r[#"snapshot"]?),
        #"differential" = StructureDefinition_differential.Reshape(r[#"differential"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  StructureMap.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"structure" = if r[#"structure"]? = null then null else List.Transform(r[#"structure"]?, StructureMap_structure.Reshape),
        #"group" = if r[#"group"]? = null then null else List.Transform(r[#"group"]?, StructureMap_group.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Subscription.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactPoint.Reshape),
        #"channel" = Subscription_channel.Reshape(r[#"channel"]?),
        #"tag" = if r[#"tag"]? = null then null else List.Transform(r[#"tag"]?, Coding.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Substance.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"category" = if r[#"category"]? = null then null else List.Transform(r[#"category"]?, CodeableConcept.Reshape),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"instance" = if r[#"instance"]? = null then null else List.Transform(r[#"instance"]?, Substance_instance.Reshape),
        #"ingredient" = if r[#"ingredient"]? = null then null else List.Transform(r[#"ingredient"]?, Substance_ingredient.Reshape)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  SupplyDelivery.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"type" = CodeableConcept.Reshape(r[#"type"]?),
        #"suppliedItem" = SupplyDelivery_suppliedItem.Reshape(r[#"suppliedItem"]?),
        #"supplier" = Reference.Reshape(r[#"supplier"]?),
        #"destination" = Reference.Reshape(r[#"destination"]?),
        #"receiver" = if r[#"receiver"]? = null then null else List.Transform(r[#"receiver"]?, Reference.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeOccurrence(
          childrenReshaped),

  SupplyRequest.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeOccurrence = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "occurrenceDateTime", "dateTime"}, { "occurrencePeriod", "Period"}, { "occurrenceTiming", "Timing"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ occurrence = null ] else choicesRemoved & [ occurrence = choiceRecord ],
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"category" = CodeableConcept.Reshape(r[#"category"]?),
        #"orderedItem" = SupplyRequest_orderedItem.Reshape(r[#"orderedItem"]?),
        #"requester" = SupplyRequest_requester.Reshape(r[#"requester"]?),
        #"supplier" = if r[#"supplier"]? = null then null else List.Transform(r[#"supplier"]?, Reference.Reshape),
        #"deliverFrom" = Reference.Reshape(r[#"deliverFrom"]?),
        #"deliverTo" = Reference.Reshape(r[#"deliverTo"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          ReshapeOccurrence(
            childrenReshaped)),

  Task.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeDefinition = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "definitionUri", "definitionReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "definitionUri", "definitionReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "definitionUri", "uri"}, { "definitionReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ definition = null ] else choicesRemoved & [ definition = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"basedOn" = if r[#"basedOn"]? = null then null else List.Transform(r[#"basedOn"]?, Reference.Reshape),
        #"groupIdentifier" = Identifier.Reshape(r[#"groupIdentifier"]?),
        #"partOf" = if r[#"partOf"]? = null then null else List.Transform(r[#"partOf"]?, Reference.Reshape),
        #"statusReason" = CodeableConcept.Reshape(r[#"statusReason"]?),
        #"businessStatus" = CodeableConcept.Reshape(r[#"businessStatus"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?),
        #"focus" = Reference.Reshape(r[#"focus"]?),
        #"for" = Reference.Reshape(r[#"for"]?),
        #"context" = Reference.Reshape(r[#"context"]?),
        #"executionPeriod" = Period.Reshape(r[#"executionPeriod"]?),
        #"requester" = Task_requester.Reshape(r[#"requester"]?),
        #"performerType" = if r[#"performerType"]? = null then null else List.Transform(r[#"performerType"]?, CodeableConcept.Reshape),
        #"owner" = Reference.Reshape(r[#"owner"]?),
        #"reason" = CodeableConcept.Reshape(r[#"reason"]?),
        #"note" = if r[#"note"]? = null then null else List.Transform(r[#"note"]?, Annotation.Reshape),
        #"relevantHistory" = if r[#"relevantHistory"]? = null then null else List.Transform(r[#"relevantHistory"]?, Reference.Reshape),
        #"restriction" = Task_restriction.Reshape(r[#"restriction"]?),
        #"input" = if r[#"input"]? = null then null else List.Transform(r[#"input"]?, Task_input.Reshape),
        #"output" = if r[#"output"]? = null then null else List.Transform(r[#"output"]?, Task_output.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeDefinition(
          childrenReshaped),

  TestReport.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"testScript" = Reference.Reshape(r[#"testScript"]?),
        #"participant" = if r[#"participant"]? = null then null else List.Transform(r[#"participant"]?, TestReport_participant.Reshape),
        #"setup" = TestReport_setup.Reshape(r[#"setup"]?),
        #"test" = if r[#"test"]? = null then null else List.Transform(r[#"test"]?, TestReport_test.Reshape),
        #"teardown" = TestReport_teardown.Reshape(r[#"teardown"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TestScript.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = Identifier.Reshape(r[#"identifier"]?),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"origin" = if r[#"origin"]? = null then null else List.Transform(r[#"origin"]?, TestScript_origin.Reshape),
        #"destination" = if r[#"destination"]? = null then null else List.Transform(r[#"destination"]?, TestScript_destination.Reshape),
        #"metadata" = TestScript_metadata.Reshape(r[#"metadata"]?),
        #"fixture" = if r[#"fixture"]? = null then null else List.Transform(r[#"fixture"]?, TestScript_fixture.Reshape),
        #"profile" = if r[#"profile"]? = null then null else List.Transform(r[#"profile"]?, Reference.Reshape),
        #"variable" = if r[#"variable"]? = null then null else List.Transform(r[#"variable"]?, TestScript_variable.Reshape),
        #"rule" = if r[#"rule"]? = null then null else List.Transform(r[#"rule"]?, TestScript_rule.Reshape),
        #"ruleset" = if r[#"ruleset"]? = null then null else List.Transform(r[#"ruleset"]?, TestScript_ruleset.Reshape),
        #"setup" = TestScript_setup.Reshape(r[#"setup"]?),
        #"test" = if r[#"test"]? = null then null else List.Transform(r[#"test"]?, TestScript_test.Reshape),
        #"teardown" = TestScript_teardown.Reshape(r[#"teardown"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  Timing.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"repeat" = Timing_repeat.Reshape(r[#"repeat"]?),
        #"code" = CodeableConcept.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  TriggerDefinition.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeEventTiming = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "eventTimingTiming", "eventTimingReference", "eventTimingDate", "eventTimingDateTime"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "eventTimingTiming", "eventTimingReference", "eventTimingDate", "eventTimingDateTime" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "eventTimingTiming", "Timing"}, { "eventTimingReference", "Reference"}, { "eventTimingDate", "date"}, { "eventTimingDateTime", "dateTime"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ eventTiming = null ] else choicesRemoved & [ eventTiming = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"eventData" = DataRequirement.Reshape(r[#"eventData"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeEventTiming(
          childrenReshaped),

  UsageContext.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeValue = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "valueCodeableConcept", "valueQuantity", "valueRange" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "valueCodeableConcept", "CodeableConcept"}, { "valueQuantity", "Quantity"}, { "valueRange", "Range"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ value = null ] else choicesRemoved & [ value = choiceRecord ],
      childrenReshaped = r & [
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"code" = Coding.Reshape(r[#"code"]?)
      ]
    in
      if r is null then
        null
      else
        ReshapeValue(
          childrenReshaped),

  ValueSet.Reshape = (r as nullable record) as nullable record =>
    let
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"contact" = if r[#"contact"]? = null then null else List.Transform(r[#"contact"]?, ContactDetail.Reshape),
        #"useContext" = if r[#"useContext"]? = null then null else List.Transform(r[#"useContext"]?, UsageContext.Reshape),
        #"jurisdiction" = if r[#"jurisdiction"]? = null then null else List.Transform(r[#"jurisdiction"]?, CodeableConcept.Reshape),
        #"compose" = ValueSet_compose.Reshape(r[#"compose"]?),
        #"expansion" = ValueSet_expansion.Reshape(r[#"expansion"]?)
      ]
    in
      if r is null then
        null
      else
        childrenReshaped,

  VisionPrescription.Reshape = (r as nullable record) as nullable record =>
    let
      ReshapeReason = (r as record) as record =>
        let
          choicesRemoved = Record.RemoveFields(r, { "reasonCodeableConcept", "reasonReference"}, MissingField.Ignore),
          onlyChoices = Record.SelectFields(r, { "reasonCodeableConcept", "reasonReference" }, MissingField.Ignore),
          choiceRecord = Record.RenameFields(onlyChoices, { { "reasonCodeableConcept", "CodeableConcept"}, { "reasonReference", "Reference"} }, MissingField.Ignore)
        in
          if r is null then null else if onlyChoices = [] then r & [ reason = null ] else choicesRemoved & [ reason = choiceRecord ],
      childrenReshaped = r & [
        #"meta" = Meta.Reshape(r[#"meta"]?),
        #"text" = Narrative.Reshape(r[#"text"]?),
        #"contained" = Contained.Reshape(r[#"contained"]?),
        #"extension" = if r[#"extension"]? = null then null else List.Transform(r[#"extension"]?, Extension.Reshape),
        #"modifierExtension" = if r[#"modifierExtension"]? = null then null else List.Transform(r[#"modifierExtension"]?, Extension.Reshape),
        #"identifier" = if r[#"identifier"]? = null then null else List.Transform(r[#"identifier"]?, Identifier.Reshape),
        #"patient" = Reference.Reshape(r[#"patient"]?),
        #"encounter" = Reference.Reshape(r[#"encounter"]?),
        #"prescriber" = Reference.Reshape(r[#"prescriber"]?),
        #"dispense" = if r[#"dispense"]? = null then null else List.Transform(r[#"dispense"]?, VisionPrescription_dispense.Reshape)
      ]
    in
      if r is null then
        null
      else
        ReshapeReason(
          childrenReshaped)
in
  #table(
    type table [ ResourceTypeName = text, Reshaper = function (r as nullable record) as nullable record ],
    {
      { "Account", Account.Reshape },
      { "ActivityDefinition", ActivityDefinition.Reshape },
      { "AdverseEvent", AdverseEvent.Reshape },
      { "AllergyIntolerance", AllergyIntolerance.Reshape },
      { "Appointment", Appointment.Reshape },
      { "AppointmentResponse", AppointmentResponse.Reshape },
      { "AuditEvent", AuditEvent.Reshape },
      { "Basic", Basic.Reshape },
      { "Binary", Binary.Reshape },
      { "BodySite", BodySite.Reshape },
      { "Bundle", Bundle.Reshape },
      { "CapabilityStatement", CapabilityStatement.Reshape },
      { "CarePlan", CarePlan.Reshape },
      { "CareTeam", CareTeam.Reshape },
      { "ChargeItem", ChargeItem.Reshape },
      { "Claim", Claim.Reshape },
      { "ClaimResponse", ClaimResponse.Reshape },
      { "ClinicalImpression", ClinicalImpression.Reshape },
      { "CodeSystem", CodeSystem.Reshape },
      { "Communication", Communication.Reshape },
      { "CommunicationRequest", CommunicationRequest.Reshape },
      { "CompartmentDefinition", CompartmentDefinition.Reshape },
      { "Composition", Composition.Reshape },
      { "ConceptMap", ConceptMap.Reshape },
      { "Condition", Condition.Reshape },
      { "Consent", Consent.Reshape },
      { "Contract", Contract.Reshape },
      { "Coverage", Coverage.Reshape },
      { "DataElement", DataElement.Reshape },
      { "DetectedIssue", DetectedIssue.Reshape },
      { "Device", Device.Reshape },
      { "DeviceComponent", DeviceComponent.Reshape },
      { "DeviceMetric", DeviceMetric.Reshape },
      { "DeviceRequest", DeviceRequest.Reshape },
      { "DeviceUseStatement", DeviceUseStatement.Reshape },
      { "DiagnosticReport", DiagnosticReport.Reshape },
      { "DocumentManifest", DocumentManifest.Reshape },
      { "DocumentReference", DocumentReference.Reshape },
      { "EligibilityRequest", EligibilityRequest.Reshape },
      { "EligibilityResponse", EligibilityResponse.Reshape },
      { "Encounter", Encounter.Reshape },
      { "Endpoint", Endpoint.Reshape },
      { "EnrollmentRequest", EnrollmentRequest.Reshape },
      { "EnrollmentResponse", EnrollmentResponse.Reshape },
      { "EpisodeOfCare", EpisodeOfCare.Reshape },
      { "ExpansionProfile", ExpansionProfile.Reshape },
      { "ExplanationOfBenefit", ExplanationOfBenefit.Reshape },
      { "FamilyMemberHistory", FamilyMemberHistory.Reshape },
      { "Flag", Flag.Reshape },
      { "Goal", Goal.Reshape },
      { "GraphDefinition", GraphDefinition.Reshape },
      { "Group", Group.Reshape },
      { "GuidanceResponse", GuidanceResponse.Reshape },
      { "HealthcareService", HealthcareService.Reshape },
      { "ImagingManifest", ImagingManifest.Reshape },
      { "ImagingStudy", ImagingStudy.Reshape },
      { "Immunization", Immunization.Reshape },
      { "ImmunizationRecommendation", ImmunizationRecommendation.Reshape },
      { "ImplementationGuide", ImplementationGuide.Reshape },
      { "Library", Library.Reshape },
      { "Linkage", Linkage.Reshape },
      { "List", List.Reshape },
      { "Location", Location.Reshape },
      { "Measure", Measure.Reshape },
      { "MeasureReport", MeasureReport.Reshape },
      { "Media", Media.Reshape },
      { "Medication", Medication.Reshape },
      { "MedicationAdministration", MedicationAdministration.Reshape },
      { "MedicationDispense", MedicationDispense.Reshape },
      { "MedicationRequest", MedicationRequest.Reshape },
      { "MedicationStatement", MedicationStatement.Reshape },
      { "MessageDefinition", MessageDefinition.Reshape },
      { "MessageHeader", MessageHeader.Reshape },
      { "NamingSystem", NamingSystem.Reshape },
      { "NutritionOrder", NutritionOrder.Reshape },
      { "Observation", Observation.Reshape },
      { "OperationDefinition", OperationDefinition.Reshape },
      { "OperationOutcome", OperationOutcome.Reshape },
      { "Organization", Organization.Reshape },
      { "Parameters", Parameters.Reshape },
      { "Patient", Patient.Reshape },
      { "PaymentNotice", PaymentNotice.Reshape },
      { "PaymentReconciliation", PaymentReconciliation.Reshape },
      { "Person", Person.Reshape },
      { "PlanDefinition", PlanDefinition.Reshape },
      { "Practitioner", Practitioner.Reshape },
      { "PractitionerRole", PractitionerRole.Reshape },
      { "Procedure", Procedure.Reshape },
      { "ProcedureRequest", ProcedureRequest.Reshape },
      { "ProcessRequest", ProcessRequest.Reshape },
      { "ProcessResponse", ProcessResponse.Reshape },
      { "Provenance", Provenance.Reshape },
      { "Questionnaire", Questionnaire.Reshape },
      { "QuestionnaireResponse", QuestionnaireResponse.Reshape },
      { "ReferralRequest", ReferralRequest.Reshape },
      { "RelatedPerson", RelatedPerson.Reshape },
      { "RequestGroup", RequestGroup.Reshape },
      { "ResearchStudy", ResearchStudy.Reshape },
      { "ResearchSubject", ResearchSubject.Reshape },
      { "RiskAssessment", RiskAssessment.Reshape },
      { "Schedule", Schedule.Reshape },
      { "SearchParameter", SearchParameter.Reshape },
      { "Sequence", Sequence.Reshape },
      { "ServiceDefinition", ServiceDefinition.Reshape },
      { "Slot", Slot.Reshape },
      { "Specimen", Specimen.Reshape },
      { "StructureDefinition", StructureDefinition.Reshape },
      { "StructureMap", StructureMap.Reshape },
      { "Subscription", Subscription.Reshape },
      { "Substance", Substance.Reshape },
      { "SupplyDelivery", SupplyDelivery.Reshape },
      { "SupplyRequest", SupplyRequest.Reshape },
      { "Task", Task.Reshape },
      { "TestReport", TestReport.Reshape },
      { "TestScript", TestScript.Reshape },
      { "ValueSet", ValueSet.Reshape },
      { "VisionPrescription", VisionPrescription.Reshape }
    })

