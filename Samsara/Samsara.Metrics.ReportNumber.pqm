/**
 * Report a raw number (gauge) to our backend.
 * 
 * @param Context Global parameters and constants.
 * @param Value Since M is functional, we can't simply treat metric emission as a side
 *              effect, so reporting a metric must return a value. Rather than returning
 *              null, we'll pass through this parameter as our return value, like how
 *              Power BI's diagnostic tracing functions work.
 * @param Metric.Name The name of the metric.
 * @param Number The value of the numeric metric.
 * @param Metric.Tags Optional list of text values to use as tags in our backend.
 * @returns The parameter Value.
 */
(Context as record, Value as any, Metric.Name as text, Number as number, optional Metric.Tags as list) =>
    let
        Samsara.Client.ReportMetric = Context[Extension.LoadFunction](Context, "Samsara.Client.ReportMetric.pqm"),
        Samsara.DateTime.UtcNow = Context[Extension.LoadFunction](Context, "Samsara.DateTime.UtcNow.pqm"),

        Metric = {[
            eventType = "gauge",
            name = Metric.Name,
            value = Number,
            tags = Metric.Tags,
            timestamp = Samsara.DateTime.UtcNow()
        ]},
        Response = try Samsara.Client.ReportMetric(Context, Metric)
    in
        if Response[HasError]
            then Diagnostics.Trace(
                TraceLevel.Error,
                "Failed to report gauge metric: " & Response[Error][Message],
                Value
            )
            else Value
