// This file contains your Data Connector logic
[Version = "1.0.1"]
section Siteimprove;

[DataSource.Kind="Siteimprove", Publish="Siteimprove.Publish"]
shared Siteimprove.Contents = Value.ReplaceType(SiteimproveImpl, SiteimproveType);

// Data Source Kind description
Siteimprove = [
    TestConnection = (dataSourcePath) => { "Siteimprove.Contents" },
    Authentication = [
        UsernamePassword = []
    ],
    Label = Extension.LoadString("DataSourceLabel")
];

// Data Source UI publishing description
Siteimprove.Publish = [
    Beta = false,
    Category = "Other",
    ButtonText = { Extension.LoadString("ButtonTitle"), Extension.LoadString("ButtonHelp") },
    LearnMoreUrl = "https://siteimprove.com/",
    SourceImage = Siteimprove.Icons,
    SourceTypeImage = Siteimprove.Icons
];

Siteimprove.Icons = [
    Icon16 = { Extension.Contents("Siteimprove16.png"), Extension.Contents("Siteimprove20.png"), Extension.Contents("Siteimprove24.png"), Extension.Contents("Siteimprove32.png") },
    Icon32 = { Extension.Contents("Siteimprove32.png"), Extension.Contents("Siteimprove40.png"), Extension.Contents("Siteimprove48.png"), Extension.Contents("Siteimprove64.png") }
];

SiteimproveType = type function ()
    as table meta [
        Documentation.Name = "Siteimprove",
        Documentation.LongDescription = "Siteimprove API connector"
    ];

SiteimproveRequestOptions = [
    Headers = [
        #"X-Siteimprove-Api-Caller" = "Power BI"
    ]
];

SiteimproveImpl = () as table =>
    let
        source = Json.Document(Web.Contents("https://api.siteimprove.com/v2/sites?page_size=1000", SiteimproveRequestOptions)),
        items = source[items],
        convertedToTable = Table.FromList(items, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
        expandedColumns = Table.ExpandRecordColumn(convertedToTable, "Column1", {"site_name", "url", "id"}, {"site_name", "url", "Key"}),
        addedName = Table.AddColumn(expandedColumns, "Name", each [url] & " (" & Text.From([Key]) & ")"),
        removedColumns = Table.RemoveColumns(addedName, {"site_name", "url"}),
        addedData = Table.AddColumn(removedColumns, "Data", each GetSitesNavTable([Key])),
        addedItemKind = Table.AddColumn(addedData, "ItemKind", each "Folder"),
        addedItemName = Table.AddColumn(addedItemKind, "ItemName", each "Folder"),
        addedIsLeaf = Table.AddColumn(addedItemName, "IsLeaf", each false),
        addedAdvanced = Table.InsertRows(addedIsLeaf, Table.RowCount(addedIsLeaf),
            { [Name = "Advanced", Key = "advanced", Data = GetAdvancedNavTable(), ItemKind = "Folder", ItemName = "Folder", IsLeaf = false] }),
        navTable = Table.ToNavigationTable(addedAdvanced, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

// add "shared" for testing purposes only
GetSitesNavTable = (siteId as number) =>
    let
        source = Json.Document(Web.Contents("https://api.siteimprove.com/v2/sites/" & Text.From(siteId), SiteimproveRequestOptions)),
        linksRec = source[_links],
        linksTable = Record.ToTable(linksRec),
        products = linksTable[Name],
        objects = #table(
            {"Name",                "Key",                              "Data",                         "ItemKind", "ItemName", "IsLeaf"}, {
            {"Suggested endpoints", Text.From(siteId) & "_suggested",   GetSuggestedNavTable(siteId, products),   "Folder",   "Folder",   false},
            {"All site endpoints",  Text.From(siteId) & "_all",         GetAllNavTable(siteId, products),         "Folder",   "Folder",   false}
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

GetSuggestedNavTable = (siteId as number, products as list) =>
    let
        navHeader = #table({"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {}),
        navRows0 = navHeader,
        navRows1 = AddRowIfProduct(navRows0, products, "accessibility", [Name = "Accessibility", Key = "accessibility", Data = GetSuggestedAccessibilityNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false]),
        navRows2 = AddRowIfProduct(navRows1, products, "analytics", [Name = "Analytics", Key = "analytics", Data = GetSuggestedAnalyticsNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false]),
        navRows3 = AddRowIfProduct(navRows2, products, "quality_assurance", [Name = "Quality assurance", Key = "quality_assurance", Data = GetSuggestedQualityAssuranceNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false]),
        navTable = Table.ToNavigationTable(navRows3, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

GetSuggestedAccessibilityNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name",                                    "Key",                                                  "Data",                                                 "ItemKind", "ItemName", "IsLeaf"}, {
            {"Get HTML pages from accessibility",       Text.From(siteId) & "_suggested_/sites/{site_id}/accessibility/pages",                 AdvancedSitesSite_idAccessibilityPagesCall(siteId),    "Table",    "Table",    true},
            {"Get summary for accessibility",           Text.From(siteId) & "_suggested_/sites/{site_id}/accessibility/overview/summary",      AdvancedSitesSite_idAccessibilityOverviewSummaryCall(siteId),    "Table",    "Table",    true}
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

GetSuggestedAnalyticsNavTable = (siteId as number) =>
    let
        objects = #table(
            {"Name",                                "Key",                                                  "Data",                                                 "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get historical data from overview", Text.From(siteId) & "_suggested_/sites/{site_id}/analytics/overview/history", AdvancedSitesSite_idAnalyticsOverviewHistoryCall(siteId), "Table", "Table", true }, 
            { "Get countries from visitors", Text.From(siteId) & "_suggested_/sites/{site_id}/analytics/visitors/countries ",  AdvancedSitesSite_idAnalyticsVisitorsCountriesCall(siteId), "Table",    "Table",    true},
            { "Get most popular pages from content", Text.From(siteId) & "_suggested_/sites/{site_id}/analytics/content/most_popular_pages", AdvancedSitesSite_idAnalyticsContentMost_popular_pagesCall(siteId), "Table", "Table", true }, 
            { "Get organisations from visitors", Text.From(siteId) & "_suggested_/sites/{site_id}/analytics/visitors/organisations", AdvancedSitesSite_idAnalyticsVisitorsOrganisationsCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

GetSuggestedQualityAssuranceNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name",                                "Key",                                                  "Data",                                                 "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get summary for quality assurance", Text.From(siteId) & "_suggested_/sites/{site_id}/quality_assurance/overview/summary",  AdvancedSitesSite_idQuality_assuranceOverviewSummaryCall(siteId), "Table", "Table", true},
            { "Get pages with broken links", Text.From(siteId) & "_suggested_/sites/{site_id}/quality_assurance/links/pages_with_broken_links", AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksCall(siteId), "Table", "Table", true }, 
            { "Get potential misspellings from spelling", Text.From(siteId) & "_suggested_/sites/{site_id}/quality_assurance/spelling/potential_misspellings", AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

PeriodFromParameters = (
        optional periodStartDate as date, 
        optional periodEndDate as date, 
        optional periodInterval as text) =>
    let
        periodInterval = (if periodInterval = null then "" else periodInterval),
        periodValue = if periodInterval <> "" then periodInterval else 
            (if periodStartDate <> null then (if periodEndDate <> null then Date.ToText(periodStartDate, "yyyyMMdd") & "_" & Date.ToText(periodEndDate, "yyyyMMdd") 
                else Date.ToText(periodStartDate, "yyyyMMdd")) else "")
    in
        if periodValue = "" then "" else "&period=" & Uri.EscapeDataString(periodValue);


GetNextLink = (response) as nullable text => 
    let
        links = Record.FieldOrDefault(response, "links"),
        next = if links = null then null else Record.FieldOrDefault(links, "next"),
        href = if next = null then null else Record.FieldOrDefault(next, "href")
    in
        href;

JsonToTable = (json) as table =>
    let
        items = json[items],
        itemsTable = if (List.Count(items) > 0)
			then Table.FromList(items, Splitter.SplitByNothing(), null, null, ExtraValues.Error) 
			else error "The query returns empty table"
    in
        itemsTable;


// Common library code
Extension.LoadFunction = (name as text) =>
    let
        binary = Extension.Contents(name),
        asText = Text.FromBinary(binary)
    in
        Expression.Evaluate(asText, #shared);

Table.ChangeType = Extension.LoadFunction("Table.ChangeType.pqm");
Table.GenerateByPage = Extension.LoadFunction("Table.GenerateByPage.pqm");
Table.ToNavigationTable = Extension.LoadFunction("Table.ToNavigationTable.pqm");

Table.ToFunctionsTable = (
    table as table,
    keyColumns as list,
    nameColumn as text,
    dataColumn as text,
    itemKindColumn as text,
    itemNameColumn as text,
    isLeafColumn as text
) as table =>
    let
        tableType = Value.Type(table),
        newTableType = Type.AddTableKey(tableType, keyColumns, true) meta 
        [
            NavigationTable.NameColumn = nameColumn, 
            NavigationTable.DataColumn = dataColumn,
            NavigationTable.ItemKindColumn = itemKindColumn, 
            NavigationTable.IsLeafColumn = isLeafColumn
        ],
        navigationTable = Value.ReplaceType(table, newTableType)
    in
        navigationTable;

/*
quality_assurance: Quality assurance
accessibility: Accessibility
seo: SEO, SeoV2
analytics: Analytics
policy: Policy
content: Content
*/
AddRowIfProduct = (rows as table, products as list, product as text, row as record) =>
    let
        addedRow = if (List.Contains(products, product)) 
            then Table.InsertRows(rows, Table.RowCount(rows), {row})
            else rows
    in
        addedRow;

GetAllNavTable = (siteId as number, products as list) as table =>
    let
        navHeader = #table({"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {}),
        navRows0 = navHeader,
        navRows1 = Table.InsertRows(navRows0, Table.RowCount(navRows0), {[Name = "GDPR", Key = "all_gdpr", Data = GetGDPRNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]}), 
        navRows2 = Table.InsertRows(navRows1, Table.RowCount(navRows1), {[Name = "Integrations", Key = "all_integrations", Data = GetIntegrationsNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]}), 
        navRows3 = Table.InsertRows(navRows2, Table.RowCount(navRows2), {[Name = "General", Key = "all_general", Data = GetGeneralNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]}), 
        navRows4 = AddRowIfProduct(navRows3, products, "analytics", [Name = "Analytics", Key = "all_analytics", Data = GetAnalyticsNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows5 = AddRowIfProduct(navRows4, products, "accessibility", [Name = "Accessibility", Key = "all_accessibility", Data = GetAccessibilityNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows6 = AddRowIfProduct(navRows5, products, "content", [Name = "Content", Key = "all_content", Data = GetContentNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows7 = AddRowIfProduct(navRows6, products, "policy", [Name = "Policy", Key = "all_policy", Data = GetPolicyNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows8 = AddRowIfProduct(navRows7, products, "quality_assurance", [Name = "Quality Assurance", Key = "all_quality_assurance", Data = GetQualityAssuranceNavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows9 = AddRowIfProduct(navRows8, products, "seo", [Name = "SEO", Key = "all_seo", Data = GetSEONavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]), 
        navRows10 = AddRowIfProduct(navRows9, products, "seo", [Name = "SeoV2", Key = "all_seov2", Data = GetSeoV2NavTable(siteId), ItemKind = "Feed", ItemName = "Feed", IsLeaf = false ]),
        navTable = Table.ToNavigationTable(navRows10, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;

// do not add any code manually below thie following line
/*BEGIN_AUTOMATIC_GENERATION*/



GetContentNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get crawl status for a site", Text.From(siteId) & "/sites/{site_id}/content/crawl", AdvancedSitesSite_idContentCrawlCall(siteId), "Table", "Table", true }, 
{ "Get list of pages for a site", Text.From(siteId) & "/sites/{site_id}/content/pages", AdvancedSitesSite_idContentPagesCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetGDPRNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get GDPR-info for all domains", Text.From(siteId) & "/gdpr/domains_and_ip_addresses/domains", AdvancedGdprDomains_and_ip_addressesDomainsCall(), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetIntegrationsNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "List issues created for external project management systems", Text.From(siteId) & "/integrations/project_management/issues", AdvancedIntegrationsProject_managementIssuesCall(), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetGeneralNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get settings", Text.From(siteId) & "/settings", AdvancedSettingsCall(), "Table", "Table", true }, 
{ "Get content-check settings", Text.From(siteId) & "/settings/content_checking", AdvancedSettingsContent_checkingCall(), "Table", "Table", true }, 
{ "Get surveys", Text.From(siteId) & "/settings/surveys", AdvancedSettingsSurveysCall(), "Table", "Table", true }, 
{ "Get users", Text.From(siteId) & "/settings/users", AdvancedSettingsUsersCall(), "Table", "Table", true }, 
{ "Get sites", Text.From(siteId) & "/sites", AdvancedSitesCall(), "Table", "Table", true }, 
{ "Get list of top level endpoints for site", Text.From(siteId) & "/sites/{site_id}", AdvancedSitesSite_idCall(siteId), "Table", "Table", true }, 
{ "Get history.", Text.From(siteId) & "/sites/{site_id}/dci/history", AdvancedSitesSite_idDciHistoryCall(siteId), "Table", "Table", true }, 
{ "Get DCI scores", Text.From(siteId) & "/sites/{site_id}/dci/overview", AdvancedSitesSite_idDciOverviewCall(siteId), "Table", "Table", true }, 
{ "Get the utilizations of the account", Text.From(siteId) & "/utilization", AdvancedUtilizationCall(), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetAnalyticsNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get available segments", Text.From(siteId) & "/settings/analytics/segments", AdvancedSettingsAnalyticsSegmentsCall(), "Table", "Table", true }, 
{ "Get visit depth from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visit_depth", AdvancedSitesSite_idAnalyticsBehaviorVisit_depthCall(siteId), "Table", "Table", true }, 
{ "Get historical data of visit depth from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visit_depth/history", AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryCall(siteId), "Table", "Table", true }, 
{ "Get visit length from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visit_length", AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthCall(siteId), "Table", "Table", true }, 
{ "Get historical data of visit length from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visit_length/history", AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryCall(siteId), "Table", "Table", true }, 
{ "Get visits by hour of the day from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visits_by_hour", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourCall(siteId), "Table", "Table", true }, 
{ "Get visits by day of the month from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visits_by_monthday", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayCall(siteId), "Table", "Table", true }, 
{ "Get visits by weekday from behavior", Text.From(siteId) & "/sites/{site_id}/analytics/behavior/visits_by_weekday", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayCall(siteId), "Table", "Table", true }, 
{ "Get contents from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/contents", AdvancedSitesSite_idAnalyticsCampaignsContentsCall(siteId), "Table", "Table", true }, 
{ "Get mediums from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/mediums", AdvancedSitesSite_idAnalyticsCampaignsMediumsCall(siteId), "Table", "Table", true }, 
{ "Get names from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/names", AdvancedSitesSite_idAnalyticsCampaignsNamesCall(siteId), "Table", "Table", true }, 
{ "Get pages from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/pages", AdvancedSitesSite_idAnalyticsCampaignsPagesCall(siteId), "Table", "Table", true }, 
{ "Get sources from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/sources", AdvancedSitesSite_idAnalyticsCampaignsSourcesCall(siteId), "Table", "Table", true }, 
{ "Get summary of campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/summary", AdvancedSitesSite_idAnalyticsCampaignsSummaryCall(siteId), "Table", "Table", true }, 
{ "Get historical data of all campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/summary/history", AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryCall(siteId), "Table", "Table", true }, 
{ "Get terms from campaigns", Text.From(siteId) & "/sites/{site_id}/analytics/campaigns/terms", AdvancedSitesSite_idAnalyticsCampaignsTermsCall(siteId), "Table", "Table", true }, 
{ "Get all pages from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/all_pages", AdvancedSitesSite_idAnalyticsContentAll_pagesCall(siteId), "Table", "Table", true }, 
{ "Get entry pages from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/entry_pages", AdvancedSitesSite_idAnalyticsContentEntry_pagesCall(siteId), "Table", "Table", true }, 
{ "Get exit pages from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/exit_pages", AdvancedSitesSite_idAnalyticsContentExit_pagesCall(siteId), "Table", "Table", true }, 
{ "Get least popular pages from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/least_popular_pages", AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesCall(siteId), "Table", "Table", true }, 
{ "Get most popular pages from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/most_popular_pages", AdvancedSitesSite_idAnalyticsContentMost_popular_pagesCall(siteId), "Table", "Table", true }, 
{ "Get navigation depth from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/navigation_depth", AdvancedSitesSite_idAnalyticsContentNavigation_depthCall(siteId), "Table", "Table", true }, 
{ "Get outbound links from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/outbound_links", AdvancedSitesSite_idAnalyticsContentOutbound_linksCall(siteId), "Table", "Table", true }, 
{ "Get page load time from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/page_load_time", AdvancedSitesSite_idAnalyticsContentPage_load_timeCall(siteId), "Table", "Table", true }, 
{ "Get pages without visits from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/pages_without_visits", AdvancedSitesSite_idAnalyticsContentPages_without_visitsCall(siteId), "Table", "Table", true }, 
{ "Get parameters from content", Text.From(siteId) & "/sites/{site_id}/analytics/content/parameters", AdvancedSitesSite_idAnalyticsContentParametersCall(siteId), "Table", "Table", true }, 
{ "Get bounce rates from entries and exits", Text.From(siteId) & "/sites/{site_id}/analytics/entries_exits/bounce_rates", AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesCall(siteId), "Table", "Table", true }, 
{ "Get entry and exit rates from entries and exits", Text.From(siteId) & "/sites/{site_id}/analytics/entries_exits/entry_exit_rates", AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesCall(siteId), "Table", "Table", true }, 
{ "Get actions from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/actions", AdvancedSitesSite_idAnalyticsEvent_trackingActionsCall(siteId), "Table", "Table", true }, 
{ "Get categories from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/categories", AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCall(siteId), "Table", "Table", true }, 
{ "Get events from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/events", AdvancedSitesSite_idAnalyticsEvent_trackingEventsCall(siteId), "Table", "Table", true }, 
{ "Get historical data for events from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/events/history", AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages for specific event from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/events/pages", AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesCall(siteId), "Table", "Table", true }, 
{ "Get labels from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/labels", AdvancedSitesSite_idAnalyticsEvent_trackingLabelsCall(siteId), "Table", "Table", true }, 
{ "Get pages from event tracking", Text.From(siteId) & "/sites/{site_id}/analytics/event_tracking/pages", AdvancedSitesSite_idAnalyticsEvent_trackingPagesCall(siteId), "Table", "Table", true }, 
{ "Get internal searches", Text.From(siteId) & "/sites/{site_id}/analytics/internal_searches", AdvancedSitesSite_idAnalyticsInternal_searchesCall(siteId), "Table", "Table", true }, 
{ "Get historical data from internal searches", Text.From(siteId) & "/sites/{site_id}/analytics/internal_searches/history", AdvancedSitesSite_idAnalyticsInternal_searchesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get categories", Text.From(siteId) & "/sites/{site_id}/analytics/keymetrics/categories", AdvancedSitesSite_idAnalyticsKeymetricsCategoriesCall(siteId), "Table", "Table", true }, 
{ "Get Key Performance Indicators", Text.From(siteId) & "/sites/{site_id}/analytics/keymetrics/kpis", AdvancedSitesSite_idAnalyticsKeymetricsKpisCall(siteId), "Table", "Table", true }, 
{ "Get Key Metrics", Text.From(siteId) & "/sites/{site_id}/analytics/keymetrics/metrics", AdvancedSitesSite_idAnalyticsKeymetricsMetricsCall(siteId), "Table", "Table", true }, 
{ "Get analytics groups", Text.From(siteId) & "/sites/{site_id}/analytics/overview/groups", AdvancedSitesSite_idAnalyticsOverviewGroupsCall(siteId), "Table", "Table", true }, 
{ "Get historical data from overview", Text.From(siteId) & "/sites/{site_id}/analytics/overview/history", AdvancedSitesSite_idAnalyticsOverviewHistoryCall(siteId), "Table", "Table", true }, 
{ "Get online visitors from overview", Text.From(siteId) & "/sites/{site_id}/analytics/overview/online_visitors", AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsCall(siteId), "Table", "Table", true }, 
{ "Get summary for analytics", Text.From(siteId) & "/sites/{site_id}/analytics/overview/summary", AdvancedSitesSite_idAnalyticsOverviewSummaryCall(siteId), "Table", "Table", true }, 
{ "Get direct traffic from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/direct_traffic_entry_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesCall(siteId), "Table", "Table", true }, 
{ "Get external referring domains from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/external_referring_domains", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsCall(siteId), "Table", "Table", true }, 
{ "Get external referring pages from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/external_referring_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesCall(siteId), "Table", "Table", true }, 
{ "Get external search terms from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/external_search_terms", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsCall(siteId), "Table", "Table", true }, 
{ "Get search engines from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/search_engines", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesCall(siteId), "Table", "Table", true }, 
{ "Get social media organisations from traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/social_media_organisations", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsCall(siteId), "Table", "Table", true }, 
{ "Get an overview of traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/summary", AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryCall(siteId), "Table", "Table", true }, 
{ "Get historical data for traffic sources", Text.From(siteId) & "/sites/{site_id}/analytics/traffic_sources/summary/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryCall(siteId), "Table", "Table", true }, 
{ "Get browsers from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/browsers", AdvancedSitesSite_idAnalyticsVisitorsBrowsersCall(siteId), "Table", "Table", true }, 
{ "Get historical data for browsers from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/browsers/history", AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryCall(siteId), "Table", "Table", true }, 
{ "Get countries from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/countries", AdvancedSitesSite_idAnalyticsVisitorsCountriesCall(siteId), "Table", "Table", true }, 
{ "Get devices from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/devices", AdvancedSitesSite_idAnalyticsVisitorsDevicesCall(siteId), "Table", "Table", true }, 
{ "Get historical data for devices from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/devices/history", AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get operating systems from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/operating_systems", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsCall(siteId), "Table", "Table", true }, 
{ "Get historical data for operating systems from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/operating_systems/history", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get organisations from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/organisations", AdvancedSitesSite_idAnalyticsVisitorsOrganisationsCall(siteId), "Table", "Table", true }, 
{ "Get screen resolutions from visitors", Text.From(siteId) & "/sites/{site_id}/analytics/visitors/screen_resolutions", AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetAccessibilityNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get decisions on issues from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/decision/issues", AdvancedSitesSite_idAccessibilityDecisionIssuesCall(siteId), "Table", "Table", true }, 
{ "Get decisions on items from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/decision/items", AdvancedSitesSite_idAccessibilityDecisionItemsCall(siteId), "Table", "Table", true }, 
{ "Get issues from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/issues", AdvancedSitesSite_idAccessibilityIssuesCall(siteId), "Table", "Table", true }, 
{ "Get overview of groups for accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/overview/groups", AdvancedSitesSite_idAccessibilityOverviewGroupsCall(siteId), "Table", "Table", true }, 
{ "Get progress for all instances from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/overview/progress/instances/history", AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get progress for all issues from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/overview/progress/issues/history", AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get summary for accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/overview/summary", AdvancedSitesSite_idAccessibilityOverviewSummaryCall(siteId), "Table", "Table", true }, 
{ "Get HTML pages from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/pages", AdvancedSitesSite_idAccessibilityPagesCall(siteId), "Table", "Table", true }, 
{ "Get W3C CSS error report from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/validation/css", AdvancedSitesSite_idAccessibilityValidationCssCall(siteId), "Table", "Table", true }, 
{ "Get W3C HTML error report from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/validation/html", AdvancedSitesSite_idAccessibilityValidationHtmlCall(siteId), "Table", "Table", true }, 
{ "Get report on PDF errors from accessibility", Text.From(siteId) & "/sites/{site_id}/accessibility/validation/pdf", AdvancedSitesSite_idAccessibilityValidationPdfCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetPolicyNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get content matched by any policy", Text.From(siteId) & "/sites/{site_id}/policy/matches/content", AdvancedSitesSite_idPolicyMatchesContentCall(siteId), "Table", "Table", true }, 
{ "Get documents matched by any policy", Text.From(siteId) & "/sites/{site_id}/policy/matches/documents", AdvancedSitesSite_idPolicyMatchesDocumentsCall(siteId), "Table", "Table", true }, 
{ "Get media matched by any policy", Text.From(siteId) & "/sites/{site_id}/policy/matches/media", AdvancedSitesSite_idPolicyMatchesMediaCall(siteId), "Table", "Table", true }, 
{ "Get pages with media or documents matched by any policy", Text.From(siteId) & "/sites/{site_id}/policy/matches/pages_with_media_and_documents", AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsCall(siteId), "Table", "Table", true }, 
{ "Get policies", Text.From(siteId) & "/sites/{site_id}/policy/policies", AdvancedSitesSite_idPolicyPoliciesCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetQualityAssuranceNavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get capture tags from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/capture_tags", AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsCall(siteId), "Table", "Table", true }, 
{ "Get css assets from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/css", AdvancedSitesSite_idQuality_assuranceInventoryCssCall(siteId), "Table", "Table", true }, 
{ "Get documents from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/documents", AdvancedSitesSite_idQuality_assuranceInventoryDocumentsCall(siteId), "Table", "Table", true }, 
{ "Get email addresses from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/email_addresses", AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesCall(siteId), "Table", "Table", true }, 
{ "Get history from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/history", AdvancedSitesSite_idQuality_assuranceInventoryHistoryCall(siteId), "Table", "Table", true }, 
{ "Get link texts from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/link_texts", AdvancedSitesSite_idQuality_assuranceInventoryLink_textsCall(siteId), "Table", "Table", true }, 
{ "Get links from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/links", AdvancedSitesSite_idQuality_assuranceInventoryLinksCall(siteId), "Table", "Table", true }, 
{ "Get media files from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/media", AdvancedSitesSite_idQuality_assuranceInventoryMediaCall(siteId), "Table", "Table", true }, 
{ "Get meta tags from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/meta_tags", AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsCall(siteId), "Table", "Table", true }, 
{ "Get pages from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/pages", AdvancedSitesSite_idQuality_assuranceInventoryPagesCall(siteId), "Table", "Table", true }, 
{ "Get personal id numbers from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/personal_id_numbers", AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersCall(siteId), "Table", "Table", true }, 
{ "Get phone numbers from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/phone_numbers", AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersCall(siteId), "Table", "Table", true }, 
{ "Get java scripts from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/scripts", AdvancedSitesSite_idQuality_assuranceInventoryScriptsCall(siteId), "Table", "Table", true }, 
{ "Get trademarks from inventory", Text.From(siteId) & "/sites/{site_id}/quality_assurance/inventory/trademarks", AdvancedSitesSite_idQuality_assuranceInventoryTrademarksCall(siteId), "Table", "Table", true }, 
{ "Get broken links", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/broken_links", AdvancedSitesSite_idQuality_assuranceLinksBroken_linksCall(siteId), "Table", "Table", true }, 
{ "Get broken links in documents", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/broken_links_in_documents", AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsCall(siteId), "Table", "Table", true }, 
{ "Get documents with broken links", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/documents_with_broken_links", AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksCall(siteId), "Table", "Table", true }, 
{ "Get historical data for links", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/history", AdvancedSitesSite_idQuality_assuranceLinksHistoryCall(siteId), "Table", "Table", true }, 
{ "Get ignored links", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/ignored_links", AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksCall(siteId), "Table", "Table", true }, 
{ "Get pages with broken links", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/pages_with_broken_links", AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksCall(siteId), "Table", "Table", true }, 
{ "Get links to unsafe domains", Text.From(siteId) & "/sites/{site_id}/quality_assurance/links/unsafe_domains", AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsCall(siteId), "Table", "Table", true }, 
{ "Get check history from crawls", Text.From(siteId) & "/sites/{site_id}/quality_assurance/overview/check_history", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyCall(siteId), "Table", "Table", true }, 
{ "Get quality assurance groups", Text.From(siteId) & "/sites/{site_id}/quality_assurance/overview/groups", AdvancedSitesSite_idQuality_assuranceOverviewGroupsCall(siteId), "Table", "Table", true }, 
{ "Get priority pages", Text.From(siteId) & "/sites/{site_id}/quality_assurance/overview/priority_pages", AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesCall(siteId), "Table", "Table", true }, 
{ "Get summary for quality assurance", Text.From(siteId) & "/sites/{site_id}/quality_assurance/overview/summary", AdvancedSitesSite_idQuality_assuranceOverviewSummaryCall(siteId), "Table", "Table", true }, 
{ "Get accepted readability words", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/accepted_words", AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for automated readability", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for automated readability", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for automated readability", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for coleman liau", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for coleman liau", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for coleman liau", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for flesch kincaid grade level", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for flesch kincaid grade level", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for flesch kincaid grade level", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for flesch kincaid reading ease", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for flesch kincaid reading ease", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for flesch kincaid reading ease", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for gunning fog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for gunning fog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for gunning fog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for lix", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/lix/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for lix", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/lix/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for lix", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/lix/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresCall(siteId), "Table", "Table", true }, 
{ "Get excluded pages for smog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/smog/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get readability pages for smog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/smog/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesCall(siteId), "Table", "Table", true }, 
{ "Get readability scores for smog", Text.From(siteId) & "/sites/{site_id}/quality_assurance/readability/tests/smog/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresCall(siteId), "Table", "Table", true }, 
{ "Get historical data for spelling", Text.From(siteId) & "/sites/{site_id}/quality_assurance/spelling/history", AdvancedSitesSite_idQuality_assuranceSpellingHistoryCall(siteId), "Table", "Table", true }, 
{ "Get languages from spelling", Text.From(siteId) & "/sites/{site_id}/quality_assurance/spelling/languages", AdvancedSitesSite_idQuality_assuranceSpellingLanguagesCall(siteId), "Table", "Table", true }, 
{ "Get misspellings from spelling", Text.From(siteId) & "/sites/{site_id}/quality_assurance/spelling/misspellings", AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsCall(siteId), "Table", "Table", true }, 
{ "Get pages from spelling", Text.From(siteId) & "/sites/{site_id}/quality_assurance/spelling/pages", AdvancedSitesSite_idQuality_assuranceSpellingPagesCall(siteId), "Table", "Table", true }, 
{ "Get potential misspellings from spelling", Text.From(siteId) & "/sites/{site_id}/quality_assurance/spelling/potential_misspellings", AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetSEONavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get ignored issues from decisions", Text.From(siteId) & "/sites/{site_id}/seo/decisions/ignored_issues", AdvancedSitesSite_idSeoDecisionsIgnored_issuesCall(siteId), "Table", "Table", true }, 
{ "Get ignored issue's pages from decisions", Text.From(siteId) & "/sites/{site_id}/seo/decisions/ignored_issues/pages", AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesCall(siteId), "Table", "Table", true }, 
{ "Get ignored pages from decisions", Text.From(siteId) & "/sites/{site_id}/seo/decisions/ignored_pages", AdvancedSitesSite_idSeoDecisionsIgnored_pagesCall(siteId), "Table", "Table", true }, 
{ "Get issues", Text.From(siteId) & "/sites/{site_id}/seo/issues", AdvancedSitesSite_idSeoIssuesCall(siteId), "Table", "Table", true }, 
{ "Get ""duplicate H1 headings"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/duplicate_h1_headings/h1_headings", AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsCall(siteId), "Table", "Table", true }, 
{ "Get ""duplicate meta descriptions"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/duplicate_meta_descriptions/meta_descriptions", AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsCall(siteId), "Table", "Table", true }, 
{ "Get ""duplicate page titles"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/duplicate_page_title/titles", AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""duplicate page titles"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/duplicate_page_title/titles/pages", AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in h1"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_h1_heading/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in image alt text"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_image_alt_text/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in internal link text"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in meta description"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_meta_description/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in page title"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_page_title/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in sub headings"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_sub_headings/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""keyword not included in url"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/keyword_not_included_in_url/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""pages excluded by noindex/nofollow"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/page_excluded_by_noindex_nofollow/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""page excluded by rel=canonical"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/page_excluded_by_rel_canonical/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""pages excluded by robots.txt"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/page_excluded_by_robots/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""page not included in xml sitemap"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/page_not_included_in_xml_sitemap/pages", AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""pages without h1 headings"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/pages_without_h1_heading/pages", AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""pages without meta descriptions"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/pages_without_meta_description/pages", AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesCall(siteId), "Table", "Table", true }, 
{ "Get pages for ""pages without page title"" from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/pages_without_page_title/pages", AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesCall(siteId), "Table", "Table", true }, 
{ "Get redirect links from issues", Text.From(siteId) & "/sites/{site_id}/seo/issues/redirect/links", AdvancedSitesSite_idSeoIssuesRedirectLinksCall(siteId), "Table", "Table", true }, 
{ "Get SEO groups", Text.From(siteId) & "/sites/{site_id}/seo/overview/groups", AdvancedSitesSite_idSeoOverviewGroupsCall(siteId), "Table", "Table", true }, 
{ "Get SEO policies", Text.From(siteId) & "/sites/{site_id}/seo/overview/policies", AdvancedSitesSite_idSeoOverviewPoliciesCall(siteId), "Table", "Table", true }, 
{ "Get summary for SEO", Text.From(siteId) & "/sites/{site_id}/seo/overview/summary", AdvancedSitesSite_idSeoOverviewSummaryCall(siteId), "Table", "Table", true }, 
{ "Get pages", Text.From(siteId) & "/sites/{site_id}/seo/pages", AdvancedSitesSite_idSeoPagesCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




GetSeoV2NavTable = (siteId as number) as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get activity plans", Text.From(siteId) & "/sites/{site_id}/seov2/activity_plans", AdvancedSitesSite_idSeov2Activity_plansCall(siteId), "Table", "Table", true }, 
{ "Get overall statistics for all activity plans", Text.From(siteId) & "/sites/{site_id}/seov2/activity_plans/summary", AdvancedSitesSite_idSeov2Activity_plansSummaryCall(siteId), "Table", "Table", true }, 
{ "Get content optimization keywords", Text.From(siteId) & "/sites/{site_id}/seov2/content_optimization_keywords", AdvancedSitesSite_idSeov2Content_optimization_keywordsCall(siteId), "Table", "Table", true }, 
{ "Get overall statistics for content optimization keywords", Text.From(siteId) & "/sites/{site_id}/seov2/content_optimization_keywords/summary", AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryCall(siteId), "Table", "Table", true }, 
{ "Get issues", Text.From(siteId) & "/sites/{site_id}/seov2/issues", AdvancedSitesSite_idSeov2IssuesCall(siteId), "Table", "Table", true }, 
{ "Get broken links", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links", AdvancedSitesSite_idSeov2IssuesBroken_linksCall(siteId), "Table", "Table", true }, 
{ "Get overall broken links stats", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links/details", AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsCall(siteId), "Table", "Table", true }, 
{ "Get the occurrences of broken links historically", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links/history", AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryCall(siteId), "Table", "Table", true }, 
{ "Get broken links on entry pages", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links_entry_pages", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall broken links stats for entry pages", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links_entry_pages/details", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get the occurrences of broken links on entry pages historically", Text.From(siteId) & "/sites/{site_id}/seov2/issues/broken_links_entry_pages/history", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages not linking to the canonical page", Text.From(siteId) & "/sites/{site_id}/seov2/issues/canonical_urls", AdvancedSitesSite_idSeov2IssuesCanonical_urlsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for canonical issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/canonical_urls/details", AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of canonical issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/canonical_urls/history", AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages for code to text ratio issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/code_text_ratio", AdvancedSitesSite_idSeov2IssuesCode_text_ratioCall(siteId), "Table", "Table", true }, 
{ "Get overall stats of code to text ratio issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/code_text_ratio/details", AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of code to text ratio issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/code_text_ratio/history", AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryCall(siteId), "Table", "Table", true }, 
{ "Get compression used issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/compression_used/details", AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsCall(siteId), "Table", "Table", true }, 
{ "Get links for the correct 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/correct_404s", AdvancedSitesSite_idSeov2IssuesCorrect_404sCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for the correct 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/correct_404s/details", AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of correct 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/correct_404s/history", AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryCall(siteId), "Table", "Table", true }, 
{ "Get stylesheets for the css validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/css_validation", AdvancedSitesSite_idSeov2IssuesCss_validationCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for the css validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/css_validation/details", AdvancedSitesSite_idSeov2IssuesCss_validationDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of css validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/css_validation/history", AdvancedSitesSite_idSeov2IssuesCss_validationHistoryCall(siteId), "Table", "Table", true }, 
{ "Get dead end pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/dead_end_pages", AdvancedSitesSite_idSeov2IssuesDead_end_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for the dead end pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/dead_end_pages/details", AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of dead end pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/dead_end_pages/history", AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get desktop speed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/desktop_speed/details", AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsCall(siteId), "Table", "Table", true }, 
{ "Get the desktop speed score historically", Text.From(siteId) & "/sites/{site_id}/seov2/issues/desktop_speed/history", AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryCall(siteId), "Table", "Table", true }, 
{ "Get duplicate description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_description", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for duplicate meta description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_description/details", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of duplicate description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_description/history", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryCall(siteId), "Table", "Table", true }, 
{ "Get duplicate page title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_page_title", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for duplicate page title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_page_title/details", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of duplicate page title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/duplicate_page_title/history", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryCall(siteId), "Table", "Table", true }, 
{ "Get empty H1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/empty_h1", AdvancedSitesSite_idSeov2IssuesEmpty_h1Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for empty H1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/empty_h1/details", AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of empty H1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/empty_h1/history", AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryCall(siteId), "Table", "Table", true }, 
{ "Get font size legibility issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/fontsize_legibility/details", AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsCall(siteId), "Table", "Table", true }, 
{ "Get html validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/html_validation", AdvancedSitesSite_idSeov2IssuesHtml_validationCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for html validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/html_validation/details", AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of html validation issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/html_validation/history", AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryCall(siteId), "Table", "Table", true }, 
{ "Get image alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_alt_attribute", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for image alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_alt_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of image alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_alt_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryCall(siteId), "Table", "Table", true }, 
{ "Get image empty alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_empty_alt_attribute", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for image empty alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_empty_alt_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of image empty alt attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_empty_alt_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryCall(siteId), "Table", "Table", true }, 
{ "Get image with height attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_width_height_attribute", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for image width height attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_width_height_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of image width height attribute issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/image_width_height_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryCall(siteId), "Table", "Table", true }, 
{ "Get images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/images_1mb", AdvancedSitesSite_idSeov2IssuesImages_1mbCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/images_1mb/details", AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/images_1mb/history", AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryCall(siteId), "Table", "Table", true }, 
{ "Get links to unsafe domains issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/links_to_unsafe_domains", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for links to unsafe domains issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/links_to_unsafe_domains/details", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of unsafe domains issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/links_to_unsafe_domains/history", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get load time issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/load_time", AdvancedSitesSite_idSeov2IssuesLoad_timeCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for load time issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/load_time/details", AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of load time issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/load_time/history", AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryCall(siteId), "Table", "Table", true }, 
{ "Get long sentences issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_sentences", AdvancedSitesSite_idSeov2IssuesLong_sentencesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for the long sentences issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_sentences/details", AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of long sentences issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_sentences/history", AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get long urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_urls", AdvancedSitesSite_idSeov2IssuesLong_urlsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for long urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_urls/details", AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of long urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/long_urls/history", AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get many internal links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/many_internal_links", AdvancedSitesSite_idSeov2IssuesMany_internal_linksCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for the many internal links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/many_internal_links/details", AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of many internal links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/many_internal_links/history", AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta description empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_empty", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta description empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_empty/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta description empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_empty/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta description too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_long", AdvancedSitesSite_idSeov2IssuesMeta_desc_longCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta description too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_long/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta description too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_long/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta description empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_missing", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta description missing issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_missing/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta description missing issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_missing/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryCall(siteId), "Table", "Table", true }, 
{ "Get multiple meta description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_multiple", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for multiple meta description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_multiple/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of multiple meta description issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_multiple/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta description too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_short", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta description too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_short/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta description too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_desc_short/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta title empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_empty", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta title empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_empty/details", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta title empty issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_empty/history", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta title too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_long", AdvancedSitesSite_idSeov2IssuesMeta_title_longCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta title too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_long/details", AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta title too long issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_long/history", AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta title missing issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_missing", AdvancedSitesSite_idSeov2IssuesMeta_title_missingCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta title missing issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_missing/details", AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta title missing issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_missing/history", AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryCall(siteId), "Table", "Table", true }, 
{ "Get multiple meta title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_multiple", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for multiple meta title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_multiple/details", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences for multiple meta title issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_multiple/history", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryCall(siteId), "Table", "Table", true }, 
{ "Get meta title too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_short", AdvancedSitesSite_idSeov2IssuesMeta_title_shortCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for meta title too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_short/details", AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of meta title too short issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/meta_title_short/history", AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryCall(siteId), "Table", "Table", true }, 
{ "Get missing h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/missing_h1", AdvancedSitesSite_idSeov2IssuesMissing_h1Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for missing h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/missing_h1/details", AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of missing h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/missing_h1/history", AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryCall(siteId), "Table", "Table", true }, 
{ "Get missing robots issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/missing_robots/details", AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get missing sitemap issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/missing_sitemap/details", AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsCall(siteId), "Table", "Table", true }, 
{ "Get misspellings on entry pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspelling_entry_pages", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for misspellings on entry pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspelling_entry_pages/details", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of misspelling on entry pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspelling_entry_pages/history", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get misspellings issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspellings", AdvancedSitesSite_idSeov2IssuesMisspellingsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for misspellings issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspellings/details", AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of misspelling issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/misspellings/history", AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get mobile friendly issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/mobile_friendly/details", AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsCall(siteId), "Table", "Table", true }, 
{ "Get mobile speed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/mobile_speed/details", AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsCall(siteId), "Table", "Table", true }, 
{ "Get the mobile speed score historically", Text.From(siteId) & "/sites/{site_id}/seov2/issues/mobile_speed/history", AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryCall(siteId), "Table", "Table", true }, 
{ "Get mobile viewport issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/mobile_viewport/details", AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsCall(siteId), "Table", "Table", true }, 
{ "Get multiple h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/multiple_h1", AdvancedSitesSite_idSeov2IssuesMultiple_h1Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for multiple h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/multiple_h1/details", AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences for multiple h1 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/multiple_h1/history", AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryCall(siteId), "Table", "Table", true }, 
{ "Get navigation depth issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/navigation_depth", AdvancedSitesSite_idSeov2IssuesNavigation_depthCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for navigation depth issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/navigation_depth/details", AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of navigation depth issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/navigation_depth/history", AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryCall(siteId), "Table", "Table", true }, 
{ "Get new pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/new_pages/details", AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of new pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/new_pages/history", AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get nofollow pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/nofollow_pages", AdvancedSitesSite_idSeov2IssuesNofollow_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for nofollow pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/nofollow_pages/details", AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of nofollow pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/nofollow_pages/history", AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get noindex pages", Text.From(siteId) & "/sites/{site_id}/seov2/issues/noindex_pages", AdvancedSitesSite_idSeov2IssuesNoindex_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for noindex pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/noindex_pages/details", AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of noindex pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/noindex_pages/history", AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get open graph tag pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/open_graph_tag_pages", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for open graph tag pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/open_graph_tag_pages/details", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of open graph tag pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/open_graph_tag_pages/history", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get page size issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/page_size", AdvancedSitesSite_idSeov2IssuesPage_sizeCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for page size issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/page_size/details", AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of page size issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/page_size/history", AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages with broken links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_broken_links", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for pages with broken links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_broken_links/details", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of page with broken links issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_broken_links/history", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages with frames issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_frames", AdvancedSitesSite_idSeov2IssuesPages_with_framesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for pages with frames issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_frames/details", AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of page with frames issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_frames/history", AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages with images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_images_1mb", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for pages with images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_images_1mb/details", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of page with images over 1mb issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_images_1mb/history", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages with misspellings issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_misspellings", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for pages with misspellings issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_misspellings/details", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of page with misspellings issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/pages_with_misspellings/history", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get parameterized urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/parameterized_urls", AdvancedSitesSite_idSeov2IssuesParameterized_urlsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for parameterized urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/parameterized_urls/details", AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of parameterized urls issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/parameterized_urls/history", AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get readability pages score issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/readability_pages_score", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for readability page score issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/readability_pages_score/details", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of readability pages score issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/readability_pages_score/history", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryCall(siteId), "Table", "Table", true }, 
{ "Get redirect 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_301", AdvancedSitesSite_idSeov2IssuesRedirect_301Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for redirect 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_301/details", AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of redirect 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_301/history", AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryCall(siteId), "Table", "Table", true }, 
{ "Get redirect chain issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_chain", AdvancedSitesSite_idSeov2IssuesRedirect_chainCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for redirect chain issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_chain/details", AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of redirect chain issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_chain/history", AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryCall(siteId), "Table", "Table", true }, 
{ "Get redirect mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_mixed", AdvancedSitesSite_idSeov2IssuesRedirect_mixedCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for redirect mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_mixed/details", AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of redirect mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_mixed/history", AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryCall(siteId), "Table", "Table", true }, 
{ "Get redirect not 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_not_301", AdvancedSitesSite_idSeov2IssuesRedirect_not_301Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for redirect not 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_not_301/details", AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of redirect not 301 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/redirect_not_301/history", AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryCall(siteId), "Table", "Table", true }, 
{ "Get sitemap excluded pages issue
", Text.From(siteId) & "/sites/{site_id}/seov2/issues/sitemap_excluded_pages", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for sitemap excluded pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/sitemap_excluded_pages/details", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of sitemap excluded pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/sitemap_excluded_pages/history", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get ssl enabled issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_enabled", AdvancedSitesSite_idSeov2IssuesSsl_enabledCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for ssl enabled issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_enabled/details", AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of ssl enabled issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_enabled/history", AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryCall(siteId), "Table", "Table", true }, 
{ "Get ssl mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_mixed", AdvancedSitesSite_idSeov2IssuesSsl_mixedCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for ssl mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_mixed/details", AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of ssl mixed issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/ssl_mixed/history", AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryCall(siteId), "Table", "Table", true }, 
{ "Get status code 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_404", AdvancedSitesSite_idSeov2IssuesStatus_code_404Call(siteId), "Table", "Table", true }, 
{ "Get overall stats for status code 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_404/details", AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of status code 404 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_404/history", AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryCall(siteId), "Table", "Table", true }, 
{ "Get status code 4xx issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_4xxs", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for status code 4xx issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_4xxs/details", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of status code 4xx issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_4xxs/history", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryCall(siteId), "Table", "Table", true }, 
{ "Get status code 500 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_500s", AdvancedSitesSite_idSeov2IssuesStatus_code_500sCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for status code 500 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_500s/details", AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of status code 500 issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/status_code_500s/history", AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryCall(siteId), "Table", "Table", true }, 
{ "Get structured markup pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/structured_markup_pages", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for structured markup pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/structured_markup_pages/details", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of structured markup pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/structured_markup_pages/history", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get touchscreen ready issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/touchscreen_ready/details", AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsCall(siteId), "Table", "Table", true }, 
{ "Get unsafe domain issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/unsafe_domain/details", AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsCall(siteId), "Table", "Table", true }, 
{ "Get updated media issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_media", AdvancedSitesSite_idSeov2IssuesUpdated_mediaCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for updated media issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_media/details", AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of updated media issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_media/history", AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryCall(siteId), "Table", "Table", true }, 
{ "Get updated pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_pages", AdvancedSitesSite_idSeov2IssuesUpdated_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for updated pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_pages/details", AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of updated pages issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/updated_pages/history", AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryCall(siteId), "Table", "Table", true }, 
{ "Get urls with underscore issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/urls_with_underscore", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for urls with underscore issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/urls_with_underscore/details", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of urls with underscore issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/urls_with_underscore/history", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryCall(siteId), "Table", "Table", true }, 
{ "Get words per page issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/words_per_page", AdvancedSitesSite_idSeov2IssuesWords_per_pageCall(siteId), "Table", "Table", true }, 
{ "Get overall stats for words per page issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/words_per_page/details", AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsCall(siteId), "Table", "Table", true }, 
{ "Get historical occurrences of words per page issue", Text.From(siteId) & "/sites/{site_id}/seov2/issues/words_per_page/history", AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryCall(siteId), "Table", "Table", true }, 
{ "Get monitored keywords", Text.From(siteId) & "/sites/{site_id}/seov2/keywords", AdvancedSitesSite_idSeov2KeywordsCall(siteId), "Table", "Table", true }, 
{ "Get SEO groups", Text.From(siteId) & "/sites/{site_id}/seov2/overview/groups", AdvancedSitesSite_idSeov2OverviewGroupsCall(siteId), "Table", "Table", true }, 
{ "Get the SEO scores", Text.From(siteId) & "/sites/{site_id}/seov2/overview/score", AdvancedSitesSite_idSeov2OverviewScoreCall(siteId), "Table", "Table", true }, 
{ "Get the SEO scores historically", Text.From(siteId) & "/sites/{site_id}/seov2/overview/score/history", AdvancedSitesSite_idSeov2OverviewScoreHistoryCall(siteId), "Table", "Table", true }, 
{ "Get pages with issues", Text.From(siteId) & "/sites/{site_id}/seov2/pages", AdvancedSitesSite_idSeov2PagesCall(siteId), "Table", "Table", true }, 
{ "Get target pages for keywords", Text.From(siteId) & "/sites/{site_id}/seov2/target_pages", AdvancedSitesSite_idSeov2Target_pagesCall(siteId), "Table", "Table", true }, 
{ "Get overall statistics for target pages", Text.From(siteId) & "/sites/{site_id}/seov2/target_pages/summary", AdvancedSitesSite_idSeov2Target_pagesSummaryCall(siteId), "Table", "Table", true }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;




AdvancedContentChecksContent_idAccessibilityIssuesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/accessibility/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idAccessibilityIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idAccessibilityIssuesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get a list of accessibility issues for the specified content"
    ];

AdvancedContentChecksContent_idAccessibilityIssuesResultType = type table [
	check_id = number, count = number, criterion = text, issue_name = text, priority = text, role = text, severity = text
];
  
AdvancedContentChecksContent_idAccessibilityIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idAccessibilityIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idAccessibilityIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"check_id", "count", "priority", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idAccessibilityIssuesCall = Value.ReplaceType(AdvancedContentChecksContent_idAccessibilityIssuesResultTable, AdvancedContentChecksContent_idAccessibilityIssuesParamsType);


AdvancedContentChecksContent_idIssuesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/issues?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedContentChecksContent_idIssuesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get issue found for this page"
    ];

AdvancedContentChecksContent_idIssuesCall = Value.ReplaceType(AdvancedContentChecksContent_idIssuesResultTable, AdvancedContentChecksContent_idIssuesParamsType);


AdvancedContentChecksContent_idPolicyMatching_policiesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/policy/matching_policies?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idPolicyMatching_policiesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idPolicyMatching_policiesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the matching policies for the content"
    ];

AdvancedContentChecksContent_idPolicyMatching_policiesResultType = type table [
	id = number, occurrences = number, policy_category = text, policy_name = text, policy_priority = text
];
  
AdvancedContentChecksContent_idPolicyMatching_policiesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idPolicyMatching_policiesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idPolicyMatching_policiesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "policy_category", "policy_priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idPolicyMatching_policiesCall = Value.ReplaceType(AdvancedContentChecksContent_idPolicyMatching_policiesResultTable, AdvancedContentChecksContent_idPolicyMatching_policiesParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/capture_tags?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the capture tags found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultType = type table [
	id = number, capture_tag = text, occurrences = number
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/email_addresses?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the email addresses found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultType = type table [
	id = number, action_required = text, detected = text, email = text, email_address_type = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "detected", "email_address_type"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/link_texts?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the link texts found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultType = type table [
	id = number, text = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryLinksParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the links found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultType = type table [
	id = number, url = text, documents = number, http_status = number, is_broken = logical, media_type = text, pages = number, unsafe_status = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_broken", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryLinksCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryLinksResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryLinksParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/meta_tags?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the meta tags found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultType = type table [
	id = number, meta_tag = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/personal_id_numbers?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the personal id numbers found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultType = type table [
	id = number, documents = number, pages = number, personal_id_number = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "documents", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/phone_numbers?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the phone numbers found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultType = type table [
	id = number, phone_number = text
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersParamsType);


AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/inventory/trademarks?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the trademarks found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultType = type table [
	id = number, name = text, duplicates = text, ignored = logical
];
  
AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "ignored"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksResultTable, AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksParamsType);


AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/links/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the broken links found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultType = type table [
	id = number, url = text, http_status = number, last_checked = text, link_status_changed = text, message = text
];
  
AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_checked", "link_status_changed"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksResultTable, AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksParamsType);


AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/links/unsafe_domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the list of links to unsafe domains found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultType = type table [
	id = number, clicks_on_domain = number, documents = number, domain = text, last_checked = text, status = text
];
  
AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_checked", "status"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsResultTable, AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsParamsType);


AdvancedContentChecksContent_idQuality_assuranceReadabilityResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/readability?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedContentChecksContent_idQuality_assuranceReadabilityParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get detailed information of the readability scores of the content for the various metrics"
    ];

AdvancedContentChecksContent_idQuality_assuranceReadabilityCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceReadabilityResultTable, AdvancedContentChecksContent_idQuality_assuranceReadabilityParamsType);


AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/spelling/languages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the languages found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultType = type table [
	language_code = text, percentage = number, spelling_support = logical
];
  
AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"spelling_support"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesResultTable, AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesParamsType);


AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/spelling/misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the misspellings found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultType = type table [
	id = number, preferred = text, suggestions = list, word = text
];
  
AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsResultTable, AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsParamsType);


AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/quality_assurance/spelling/potential_misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get the potential misspellings found in the content"
    ];

AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultType = type table [
	id = number, preferred = text, suggestions = list, word = text
];
  
AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsCall = Value.ReplaceType(AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsResultTable, AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsParamsType);


AdvancedContentChecksContent_idSeov2IssuesResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/seov2/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedContentChecksContent_idSeov2IssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedContentChecksContent_idSeov2IssuesParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get a list of SEO issues found in the content"
    ];

AdvancedContentChecksContent_idSeov2IssuesResultType = type table [
	complexity = text, issue_name = text, issue_type = text, occurrences = number, seo_points_gained = number, seo_points_to_gain = number, _siteimprove = record
];
  
AdvancedContentChecksContent_idSeov2IssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedContentChecksContent_idSeov2IssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedContentChecksContent_idSeov2IssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"complexity", "issue_type", "occurrences", "seo_points_gained", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedContentChecksContent_idSeov2IssuesCall = Value.ReplaceType(AdvancedContentChecksContent_idSeov2IssuesResultTable, AdvancedContentChecksContent_idSeov2IssuesParamsType);


AdvancedContentChecksContent_idSummaryResultTable = (
		content_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/content/checks/" & Text.From(content_id) & "/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedContentChecksContent_idSummaryParamsType = type function (
	content_id as (type number meta [
        Documentation.FieldCaption = "content_id",
        Documentation.FieldDescription = "The content id returned when the content was uploaded"
    ]))
    as table meta [
        Documentation.Name = "Get a summary of the findings of the content check"
    ];

AdvancedContentChecksContent_idSummaryCall = Value.ReplaceType(AdvancedContentChecksContent_idSummaryResultTable, AdvancedContentChecksContent_idSummaryParamsType);


AdvancedSitesSite_idContentCheckPageResultTable = (
		site_id as number, url as text, optional group_id as number) =>
    let
        url = if url = null then "" else "&url=" & Uri.EscapeDataString(url),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ url, group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/check/page?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idContentCheckPageParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
url as (type text meta [
        Documentation.FieldCaption = "url",
        Documentation.FieldDescription = "Url of the page"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get check status for a page via Url"
    ];

AdvancedSitesSite_idContentCheckPageCall = Value.ReplaceType(AdvancedSitesSite_idContentCheckPageResultTable, AdvancedSitesSite_idContentCheckPageParamsType);


AdvancedSitesSite_idContentCheckPagePage_idResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/check/page/" & Text.From(page_id) & "?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idContentCheckPagePage_idParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get check status for a page via page id"
    ];

AdvancedSitesSite_idContentCheckPagePage_idCall = Value.ReplaceType(AdvancedSitesSite_idContentCheckPagePage_idResultTable, AdvancedSitesSite_idContentCheckPagePage_idParamsType);


AdvancedSitesSite_idContentCrawlResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/crawl?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idContentCrawlParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get crawl status for a site"
    ];

AdvancedSitesSite_idContentCrawlCall = Value.ReplaceType(AdvancedSitesSite_idContentCrawlResultTable, AdvancedSitesSite_idContentCrawlParamsType);


AdvancedSitesSite_idContentPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional search_in as text, optional url as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
url = if url = null then "" else "&url=" & Uri.EscapeDataString(url),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, search_in, url, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idContentPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idContentPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]), 
optional url as (type text meta [
        Documentation.FieldCaption = "url",
        Documentation.FieldDescription = "Url of the page"
    ]))
    as table meta [
        Documentation.Name = "Get list of pages for a site"
    ];

AdvancedSitesSite_idContentPagesResultType = type table [
	id = number, title = text, url = text
];
  
AdvancedSitesSite_idContentPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idContentPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idContentPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idContentPagesCall = Value.ReplaceType(AdvancedSitesSite_idContentPagesResultTable, AdvancedSitesSite_idContentPagesParamsType);


AdvancedSitesSite_idContentPagesPage_idResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/pages/" & Text.From(page_id) & "?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idContentPagesPage_idParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get page details for page"
    ];

AdvancedSitesSite_idContentPagesPage_idCall = Value.ReplaceType(AdvancedSitesSite_idContentPagesPage_idResultTable, AdvancedSitesSite_idContentPagesPage_idParamsType);


AdvancedSitesSite_idContentPagesPage_idUnpublish_impactResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/content/pages/" & Text.From(page_id) & "/unpublish_impact?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idContentPagesPage_idUnpublish_impactParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get unpublishing impact for a page"
    ];

AdvancedSitesSite_idContentPagesPage_idUnpublish_impactCall = Value.ReplaceType(AdvancedSitesSite_idContentPagesPage_idUnpublish_impactResultTable, AdvancedSitesSite_idContentPagesPage_idUnpublish_impactParamsType);


GetAdvancedContentNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get a list of accessibility issues for the specified content", "/content/checks/{content_id}/accessibility/issues", AdvancedContentChecksContent_idAccessibilityIssuesCall, "Function", "Function", true }, 
{ "Get issue found for this page", "/content/checks/{content_id}/issues", AdvancedContentChecksContent_idIssuesCall, "Function", "Function", true }, 
{ "Get the matching policies for the content", "/content/checks/{content_id}/policy/matching_policies", AdvancedContentChecksContent_idPolicyMatching_policiesCall, "Function", "Function", true }, 
{ "Get the capture tags found in the content", "/content/checks/{content_id}/quality_assurance/inventory/capture_tags", AdvancedContentChecksContent_idQuality_assuranceInventoryCapture_tagsCall, "Function", "Function", true }, 
{ "Get the email addresses found in the content", "/content/checks/{content_id}/quality_assurance/inventory/email_addresses", AdvancedContentChecksContent_idQuality_assuranceInventoryEmail_addressesCall, "Function", "Function", true }, 
{ "Get the link texts found in the content", "/content/checks/{content_id}/quality_assurance/inventory/link_texts", AdvancedContentChecksContent_idQuality_assuranceInventoryLink_textsCall, "Function", "Function", true }, 
{ "Get the links found in the content", "/content/checks/{content_id}/quality_assurance/inventory/links", AdvancedContentChecksContent_idQuality_assuranceInventoryLinksCall, "Function", "Function", true }, 
{ "Get the meta tags found in the content", "/content/checks/{content_id}/quality_assurance/inventory/meta_tags", AdvancedContentChecksContent_idQuality_assuranceInventoryMeta_tagsCall, "Function", "Function", true }, 
{ "Get the personal id numbers found in the content", "/content/checks/{content_id}/quality_assurance/inventory/personal_id_numbers", AdvancedContentChecksContent_idQuality_assuranceInventoryPersonal_id_numbersCall, "Function", "Function", true }, 
{ "Get the phone numbers found in the content", "/content/checks/{content_id}/quality_assurance/inventory/phone_numbers", AdvancedContentChecksContent_idQuality_assuranceInventoryPhone_numbersCall, "Function", "Function", true }, 
{ "Get the trademarks found in the content", "/content/checks/{content_id}/quality_assurance/inventory/trademarks", AdvancedContentChecksContent_idQuality_assuranceInventoryTrademarksCall, "Function", "Function", true }, 
{ "Get the broken links found in the content", "/content/checks/{content_id}/quality_assurance/links/broken_links", AdvancedContentChecksContent_idQuality_assuranceLinksBroken_linksCall, "Function", "Function", true }, 
{ "Get the list of links to unsafe domains found in the content", "/content/checks/{content_id}/quality_assurance/links/unsafe_domains", AdvancedContentChecksContent_idQuality_assuranceLinksUnsafe_domainsCall, "Function", "Function", true }, 
{ "Get detailed information of the readability scores of the content for the various metrics", "/content/checks/{content_id}/quality_assurance/readability", AdvancedContentChecksContent_idQuality_assuranceReadabilityCall, "Function", "Function", true }, 
{ "Get the languages found in the content", "/content/checks/{content_id}/quality_assurance/spelling/languages", AdvancedContentChecksContent_idQuality_assuranceSpellingLanguagesCall, "Function", "Function", true }, 
{ "Get the misspellings found in the content", "/content/checks/{content_id}/quality_assurance/spelling/misspellings", AdvancedContentChecksContent_idQuality_assuranceSpellingMisspellingsCall, "Function", "Function", true }, 
{ "Get the potential misspellings found in the content", "/content/checks/{content_id}/quality_assurance/spelling/potential_misspellings", AdvancedContentChecksContent_idQuality_assuranceSpellingPotential_misspellingsCall, "Function", "Function", true }, 
{ "Get a list of SEO issues found in the content", "/content/checks/{content_id}/seov2/issues", AdvancedContentChecksContent_idSeov2IssuesCall, "Function", "Function", true }, 
{ "Get a summary of the findings of the content check", "/content/checks/{content_id}/summary", AdvancedContentChecksContent_idSummaryCall, "Function", "Function", true }, 
{ "Get check status for a page via Url", "/sites/{site_id}/content/check/page", AdvancedSitesSite_idContentCheckPageCall, "Function", "Function", true }, 
{ "Get check status for a page via page id", "/sites/{site_id}/content/check/page/{page_id}", AdvancedSitesSite_idContentCheckPagePage_idCall, "Function", "Function", true }, 
{ "Get crawl status for a site", "/sites/{site_id}/content/crawl", AdvancedSitesSite_idContentCrawlCall, "Function", "Function", true }, 
{ "Get list of pages for a site", "/sites/{site_id}/content/pages", AdvancedSitesSite_idContentPagesCall, "Function", "Function", true }, 
{ "Get page details for page", "/sites/{site_id}/content/pages/{page_id}", AdvancedSitesSite_idContentPagesPage_idCall, "Function", "Function", true }, 
{ "Get unpublishing impact for a page", "/sites/{site_id}/content/pages/{page_id}/unpublish_impact", AdvancedSitesSite_idContentPagesPage_idUnpublish_impactCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedGdprDomains_and_ip_addressesDomainsResultTable = (
		optional domain_status as text, optional is_top_level as logical, optional query as text) =>
    let
        domain_status = if domain_status = null then "" else "&domain_status=" & Uri.EscapeDataString(domain_status),
is_top_level = if is_top_level = null then "" else "&is_top_level=" & Uri.EscapeDataString(Text.From(is_top_level)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ domain_status, is_top_level, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/gdpr/domains_and_ip_addresses/domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedGdprDomains_and_ip_addressesDomainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedGdprDomains_and_ip_addressesDomainsParamsType = type function (
	optional domain_status as (type text meta [
        Documentation.FieldCaption = "domain_status",
        Documentation.FieldDescription = "Domain status to show confirmed, uncertain or rejected domains."
    ]), 
optional is_top_level as (type logical meta [
        Documentation.FieldCaption = "is_top_level",
        Documentation.FieldDescription = "True for ""a.com"" and ""b.co.uk"" but false for ""c.d.com"" and ""e.f.co.uk""."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get GDPR-info for all domains"
    ];

AdvancedGdprDomains_and_ip_addressesDomainsResultType = type table [
	id = number, domain_name = text, organisation = text, registrant = text
];
  
AdvancedGdprDomains_and_ip_addressesDomainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedGdprDomains_and_ip_addressesDomainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedGdprDomains_and_ip_addressesDomainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedGdprDomains_and_ip_addressesDomainsCall = Value.ReplaceType(AdvancedGdprDomains_and_ip_addressesDomainsResultTable, AdvancedGdprDomains_and_ip_addressesDomainsParamsType);


AdvancedGdprDomains_and_ip_addressesDomainsDomain_idResultTable = (
		domain_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/gdpr/domains_and_ip_addresses/domains/" & Text.From(domain_id) & "?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedGdprDomains_and_ip_addressesDomainsDomain_idParamsType = type function (
	domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]))
    as table meta [
        Documentation.Name = "Get GDPR-information for a specific domain"
    ];

AdvancedGdprDomains_and_ip_addressesDomainsDomain_idCall = Value.ReplaceType(AdvancedGdprDomains_and_ip_addressesDomainsDomain_idResultTable, AdvancedGdprDomains_and_ip_addressesDomainsDomain_idParamsType);


AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultTable = (
		domain_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/gdpr/domains_and_ip_addresses/domains/" & Text.From(domain_id) & "/subdomains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsParamsType = type function (
	domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]))
    as table meta [
        Documentation.Name = "Get GDPR-information about subdomains"
    ];

AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultType = type table [
	id = number, redirect_domain_name = text, redirect_id = number, subdomain_name = text
];
  
AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsCall = Value.ReplaceType(AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsResultTable, AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsParamsType);


GetAdvancedGDPRNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get GDPR-info for all domains", "/gdpr/domains_and_ip_addresses/domains", AdvancedGdprDomains_and_ip_addressesDomainsCall, "Function", "Function", true }, 
{ "Get GDPR-information for a specific domain", "/gdpr/domains_and_ip_addresses/domains/{domain_id}", AdvancedGdprDomains_and_ip_addressesDomainsDomain_idCall, "Function", "Function", true }, 
{ "Get GDPR-information about subdomains", "/gdpr/domains_and_ip_addresses/domains/{domain_id}/subdomains", AdvancedGdprDomains_and_ip_addressesDomainsDomain_idSubdomainsCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedIntegrationsProject_managementIssuesResultTable = (
		optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/integrations/project_management/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedIntegrationsProject_managementIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedIntegrationsProject_managementIssuesParamsType = type function (
	optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "List issues created for external project management systems"
    ];

AdvancedIntegrationsProject_managementIssuesResultType = type table [
	id = number, accessibility = record, accessibility_page = record, created_by = text, created_time = text, issuetracker_connection = text, issuetracker_user = text, jira_id = text, jira_view_url = text, module = text, policy = record, policypage = record
];
  
AdvancedIntegrationsProject_managementIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedIntegrationsProject_managementIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedIntegrationsProject_managementIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "created_time"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedIntegrationsProject_managementIssuesCall = Value.ReplaceType(AdvancedIntegrationsProject_managementIssuesResultTable, AdvancedIntegrationsProject_managementIssuesParamsType);


AdvancedIntegrationsProject_managementIssuesIssue_idResultTable = (
		issue_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/integrations/project_management/issues/" & Text.From(issue_id) & "?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedIntegrationsProject_managementIssuesIssue_idParamsType = type function (
	issue_id as (type number meta [
        Documentation.FieldCaption = "issue_id",
        Documentation.FieldDescription = "Id of the issue to display"
    ]))
    as table meta [
        Documentation.Name = "Show data for a single issue"
    ];

AdvancedIntegrationsProject_managementIssuesIssue_idCall = Value.ReplaceType(AdvancedIntegrationsProject_managementIssuesIssue_idResultTable, AdvancedIntegrationsProject_managementIssuesIssue_idParamsType);


GetAdvancedIntegrationsNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "List issues created for external project management systems", "/integrations/project_management/issues", AdvancedIntegrationsProject_managementIssuesCall, "Function", "Function", true }, 
{ "Show data for a single issue", "/integrations/project_management/issues/{issue_id}", AdvancedIntegrationsProject_managementIssuesIssue_idCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSettingsResultTable = (
		) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/settings?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSettingsParamsType = type function (
	)
    as table meta [
        Documentation.Name = "Get settings"
    ];

AdvancedSettingsCall = Value.ReplaceType(AdvancedSettingsResultTable, AdvancedSettingsParamsType);


AdvancedSettingsContent_checkingResultTable = (
		) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/settings/content_checking?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSettingsContent_checkingParamsType = type function (
	)
    as table meta [
        Documentation.Name = "Get content-check settings"
    ];

AdvancedSettingsContent_checkingCall = Value.ReplaceType(AdvancedSettingsContent_checkingResultTable, AdvancedSettingsContent_checkingParamsType);


AdvancedSettingsSurveysResultTable = (
		optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/settings/surveys?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSettingsSurveysResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSettingsSurveysParamsType = type function (
	optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get surveys"
    ];

AdvancedSettingsSurveysResultType = type table [
	id = number, name = text, is_active = logical, priority = number, start_date = text, end_date = text
];
  
AdvancedSettingsSurveysResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSettingsSurveysResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSettingsSurveysResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_active", "priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSettingsSurveysCall = Value.ReplaceType(AdvancedSettingsSurveysResultTable, AdvancedSettingsSurveysParamsType);


AdvancedSettingsUsersResultTable = (
		optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/settings/users?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSettingsUsersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSettingsUsersParamsType = type function (
	optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get users"
    ];

AdvancedSettingsUsersResultType = type table [
	id = number, name = text, email = text, last_login = text, role = text, _siteimprove = record
];
  
AdvancedSettingsUsersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSettingsUsersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSettingsUsersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSettingsUsersCall = Value.ReplaceType(AdvancedSettingsUsersResultTable, AdvancedSettingsUsersParamsType);


AdvancedSitesResultTable = (
		optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesParamsType = type function (
	optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get sites"
    ];

AdvancedSitesResultType = type table [
	id = number, site_name = text, url = text, pages = number, policies = number, product = list, visits = number
];
  
AdvancedSitesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesCall = Value.ReplaceType(AdvancedSitesResultTable, AdvancedSitesParamsType);


AdvancedSitesSite_idResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get list of top level endpoints for site"
    ];

AdvancedSitesSite_idCall = Value.ReplaceType(AdvancedSitesSite_idResultTable, AdvancedSitesSite_idParamsType);


AdvancedSitesSite_idDciHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/dci/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idDciHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idDciHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get history."
    ];

AdvancedSitesSite_idDciHistoryResultType = type table [
	accessibility_score = number, dci_score = number, qa_score = number, seo_score = number, timestamp = text
];
  
AdvancedSitesSite_idDciHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idDciHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idDciHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"accessibility_score", "dci_score", "qa_score", "seo_score", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idDciHistoryCall = Value.ReplaceType(AdvancedSitesSite_idDciHistoryResultTable, AdvancedSitesSite_idDciHistoryParamsType);


AdvancedSitesSite_idDciOverviewResultTable = (
		site_id as number, optional group_id as number, optional page_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/dci/overview?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idDciOverviewParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get DCI scores"
    ];

AdvancedSitesSite_idDciOverviewCall = Value.ReplaceType(AdvancedSitesSite_idDciOverviewResultTable, AdvancedSitesSite_idDciOverviewParamsType);


AdvancedUtilizationResultTable = (
		) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/utilization?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedUtilizationParamsType = type function (
	)
    as table meta [
        Documentation.Name = "Get the utilizations of the account"
    ];

AdvancedUtilizationCall = Value.ReplaceType(AdvancedUtilizationResultTable, AdvancedUtilizationParamsType);


GetAdvancedGeneralNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get settings", "/settings", AdvancedSettingsCall, "Function", "Function", true }, 
{ "Get content-check settings", "/settings/content_checking", AdvancedSettingsContent_checkingCall, "Function", "Function", true }, 
{ "Get surveys", "/settings/surveys", AdvancedSettingsSurveysCall, "Function", "Function", true }, 
{ "Get users", "/settings/users", AdvancedSettingsUsersCall, "Function", "Function", true }, 
{ "Get sites", "/sites", AdvancedSitesCall, "Function", "Function", true }, 
{ "Get list of top level endpoints for site", "/sites/{site_id}", AdvancedSitesSite_idCall, "Function", "Function", true }, 
{ "Get history.", "/sites/{site_id}/dci/history", AdvancedSitesSite_idDciHistoryCall, "Function", "Function", true }, 
{ "Get DCI scores", "/sites/{site_id}/dci/overview", AdvancedSitesSite_idDciOverviewCall, "Function", "Function", true }, 
{ "Get the utilizations of the account", "/utilization", AdvancedUtilizationCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSettingsAnalyticsSegmentsResultTable = (
		optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/settings/analytics/segments?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSettingsAnalyticsSegmentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSettingsAnalyticsSegmentsParamsType = type function (
	optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get available segments"
    ];

AdvancedSettingsAnalyticsSegmentsResultType = type table [
	id = number, name = text, created_by = text, created_time = text, note = text, private = logical, segments = record, used_in_reports = number
];
  
AdvancedSettingsAnalyticsSegmentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSettingsAnalyticsSegmentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSettingsAnalyticsSegmentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "created_time", "private", "used_in_reports"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSettingsAnalyticsSegmentsCall = Value.ReplaceType(AdvancedSettingsAnalyticsSegmentsResultTable, AdvancedSettingsAnalyticsSegmentsParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visit_depth?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get visit depth from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultType = type table [
	page_views_per_visit = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultType)
		, addedKey = Table.AddKey(appliedSchema, {"page_views_per_visit"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisit_depthResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_depthParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visit_depth/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data of visit depth from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultType = type table [
	page_views_average = number, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"page_views_average", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visit_length?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get visit length from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultType = type table [
	visit_duration_in_minutes = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultType)
		, addedKey = Table.AddKey(appliedSchema, {"visit_duration_in_minutes"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visit_length/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data of visit length from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultType = type table [
	timestamp = text, visit_duration_average_in_minutes = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visit_duration_average_in_minutes"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visits_by_hour?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get visits by hour of the day from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultType = type table [
	average_page_views_per_visit = number, hour_of_day = number, page_views = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultType)
		, addedKey = Table.AddKey(appliedSchema, {"average_page_views_per_visit", "hour_of_day"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visits_by_monthday?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get visits by day of the month from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultType = type table [
	average_page_views_per_visit = number, day_of_month = number, page_views = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultType)
		, addedKey = Table.AddKey(appliedSchema, {"average_page_views_per_visit", "day_of_month"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayParamsType);


AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/behavior/visits_by_weekday?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get visits by weekday from behavior"
    ];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultType = type table [
	average_page_views_per_visit = number, day_of_week = number, page_views = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultType)
		, addedKey = Table.AddKey(appliedSchema, {"average_page_views_per_visit", "day_of_week"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayResultTable, AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayParamsType);


AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultTable = (
		site_id as number, name_id as number, source_id as number, medium_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/combinations/" & Text.From(name_id) & "/" & Text.From(source_id) & "/" & Text.From(medium_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
name_id as (type number meta [
        Documentation.FieldCaption = "name_id",
        Documentation.FieldDescription = "Id for specific campaign name"
    ]), 
source_id as (type number meta [
        Documentation.FieldCaption = "source_id",
        Documentation.FieldDescription = "Id for specific campaign source"
    ]), 
medium_id as (type number meta [
        Documentation.FieldCaption = "medium_id",
        Documentation.FieldDescription = "Id for specific campaign medium"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for the specific campaign combination"
    ];

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryResultTable, AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultTable = (
		site_id as number, name_id as number, source_id as number, medium_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/combinations/" & Text.From(name_id) & "/" & Text.From(source_id) & "/" & Text.From(medium_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
name_id as (type number meta [
        Documentation.FieldCaption = "name_id",
        Documentation.FieldDescription = "Id for specific campaign name"
    ]), 
source_id as (type number meta [
        Documentation.FieldCaption = "source_id",
        Documentation.FieldDescription = "Id for specific campaign source"
    ]), 
medium_id as (type number meta [
        Documentation.FieldCaption = "medium_id",
        Documentation.FieldDescription = "Id for specific campaign medium"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get the pages visited by the specific campaign combination"
    ];

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesResultTable, AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesParamsType);


AdvancedSitesSite_idAnalyticsCampaignsContentsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/contents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsContentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsContentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get contents from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsContentsResultType = type table [
	bounce_rate = number, content = text, pages = number, parameter_name_id = number, parameter_value_id = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsContentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsContentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsContentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "parameter_name_id", "parameter_value_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsContentsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsContentsResultTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/contents/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get content details from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultType = type table [
	name = text, bounce_rate = number, medium = text, source = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/contents/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific content from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryResultTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/contents/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get pages related to specific content from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesResultTable, AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesParamsType);


AdvancedSitesSite_idAnalyticsCampaignsMediumsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/mediums?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsMediumsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsMediumsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get mediums from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsMediumsResultType = type table [
	bounce_rate = number, medium = text, pages = number, parameter_name_id = number, parameter_value_id = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsMediumsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsMediumsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsMediumsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "parameter_name_id", "parameter_value_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsMediumsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsMediumsResultTable, AdvancedSitesSite_idAnalyticsCampaignsMediumsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/mediums/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get medium details from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultType = type table [
	name = text, bounce_rate = number, source = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsNamesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/names?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsNamesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsNamesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get names from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsNamesResultType = type table [
	name = text, bounce_rate = number, pages = number, parameter_name_id = number, parameter_value_id = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsNamesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsNamesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsNamesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "parameter_name_id", "parameter_value_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsNamesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsNamesResultTable, AdvancedSitesSite_idAnalyticsCampaignsNamesParamsType);


AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/names/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get name details from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultType = type table [
	bounce_rate = number, medium = text, source = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsPagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsPagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsCampaignsPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsPagesResultTable, AdvancedSitesSite_idAnalyticsCampaignsPagesParamsType);


AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/pages/" & Text.From(page_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get details for specific page from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultType = type table [
	name = text, bounce_rate = number, medium = text, source = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for a specific page in campagins"
    ];

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsCampaignsSourcesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/sources?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsSourcesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsSourcesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get sources from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsSourcesResultType = type table [
	bounce_rate = number, pages = number, parameter_name_id = number, parameter_value_id = number, source = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsSourcesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsSourcesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsSourcesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "parameter_name_id", "parameter_value_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsSourcesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsSourcesResultTable, AdvancedSitesSite_idAnalyticsCampaignsSourcesParamsType);


AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/sources/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get source details from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultType = type table [
	name = text, bounce_rate = number, medium = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsSummaryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/summary?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsSummaryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get summary of campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsSummaryResultType = type table [
	name = text, bounce_rate = number, medium = text, pages = number, source = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsSummaryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsSummaryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsSummaryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsSummaryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsSummaryResultTable, AdvancedSitesSite_idAnalyticsCampaignsSummaryParamsType);


AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/summary/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get historical data of all campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultType = type table [
	bounce_rate = number, timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryResultTable, AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryParamsType);


AdvancedSitesSite_idAnalyticsCampaignsTermsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/terms?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsTermsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsTermsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get terms from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsTermsResultType = type table [
	bounce_rate = number, pages = number, parameter_name_id = number, parameter_value_id = number, term = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsTermsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsTermsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsTermsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "parameter_name_id", "parameter_value_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsTermsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsTermsResultTable, AdvancedSitesSite_idAnalyticsCampaignsTermsParamsType);


AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/campaigns/terms/" & Text.From(parameter_name_id) & "/" & Text.From(parameter_value_id) & "/details?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get term details from campaigns"
    ];

AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultType = type table [
	name = text, bounce_rate = number, medium = text, source = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsResultTable, AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsContentAll_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/all_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentAll_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentAll_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get all pages from content"
    ];

AdvancedSitesSite_idAnalyticsContentAll_pagesResultType = type table [
	id = number, title = text, url = text, average_page_views_per_visit = number, bounce_rate = number, cms_url = text, has_integration = logical, page_level = number, page_score = number, page_views = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentAll_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentAll_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentAll_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentAll_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentAll_pagesResultTable, AdvancedSitesSite_idAnalyticsContentAll_pagesParamsType);


AdvancedSitesSite_idAnalyticsContentEntry_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/entry_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentEntry_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentEntry_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get entry pages from content"
    ];

AdvancedSitesSite_idAnalyticsContentEntry_pagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, entries = number, has_integration = logical, page_level = number, page_score = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentEntry_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentEntry_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentEntry_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentEntry_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentEntry_pagesResultTable, AdvancedSitesSite_idAnalyticsContentEntry_pagesParamsType);


AdvancedSitesSite_idAnalyticsContentExit_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/exit_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentExit_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentExit_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get exit pages from content"
    ];

AdvancedSitesSite_idAnalyticsContentExit_pagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, exits = number, has_integration = logical, page_level = number, page_score = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentExit_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentExit_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentExit_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentExit_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentExit_pagesResultTable, AdvancedSitesSite_idAnalyticsContentExit_pagesParamsType);


AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/least_popular_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get least popular pages from content"
    ];

AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, has_integration = logical, last_visited = text, page_level = number, page_score = number, page_views = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration", "last_visited"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesResultTable, AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesParamsType);


AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/most_popular_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentMost_popular_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get most popular pages from content"
    ];

AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultType = type table [
	id = number, title = text, url = text, average_page_views_per_visit = number, bounce_rate = number, cms_url = text, has_integration = logical, last_visited = text, page_level = number, page_score = number, page_views = number, rank = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration", "last_visited", "rank"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentMost_popular_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentMost_popular_pagesResultTable, AdvancedSitesSite_idAnalyticsContentMost_popular_pagesParamsType);


AdvancedSitesSite_idAnalyticsContentNavigation_depthResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/navigation_depth?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentNavigation_depthResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentNavigation_depthParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get navigation depth from content"
    ];

AdvancedSitesSite_idAnalyticsContentNavigation_depthResultType = type table [
	id = number, title = text, url = text, average_clicks = number, cms_url = text, has_integration = logical, page_level = number, page_score = number, page_views = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentNavigation_depthResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentNavigation_depthResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentNavigation_depthResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentNavigation_depthCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentNavigation_depthResultTable, AdvancedSitesSite_idAnalyticsContentNavigation_depthParamsType);


AdvancedSitesSite_idAnalyticsContentOutbound_linksResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/outbound_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentOutbound_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentOutbound_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get outbound links from content"
    ];

AdvancedSitesSite_idAnalyticsContentOutbound_linksResultType = type table [
	id = number, title = text, url = text, cms_url = text, pages = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentOutbound_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentOutbound_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentOutbound_linksCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentOutbound_linksResultTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksParamsType);


AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultTable = (
		site_id as number, outbound_link_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/outbound_links/" & Text.From(outbound_link_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
outbound_link_id as (type number meta [
        Documentation.FieldCaption = "outbound_link_id",
        Documentation.FieldDescription = "Id for specific outbound link/URL."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific outbound link from content"
    ];

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryResultTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultTable = (
		site_id as number, outbound_link_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/outbound_links/" & Text.From(outbound_link_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
outbound_link_id as (type number meta [
        Documentation.FieldCaption = "outbound_link_id",
        Documentation.FieldDescription = "Id for specific outbound link/URL."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get pages for specific outbound link from content"
    ];

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesResultTable, AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesParamsType);


AdvancedSitesSite_idAnalyticsContentPage_load_timeResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/page_load_time?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentPage_load_timeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentPage_load_timeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get page load time from content"
    ];

AdvancedSitesSite_idAnalyticsContentPage_load_timeResultType = type table [
	id = number, title = text, url = text, average_page_load_time = number, cms_url = text, has_integration = logical, page_level = number, page_score = number, page_views = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentPage_load_timeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentPage_load_timeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentPage_load_timeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentPage_load_timeCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentPage_load_timeResultTable, AdvancedSitesSite_idAnalyticsContentPage_load_timeParamsType);


AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/pages_without_visits?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentPages_without_visitsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages without visits from content"
    ];

AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultType = type table [
	id = number, title = text, url = text, cms_url = text, has_integration = logical, last_visited = text, page_level = number, page_score = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration", "last_visited"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentPages_without_visitsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentPages_without_visitsResultTable, AdvancedSitesSite_idAnalyticsContentPages_without_visitsParamsType);


AdvancedSitesSite_idAnalyticsContentParametersResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Filter the parameter names (applied as \*[query]\*)."
    ]))
    as table meta [
        Documentation.Name = "Get parameters from content"
    ];

AdvancedSitesSite_idAnalyticsContentParametersResultType = type table [
	id = number, name = text, page_views = number, pages = number, parameter_type = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsContentParametersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersResultTable, AdvancedSitesSite_idAnalyticsContentParametersParamsType);


AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultTable = (
		site_id as number, parameter_name_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters/" & Text.From(parameter_name_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific parameter from content"
    ];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryResultTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultTable = (
		site_id as number, parameter_name_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters/" & Text.From(parameter_name_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for specific parameter from content"
    ];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesResultTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesParamsType);


AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultTable = (
		site_id as number, parameter_name_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters/" & Text.From(parameter_name_id) & "/values?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Filter the values (applied as \*[query]\*)."
    ]))
    as table meta [
        Documentation.Name = "Get values for specific parameter from content"
    ];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultType = type table [
	id = number, pages = number, value = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesResultTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParamsType);


AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters/" & Text.From(parameter_name_id) & "/values/" & Text.From(parameter_value_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific parameter value from campaigns"
    ];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryResultTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultTable = (
		site_id as number, parameter_name_id as number, parameter_value_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/content/parameters/" & Text.From(parameter_name_id) & "/values/" & Text.From(parameter_value_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
parameter_name_id as (type number meta [
        Documentation.FieldCaption = "parameter_name_id",
        Documentation.FieldDescription = "Id for specific parameter name."
    ]), 
parameter_value_id as (type number meta [
        Documentation.FieldCaption = "parameter_value_id",
        Documentation.FieldDescription = "Id for specific parameter value."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for specific parameter value from content"
    ];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesResultTable, AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesParamsType);


AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/entries_exits/bounce_rates?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get bounce rates from entries and exits"
    ];

AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, bounces = number, cms_url = text, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "bounces"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesResultTable, AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesParamsType);


AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/entries_exits/entry_exit_rates?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get entry and exit rates from entries and exits"
    ];

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, bounces = number, cms_url = text, entries = number, entry_rate = number, exit_rate = number, exits = number, last_outbound_link_clicks = number, last_outbound_link_rate = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "bounces", "entries", "exits", "last_outbound_link_clicks"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesResultTable, AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesParamsType);


AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/entries_exits/entry_exit_rates/" & Text.From(page_id) & "/last_outbound_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get last outbound links for specific exit page from entries and exits"
    ];

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultType = type table [
	id = number, title = text, url = text, clicks = number, cms_url = text, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksResultTable, AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/actions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingActionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get actions from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultType = type table [
	id = number, action = text, category = text, events = number, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingActionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingActionsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingActionsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/categories?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get categories from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultType = type table [
	id = number, category = text, events = number, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultTable = (
		site_id as number, category_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/categories/" & Text.From(category_id) & "/actions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
category_id as (type number meta [
        Documentation.FieldCaption = "category_id",
        Documentation.FieldDescription = "Id of a specific category."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get actions for specific category from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultType = type table [
	id = number, action = text, events = number, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultTable = (
		site_id as number, category_id as number, action_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/categories/" & Text.From(category_id) & "/actions/" & Text.From(action_id) & "/labels?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
category_id as (type number meta [
        Documentation.FieldCaption = "category_id",
        Documentation.FieldDescription = "Id of a specific category."
    ]), 
action_id as (type number meta [
        Documentation.FieldCaption = "action_id",
        Documentation.FieldDescription = "Id of a specific action."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get labels for specific pair of category and action from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultType = type table [
	id = number, events = number, label = text, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/events?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingEventsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get events from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultType = type table [
	id = number, action = text, category = text, events = number, label = text, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingEventsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/events/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get historical data for events from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultType = type table [
	event_count_per_visit = number, events = number, pages = number, timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"event_count_per_visit", "events", "pages", "timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultTable = (
		site_id as number, optional action_id as number, optional category_id as number, optional filter_id as number, optional group_id as number, optional label_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        action_id = if action_id = null then "" else "&action_id=" & Uri.EscapeDataString(Text.From(action_id)),
category_id = if category_id = null then "" else "&category_id=" & Uri.EscapeDataString(Text.From(category_id)),
filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
label_id = if label_id = null then "" else "&label_id=" & Uri.EscapeDataString(Text.From(label_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ action_id, category_id, filter_id, group_id, label_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/events/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional action_id as (type number meta [
        Documentation.FieldCaption = "action_id",
        Documentation.FieldDescription = "Id of a specific action."
    ]), 
optional category_id as (type number meta [
        Documentation.FieldCaption = "category_id",
        Documentation.FieldDescription = "Id of a specific category."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional label_id as (type number meta [
        Documentation.FieldCaption = "label_id",
        Documentation.FieldDescription = "Id of a specific label."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get pages for specific event from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, events = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/labels?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get labels from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultType = type table [
	id = number, events = number, label = text, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingLabelsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingLabelsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultTable = (
		site_id as number, label_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/labels/" & Text.From(label_id) & "/events?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
label_id as (type number meta [
        Documentation.FieldCaption = "label_id",
        Documentation.FieldDescription = "Id of a specific label."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get label details from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultType = type table [
	id = number, action = text, category = text, events = number, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, events = number, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingPagesResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/pages/" & Text.From(page_id) & "/events?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get event details for specific page from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultType = type table [
	id = number, action = text, category = text, events = number, label = text, pages = number
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsParamsType);


AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/event_tracking/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific page from event tracking"
    ];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultType = type table [
	events = number, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"events", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsInternal_searchesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_results as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_results = if search_results = null then "" else "&search_results=" & Uri.EscapeDataString(search_results),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, search_results, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/internal_searches?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsInternal_searchesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsInternal_searchesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_results as (type text meta [
        Documentation.FieldCaption = "search_results",
        Documentation.FieldDescription = "Filter to see either all search terms or only those that did or did not find a result."
    ]))
    as table meta [
        Documentation.Name = "Get internal searches"
    ];

AdvancedSitesSite_idAnalyticsInternal_searchesResultType = type table [
	id = number, pages = number, search_exits = number, search_result_average = number, search_term = text, searches = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsInternal_searchesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsInternal_searchesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsInternal_searchesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages", "search_result_average"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsInternal_searchesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsInternal_searchesResultTable, AdvancedSitesSite_idAnalyticsInternal_searchesParamsType);


AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_results as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_results = if search_results = null then "" else "&search_results=" & Uri.EscapeDataString(search_results),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, search_results, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/internal_searches/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsInternal_searchesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_results as (type text meta [
        Documentation.FieldCaption = "search_results",
        Documentation.FieldDescription = "Filter to see either all search terms or only those that did or did not find a result."
    ]))
    as table meta [
        Documentation.Name = "Get historical data from internal searches"
    ];

AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultType = type table [
	search_exits = number, searches = number, timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsInternal_searchesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsInternal_searchesHistoryResultTable, AdvancedSitesSite_idAnalyticsInternal_searchesHistoryParamsType);


AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultTable = (
		site_id as number, search_term_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/internal_searches/search_terms/" & Text.From(search_term_id) & "/actions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_term_id as (type number meta [
        Documentation.FieldCaption = "search_term_id",
        Documentation.FieldDescription = "Id of a specific search term."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get actions for specific search term from internal searches"
    ];

AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultType = type table [
	id = number, title = text, url = text, cms_url = text, is_visitors_continued_in_another_tab = logical, searches = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_visitors_continued_in_another_tab"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsResultTable, AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsParamsType);


AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultTable = (
		site_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/keymetrics/categories?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsKeymetricsCategoriesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get categories"
    ];

AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultType = type table [
	id = number, name = text, completion_value = number, completions = number, completions_per_day = number, note = text, responsible = text
];
  
AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "completions"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsKeymetricsCategoriesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsKeymetricsCategoriesResultTable, AdvancedSitesSite_idAnalyticsKeymetricsCategoriesParamsType);


AdvancedSitesSite_idAnalyticsKeymetricsKpisResultTable = (
		site_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/keymetrics/kpis?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsKeymetricsKpisResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsKeymetricsKpisParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get Key Performance Indicators"
    ];

AdvancedSitesSite_idAnalyticsKeymetricsKpisResultType = type table [
	id = number, name = text, completion_value = number, completions = number, completions_per_day = number, pending_metrics = number, progress = record, responsible = text
];
  
AdvancedSitesSite_idAnalyticsKeymetricsKpisResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsKeymetricsKpisResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsKeymetricsKpisResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "completion_value", "completions"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsKeymetricsKpisCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsKeymetricsKpisResultTable, AdvancedSitesSite_idAnalyticsKeymetricsKpisParamsType);


AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultTable = (
		site_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/keymetrics/metrics?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsKeymetricsMetricsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get Key Metrics"
    ];

AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultType = type table [
	id = number, name = text, completion_value = number, completions = number, completions_per_day = number, pending = logical, progress = record
];
  
AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "completions", "pending"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsKeymetricsMetricsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsKeymetricsMetricsResultTable, AdvancedSitesSite_idAnalyticsKeymetricsMetricsParamsType);


AdvancedSitesSite_idAnalyticsOverviewGroupsResultTable = (
		site_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/groups?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsOverviewGroupsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsOverviewGroupsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get analytics groups"
    ];

AdvancedSitesSite_idAnalyticsOverviewGroupsResultType = type table [
	id = number, bounce_rate = number, group_name = text, page_views = number, users = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsOverviewGroupsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsOverviewGroupsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsOverviewGroupsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "users"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsOverviewGroupsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewGroupsResultTable, AdvancedSitesSite_idAnalyticsOverviewGroupsParamsType);


AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultTable = (
		site_id as number, group_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/groups/" & Text.From(group_id) & "/users?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get users for group from overview"
    ];

AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultType = type table [
	id = number, email = text, user = text
];
  
AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersResultTable, AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersParamsType);


AdvancedSitesSite_idAnalyticsOverviewHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsOverviewHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsOverviewHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data from overview"
    ];

AdvancedSitesSite_idAnalyticsOverviewHistoryResultType = type table [
	bounce_rate = number, new_visitors = number, page_views = number, returning_visitors = number, timestamp = text, unique_visitors = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsOverviewHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsOverviewHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsOverviewHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"new_visitors", "page_views", "returning_visitors", "timestamp", "unique_visitors", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsOverviewHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewHistoryResultTable, AdvancedSitesSite_idAnalyticsOverviewHistoryParamsType);


AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/online_visitors?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get online visitors from overview"
    ];

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultType = type table [
	id = number, city = text, country_code = text, country_name = text, last_page_view = text, organisation = text, page_views = number, region = text
];
  
AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_page_view", "page_views"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsResultTable, AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsParamsType);


AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsResultTable = (
		site_id as number, session_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/online_visitors/" & Text.From(session_id) & "/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
session_id as (type number meta [
        Documentation.FieldCaption = "session_id",
        Documentation.FieldDescription = "Id for specific session."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get details for online visitor from overview"
    ];

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsResultTable, AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsParamsType);


AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultTable = (
		site_id as number, session_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/online_visitors/" & Text.From(session_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
session_id as (type number meta [
        Documentation.FieldCaption = "session_id",
        Documentation.FieldDescription = "Id for specific session."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get pages for specific online visitor from overview"
    ];

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, has_integration = logical, last_page_view = text, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration", "last_page_view"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesResultTable, AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesParamsType);


AdvancedSitesSite_idAnalyticsOverviewSummaryResultTable = (
		site_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/overview/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idAnalyticsOverviewSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get summary for analytics"
    ];

AdvancedSitesSite_idAnalyticsOverviewSummaryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsOverviewSummaryResultTable, AdvancedSitesSite_idAnalyticsOverviewSummaryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/direct_traffic_entry_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get direct traffic from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, has_integration = logical, visits = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultTable = (
		site_id as number, page_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/direct_traffic_entry_pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for direct traffic from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get external referring domains from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultType = type table [
	id = number, bounce_rate = number, external_referring_domain = text, referring_pages = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultTable = (
		site_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_domains/" & Text.From(domain_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get referring pages from an external referring domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultType = type table [
	id = number, url = text, bounce_rate = number, pages = number, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get external referring pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultType = type table [
	id = number, url = text, bounce_rate = number, pages = number, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultTable = (
		site_id as number, external_page_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_pages/" & Text.From(external_page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
external_page_id as (type number meta [
        Documentation.FieldCaption = "external_page_id",
        Documentation.FieldDescription = "Id for specific external referring page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for external referring pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultTable = (
		site_id as number, external_page_id as number, optional filter_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_pages/" & Text.From(external_page_id) & "/landing_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
external_page_id as (type number meta [
        Documentation.FieldCaption = "external_page_id",
        Documentation.FieldDescription = "Id for specific external referring page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get landing pages from external referring pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, has_integration = logical, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultTable = (
		site_id as number, external_page_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_referring_pages/" & Text.From(external_page_id) & "/landing_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
external_page_id as (type number meta [
        Documentation.FieldCaption = "external_page_id",
        Documentation.FieldDescription = "Id for specific external referring page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for landing pages from external referring pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_search_terms?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get external search terms from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultType = type table [
	id = number, bounce_rate = number, external_search_term = text, pages = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultTable = (
		site_id as number, search_term_id as number, optional filter_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_search_terms/" & Text.From(search_term_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_term_id as (type number meta [
        Documentation.FieldCaption = "search_term_id",
        Documentation.FieldDescription = "Id of a specific search term."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for external search terms from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultTable = (
		site_id as number, search_term_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_search_terms/" & Text.From(search_term_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_term_id as (type number meta [
        Documentation.FieldCaption = "search_term_id",
        Documentation.FieldDescription = "Id of a specific search term."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get external search terms pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultType = type table [
	id = number, title = text, url = text, bounce_rate = number, cms_url = text, has_integration = logical, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "has_integration"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultTable = (
		site_id as number, search_term_id as number, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/external_search_terms/" & Text.From(search_term_id) & "/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_term_id as (type number meta [
        Documentation.FieldCaption = "search_term_id",
        Documentation.FieldDescription = "Id of a specific search term."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for external search terms pages from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get search engines from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultType = type table [
	id = number, pages = number, search_engine = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultTable = (
		site_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/domains/" & Text.From(domain_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for search engines from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultTable = (
		site_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/domains/" & Text.From(domain_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages visited by search engine domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultTable = (
		site_id as number, domain_id as number, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/domains/" & Text.From(domain_id) & "/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for search engines by domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultTable = (
		site_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/domains/" & Text.From(domain_id) & "/search_terms?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get search engine terms by domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultType = type table [
	id = number, search_term = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultTable = (
		site_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional search_term_id as number) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
search_term_id = if search_term_id = null then "" else "&search_term_id=" & Uri.EscapeDataString(Text.From(search_term_id)),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, search_term_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/domains/" & Text.From(domain_id) & "/search_terms/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional search_term_id as (type number meta [
        Documentation.FieldCaption = "search_term_id",
        Documentation.FieldDescription = "Id of a specific search term."
    ]))
    as table meta [
        Documentation.Name = "Get historical data for search engine terms by domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultTable = (
		site_id as number, search_engine_name as text, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/search_engine_names/" & search_engine_name & "/external_referring_domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_engine_name as (type text meta [
        Documentation.FieldCaption = "search_engine_name",
        Documentation.FieldDescription = "Name of search engine (ie. ""Google"" or  ""bing"" etc.)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get external referring domains by search engine name from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultType = type table [
	id = number, external_referring_domain = text, pages = number, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultTable = (
		site_id as number, search_engine_name as text, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/search_engine_names/" & search_engine_name & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_engine_name as (type text meta [
        Documentation.FieldCaption = "search_engine_name",
        Documentation.FieldDescription = "Name of search engine (ie. ""Google"" or  ""bing"" etc.)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for search engine terms by search engine name from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultTable = (
		site_id as number, search_engine_name as text, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/search_engine_names/" & search_engine_name & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_engine_name as (type text meta [
        Documentation.FieldCaption = "search_engine_name",
        Documentation.FieldDescription = "Name of search engine (ie. ""Google"" or  ""bing"" etc.)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages visited by search engine by name from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultTable = (
		site_id as number, search_engine_name as text, page_id as number, optional filter_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/search_engines/search_engine_names/" & search_engine_name & "/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
search_engine_name as (type text meta [
        Documentation.FieldCaption = "search_engine_name",
        Documentation.FieldDescription = "Name of search engine (ie. ""Google"" or  ""bing"" etc.)"
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for the pages visited by search engine by name from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get social media organisations from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultType = type table [
	id = number, organisation = text, pages = number, referrals = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages", "referrals"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultTable = (
		site_id as number, social_media_organisation_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get domains for social media organisation from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultType = type table [
	id = number, domain = text, pages = number, referrals = number, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultTable = (
		site_id as number, social_media_organisation_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains/" & Text.From(domain_id) & "/domain_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get links for specific social media organisation domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultType = type table [
	id = number, domain_link = text, referrals = number, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultTable = (
		site_id as number, social_media_organisation_id as number, domain_id as number, domain_link_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains/" & Text.From(domain_id) & "/domain_links/" & Text.From(domain_link_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
domain_link_id as (type number meta [
        Documentation.FieldCaption = "domain_link_id",
        Documentation.FieldDescription = "Id for specific domain link/URL."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific social media organisation domain link from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultTable = (
		site_id as number, social_media_organisation_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains/" & Text.From(domain_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific social media organisation domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultTable = (
		site_id as number, social_media_organisation_id as number, domain_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains/" & Text.From(domain_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for specific social media organisation domain from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, referrals = number, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultTable = (
		site_id as number, social_media_organisation_id as number, domain_id as number, page_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/domains/" & Text.From(domain_id) & "/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific social media organisation domain page from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultTable = (
		site_id as number, social_media_organisation_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific social media organisation from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultTable = (
		site_id as number, social_media_organisation_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text, optional search_in as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for specific social media organisation from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, referrals = number, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultTable = (
		site_id as number, social_media_organisation_id as number, page_id as number, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/social_media_organisations/" & Text.From(social_media_organisation_id) & "/pages/" & Text.From(page_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
social_media_organisation_id as (type number meta [
        Documentation.FieldCaption = "social_media_organisation_id",
        Documentation.FieldDescription = "Id for specific social media."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for specific social media organisation page from traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultType = type table [
	timestamp = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp", "visits"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/summary?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get an overview of traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultType = type table [
	bounce_rate = number, type = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"type"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryParamsType);


AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/traffic_sources/summary/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for traffic sources"
    ];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultType = type table [
	direct_traffic = number, external_referrer = number, search_domain = number, social_media = number, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"direct_traffic", "external_referrer", "search_domain", "social_media", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryResultTable, AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/browsers?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsBrowsersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get browsers from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultType = type table [
	bounce_rate = number, browser_name = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsBrowsersResultTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersParamsType);


AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultTable = (
		site_id as number, browser_name as text, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/browsers/browser_names/" & browser_name & "/versions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
browser_name as (type text meta [
        Documentation.FieldCaption = "browser_name",
        Documentation.FieldDescription = "Name of specific browser (ie. ""Chrome"", ""Firefox"" etc)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get versions for specific browser from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultType = type table [
	bounce_rate = number, browser_version = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsResultTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsParamsType);


AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultTable = (
		site_id as number, browser_name as text, optional filter_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/browsers/browser_names/" & browser_name & "/versions/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
browser_name as (type text meta [
        Documentation.FieldCaption = "browser_name",
        Documentation.FieldDescription = "Name of specific browser (ie. ""Chrome"", ""Firefox"" etc)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for a specific browsers versions from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryResultTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/browsers/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for browsers from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryResultTable, AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsCountriesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/countries?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsCountriesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsCountriesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get countries from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsCountriesResultType = type table [
	id = number, bounce_rate = number, country_code = text, country_name = text, is_region = logical, is_unknown = logical, regions = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsCountriesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsCountriesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_region", "is_unknown", "regions"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsCountriesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsCountriesResultTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesParamsType);


AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultTable = (
		site_id as number, country_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/countries/" & Text.From(country_id) & "/regions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
country_id as (type number meta [
        Documentation.FieldCaption = "country_id",
        Documentation.FieldDescription = "Id for specific country."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get regions of countries from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultType = type table [
	id = number, bounce_rate = number, is_unknown = logical, region = text, visits_of_parent = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_unknown"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsResultTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsParamsType);


AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultTable = (
		site_id as number, country_id as number, region_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/countries/" & Text.From(country_id) & "/regions/" & Text.From(region_id) & "/cities?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
country_id as (type number meta [
        Documentation.FieldCaption = "country_id",
        Documentation.FieldDescription = "Id for specific country."
    ]), 
region_id as (type number meta [
        Documentation.FieldCaption = "region_id",
        Documentation.FieldDescription = "Id for specific region."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get cities of regions of countries from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultType = type table [
	id = number, bounce_rate = number, city = text, visits_of_region = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesResultTable, AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesParamsType);


AdvancedSitesSite_idAnalyticsVisitorsDevicesResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/devices?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsDevicesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsDevicesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get devices from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsDevicesResultType = type table [
	bounce_rate = number, device_type = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsDevicesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsDevicesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsDevicesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsDevicesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsDevicesResultTable, AdvancedSitesSite_idAnalyticsVisitorsDevicesParamsType);


AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/devices/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for devices from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryResultTable, AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/operating_systems?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get operating systems from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultType = type table [
	bounce_rate = number, is_unknown = logical, os_family = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"is_unknown"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsResultTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/operating_systems/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for operating systems from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryResultTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultTable = (
		site_id as number, os_family as text, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/operating_systems/os_families/" & os_family & "/versions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
os_family as (type text meta [
        Documentation.FieldCaption = "os_family",
        Documentation.FieldDescription = "Name of specific OS (ie. ""Windows"", ""iOS"" etc)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get versions of operating systems from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultType = type table [
	bounce_rate = number, is_unknown = logical, os_version_name = text, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"is_unknown"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsResultTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultTable = (
		site_id as number, os_family as text, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/operating_systems/os_families/" & os_family & "/versions/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
os_family as (type text meta [
        Documentation.FieldCaption = "os_family",
        Documentation.FieldDescription = "Name of specific OS (ie. ""Windows"", ""iOS"" etc)"
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical data for a specific OS's versions from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryResultTable, AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional query as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/organisations?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get organisations from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultType = type table [
	id = number, ip_addresses = number, organisation = text, pages = number, visits = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "ip_addresses", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsResultTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultTable = (
		site_id as number, organisation_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/organisations/" & Text.From(organisation_id) & "/ip_addresses?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
organisation_id as (type number meta [
        Documentation.FieldCaption = "organisation_id",
        Documentation.FieldDescription = "Id for specific organisation."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get a list IP addresses for a specific organisation from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultType = type table [
	ip_address = text
];
  
AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesResultTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesParamsType);


AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultTable = (
		site_id as number, organisation_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/organisations/" & Text.From(organisation_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
organisation_id as (type number meta [
        Documentation.FieldCaption = "organisation_id",
        Documentation.FieldDescription = "Id for specific organisation."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get the pages visited by a specific organisation from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, last_visited = text, visits_of_parent = number, _siteimprove = record
];
  
AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_visited"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesResultTable, AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesParamsType);


AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultTable = (
		site_id as number, optional filter_id as number, optional group_id as number, optional page_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        filter_id = if filter_id = null then "" else "&filter_id=" & Uri.EscapeDataString(Text.From(filter_id)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ filter_id, group_id, page_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/analytics/visitors/screen_resolutions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional filter_id as (type number meta [
        Documentation.FieldCaption = "filter_id",
        Documentation.FieldDescription = "Id for specific filter."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get screen resolutions from visitors"
    ];

AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultType = type table [
	bounce_rate = number, height = number, is_unknown = logical, visits = number, width = number
];
  
AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"height", "is_unknown", "width"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsCall = Value.ReplaceType(AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsResultTable, AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsParamsType);


GetAdvancedAnalyticsNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get available segments", "/settings/analytics/segments", AdvancedSettingsAnalyticsSegmentsCall, "Function", "Function", true }, 
{ "Get visit depth from behavior", "/sites/{site_id}/analytics/behavior/visit_depth", AdvancedSitesSite_idAnalyticsBehaviorVisit_depthCall, "Function", "Function", true }, 
{ "Get historical data of visit depth from behavior", "/sites/{site_id}/analytics/behavior/visit_depth/history", AdvancedSitesSite_idAnalyticsBehaviorVisit_depthHistoryCall, "Function", "Function", true }, 
{ "Get visit length from behavior", "/sites/{site_id}/analytics/behavior/visit_length", AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthCall, "Function", "Function", true }, 
{ "Get historical data of visit length from behavior", "/sites/{site_id}/analytics/behavior/visit_length/history", AdvancedSitesSite_idAnalyticsBehaviorVisit_lengthHistoryCall, "Function", "Function", true }, 
{ "Get visits by hour of the day from behavior", "/sites/{site_id}/analytics/behavior/visits_by_hour", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_hourCall, "Function", "Function", true }, 
{ "Get visits by day of the month from behavior", "/sites/{site_id}/analytics/behavior/visits_by_monthday", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_monthdayCall, "Function", "Function", true }, 
{ "Get visits by weekday from behavior", "/sites/{site_id}/analytics/behavior/visits_by_weekday", AdvancedSitesSite_idAnalyticsBehaviorVisits_by_weekdayCall, "Function", "Function", true }, 
{ "Get historical data for the specific campaign combination", "/sites/{site_id}/analytics/campaigns/combinations/{name_id}/{source_id}/{medium_id}/history", AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idHistoryCall, "Function", "Function", true }, 
{ "Get the pages visited by the specific campaign combination", "/sites/{site_id}/analytics/campaigns/combinations/{name_id}/{source_id}/{medium_id}/pages", AdvancedSitesSite_idAnalyticsCampaignsCombinationsName_idSource_idMedium_idPagesCall, "Function", "Function", true }, 
{ "Get contents from campaigns", "/sites/{site_id}/analytics/campaigns/contents", AdvancedSitesSite_idAnalyticsCampaignsContentsCall, "Function", "Function", true }, 
{ "Get content details from campaigns", "/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/details", AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idDetailsCall, "Function", "Function", true }, 
{ "Get historical data for specific content from campaigns", "/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/history", AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idHistoryCall, "Function", "Function", true }, 
{ "Get pages related to specific content from campaigns", "/sites/{site_id}/analytics/campaigns/contents/{parameter_name_id}/{parameter_value_id}/pages", AdvancedSitesSite_idAnalyticsCampaignsContentsParameter_name_idParameter_value_idPagesCall, "Function", "Function", true }, 
{ "Get mediums from campaigns", "/sites/{site_id}/analytics/campaigns/mediums", AdvancedSitesSite_idAnalyticsCampaignsMediumsCall, "Function", "Function", true }, 
{ "Get medium details from campaigns", "/sites/{site_id}/analytics/campaigns/mediums/{parameter_name_id}/{parameter_value_id}/details", AdvancedSitesSite_idAnalyticsCampaignsMediumsParameter_name_idParameter_value_idDetailsCall, "Function", "Function", true }, 
{ "Get names from campaigns", "/sites/{site_id}/analytics/campaigns/names", AdvancedSitesSite_idAnalyticsCampaignsNamesCall, "Function", "Function", true }, 
{ "Get name details from campaigns", "/sites/{site_id}/analytics/campaigns/names/{parameter_name_id}/{parameter_value_id}/details", AdvancedSitesSite_idAnalyticsCampaignsNamesParameter_name_idParameter_value_idDetailsCall, "Function", "Function", true }, 
{ "Get pages from campaigns", "/sites/{site_id}/analytics/campaigns/pages", AdvancedSitesSite_idAnalyticsCampaignsPagesCall, "Function", "Function", true }, 
{ "Get details for specific page from campaigns", "/sites/{site_id}/analytics/campaigns/pages/{page_id}/details", AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idDetailsCall, "Function", "Function", true }, 
{ "Get historical data for a specific page in campagins", "/sites/{site_id}/analytics/campaigns/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsCampaignsPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get sources from campaigns", "/sites/{site_id}/analytics/campaigns/sources", AdvancedSitesSite_idAnalyticsCampaignsSourcesCall, "Function", "Function", true }, 
{ "Get source details from campaigns", "/sites/{site_id}/analytics/campaigns/sources/{parameter_name_id}/{parameter_value_id}/details", AdvancedSitesSite_idAnalyticsCampaignsSourcesParameter_name_idParameter_value_idDetailsCall, "Function", "Function", true }, 
{ "Get summary of campaigns", "/sites/{site_id}/analytics/campaigns/summary", AdvancedSitesSite_idAnalyticsCampaignsSummaryCall, "Function", "Function", true }, 
{ "Get historical data of all campaigns", "/sites/{site_id}/analytics/campaigns/summary/history", AdvancedSitesSite_idAnalyticsCampaignsSummaryHistoryCall, "Function", "Function", true }, 
{ "Get terms from campaigns", "/sites/{site_id}/analytics/campaigns/terms", AdvancedSitesSite_idAnalyticsCampaignsTermsCall, "Function", "Function", true }, 
{ "Get term details from campaigns", "/sites/{site_id}/analytics/campaigns/terms/{parameter_name_id}/{parameter_value_id}/details", AdvancedSitesSite_idAnalyticsCampaignsTermsParameter_name_idParameter_value_idDetailsCall, "Function", "Function", true }, 
{ "Get all pages from content", "/sites/{site_id}/analytics/content/all_pages", AdvancedSitesSite_idAnalyticsContentAll_pagesCall, "Function", "Function", true }, 
{ "Get entry pages from content", "/sites/{site_id}/analytics/content/entry_pages", AdvancedSitesSite_idAnalyticsContentEntry_pagesCall, "Function", "Function", true }, 
{ "Get exit pages from content", "/sites/{site_id}/analytics/content/exit_pages", AdvancedSitesSite_idAnalyticsContentExit_pagesCall, "Function", "Function", true }, 
{ "Get least popular pages from content", "/sites/{site_id}/analytics/content/least_popular_pages", AdvancedSitesSite_idAnalyticsContentLeast_popular_pagesCall, "Function", "Function", true }, 
{ "Get most popular pages from content", "/sites/{site_id}/analytics/content/most_popular_pages", AdvancedSitesSite_idAnalyticsContentMost_popular_pagesCall, "Function", "Function", true }, 
{ "Get navigation depth from content", "/sites/{site_id}/analytics/content/navigation_depth", AdvancedSitesSite_idAnalyticsContentNavigation_depthCall, "Function", "Function", true }, 
{ "Get outbound links from content", "/sites/{site_id}/analytics/content/outbound_links", AdvancedSitesSite_idAnalyticsContentOutbound_linksCall, "Function", "Function", true }, 
{ "Get historical data for specific outbound link from content", "/sites/{site_id}/analytics/content/outbound_links/{outbound_link_id}/history", AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific outbound link from content", "/sites/{site_id}/analytics/content/outbound_links/{outbound_link_id}/pages", AdvancedSitesSite_idAnalyticsContentOutbound_linksOutbound_link_idPagesCall, "Function", "Function", true }, 
{ "Get page load time from content", "/sites/{site_id}/analytics/content/page_load_time", AdvancedSitesSite_idAnalyticsContentPage_load_timeCall, "Function", "Function", true }, 
{ "Get pages without visits from content", "/sites/{site_id}/analytics/content/pages_without_visits", AdvancedSitesSite_idAnalyticsContentPages_without_visitsCall, "Function", "Function", true }, 
{ "Get parameters from content", "/sites/{site_id}/analytics/content/parameters", AdvancedSitesSite_idAnalyticsContentParametersCall, "Function", "Function", true }, 
{ "Get historical data for specific parameter from content", "/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/history", AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific parameter from content", "/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/pages", AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idPagesCall, "Function", "Function", true }, 
{ "Get values for specific parameter from content", "/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values", AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesCall, "Function", "Function", true }, 
{ "Get historical data for specific parameter value from campaigns", "/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values/{parameter_value_id}/history", AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific parameter value from content", "/sites/{site_id}/analytics/content/parameters/{parameter_name_id}/values/{parameter_value_id}/pages", AdvancedSitesSite_idAnalyticsContentParametersParameter_name_idValuesParameter_value_idPagesCall, "Function", "Function", true }, 
{ "Get bounce rates from entries and exits", "/sites/{site_id}/analytics/entries_exits/bounce_rates", AdvancedSitesSite_idAnalyticsEntries_exitsBounce_ratesCall, "Function", "Function", true }, 
{ "Get entry and exit rates from entries and exits", "/sites/{site_id}/analytics/entries_exits/entry_exit_rates", AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesCall, "Function", "Function", true }, 
{ "Get last outbound links for specific exit page from entries and exits", "/sites/{site_id}/analytics/entries_exits/entry_exit_rates/{page_id}/last_outbound_links", AdvancedSitesSite_idAnalyticsEntries_exitsEntry_exit_ratesPage_idLast_outbound_linksCall, "Function", "Function", true }, 
{ "Get actions from event tracking", "/sites/{site_id}/analytics/event_tracking/actions", AdvancedSitesSite_idAnalyticsEvent_trackingActionsCall, "Function", "Function", true }, 
{ "Get categories from event tracking", "/sites/{site_id}/analytics/event_tracking/categories", AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCall, "Function", "Function", true }, 
{ "Get actions for specific category from event tracking", "/sites/{site_id}/analytics/event_tracking/categories/{category_id}/actions", AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsCall, "Function", "Function", true }, 
{ "Get labels for specific pair of category and action from event tracking", "/sites/{site_id}/analytics/event_tracking/categories/{category_id}/actions/{action_id}/labels", AdvancedSitesSite_idAnalyticsEvent_trackingCategoriesCategory_idActionsAction_idLabelsCall, "Function", "Function", true }, 
{ "Get events from event tracking", "/sites/{site_id}/analytics/event_tracking/events", AdvancedSitesSite_idAnalyticsEvent_trackingEventsCall, "Function", "Function", true }, 
{ "Get historical data for events from event tracking", "/sites/{site_id}/analytics/event_tracking/events/history", AdvancedSitesSite_idAnalyticsEvent_trackingEventsHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific event from event tracking", "/sites/{site_id}/analytics/event_tracking/events/pages", AdvancedSitesSite_idAnalyticsEvent_trackingEventsPagesCall, "Function", "Function", true }, 
{ "Get labels from event tracking", "/sites/{site_id}/analytics/event_tracking/labels", AdvancedSitesSite_idAnalyticsEvent_trackingLabelsCall, "Function", "Function", true }, 
{ "Get label details from event tracking", "/sites/{site_id}/analytics/event_tracking/labels/{label_id}/events", AdvancedSitesSite_idAnalyticsEvent_trackingLabelsLabel_idEventsCall, "Function", "Function", true }, 
{ "Get pages from event tracking", "/sites/{site_id}/analytics/event_tracking/pages", AdvancedSitesSite_idAnalyticsEvent_trackingPagesCall, "Function", "Function", true }, 
{ "Get event details for specific page from event tracking", "/sites/{site_id}/analytics/event_tracking/pages/{page_id}/events", AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idEventsCall, "Function", "Function", true }, 
{ "Get historical data for specific page from event tracking", "/sites/{site_id}/analytics/event_tracking/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsEvent_trackingPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get internal searches", "/sites/{site_id}/analytics/internal_searches", AdvancedSitesSite_idAnalyticsInternal_searchesCall, "Function", "Function", true }, 
{ "Get historical data from internal searches", "/sites/{site_id}/analytics/internal_searches/history", AdvancedSitesSite_idAnalyticsInternal_searchesHistoryCall, "Function", "Function", true }, 
{ "Get actions for specific search term from internal searches", "/sites/{site_id}/analytics/internal_searches/search_terms/{search_term_id}/actions", AdvancedSitesSite_idAnalyticsInternal_searchesSearch_termsSearch_term_idActionsCall, "Function", "Function", true }, 
{ "Get categories", "/sites/{site_id}/analytics/keymetrics/categories", AdvancedSitesSite_idAnalyticsKeymetricsCategoriesCall, "Function", "Function", true }, 
{ "Get Key Performance Indicators", "/sites/{site_id}/analytics/keymetrics/kpis", AdvancedSitesSite_idAnalyticsKeymetricsKpisCall, "Function", "Function", true }, 
{ "Get Key Metrics", "/sites/{site_id}/analytics/keymetrics/metrics", AdvancedSitesSite_idAnalyticsKeymetricsMetricsCall, "Function", "Function", true }, 
{ "Get analytics groups", "/sites/{site_id}/analytics/overview/groups", AdvancedSitesSite_idAnalyticsOverviewGroupsCall, "Function", "Function", true }, 
{ "Get users for group from overview", "/sites/{site_id}/analytics/overview/groups/{group_id}/users", AdvancedSitesSite_idAnalyticsOverviewGroupsGroup_idUsersCall, "Function", "Function", true }, 
{ "Get historical data from overview", "/sites/{site_id}/analytics/overview/history", AdvancedSitesSite_idAnalyticsOverviewHistoryCall, "Function", "Function", true }, 
{ "Get online visitors from overview", "/sites/{site_id}/analytics/overview/online_visitors", AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsCall, "Function", "Function", true }, 
{ "Get details for online visitor from overview", "/sites/{site_id}/analytics/overview/online_visitors/{session_id}/details", AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idDetailsCall, "Function", "Function", true }, 
{ "Get pages for specific online visitor from overview", "/sites/{site_id}/analytics/overview/online_visitors/{session_id}/pages", AdvancedSitesSite_idAnalyticsOverviewOnline_visitorsSession_idPagesCall, "Function", "Function", true }, 
{ "Get summary for analytics", "/sites/{site_id}/analytics/overview/summary", AdvancedSitesSite_idAnalyticsOverviewSummaryCall, "Function", "Function", true }, 
{ "Get direct traffic from traffic sources", "/sites/{site_id}/analytics/traffic_sources/direct_traffic_entry_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesCall, "Function", "Function", true }, 
{ "Get historical data for direct traffic from traffic sources", "/sites/{site_id}/analytics/traffic_sources/direct_traffic_entry_pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesDirect_traffic_entry_pagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get external referring domains from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_domains", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsCall, "Function", "Function", true }, 
{ "Get referring pages from an external referring domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_domains/{domain_id}/referring_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_domainsDomain_idReferring_pagesCall, "Function", "Function", true }, 
{ "Get external referring pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesCall, "Function", "Function", true }, 
{ "Get historical data for external referring pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idHistoryCall, "Function", "Function", true }, 
{ "Get landing pages from external referring pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/landing_pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesCall, "Function", "Function", true }, 
{ "Get historical data for landing pages from external referring pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_referring_pages/{external_page_id}/landing_pages/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_referring_pagesExternal_page_idLanding_pagesHistoryCall, "Function", "Function", true }, 
{ "Get external search terms from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_search_terms", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsCall, "Function", "Function", true }, 
{ "Get historical data for external search terms from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_search_terms/{search_term_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idHistoryCall, "Function", "Function", true }, 
{ "Get external search terms pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_search_terms/{search_term_id}/pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for external search terms pages from traffic sources", "/sites/{site_id}/analytics/traffic_sources/external_search_terms/{search_term_id}/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesExternal_search_termsSearch_term_idPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get search engines from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesCall, "Function", "Function", true }, 
{ "Get historical data for search engines from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/domains/{domain_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idHistoryCall, "Function", "Function", true }, 
{ "Get pages visited by search engine domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/domains/{domain_id}/pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for search engines by domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/domains/{domain_id}/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get search engine terms by domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/domains/{domain_id}/search_terms", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsCall, "Function", "Function", true }, 
{ "Get historical data for search engine terms by domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/domains/{domain_id}/search_terms/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesDomainsDomain_idSearch_termsHistoryCall, "Function", "Function", true }, 
{ "Get external referring domains by search engine name from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/search_engine_names/{search_engine_name}/external_referring_domains", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameExternal_referring_domainsCall, "Function", "Function", true }, 
{ "Get historical data for search engine terms by search engine name from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/search_engine_names/{search_engine_name}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_nameHistoryCall, "Function", "Function", true }, 
{ "Get pages visited by search engine by name from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/search_engine_names/{search_engine_name}/pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesCall, "Function", "Function", true }, 
{ "Get historical data for the pages visited by search engine by name from traffic sources", "/sites/{site_id}/analytics/traffic_sources/search_engines/search_engine_names/{search_engine_name}/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSearch_enginesSearch_engine_namesSearch_engine_namePagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get social media organisations from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsCall, "Function", "Function", true }, 
{ "Get domains for social media organisation from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsCall, "Function", "Function", true }, 
{ "Get links for specific social media organisation domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/domain_links", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksCall, "Function", "Function", true }, 
{ "Get historical data for specific social media organisation domain link from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/domain_links/{domain_link_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idDomain_linksDomain_link_idHistoryCall, "Function", "Function", true }, 
{ "Get historical data for specific social media organisation domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific social media organisation domain from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for specific social media organisation domain page from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/domains/{domain_id}/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idDomainsDomain_idPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get historical data for specific social media organisation from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idHistoryCall, "Function", "Function", true }, 
{ "Get pages for specific social media organisation from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/pages", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for specific social media organisation page from traffic sources", "/sites/{site_id}/analytics/traffic_sources/social_media_organisations/{social_media_organisation_id}/pages/{page_id}/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSocial_media_organisationsSocial_media_organisation_idPagesPage_idHistoryCall, "Function", "Function", true }, 
{ "Get an overview of traffic sources", "/sites/{site_id}/analytics/traffic_sources/summary", AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryCall, "Function", "Function", true }, 
{ "Get historical data for traffic sources", "/sites/{site_id}/analytics/traffic_sources/summary/history", AdvancedSitesSite_idAnalyticsTraffic_sourcesSummaryHistoryCall, "Function", "Function", true }, 
{ "Get browsers from visitors", "/sites/{site_id}/analytics/visitors/browsers", AdvancedSitesSite_idAnalyticsVisitorsBrowsersCall, "Function", "Function", true }, 
{ "Get versions for specific browser from visitors", "/sites/{site_id}/analytics/visitors/browsers/browser_names/{browser_name}/versions", AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsCall, "Function", "Function", true }, 
{ "Get historical data for a specific browsers versions from visitors", "/sites/{site_id}/analytics/visitors/browsers/browser_names/{browser_name}/versions/history", AdvancedSitesSite_idAnalyticsVisitorsBrowsersBrowser_namesBrowser_nameVersionsHistoryCall, "Function", "Function", true }, 
{ "Get historical data for browsers from visitors", "/sites/{site_id}/analytics/visitors/browsers/history", AdvancedSitesSite_idAnalyticsVisitorsBrowsersHistoryCall, "Function", "Function", true }, 
{ "Get countries from visitors", "/sites/{site_id}/analytics/visitors/countries", AdvancedSitesSite_idAnalyticsVisitorsCountriesCall, "Function", "Function", true }, 
{ "Get regions of countries from visitors", "/sites/{site_id}/analytics/visitors/countries/{country_id}/regions", AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsCall, "Function", "Function", true }, 
{ "Get cities of regions of countries from visitors", "/sites/{site_id}/analytics/visitors/countries/{country_id}/regions/{region_id}/cities", AdvancedSitesSite_idAnalyticsVisitorsCountriesCountry_idRegionsRegion_idCitiesCall, "Function", "Function", true }, 
{ "Get devices from visitors", "/sites/{site_id}/analytics/visitors/devices", AdvancedSitesSite_idAnalyticsVisitorsDevicesCall, "Function", "Function", true }, 
{ "Get historical data for devices from visitors", "/sites/{site_id}/analytics/visitors/devices/history", AdvancedSitesSite_idAnalyticsVisitorsDevicesHistoryCall, "Function", "Function", true }, 
{ "Get operating systems from visitors", "/sites/{site_id}/analytics/visitors/operating_systems", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsCall, "Function", "Function", true }, 
{ "Get historical data for operating systems from visitors", "/sites/{site_id}/analytics/visitors/operating_systems/history", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsHistoryCall, "Function", "Function", true }, 
{ "Get versions of operating systems from visitors", "/sites/{site_id}/analytics/visitors/operating_systems/os_families/{os_family}/versions", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsCall, "Function", "Function", true }, 
{ "Get historical data for a specific OS's versions from visitors", "/sites/{site_id}/analytics/visitors/operating_systems/os_families/{os_family}/versions/history", AdvancedSitesSite_idAnalyticsVisitorsOperating_systemsOs_familiesOs_familyVersionsHistoryCall, "Function", "Function", true }, 
{ "Get organisations from visitors", "/sites/{site_id}/analytics/visitors/organisations", AdvancedSitesSite_idAnalyticsVisitorsOrganisationsCall, "Function", "Function", true }, 
{ "Get a list IP addresses for a specific organisation from visitors", "/sites/{site_id}/analytics/visitors/organisations/{organisation_id}/ip_addresses", AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idIp_addressesCall, "Function", "Function", true }, 
{ "Get the pages visited by a specific organisation from visitors", "/sites/{site_id}/analytics/visitors/organisations/{organisation_id}/pages", AdvancedSitesSite_idAnalyticsVisitorsOrganisationsOrganisation_idPagesCall, "Function", "Function", true }, 
{ "Get screen resolutions from visitors", "/sites/{site_id}/analytics/visitors/screen_resolutions", AdvancedSitesSite_idAnalyticsVisitorsScreen_resolutionsCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSitesSite_idAccessibilityDecisionIssuesResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/decision/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityDecisionIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityDecisionIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get decisions on issues from accessibility"
    ];

AdvancedSitesSite_idAccessibilityDecisionIssuesResultType = type table [
	chapter = text, check = text, check_id = number, created_by = text, created_ts = text, decided_for = text, note = text, priority = text, severity = text, subtype = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityDecisionIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityDecisionIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityDecisionIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"check_id", "decided_for", "priority", "severity", "subtype"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityDecisionIssuesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityDecisionIssuesResultTable, AdvancedSitesSite_idAccessibilityDecisionIssuesParamsType);


AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultTable = (
		site_id as number, chapter as text, check_id as number, subtype as text, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/decision/issues/" & chapter & "/" & Text.From(check_id) & "/" & subtype & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
chapter as (type text meta [
        Documentation.FieldCaption = "chapter",
        Documentation.FieldDescription = "WCAG issue chapter for the problem"
    ]), 
check_id as (type number meta [
        Documentation.FieldCaption = "check_id",
        Documentation.FieldDescription = "id for the Accessibility check. {1, 2, ... 135}
Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918"
    ]), 
subtype as (type text meta [
        Documentation.FieldCaption = "subtype",
        Documentation.FieldDescription = "Decision type (approved, cant fix, etc.)"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get decisions on issues for specific pages from accessibility"
    ];

AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, created_by = text, created_ts = text, note = text, subtype = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "subtype"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesResultTable, AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesParamsType);


AdvancedSitesSite_idAccessibilityDecisionItemsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/decision/items?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityDecisionItemsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityDecisionItemsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get decisions on items from accessibility"
    ];

AdvancedSitesSite_idAccessibilityDecisionItemsResultType = type table [
	chapter = text, check = text, check_id = number, created_by = text, created_ts = text, decided_for = text, note = text, priority = text, severity = text, subtype = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityDecisionItemsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityDecisionItemsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityDecisionItemsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"check_id", "decided_for", "priority", "severity", "subtype"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityDecisionItemsCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityDecisionItemsResultTable, AdvancedSitesSite_idAccessibilityDecisionItemsParamsType);


AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultTable = (
		site_id as number, chapter as text, check_id as number, subtype as text, hash as text, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/decision/items/" & chapter & "/" & Text.From(check_id) & "/" & subtype & "/" & hash & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
chapter as (type text meta [
        Documentation.FieldCaption = "chapter",
        Documentation.FieldDescription = "WCAG issue chapter for the problem"
    ]), 
check_id as (type number meta [
        Documentation.FieldCaption = "check_id",
        Documentation.FieldDescription = "id for the Accessibility check. {1, 2, ... 135}
Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918"
    ]), 
subtype as (type text meta [
        Documentation.FieldCaption = "subtype",
        Documentation.FieldDescription = "Decision type (approved, cant fix, etc.)"
    ]), 
hash as (type text meta [
        Documentation.FieldCaption = "hash",
        Documentation.FieldDescription = "MD5 hash identifying the item the decision is made for"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get decisions on items for specific pages from accessibility"
    ];

AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, created_by = text, created_ts = text, note = text, subtype = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "created_ts", "subtype"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesResultTable, AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesParamsType);


AdvancedSitesSite_idAccessibilityIssuesResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get issues from accessibility"
    ];

AdvancedSitesSite_idAccessibilityIssuesResultType = type table [
	id = number, conformance_level = text, guideline = text, help = record, pages = number, pages_past = number, pages_total = number, principle = number, severity = text, success_criterion = text, success_criterion_title = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "conformance_level", "pages", "pages_past", "pages_total", "principle", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityIssuesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityIssuesResultTable, AdvancedSitesSite_idAccessibilityIssuesParamsType);


AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultTable = (
		site_id as number, success_criterion as text, check_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/issues/" & success_criterion & "/" & Text.From(check_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
success_criterion as (type text meta [
        Documentation.FieldCaption = "success_criterion",
        Documentation.FieldDescription = "WCAG success criterion key (e.g. 2.4.9). Lookup:
https://www.w3.org/TR/WCAG20/ "
    ]), 
check_id as (type number meta [
        Documentation.FieldCaption = "check_id",
        Documentation.FieldDescription = "id for the Accessibility check. {1, 2, ... 135}
Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with this issue from accessibility"
    ];

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, occurrences = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesResultTable, AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesParamsType);


AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultTable = (
		site_id as number, success_criterion as text, check_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/issues/" & success_criterion & "/" & Text.From(check_id) & "/progress/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
success_criterion as (type text meta [
        Documentation.FieldCaption = "success_criterion",
        Documentation.FieldDescription = "WCAG success criterion key (e.g. 2.4.9). Lookup:
https://www.w3.org/TR/WCAG20/ "
    ]), 
check_id as (type number meta [
        Documentation.FieldCaption = "check_id",
        Documentation.FieldDescription = "id for the Accessibility check. {1, 2, ... 135}
Lookup: https://support.siteimprove.com/hc/en-gb/articles/360002273918"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get progress for this issue from accessibility"
    ];

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultType = type table [
	ignored_on_pages = number, instances_of_this_issue = number, number_of_pages = number, pages_with_this_issue = number, timestamp = text
];
  
AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"instances_of_this_issue", "pages_with_this_issue", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryResultTable, AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryParamsType);


AdvancedSitesSite_idAccessibilityOverviewGroupsResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/overview/groups?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityOverviewGroupsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityOverviewGroupsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get overview of groups for accessibility"
    ];

AdvancedSitesSite_idAccessibilityOverviewGroupsResultType = type table [
	id = number, a_issues = number, aa_issues = number, aaa_issues = number, group_name = text, pages = number, pdf_issues = number, users = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityOverviewGroupsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityOverviewGroupsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityOverviewGroupsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "a_issues", "aa_issues", "aaa_issues", "pages", "pdf_issues", "users"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityOverviewGroupsCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityOverviewGroupsResultTable, AdvancedSitesSite_idAccessibilityOverviewGroupsParamsType);


AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultTable = (
		site_id as number, group_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/overview/groups/" & Text.From(group_id) & "/users?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get list of users for this group"
    ];

AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultType = type table [
	id = number, email = text, fullname = text
];
  
AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersResultTable, AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersParamsType);


AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultTable = (
		site_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional roles as text, optional severities as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
roles = if roles = null then "" else "&roles=" & Uri.EscapeDataString(roles),
severities = if severities = null then "" else "&severities=" & Uri.EscapeDataString(severities),
parameters = Text.TrimStart(Text.Combine({ group_id, period, roles, severities, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/overview/progress/instances/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional roles as (type text meta [
        Documentation.FieldCaption = "roles",
        Documentation.FieldDescription = "Roles to be included in the result."
    ]), 
optional severities as (type text meta [
        Documentation.FieldCaption = "severities",
        Documentation.FieldDescription = "Severities to be included in the result."
    ]))
    as table meta [
        Documentation.Name = "Get progress for all instances from accessibility"
    ];

AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultType = type table [
	a_instances = number, aa_instances = number, aaa_instances = number, timestamp = text, total_pages = number
];
  
AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"a_instances", "aa_instances", "aaa_instances", "timestamp", "total_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryResultTable, AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryParamsType);


AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultTable = (
		site_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text, optional roles as text, optional severities as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
roles = if roles = null then "" else "&roles=" & Uri.EscapeDataString(roles),
severities = if severities = null then "" else "&severities=" & Uri.EscapeDataString(severities),
parameters = Text.TrimStart(Text.Combine({ group_id, period, roles, severities, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/overview/progress/issues/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]), 
optional roles as (type text meta [
        Documentation.FieldCaption = "roles",
        Documentation.FieldDescription = "Roles to be included in the result."
    ]), 
optional severities as (type text meta [
        Documentation.FieldCaption = "severities",
        Documentation.FieldDescription = "Severities to be included in the result."
    ]))
    as table meta [
        Documentation.Name = "Get progress for all issues from accessibility"
    ];

AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultType = type table [
	a_issues = number, aa_issues = number, aaa_issues = number, ignored_issues = number, timestamp = text, total_pages = number
];
  
AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"a_issues", "aa_issues", "aaa_issues", "ignored_issues", "timestamp", "total_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryResultTable, AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryParamsType);


AdvancedSitesSite_idAccessibilityOverviewSummaryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/overview/summary?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityOverviewSummaryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityOverviewSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get summary for accessibility"
    ];

AdvancedSitesSite_idAccessibilityOverviewSummaryResultType = type table [
	conformance_level = text, issues = number, severity = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityOverviewSummaryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityOverviewSummaryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityOverviewSummaryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"conformance_level", "issues", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityOverviewSummaryCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityOverviewSummaryResultTable, AdvancedSitesSite_idAccessibilityOverviewSummaryParamsType);


AdvancedSitesSite_idAccessibilityPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get HTML pages from accessibility"
    ];

AdvancedSitesSite_idAccessibilityPagesResultType = type table [
	id = number, title = text, url = text, a_issues = number, aa_issues = number, aaa_issues = number, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "a_issues", "aa_issues", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityPagesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityPagesResultTable, AdvancedSitesSite_idAccessibilityPagesParamsType);


AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/pages/" & Text.From(page_id) & "/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityPagesPage_idIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get overview of issues for page in accessibility"
    ];

AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultType = type table [
	conformance_level = text, issues = number, severity = text
];
  
AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"conformance_level", "issues", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityPagesPage_idIssuesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityPagesPage_idIssuesResultTable, AdvancedSitesSite_idAccessibilityPagesPage_idIssuesParamsType);


AdvancedSitesSite_idAccessibilityValidationCssResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/css?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationCssResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationCssParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get W3C CSS error report from accessibility"
    ];

AdvancedSitesSite_idAccessibilityValidationCssResultType = type table [
	id = number, url = text, checking_now = logical, errors = number, pages = number, validated_date = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityValidationCssResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationCssResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationCssResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationCssCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationCssResultTable, AdvancedSitesSite_idAccessibilityValidationCssParamsType);


AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultTable = (
		site_id as number, css_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/css/" & Text.From(css_id) & "/pages_using_css?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
css_id as (type number meta [
        Documentation.FieldCaption = "css_id",
        Documentation.FieldDescription = "Id of the CSS file"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get HTML pages referencing specific CSS stylesheet"
    ];

AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssResultTable, AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssParamsType);


AdvancedSitesSite_idAccessibilityValidationHtmlResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/html?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationHtmlResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationHtmlParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get W3C HTML error report from accessibility"
    ];

AdvancedSitesSite_idAccessibilityValidationHtmlResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, errors = number, page_level = number, page_views = number, validated_date = text, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityValidationHtmlResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationHtmlResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationHtmlResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationHtmlCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationHtmlResultTable, AdvancedSitesSite_idAccessibilityValidationHtmlParamsType);


AdvancedSitesSite_idAccessibilityValidationPdfResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/pdf?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationPdfResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationPdfParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get report on PDF errors from accessibility"
    ];

AdvancedSitesSite_idAccessibilityValidationPdfResultType = type table [
	id = number, title = text, url = text, checking_now = logical, errors = number, has_text = text, is_tagged = logical, last_modified = text, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityValidationPdfResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationPdfResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationPdfResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "errors", "has_text", "is_tagged"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationPdfCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationPdfResultTable, AdvancedSitesSite_idAccessibilityValidationPdfParamsType);


AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultTable = (
		site_id as number, link_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/pdf/" & Text.From(link_id) & "/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]))
    as table meta [
        Documentation.Name = "Get errors for specific PDF document"
    ];

AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultType = type table [
	name = text, count = number, description = text
];
  
AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"count"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesResultTable, AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesParamsType);


AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultTable = (
		site_id as number, pdf_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/accessibility/validation/pdf/" & Text.From(pdf_id) & "/pages_using_pdf?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
pdf_id as (type number meta [
        Documentation.FieldCaption = "pdf_id",
        Documentation.FieldDescription = "id of the PDF document"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get HTML pages referring to specific PDF document"
    ];

AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfCall = Value.ReplaceType(AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfResultTable, AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfParamsType);


GetAdvancedAccessibilityNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get decisions on issues from accessibility", "/sites/{site_id}/accessibility/decision/issues", AdvancedSitesSite_idAccessibilityDecisionIssuesCall, "Function", "Function", true }, 
{ "Get decisions on issues for specific pages from accessibility", "/sites/{site_id}/accessibility/decision/issues/{chapter}/{check_id}/{subtype}/pages", AdvancedSitesSite_idAccessibilityDecisionIssuesChapterCheck_idSubtypePagesCall, "Function", "Function", true }, 
{ "Get decisions on items from accessibility", "/sites/{site_id}/accessibility/decision/items", AdvancedSitesSite_idAccessibilityDecisionItemsCall, "Function", "Function", true }, 
{ "Get decisions on items for specific pages from accessibility", "/sites/{site_id}/accessibility/decision/items/{chapter}/{check_id}/{subtype}/{hash}/pages", AdvancedSitesSite_idAccessibilityDecisionItemsChapterCheck_idSubtypeHashPagesCall, "Function", "Function", true }, 
{ "Get issues from accessibility", "/sites/{site_id}/accessibility/issues", AdvancedSitesSite_idAccessibilityIssuesCall, "Function", "Function", true }, 
{ "Get pages with this issue from accessibility", "/sites/{site_id}/accessibility/issues/{success_criterion}/{check_id}/pages", AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idPagesCall, "Function", "Function", true }, 
{ "Get progress for this issue from accessibility", "/sites/{site_id}/accessibility/issues/{success_criterion}/{check_id}/progress/history", AdvancedSitesSite_idAccessibilityIssuesSuccess_criterionCheck_idProgressHistoryCall, "Function", "Function", true }, 
{ "Get overview of groups for accessibility", "/sites/{site_id}/accessibility/overview/groups", AdvancedSitesSite_idAccessibilityOverviewGroupsCall, "Function", "Function", true }, 
{ "Get list of users for this group", "/sites/{site_id}/accessibility/overview/groups/{group_id}/users", AdvancedSitesSite_idAccessibilityOverviewGroupsGroup_idUsersCall, "Function", "Function", true }, 
{ "Get progress for all instances from accessibility", "/sites/{site_id}/accessibility/overview/progress/instances/history", AdvancedSitesSite_idAccessibilityOverviewProgressInstancesHistoryCall, "Function", "Function", true }, 
{ "Get progress for all issues from accessibility", "/sites/{site_id}/accessibility/overview/progress/issues/history", AdvancedSitesSite_idAccessibilityOverviewProgressIssuesHistoryCall, "Function", "Function", true }, 
{ "Get summary for accessibility", "/sites/{site_id}/accessibility/overview/summary", AdvancedSitesSite_idAccessibilityOverviewSummaryCall, "Function", "Function", true }, 
{ "Get HTML pages from accessibility", "/sites/{site_id}/accessibility/pages", AdvancedSitesSite_idAccessibilityPagesCall, "Function", "Function", true }, 
{ "Get overview of issues for page in accessibility", "/sites/{site_id}/accessibility/pages/{page_id}/issues", AdvancedSitesSite_idAccessibilityPagesPage_idIssuesCall, "Function", "Function", true }, 
{ "Get W3C CSS error report from accessibility", "/sites/{site_id}/accessibility/validation/css", AdvancedSitesSite_idAccessibilityValidationCssCall, "Function", "Function", true }, 
{ "Get HTML pages referencing specific CSS stylesheet", "/sites/{site_id}/accessibility/validation/css/{css_id}/pages_using_css", AdvancedSitesSite_idAccessibilityValidationCssCss_idPages_using_cssCall, "Function", "Function", true }, 
{ "Get W3C HTML error report from accessibility", "/sites/{site_id}/accessibility/validation/html", AdvancedSitesSite_idAccessibilityValidationHtmlCall, "Function", "Function", true }, 
{ "Get report on PDF errors from accessibility", "/sites/{site_id}/accessibility/validation/pdf", AdvancedSitesSite_idAccessibilityValidationPdfCall, "Function", "Function", true }, 
{ "Get errors for specific PDF document", "/sites/{site_id}/accessibility/validation/pdf/{link_id}/issues", AdvancedSitesSite_idAccessibilityValidationPdfLink_idIssuesCall, "Function", "Function", true }, 
{ "Get HTML pages referring to specific PDF document", "/sites/{site_id}/accessibility/validation/pdf/{pdf_id}/pages_using_pdf", AdvancedSitesSite_idAccessibilityValidationPdfPdf_idPages_using_pdfCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultTable = (
		site_id as number, link_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/links/" & Text.From(link_id) & "/referring_documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]))
    as table meta [
        Documentation.Name = "Get referring documents for specific match in policies"
    ];

AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultType = type table [
	id = number
];
  
AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsCall = Value.ReplaceType(AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsResultTable, AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsParamsType);


AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultTable = (
		site_id as number, link_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/links/" & Text.From(link_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get referring pages for specific match in policies"
    ];

AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesResultTable, AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesParamsType);


AdvancedSitesSite_idPolicyMatchesContentResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/content?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesContentResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesContentParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get content matched by any policy"
    ];

AdvancedSitesSite_idPolicyMatchesContentResultType = type table [
	id = number, title = text, url = text, cms_url = text, matching_policies = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyMatchesContentResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesContentResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesContentResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "matching_policies"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesContentCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesContentResultTable, AdvancedSitesSite_idPolicyMatchesContentParamsType);


AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultTable = (
		site_id as number, link_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/details/links/" & Text.From(link_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Referring pages to item matched by specific policy"
    ];

AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultType = type table [
	id = number, title = text, url = text, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesResultTable, AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesParamsType);


AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultTable = (
		site_id as number, match_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/details/matches/" & Text.From(match_id) & "/matching_policies?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
match_id as (type number meta [
        Documentation.FieldCaption = "match_id",
        Documentation.FieldDescription = "Id of the match."
    ]))
    as table meta [
        Documentation.Name = "Matching policies to item matched by specific policy"
    ];

AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultType = type table [
	id = number, name = text, category = text, priority = text
];
  
AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "category", "priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesResultTable, AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesParamsType);


AdvancedSitesSite_idPolicyMatchesDocumentsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get documents matched by any policy"
    ];

AdvancedSitesSite_idPolicyMatchesDocumentsResultType = type table [
	id = number, url = text, clicks = number, matching_policies = number, referring_documents = number, referring_pages = number, status = logical
];
  
AdvancedSitesSite_idPolicyMatchesDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "matching_policies", "referring_documents", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesDocumentsResultTable, AdvancedSitesSite_idPolicyMatchesDocumentsParamsType);


AdvancedSitesSite_idPolicyMatchesMediaResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/media?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesMediaResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesMediaParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get media matched by any policy"
    ];

AdvancedSitesSite_idPolicyMatchesMediaResultType = type table [
	id = number, url = text, clicks = number, matching_policies = number, referring_documents = number, referring_pages = number, status = logical
];
  
AdvancedSitesSite_idPolicyMatchesMediaResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesMediaResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesMediaResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "matching_policies", "referring_documents", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesMediaCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesMediaResultTable, AdvancedSitesSite_idPolicyMatchesMediaParamsType);


AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/pages_with_media_and_documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with media or documents matched by any policy"
    ];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultType = type table [
	id = number, title = text, url = text, cms_url = text, matching_documents_policies = number, matching_media_policies = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "matching_documents_policies", "matching_media_policies"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsResultTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsParamsType);


AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/pages_with_media_and_documents/" & Text.From(page_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get any documents that are matched by a policy on a page"
    ];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultType = type table [
	id = number, url = text, clicks = number, documents = number, referring_pages = number, status = logical
];
  
AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "documents", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsResultTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsParamsType);


AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/matches/pages_with_media_and_documents/" & Text.From(page_id) & "/media?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get any media that are matched by a policy on a page"
    ];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultType = type table [
	id = number, url = text, clicks = number, documents = number, referring_pages = number, status = logical
];
  
AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "documents", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaCall = Value.ReplaceType(AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaResultTable, AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaParamsType);


AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/pages/" & Text.From(page_id) & "/matching_policies?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get policy matches for page in policies"
    ];

AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultType = type table [
	id = number, detected_date = text, policy_category = text, policy_name = text, policy_priority = text
];
  
AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "detected_date", "policy_category", "policy_priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesCall = Value.ReplaceType(AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesResultTable, AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesParamsType);


AdvancedSitesSite_idPolicyPoliciesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/policies?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyPoliciesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyPoliciesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get policies"
    ];

AdvancedSitesSite_idPolicyPoliciesResultType = type table [
	id = number, name = text, all_sites = logical, category = text, created_by = text, created_date = text, edited_by = text, group_matches = number, last_edited = text, matches = number, note = text, pending_execution = logical, priority = text, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyPoliciesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyPoliciesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyPoliciesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "all_sites", "category", "created_date", "matches", "pending_execution", "priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyPoliciesCall = Value.ReplaceType(AdvancedSitesSite_idPolicyPoliciesResultTable, AdvancedSitesSite_idPolicyPoliciesParamsType);


AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultTable = (
		site_id as number, policy_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/policies/" & Text.From(policy_id) & "/content?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyPoliciesPolicy_idContentParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
policy_id as (type number meta [
        Documentation.FieldCaption = "policy_id",
        Documentation.FieldDescription = "Id of the policy."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get content matched by policy"
    ];

AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, is_occurrences_capped = logical, occurrences = number, page_level = number, page_views = number, violated_date = text, _siteimprove = record
];
  
AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "violated_date"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyPoliciesPolicy_idContentCall = Value.ReplaceType(AdvancedSitesSite_idPolicyPoliciesPolicy_idContentResultTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idContentParamsType);


AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultTable = (
		site_id as number, policy_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/policies/" & Text.From(policy_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
policy_id as (type number meta [
        Documentation.FieldCaption = "policy_id",
        Documentation.FieldDescription = "Id of the policy."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get documents matched by policy"
    ];

AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultType = type table [
	id = number, url = text, clicks = number, is_occurrences_capped = logical, occurrences = number, referring_documents = number, referring_pages = number, violated_date = text
];
  
AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "referring_documents", "referring_pages", "violated_date"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsResultTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsParamsType);


AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultTable = (
		site_id as number, policy_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/policy/policies/" & Text.From(policy_id) & "/media?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
policy_id as (type number meta [
        Documentation.FieldCaption = "policy_id",
        Documentation.FieldDescription = "Id of the policy."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get media matched by policy"
    ];

AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultType = type table [
	id = number, url = text, clicks = number, referring_documents = number, referring_pages = number, violated_date = text
];
  
AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "referring_documents", "referring_pages", "violated_date"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaCall = Value.ReplaceType(AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaResultTable, AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaParamsType);


GetAdvancedPolicyNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get referring documents for specific match in policies", "/sites/{site_id}/policy/links/{link_id}/referring_documents", AdvancedSitesSite_idPolicyLinksLink_idReferring_documentsCall, "Function", "Function", true }, 
{ "Get referring pages for specific match in policies", "/sites/{site_id}/policy/links/{link_id}/referring_pages", AdvancedSitesSite_idPolicyLinksLink_idReferring_pagesCall, "Function", "Function", true }, 
{ "Get content matched by any policy", "/sites/{site_id}/policy/matches/content", AdvancedSitesSite_idPolicyMatchesContentCall, "Function", "Function", true }, 
{ "Referring pages to item matched by specific policy", "/sites/{site_id}/policy/matches/details/links/{link_id}/referring_pages", AdvancedSitesSite_idPolicyMatchesDetailsLinksLink_idReferring_pagesCall, "Function", "Function", true }, 
{ "Matching policies to item matched by specific policy", "/sites/{site_id}/policy/matches/details/matches/{match_id}/matching_policies", AdvancedSitesSite_idPolicyMatchesDetailsMatchesMatch_idMatching_policiesCall, "Function", "Function", true }, 
{ "Get documents matched by any policy", "/sites/{site_id}/policy/matches/documents", AdvancedSitesSite_idPolicyMatchesDocumentsCall, "Function", "Function", true }, 
{ "Get media matched by any policy", "/sites/{site_id}/policy/matches/media", AdvancedSitesSite_idPolicyMatchesMediaCall, "Function", "Function", true }, 
{ "Get pages with media or documents matched by any policy", "/sites/{site_id}/policy/matches/pages_with_media_and_documents", AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsCall, "Function", "Function", true }, 
{ "Get any documents that are matched by a policy on a page", "/sites/{site_id}/policy/matches/pages_with_media_and_documents/{page_id}/documents", AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idDocumentsCall, "Function", "Function", true }, 
{ "Get any media that are matched by a policy on a page", "/sites/{site_id}/policy/matches/pages_with_media_and_documents/{page_id}/media", AdvancedSitesSite_idPolicyMatchesPages_with_media_and_documentsPage_idMediaCall, "Function", "Function", true }, 
{ "Get policy matches for page in policies", "/sites/{site_id}/policy/pages/{page_id}/matching_policies", AdvancedSitesSite_idPolicyPagesPage_idMatching_policiesCall, "Function", "Function", true }, 
{ "Get policies", "/sites/{site_id}/policy/policies", AdvancedSitesSite_idPolicyPoliciesCall, "Function", "Function", true }, 
{ "Get content matched by policy", "/sites/{site_id}/policy/policies/{policy_id}/content", AdvancedSitesSite_idPolicyPoliciesPolicy_idContentCall, "Function", "Function", true }, 
{ "Get documents matched by policy", "/sites/{site_id}/policy/policies/{policy_id}/documents", AdvancedSitesSite_idPolicyPoliciesPolicy_idDocumentsCall, "Function", "Function", true }, 
{ "Get media matched by policy", "/sites/{site_id}/policy/policies/{policy_id}/media", AdvancedSitesSite_idPolicyPoliciesPolicy_idMediaCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/capture_tags?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get capture tags from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultType = type table [
	id = number, capture_tag = text, occurrences = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultTable = (
		site_id as number, tag_name_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/capture_tags/" & Text.From(tag_name_id) & "/occurrences?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
tag_name_id as (type number meta [
        Documentation.FieldCaption = "tag_name_id",
        Documentation.FieldDescription = "Id for specific tag."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get capture tags occurrences from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultType = type table [
	id = number, pages = number, tag_name_id = number, value = text
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages", "tag_name_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultTable = (
		site_id as number, tag_name_id as number, tag_value_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/capture_tags/" & Text.From(tag_name_id) & "/values/" & Text.From(tag_value_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
tag_name_id as (type number meta [
        Documentation.FieldCaption = "tag_name_id",
        Documentation.FieldDescription = "Id for specific tag."
    ]), 
tag_value_id as (type number meta [
        Documentation.FieldCaption = "tag_value_id",
        Documentation.FieldDescription = "Id for specific tag value."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get capture tags occurrences' pages from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryCssResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/css?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCssResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCssParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get css assets from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCssResultType = type table [
	id = number, url = text, pages_with_css = number, pages_without_css = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCssResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCssResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCssResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages_with_css", "pages_without_css"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCssCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCssResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCssParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultTable = (
		site_id as number, css_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/css/" & Text.From(css_id) & "/pages_with_css?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
css_id as (type number meta [
        Documentation.FieldCaption = "css_id",
        Documentation.FieldDescription = "Id of the CSS file"
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with css from css inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultTable = (
		site_id as number, css_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/css/" & Text.From(css_id) & "/pages_without_css?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
css_id as (type number meta [
        Documentation.FieldCaption = "css_id",
        Documentation.FieldDescription = "Id of the CSS file"
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages without css from css inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssResultTable, AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get documents from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultType = type table [
	id = number, url = text, document_too_large = logical, documents = number, failing = logical, is_content_checked = logical, is_ok = logical, last_modified = text, pages = number, size_bytes = number, to_be_checked = logical
];
  
AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "document_too_large", "failing", "is_content_checked", "pages", "to_be_checked"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryDocumentsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryDocumentsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/email_addresses?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get email addresses from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultType = type table [
	id = number, action_required = text, detected = text, email = text, email_address_type = text, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "detected", "email_address_type"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultTable = (
		site_id as number, email_address_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/email_addresses/" & Text.From(email_address_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
email_address_id as (type number meta [
        Documentation.FieldCaption = "email_address_id",
        Documentation.FieldDescription = "Id for specific email address."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with email from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get history from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultType = type table [
	css_files = number, documents = number, emails = number, links = number, media_files = number, meta_tags = number, national_identity_numbers = number, pages = number, phone_numbers = number, script_files = number, timestamp = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryHistoryCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryHistoryResultTable, AdvancedSitesSite_idQuality_assuranceInventoryHistoryParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/link_texts?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get link texts from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultType = type table [
	id = number, pages = number, text = text
];
  
AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryLink_textsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryLink_textsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultTable = (
		site_id as number, text_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/link_texts/" & Text.From(text_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
text_id as (type number meta [
        Documentation.FieldCaption = "text_id",
        Documentation.FieldDescription = "Id for specific (link) text."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with link text from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryLinksResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryLinksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryLinksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get links from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryLinksResultType = type table [
	id = number, url = text, documents = number, http_status = number, is_broken = logical, media_type = text, pages = number, unsafe_status = text
];
  
AdvancedSitesSite_idQuality_assuranceInventoryLinksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryLinksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_broken", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryLinksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryLinksResultTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultTable = (
		site_id as number, link_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/links/" & Text.From(link_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]))
    as table meta [
        Documentation.Name = "Get documents with link"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultType = type table [
	id = number, url = text, found_on_pages = text, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultTable = (
		site_id as number, link_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/links/" & Text.From(link_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with link"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryMediaResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/media?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryMediaResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryMediaParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get media files from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryMediaResultType = type table [
	id = number, url = text, documents = number, last_modified = text, link_id = number, pages = number, size_bytes = number, status = logical
];
  
AdvancedSitesSite_idQuality_assuranceInventoryMediaResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryMediaResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryMediaResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "link_id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryMediaCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryMediaResultTable, AdvancedSitesSite_idQuality_assuranceInventoryMediaParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/meta_tags?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta tags from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultType = type table [
	id = number, meta_tag = text, occurrences = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultTable = (
		site_id as number, meta_name_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/meta_tags/" & Text.From(meta_name_id) & "/contents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
meta_name_id as (type number meta [
        Documentation.FieldCaption = "meta_name_id",
        Documentation.FieldDescription = "Id for specific meta name."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta tag contents"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultType = type table [
	id = number, content = text, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultTable = (
		site_id as number, meta_name_id as number, meta_content_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/meta_tags/" & Text.From(meta_name_id) & "/contents/" & Text.From(meta_content_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
meta_name_id as (type number meta [
        Documentation.FieldCaption = "meta_name_id",
        Documentation.FieldDescription = "Id for specific meta name."
    ]), 
meta_content_id as (type number meta [
        Documentation.FieldCaption = "meta_content_id",
        Documentation.FieldDescription = "Id for specific meta content."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get meta tag pages"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional search_in as text, optional url as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
url = if url = null then "" else "&url=" & Uri.EscapeDataString(url),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, search_in, url, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]), 
optional url as (type text meta [
        Documentation.FieldCaption = "url",
        Documentation.FieldDescription = "Url of the page"
    ]))
    as table meta [
        Documentation.Name = "Get pages from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, first_seen = text, page_level = number, page_score = number, page_views = number, referring_pages = number, size_bytes = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultTable = (
		site_id as number, page_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/pages/" & Text.From(page_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get referring pages for page in inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, member_of_this_group = logical, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/personal_id_numbers?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get personal id numbers from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultType = type table [
	id = number, documents = number, pages = number, personal_id_number = text
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "documents", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultTable = (
		site_id as number, personal_id_number_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/personal_id_numbers/" & Text.From(personal_id_number_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
personal_id_number_id as (type number meta [
        Documentation.FieldCaption = "personal_id_number_id",
        Documentation.FieldDescription = "Id for specific personal id."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get documents with personal id numbers from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultType = type table [
	id = number, url = text, checking_now = logical, occurrences = number, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "occurrences", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultTable = (
		site_id as number, personal_id_number_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/personal_id_numbers/" & Text.From(personal_id_number_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
personal_id_number_id as (type number meta [
        Documentation.FieldCaption = "personal_id_number_id",
        Documentation.FieldDescription = "Id for specific personal id."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with personal id numbers from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/phone_numbers?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get phone numbers from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultType = type table [
	id = number, pages = number, phone_number = text
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultTable = (
		site_id as number, phone_number_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/phone_numbers/" & Text.From(phone_number_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
phone_number_id as (type number meta [
        Documentation.FieldCaption = "phone_number_id",
        Documentation.FieldDescription = "Id for specific phone number."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with phone number from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/scripts?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryScriptsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get java scripts from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultType = type table [
	id = number, url = text, pages_with_script = number, pages_without_script = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages_with_script", "pages_without_script"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryScriptsResultTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultTable = (
		site_id as number, script_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/scripts/" & Text.From(script_id) & "/pages_with_script?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
script_id as (type number meta [
        Documentation.FieldCaption = "script_id",
        Documentation.FieldDescription = "Id for specific script."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with java script from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptResultTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultTable = (
		site_id as number, script_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/scripts/" & Text.From(script_id) & "/pages_without_script?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
script_id as (type number meta [
        Documentation.FieldCaption = "script_id",
        Documentation.FieldDescription = "Id for specific script."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages without java script from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptResultTable, AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/trademarks?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get trademarks from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultType = type table [
	id = number, name = text, duplicates = text, ignored = logical, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "ignored", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryTrademarksResultTable, AdvancedSitesSite_idQuality_assuranceInventoryTrademarksParamsType);


AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultTable = (
		site_id as number, trademark_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/inventory/trademarks/" & Text.From(trademark_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
trademark_id as (type number meta [
        Documentation.FieldCaption = "trademark_id",
        Documentation.FieldDescription = "Id for specific trademark."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with trademark from inventory"
    ];

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get broken links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultType = type table [
	id = number, url = text, http_status = number, last_checked = text, link_status_changed = text, message = text, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_checked", "link_status_changed", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksBroken_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultTable = (
		site_id as number, link_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/broken_links/" & Text.From(link_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with broken link"
    ];

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultType = type table [
	id = number, title = text, url = text, broken_links = number, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "broken_links", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/broken_links_in_documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get broken links in documents"
    ];

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultType = type table [
	id = number, url = text, documents = number, http_status = number, last_changed = text, last_checked = text, message = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_changed", "last_checked"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsResultTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsParamsType);


AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultTable = (
		site_id as number, link_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/broken_links_in_documents/" & Text.From(link_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get documents with broken link"
    ];

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultType = type table [
	id = number, url = text, checking_now = logical, occurs_on_pages = text, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsResultTable, AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsParamsType);


AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/documents_with_broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get documents with broken links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultType = type table [
	id = number, url = text, broken_links = number, checking_now = logical, last_modified = text, page_views = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "broken_links", "checking_now", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultTable = (
		site_id as number, document_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/documents_with_broken_links/" & Text.From(document_id) & "/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
document_id as (type number meta [
        Documentation.FieldCaption = "document_id",
        Documentation.FieldDescription = "Id for specific document."
    ]))
    as table meta [
        Documentation.Name = "Get all broken links in document"
    ];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultType = type table [
	id = number, url = text, occurs_on_pages = text
];
  
AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultTable = (
		site_id as number, document_id as number, optional ids as text, optional page_id as number) =>
    let
        ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ ids, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/documents_with_broken_links/" & Text.From(document_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
document_id as (type number meta [
        Documentation.FieldCaption = "document_id",
        Documentation.FieldDescription = "Id for specific document."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get pages with broken links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceLinksHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical data for links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksHistoryResultType = type table [
	broken_links = number, pages = number, timestamp = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksHistoryCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksHistoryResultTable, AdvancedSitesSite_idQuality_assuranceLinksHistoryParamsType);


AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/ignored_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get ignored links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultType = type table [
	id = number, url = text, created = text, person_id = number, person_name = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "created", "person_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/pages_with_broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with broken links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultType = type table [
	id = number, title = text, url = text, broken_links = number, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "broken_links", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/pages_with_broken_links/" & Text.From(page_id) & "/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get broken links from page with broken links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultType = type table [
	id = number, url = text, checking_now = logical, last_checked = text, link_status_changed = text, message = text
];
  
AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "last_checked", "link_status_changed"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksResultTable, AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/unsafe_domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get links to unsafe domains"
    ];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultType = type table [
	id = number, clicks_on_domain = number, documents = number, domain = text, last_checked = text, pages = number, status = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "last_checked", "pages", "status"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsResultTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsParamsType);


AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultTable = (
		site_id as number, domain_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/unsafe_domains/" & Text.From(domain_id) & "/documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get documents with unsafe domain from links"
    ];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultType = type table [
	id = number, url = text, checking_now = logical, last_modified = text, page_views = number
];
  
AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsResultTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsParamsType);


AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultTable = (
		site_id as number, domain_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/links/unsafe_domains/" & Text.From(domain_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
domain_id as (type number meta [
        Documentation.FieldCaption = "domain_id",
        Documentation.FieldDescription = "Id for specific domain."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with links to unsafe domain"
    ];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get check history from crawls"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultType = type table [
	id = number, all_links = number, all_pages = number, broken_links = number, broken_links_in_documents = number, check_date = text, known_links = number, known_pages = number, misspellings = number, new_links = number, new_pages = number, potential_misspellings = number, removed_links = number, removed_pages = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultType)
		, addedKey = Table.AddKey(appliedSchema, {"all_pages", "check_date", "known_pages", "new_pages", "removed_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get broken links from check in check history
"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultType = type table [
	id = number, url = text, documents = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/broken_links_in_documents?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get broken links in documents from check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultType = type table [
	id = number, url = text, documents = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/known_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get known links from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultType = type table [
	id = number, url = text, http_status = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/known_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get known pages from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultType = type table [
	id = number, title = text, url = text
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/new_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get new links from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultType = type table [
	id = number, url = text, http_status = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/new_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get new pages from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultType = type table [
	id = number, title = text, url = text
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/removed_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get removed links from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultType = type table [
	id = number, url = text, http_status = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultTable = (
		site_id as number, history_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/check_history/" & Text.From(history_id) & "/removed_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
history_id as (type number meta [
        Documentation.FieldCaption = "history_id",
        Documentation.FieldDescription = "Id for specific history point - Ie. a specific point in time where checks where run for the site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get removed pages from check in check history"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultType = type table [
	id = number, title = text, url = text
];
  
AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesResultTable, AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/groups?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewGroupsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get quality assurance groups"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultType = type table [
	id = number, broken_links = number, group_name = text, misspellings = number, pages = number, potential_misspellings = number, users = number
];
  
AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages", "users"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewGroupsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewGroupsResultTable, AdvancedSitesSite_idQuality_assuranceOverviewGroupsParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultTable = (
		site_id as number, group_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/groups/" & Text.From(group_id) & "/users?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get users from group"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultType = type table [
	id = number, email = text, fullname = text
];
  
AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersResultTable, AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/priority_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get priority pages"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_score = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesResultTable, AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceOverviewSummaryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/overview/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idQuality_assuranceOverviewSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get summary for quality assurance"
    ];

AdvancedSitesSite_idQuality_assuranceOverviewSummaryCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceOverviewSummaryResultTable, AdvancedSitesSite_idQuality_assuranceOverviewSummaryParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/accepted_words?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get accepted readability words"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultType = type table [
	id = number, accepted_word = text, created_by = text, created_time = text, is_global = logical, person_id = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "created_time", "is_global", "person_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/automated_readability/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for automated readability"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultType = type table [
	id = number, title = text, url = text, chars_with_digits = number, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, long_sentences_with_digits_unique = number, long_words_unique = number, page_level = number, page_views = number, sentences_with_digits = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "chars_with_digits", "checking_now", "created_time", "decision_id", "long_sentences_with_digits_unique", "long_words_unique", "sentences_with_digits", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/automated_readability/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for automated readability"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultType = type table [
	id = number, title = text, url = text, automated_readability_score = number, chars_with_digits = number, checking_now = logical, cms_url = text, long_sentences_with_digits_unique = number, long_words_unique = number, page_level = number, page_views = number, sentences_with_digits = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "chars_with_digits", "checking_now", "long_sentences_with_digits_unique", "long_words_unique", "sentences_with_digits", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/automated_readability/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for automated readability"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/automated_readability/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for automated readability"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, automated_readability_score = number, chars_with_digits = number, checking_now = logical, cms_url = text, long_sentences_with_digits_unique = number, long_words_unique = number, page_level = number, page_views = number, sentences_with_digits = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "chars_with_digits", "checking_now", "long_sentences_with_digits_unique", "long_words_unique", "sentences_with_digits", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/coleman_liau/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for coleman liau"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultType = type table [
	id = number, title = text, url = text, average_chars_with_digits = number, average_sentences_with_digits = number, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, long_sentences_with_digits_unique = number, long_words_with_digits_unique = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "average_chars_with_digits", "average_sentences_with_digits", "checking_now", "created_time", "decision_id", "long_sentences_with_digits_unique", "long_words_with_digits_unique"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/coleman_liau/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for coleman liau"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultType = type table [
	id = number, title = text, url = text, average_chars_with_digits = number, average_sentences_with_digits = number, checking_now = logical, cms_url = text, coleman_liau_score = number, long_sentences_with_digits_unique = number, long_words_with_digits_unique = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "average_chars_with_digits", "average_sentences_with_digits", "checking_now", "long_sentences_with_digits_unique", "long_words_with_digits_unique"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/coleman_liau/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for coleman liau"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/coleman_liau/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for coleman liau"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, average_chars_with_digits = number, average_sentences_with_digits = number, checking_now = logical, cms_url = text, coleman_liau_score = number, long_sentences_with_digits_unique = number, long_words_with_digits_unique = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "average_chars_with_digits", "average_sentences_with_digits", "checking_now", "long_sentences_with_digits_unique", "long_words_with_digits_unique"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_grade_level/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for flesch kincaid grade level"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "created_time", "decision_id", "long_sentences_unique", "poly_syllabic_words", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_grade_level/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for flesch kincaid grade level"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, flesch_kincaid_grade_level_score = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, poly_syllabic_words_unique = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "poly_syllabic_words", "poly_syllabic_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for flesch kincaid grade level"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for flesch kincaid grade level"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, flesch_kincaid_grade_level_score = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, poly_syllabic_words_unique = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "poly_syllabic_words", "poly_syllabic_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_reading_ease/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for flesch kincaid reading ease"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "created_time", "decision_id", "long_sentences_unique", "poly_syllabic_words", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_reading_ease/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for flesch kincaid reading ease"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, flesch_kincaid_reading_ease_score = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, poly_syllabic_words_unique = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "poly_syllabic_words", "poly_syllabic_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for flesch kincaid reading ease"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for flesch kincaid reading ease"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, flesch_kincaid_reading_ease_score = number, long_sentences_unique = number, page_level = number, page_views = number, poly_syllabic_words = number, poly_syllabic_words_unique = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "poly_syllabic_words", "poly_syllabic_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/gunning_fog/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for gunning fog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, complex_words_gunning_fog = number, complex_words_gunning_fog_unique = number, created_by = text, created_time = text, decision_id = number, long_sentences_gunning_fog_unique = number, page_level = number, page_views = number, sentences_gunning_fog = number, words_gunning_fog = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "complex_words_gunning_fog", "complex_words_gunning_fog_unique", "created_time", "decision_id", "long_sentences_gunning_fog_unique", "sentences_gunning_fog", "words_gunning_fog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/gunning_fog/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for gunning fog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, complex_words_gunning_fog = number, complex_words_gunning_fog_unique = number, gunning_fog_score = number, long_sentences_gunning_fog_unique = number, page_level = number, page_views = number, sentences_gunning_fog = number, words_gunning_fog = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "complex_words_gunning_fog", "complex_words_gunning_fog_unique", "long_sentences_gunning_fog_unique", "sentences_gunning_fog", "words_gunning_fog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/gunning_fog/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for gunning fog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/gunning_fog/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for gunning fog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, complex_words_gunning_fog = number, complex_words_gunning_fog_unique = number, gunning_fog_score = number, long_sentences_gunning_fog_unique = number, page_level = number, page_views = number, sentences_gunning_fog = number, words_gunning_fog = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "complex_words_gunning_fog", "complex_words_gunning_fog_unique", "long_sentences_gunning_fog_unique", "sentences_gunning_fog", "words_gunning_fog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/lix/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for lix"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, long_words = number, page_level = number, page_views = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "created_time", "decision_id", "long_words", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/lix/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for lix"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, lix_score = number, long_sentences_unique = number, long_words = number, long_words_unique = number, page_level = number, page_views = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "long_words", "long_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/lix/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for lix"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/lix/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for lix"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, lix_score = number, long_sentences_unique = number, long_words = number, long_words_unique = number, page_level = number, page_views = number, sentences = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences_unique", "long_words", "long_words_unique", "sentences", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/smog/excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get excluded pages for smog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, created_by = text, created_time = text, decision_id = number, page_level = number, page_views = number, poly_syllabic_words_smog = number, poly_syllabic_words_unique_smog = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "created_time", "decision_id", "poly_syllabic_words_smog", "poly_syllabic_words_unique_smog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/smog/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages for smog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, poly_syllabic_words_smog = number, poly_syllabic_words_unique_smog = number, smog_score = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "poly_syllabic_words_smog", "poly_syllabic_words_unique_smog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/smog/scores?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get readability scores for smog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultType = type table [
	id = number, bucket = text, max = number, min = number, pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "max", "min", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresParamsType);


AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultTable = (
		site_id as number, bucket_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/readability/tests/smog/scores/" & Text.From(bucket_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
bucket_id as (type number meta [
        Documentation.FieldCaption = "bucket_id",
        Documentation.FieldDescription = "Id of the readability bucket."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get pages with readability score for smog"
    ];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, poly_syllabic_words_smog = number, poly_syllabic_words_unique_smog = number, smog_score = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "poly_syllabic_words_smog", "poly_syllabic_words_unique_smog"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical data for spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultType = type table [
	misspellings = number, potential_misspellings = number, timestamp = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"misspellings", "potential_misspellings", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingHistoryCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingHistoryResultTable, AdvancedSitesSite_idQuality_assuranceSpellingHistoryParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultTable = (
		site_id as number, optional group_id as number, optional page_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/languages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get languages from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultType = type table [
	language_code = text, pages = number, percentage = number, spelling_support = logical
];
  
AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages", "spelling_support"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingLanguagesResultTable, AdvancedSitesSite_idQuality_assuranceSpellingLanguagesParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultTable = (
		site_id as number, language_code as text, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/languages/" & language_code & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
language_code as (type text meta [
        Documentation.FieldCaption = "language_code",
        Documentation.FieldDescription = "Language code for specific country (ie. ""en"", ""de"" etc.)"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with language from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultType = type table [
	id = number, title = text, url = text, all_languages = record, checking_now = logical, cms_url = text, language_code = text, page_level = number, percentage = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesResultTable, AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get misspellings from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultType = type table [
	id = number, preferred = text, suggestions = list, word = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsResultTable, AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultTable = (
		site_id as number, word_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/misspellings/" & Text.From(word_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
word_id as (type number meta [
        Documentation.FieldCaption = "word_id",
        Documentation.FieldDescription = "Id for specific word."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with misspelling from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, misspellings = number, page_level = number, page_views = number, potential_misspellings = number, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "misspellings", "potential_misspellings"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingPagesResultTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/pages/" & Text.From(page_id) & "/misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get misspellings for a page from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultType = type table [
	id = number, suggestions = list, word = text
];
  
AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsResultTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/pages/" & Text.From(page_id) & "/potential_misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get potential misspelling for a page from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultType = type table [
	id = number, suggestions = list, word = text
];
  
AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsResultTable, AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/potential_misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get potential misspellings from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultType = type table [
	id = number, preferred = text, suggestions = list, word = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsResultTable, AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsParamsType);


AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultTable = (
		site_id as number, word_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/quality_assurance/spelling/potential_misspellings/" & Text.From(word_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
word_id as (type number meta [
        Documentation.FieldCaption = "word_id",
        Documentation.FieldDescription = "Id for specific word."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with potential misspelling from spelling"
    ];

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, _siteimprove = record
];
  
AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesResultTable, AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesParamsType);


GetAdvancedQualityAssuranceNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get capture tags from inventory", "/sites/{site_id}/quality_assurance/inventory/capture_tags", AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsCall, "Function", "Function", true }, 
{ "Get capture tags occurrences from inventory", "/sites/{site_id}/quality_assurance/inventory/capture_tags/{tag_name_id}/occurrences", AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idOccurrencesCall, "Function", "Function", true }, 
{ "Get capture tags occurrences' pages from inventory", "/sites/{site_id}/quality_assurance/inventory/capture_tags/{tag_name_id}/values/{tag_value_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryCapture_tagsTag_name_idValuesTag_value_idPagesCall, "Function", "Function", true }, 
{ "Get css assets from inventory", "/sites/{site_id}/quality_assurance/inventory/css", AdvancedSitesSite_idQuality_assuranceInventoryCssCall, "Function", "Function", true }, 
{ "Get pages with css from css inventory", "/sites/{site_id}/quality_assurance/inventory/css/{css_id}/pages_with_css", AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_with_cssCall, "Function", "Function", true }, 
{ "Get pages without css from css inventory", "/sites/{site_id}/quality_assurance/inventory/css/{css_id}/pages_without_css", AdvancedSitesSite_idQuality_assuranceInventoryCssCss_idPages_without_cssCall, "Function", "Function", true }, 
{ "Get documents from inventory", "/sites/{site_id}/quality_assurance/inventory/documents", AdvancedSitesSite_idQuality_assuranceInventoryDocumentsCall, "Function", "Function", true }, 
{ "Get email addresses from inventory", "/sites/{site_id}/quality_assurance/inventory/email_addresses", AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesCall, "Function", "Function", true }, 
{ "Get pages with email from inventory", "/sites/{site_id}/quality_assurance/inventory/email_addresses/{email_address_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryEmail_addressesEmail_address_idPagesCall, "Function", "Function", true }, 
{ "Get history from inventory", "/sites/{site_id}/quality_assurance/inventory/history", AdvancedSitesSite_idQuality_assuranceInventoryHistoryCall, "Function", "Function", true }, 
{ "Get link texts from inventory", "/sites/{site_id}/quality_assurance/inventory/link_texts", AdvancedSitesSite_idQuality_assuranceInventoryLink_textsCall, "Function", "Function", true }, 
{ "Get pages with link text from inventory", "/sites/{site_id}/quality_assurance/inventory/link_texts/{text_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryLink_textsText_idPagesCall, "Function", "Function", true }, 
{ "Get links from inventory", "/sites/{site_id}/quality_assurance/inventory/links", AdvancedSitesSite_idQuality_assuranceInventoryLinksCall, "Function", "Function", true }, 
{ "Get documents with link", "/sites/{site_id}/quality_assurance/inventory/links/{link_id}/documents", AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idDocumentsCall, "Function", "Function", true }, 
{ "Get pages with link", "/sites/{site_id}/quality_assurance/inventory/links/{link_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryLinksLink_idPagesCall, "Function", "Function", true }, 
{ "Get media files from inventory", "/sites/{site_id}/quality_assurance/inventory/media", AdvancedSitesSite_idQuality_assuranceInventoryMediaCall, "Function", "Function", true }, 
{ "Get meta tags from inventory", "/sites/{site_id}/quality_assurance/inventory/meta_tags", AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsCall, "Function", "Function", true }, 
{ "Get meta tag contents", "/sites/{site_id}/quality_assurance/inventory/meta_tags/{meta_name_id}/contents", AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsCall, "Function", "Function", true }, 
{ "Get meta tag pages", "/sites/{site_id}/quality_assurance/inventory/meta_tags/{meta_name_id}/contents/{meta_content_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryMeta_tagsMeta_name_idContentsMeta_content_idPagesCall, "Function", "Function", true }, 
{ "Get pages from inventory", "/sites/{site_id}/quality_assurance/inventory/pages", AdvancedSitesSite_idQuality_assuranceInventoryPagesCall, "Function", "Function", true }, 
{ "Get referring pages for page in inventory", "/sites/{site_id}/quality_assurance/inventory/pages/{page_id}/referring_pages", AdvancedSitesSite_idQuality_assuranceInventoryPagesPage_idReferring_pagesCall, "Function", "Function", true }, 
{ "Get personal id numbers from inventory", "/sites/{site_id}/quality_assurance/inventory/personal_id_numbers", AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersCall, "Function", "Function", true }, 
{ "Get documents with personal id numbers from inventory", "/sites/{site_id}/quality_assurance/inventory/personal_id_numbers/{personal_id_number_id}/documents", AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idDocumentsCall, "Function", "Function", true }, 
{ "Get pages with personal id numbers from inventory", "/sites/{site_id}/quality_assurance/inventory/personal_id_numbers/{personal_id_number_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryPersonal_id_numbersPersonal_id_number_idPagesCall, "Function", "Function", true }, 
{ "Get phone numbers from inventory", "/sites/{site_id}/quality_assurance/inventory/phone_numbers", AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersCall, "Function", "Function", true }, 
{ "Get pages with phone number from inventory", "/sites/{site_id}/quality_assurance/inventory/phone_numbers/{phone_number_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryPhone_numbersPhone_number_idPagesCall, "Function", "Function", true }, 
{ "Get java scripts from inventory", "/sites/{site_id}/quality_assurance/inventory/scripts", AdvancedSitesSite_idQuality_assuranceInventoryScriptsCall, "Function", "Function", true }, 
{ "Get pages with java script from inventory", "/sites/{site_id}/quality_assurance/inventory/scripts/{script_id}/pages_with_script", AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_with_scriptCall, "Function", "Function", true }, 
{ "Get pages without java script from inventory", "/sites/{site_id}/quality_assurance/inventory/scripts/{script_id}/pages_without_script", AdvancedSitesSite_idQuality_assuranceInventoryScriptsScript_idPages_without_scriptCall, "Function", "Function", true }, 
{ "Get trademarks from inventory", "/sites/{site_id}/quality_assurance/inventory/trademarks", AdvancedSitesSite_idQuality_assuranceInventoryTrademarksCall, "Function", "Function", true }, 
{ "Get pages with trademark from inventory", "/sites/{site_id}/quality_assurance/inventory/trademarks/{trademark_id}/pages", AdvancedSitesSite_idQuality_assuranceInventoryTrademarksTrademark_idPagesCall, "Function", "Function", true }, 
{ "Get broken links", "/sites/{site_id}/quality_assurance/links/broken_links", AdvancedSitesSite_idQuality_assuranceLinksBroken_linksCall, "Function", "Function", true }, 
{ "Get pages with broken link", "/sites/{site_id}/quality_assurance/links/broken_links/{link_id}/pages", AdvancedSitesSite_idQuality_assuranceLinksBroken_linksLink_idPagesCall, "Function", "Function", true }, 
{ "Get broken links in documents", "/sites/{site_id}/quality_assurance/links/broken_links_in_documents", AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsCall, "Function", "Function", true }, 
{ "Get documents with broken link", "/sites/{site_id}/quality_assurance/links/broken_links_in_documents/{link_id}/documents", AdvancedSitesSite_idQuality_assuranceLinksBroken_links_in_documentsLink_idDocumentsCall, "Function", "Function", true }, 
{ "Get documents with broken links", "/sites/{site_id}/quality_assurance/links/documents_with_broken_links", AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksCall, "Function", "Function", true }, 
{ "Get all broken links in document", "/sites/{site_id}/quality_assurance/links/documents_with_broken_links/{document_id}/broken_links", AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idBroken_linksCall, "Function", "Function", true }, 
{ "Get pages with broken links", "/sites/{site_id}/quality_assurance/links/documents_with_broken_links/{document_id}/pages", AdvancedSitesSite_idQuality_assuranceLinksDocuments_with_broken_linksDocument_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for links", "/sites/{site_id}/quality_assurance/links/history", AdvancedSitesSite_idQuality_assuranceLinksHistoryCall, "Function", "Function", true }, 
{ "Get ignored links", "/sites/{site_id}/quality_assurance/links/ignored_links", AdvancedSitesSite_idQuality_assuranceLinksIgnored_linksCall, "Function", "Function", true }, 
{ "Get pages with broken links", "/sites/{site_id}/quality_assurance/links/pages_with_broken_links", AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksCall, "Function", "Function", true }, 
{ "Get broken links from page with broken links", "/sites/{site_id}/quality_assurance/links/pages_with_broken_links/{page_id}/broken_links", AdvancedSitesSite_idQuality_assuranceLinksPages_with_broken_linksPage_idBroken_linksCall, "Function", "Function", true }, 
{ "Get links to unsafe domains", "/sites/{site_id}/quality_assurance/links/unsafe_domains", AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsCall, "Function", "Function", true }, 
{ "Get documents with unsafe domain from links", "/sites/{site_id}/quality_assurance/links/unsafe_domains/{domain_id}/documents", AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idDocumentsCall, "Function", "Function", true }, 
{ "Get pages with links to unsafe domain", "/sites/{site_id}/quality_assurance/links/unsafe_domains/{domain_id}/pages", AdvancedSitesSite_idQuality_assuranceLinksUnsafe_domainsDomain_idPagesCall, "Function", "Function", true }, 
{ "Get check history from crawls", "/sites/{site_id}/quality_assurance/overview/check_history", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyCall, "Function", "Function", true }, 
{ "Get broken links from check in check history
", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/broken_links", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_linksCall, "Function", "Function", true }, 
{ "Get broken links in documents from check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/broken_links_in_documents", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idBroken_links_in_documentsCall, "Function", "Function", true }, 
{ "Get known links from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/known_links", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_linksCall, "Function", "Function", true }, 
{ "Get known pages from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/known_pages", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idKnown_pagesCall, "Function", "Function", true }, 
{ "Get new links from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/new_links", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_linksCall, "Function", "Function", true }, 
{ "Get new pages from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/new_pages", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idNew_pagesCall, "Function", "Function", true }, 
{ "Get removed links from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/removed_links", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_linksCall, "Function", "Function", true }, 
{ "Get removed pages from check in check history", "/sites/{site_id}/quality_assurance/overview/check_history/{history_id}/removed_pages", AdvancedSitesSite_idQuality_assuranceOverviewCheck_historyHistory_idRemoved_pagesCall, "Function", "Function", true }, 
{ "Get quality assurance groups", "/sites/{site_id}/quality_assurance/overview/groups", AdvancedSitesSite_idQuality_assuranceOverviewGroupsCall, "Function", "Function", true }, 
{ "Get users from group", "/sites/{site_id}/quality_assurance/overview/groups/{group_id}/users", AdvancedSitesSite_idQuality_assuranceOverviewGroupsGroup_idUsersCall, "Function", "Function", true }, 
{ "Get priority pages", "/sites/{site_id}/quality_assurance/overview/priority_pages", AdvancedSitesSite_idQuality_assuranceOverviewPriority_pagesCall, "Function", "Function", true }, 
{ "Get summary for quality assurance", "/sites/{site_id}/quality_assurance/overview/summary", AdvancedSitesSite_idQuality_assuranceOverviewSummaryCall, "Function", "Function", true }, 
{ "Get accepted readability words", "/sites/{site_id}/quality_assurance/readability/accepted_words", AdvancedSitesSite_idQuality_assuranceReadabilityAccepted_wordsCall, "Function", "Function", true }, 
{ "Get excluded pages for automated readability", "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for automated readability", "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityPagesCall, "Function", "Function", true }, 
{ "Get readability scores for automated readability", "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for automated readability", "/sites/{site_id}/quality_assurance/readability/tests/automated_readability/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsAutomated_readabilityScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for coleman liau", "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for coleman liau", "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauPagesCall, "Function", "Function", true }, 
{ "Get readability scores for coleman liau", "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for coleman liau", "/sites/{site_id}/quality_assurance/readability/tests/coleman_liau/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsColeman_liauScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for flesch kincaid grade level", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for flesch kincaid grade level", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelPagesCall, "Function", "Function", true }, 
{ "Get readability scores for flesch kincaid grade level", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for flesch kincaid grade level", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_grade_level/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_grade_levelScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for flesch kincaid reading ease", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for flesch kincaid reading ease", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easePagesCall, "Function", "Function", true }, 
{ "Get readability scores for flesch kincaid reading ease", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for flesch kincaid reading ease", "/sites/{site_id}/quality_assurance/readability/tests/flesch_kincaid_reading_ease/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsFlesch_kincaid_reading_easeScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for gunning fog", "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for gunning fog", "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogPagesCall, "Function", "Function", true }, 
{ "Get readability scores for gunning fog", "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for gunning fog", "/sites/{site_id}/quality_assurance/readability/tests/gunning_fog/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsGunning_fogScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for lix", "/sites/{site_id}/quality_assurance/readability/tests/lix/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for lix", "/sites/{site_id}/quality_assurance/readability/tests/lix/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixPagesCall, "Function", "Function", true }, 
{ "Get readability scores for lix", "/sites/{site_id}/quality_assurance/readability/tests/lix/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for lix", "/sites/{site_id}/quality_assurance/readability/tests/lix/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsLixScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get excluded pages for smog", "/sites/{site_id}/quality_assurance/readability/tests/smog/excluded_pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogExcluded_pagesCall, "Function", "Function", true }, 
{ "Get readability pages for smog", "/sites/{site_id}/quality_assurance/readability/tests/smog/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogPagesCall, "Function", "Function", true }, 
{ "Get readability scores for smog", "/sites/{site_id}/quality_assurance/readability/tests/smog/scores", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresCall, "Function", "Function", true }, 
{ "Get pages with readability score for smog", "/sites/{site_id}/quality_assurance/readability/tests/smog/scores/{bucket_id}/pages", AdvancedSitesSite_idQuality_assuranceReadabilityTestsSmogScoresBucket_idPagesCall, "Function", "Function", true }, 
{ "Get historical data for spelling", "/sites/{site_id}/quality_assurance/spelling/history", AdvancedSitesSite_idQuality_assuranceSpellingHistoryCall, "Function", "Function", true }, 
{ "Get languages from spelling", "/sites/{site_id}/quality_assurance/spelling/languages", AdvancedSitesSite_idQuality_assuranceSpellingLanguagesCall, "Function", "Function", true }, 
{ "Get pages with language from spelling", "/sites/{site_id}/quality_assurance/spelling/languages/{language_code}/pages", AdvancedSitesSite_idQuality_assuranceSpellingLanguagesLanguage_codePagesCall, "Function", "Function", true }, 
{ "Get misspellings from spelling", "/sites/{site_id}/quality_assurance/spelling/misspellings", AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsCall, "Function", "Function", true }, 
{ "Get pages with misspelling from spelling", "/sites/{site_id}/quality_assurance/spelling/misspellings/{word_id}/pages", AdvancedSitesSite_idQuality_assuranceSpellingMisspellingsWord_idPagesCall, "Function", "Function", true }, 
{ "Get pages from spelling", "/sites/{site_id}/quality_assurance/spelling/pages", AdvancedSitesSite_idQuality_assuranceSpellingPagesCall, "Function", "Function", true }, 
{ "Get misspellings for a page from spelling", "/sites/{site_id}/quality_assurance/spelling/pages/{page_id}/misspellings", AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idMisspellingsCall, "Function", "Function", true }, 
{ "Get potential misspelling for a page from spelling", "/sites/{site_id}/quality_assurance/spelling/pages/{page_id}/potential_misspellings", AdvancedSitesSite_idQuality_assuranceSpellingPagesPage_idPotential_misspellingsCall, "Function", "Function", true }, 
{ "Get potential misspellings from spelling", "/sites/{site_id}/quality_assurance/spelling/potential_misspellings", AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsCall, "Function", "Function", true }, 
{ "Get pages with potential misspelling from spelling", "/sites/{site_id}/quality_assurance/spelling/potential_misspellings/{word_id}/pages", AdvancedSitesSite_idQuality_assuranceSpellingPotential_misspellingsWord_idPagesCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/decisions/ignored_issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoDecisionsIgnored_issuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get ignored issues from decisions"
    ];

AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultType = type table [
	id = number, ignored_by = text, ignored_time = text, issue_type = text, issues = number, note = text, severity = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "issue_type", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoDecisionsIgnored_issuesCall = Value.ReplaceType(AdvancedSitesSite_idSeoDecisionsIgnored_issuesResultTable, AdvancedSitesSite_idSeoDecisionsIgnored_issuesParamsType);


AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultTable = (
		site_id as number, optional group_id as number, optional seo_issue as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
seo_issue = if seo_issue = null then "" else "&seo_issue=" & Uri.EscapeDataString(seo_issue),
parameters = Text.TrimStart(Text.Combine({ group_id, seo_issue, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/decisions/ignored_issues/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional seo_issue as (type text meta [
        Documentation.FieldCaption = "seo_issue",
        Documentation.FieldDescription = "Issue filter."
    ]))
    as table meta [
        Documentation.Name = "Get ignored issue's pages from decisions"
    ];

AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, ignored_by = text, ignored_time = text, note = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesResultTable, AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesParamsType);


AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/decisions/ignored_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoDecisionsIgnored_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get ignored pages from decisions"
    ];

AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, note = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoDecisionsIgnored_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoDecisionsIgnored_pagesResultTable, AdvancedSitesSite_idSeoDecisionsIgnored_pagesParamsType);


AdvancedSitesSite_idSeoIssuesResultTable = (
		site_id as number, optional group_id as number, optional responsibility as text, optional severity as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
responsibility = if responsibility = null then "" else "&responsibility=" & Uri.EscapeDataString(responsibility),
severity = if severity = null then "" else "&severity=" & Uri.EscapeDataString(severity),
parameters = Text.TrimStart(Text.Combine({ group_id, responsibility, severity, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional responsibility as (type text meta [
        Documentation.FieldCaption = "responsibility",
        Documentation.FieldDescription = "Responsibility filter"
    ]), 
optional severity as (type text meta [
        Documentation.FieldCaption = "severity",
        Documentation.FieldDescription = "Severity filter."
    ]))
    as table meta [
        Documentation.Name = "Get issues"
    ];

AdvancedSitesSite_idSeoIssuesResultType = type table [
	affected_pages = number, issue_type = text, role = text, severity = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"affected_pages", "issue_type", "role", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesResultTable, AdvancedSitesSite_idSeoIssuesParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_h1_headings/h1_headings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get ""duplicate H1 headings"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultType = type table [
	id = number, heading = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultTable = (
		site_id as number, h1heading_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_h1_headings/h1_headings/" & Text.From(h1heading_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
h1heading_id as (type number meta [
        Documentation.FieldCaption = "h1heading_id",
        Documentation.FieldDescription = "Id for specific H1 heading."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""duplicate H1 headings"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, issue_id = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "issue_id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_meta_descriptions/meta_descriptions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get ""duplicate meta descriptions"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultType = type table [
	meta_description = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultTable = (
		site_id as number, meta_name_id as number, meta_content_id as number, optional group_id as number, optional ids as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_meta_descriptions/meta_descriptions/" & Text.From(meta_name_id) & "/" & Text.From(meta_content_id) & "/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
meta_name_id as (type number meta [
        Documentation.FieldCaption = "meta_name_id",
        Documentation.FieldDescription = "Id for specific meta name."
    ]), 
meta_content_id as (type number meta [
        Documentation.FieldCaption = "meta_content_id",
        Documentation.FieldDescription = "Id for specific meta content."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get pages with ""duplicate meta descriptions"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_page_title/titles?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get ""duplicate page titles"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultType = type table [
	title = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesParamsType);


AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional title as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
title = if title = null then "" else "&title=" & Uri.EscapeDataString(title),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, title, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/duplicate_page_title/titles/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional title as (type text meta [
        Documentation.FieldCaption = "title",
        Documentation.FieldDescription = "URL escaped title of page."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""duplicate page titles"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesResultTable, AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_h1_heading/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in h1"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_image_alt_text/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in image alt text"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_internal_link_text/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in internal link text"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_internal_link_text/pages/" & Text.From(page_id) & "/link_texts?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get link texts for ""keyword not included in internal link text"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultType = type table [
	id = number, link_text = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultTable = (
		site_id as number, page_id as number, link_text_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_internal_link_text/pages/" & Text.From(page_id) & "/link_texts/" & Text.From(link_text_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
link_text_id as (type number meta [
        Documentation.FieldCaption = "link_text_id",
        Documentation.FieldDescription = "Id for specific link text."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get referring pages to link text for ""keyword not included in internal link text"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_meta_description/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in meta description"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_page_title/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in page title"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_sub_headings/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in sub headings"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesParamsType);


AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/keyword_not_included_in_url/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""keyword not included in url"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesResultTable, AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesParamsType);


AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/page_excluded_by_noindex_nofollow/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""pages excluded by noindex/nofollow"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesResultTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesParamsType);


AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/page_excluded_by_noindex_nofollow/pages/" & Text.From(page_id) & "/referring_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get referring pages for ""pages excluded by noindex/nofollow"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesResultTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesParamsType);


AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/page_excluded_by_rel_canonical/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""page excluded by rel=canonical"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesResultTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesParamsType);


AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/page_excluded_by_robots/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""pages excluded by robots.txt"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesResultTable, AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesParamsType);


AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/page_not_included_in_xml_sitemap/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""page not included in xml sitemap"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesResultTable, AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesParamsType);


AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/pages_without_h1_heading/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""pages without h1 headings"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesResultTable, AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesParamsType);


AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/pages_without_meta_description/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""pages without meta descriptions"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesResultTable, AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesParamsType);


AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/pages_without_page_title/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get pages for ""pages without page title"" from issues"
    ];

AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesResultTable, AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesParamsType);


AdvancedSitesSite_idSeoIssuesRedirectLinksResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/redirect/links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesRedirectLinksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesRedirectLinksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get redirect links from issues"
    ];

AdvancedSitesSite_idSeoIssuesRedirectLinksResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, first_seen = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesRedirectLinksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesRedirectLinksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesRedirectLinksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "first_seen"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesRedirectLinksCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesRedirectLinksResultTable, AdvancedSitesSite_idSeoIssuesRedirectLinksParamsType);


AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultTable = (
		site_id as number, link_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/issues/redirect/links/" & Text.From(link_id) & "/steps?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
link_id as (type number meta [
        Documentation.FieldCaption = "link_id",
        Documentation.FieldDescription = "Id of a specific link/URL."
    ]))
    as table meta [
        Documentation.Name = "Get redirection steps in redirect links from issues"
    ];

AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultType = type table [
	id = number, url = text, http_status = number, is_end_page = logical, is_start_page = logical, _siteimprove = record
];
  
AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "is_end_page", "is_start_page"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsCall = Value.ReplaceType(AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsResultTable, AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsParamsType);


AdvancedSitesSite_idSeoOverviewGroupsResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/overview/groups?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoOverviewGroupsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoOverviewGroupsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get SEO groups"
    ];

AdvancedSitesSite_idSeoOverviewGroupsResultType = type table [
	id = number, errors = number, group_name = text, group_users = number, needs_review = number, pages = number, searchable_pages = number, warnings = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeoOverviewGroupsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoOverviewGroupsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoOverviewGroupsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "group_users", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoOverviewGroupsCall = Value.ReplaceType(AdvancedSitesSite_idSeoOverviewGroupsResultTable, AdvancedSitesSite_idSeoOverviewGroupsParamsType);


AdvancedSitesSite_idSeoOverviewPoliciesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/overview/policies?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoOverviewPoliciesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoOverviewPoliciesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get SEO policies"
    ];

AdvancedSitesSite_idSeoOverviewPoliciesResultType = type table [
	id = number, name = text, all_sites = logical, category = text, created_by = text, created_date = text, edited_by = text, group_matches = number, last_edited = text, matches = number, note = text, pending_execution = logical, priority = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoOverviewPoliciesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoOverviewPoliciesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoOverviewPoliciesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "all_sites", "category", "created_date", "matches", "pending_execution", "priority"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoOverviewPoliciesCall = Value.ReplaceType(AdvancedSitesSite_idSeoOverviewPoliciesResultTable, AdvancedSitesSite_idSeoOverviewPoliciesParamsType);


AdvancedSitesSite_idSeoOverviewSummaryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/overview/summary?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoOverviewSummaryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoOverviewSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get summary for SEO"
    ];

AdvancedSitesSite_idSeoOverviewSummaryResultType = type table [
	affected_pages = number, issues = number, severity = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoOverviewSummaryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoOverviewSummaryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoOverviewSummaryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"affected_pages", "issues", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoOverviewSummaryCall = Value.ReplaceType(AdvancedSitesSite_idSeoOverviewSummaryResultTable, AdvancedSitesSite_idSeoOverviewSummaryParamsType);


AdvancedSitesSite_idSeoPagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoPagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoPagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages"
    ];

AdvancedSitesSite_idSeoPagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, issues = number, keywords = list, page_level = number, page_views = number, searchable = logical, _siteimprove = record
];
  
AdvancedSitesSite_idSeoPagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoPagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoPagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "searchable"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoPagesCall = Value.ReplaceType(AdvancedSitesSite_idSeoPagesResultTable, AdvancedSitesSite_idSeoPagesParamsType);


AdvancedSitesSite_idSeoPagesPage_idIssuesResultTable = (
		site_id as number, page_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seo/pages/" & Text.From(page_id) & "/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeoPagesPage_idIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeoPagesPage_idIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get issues for page"
    ];

AdvancedSitesSite_idSeoPagesPage_idIssuesResultType = type table [
	id = number, checking_now = logical, issue_type = text, severity = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeoPagesPage_idIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeoPagesPage_idIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeoPagesPage_idIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "issue_type", "severity"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeoPagesPage_idIssuesCall = Value.ReplaceType(AdvancedSitesSite_idSeoPagesPage_idIssuesResultTable, AdvancedSitesSite_idSeoPagesPage_idIssuesParamsType);


GetAdvancedSEONavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get ignored issues from decisions", "/sites/{site_id}/seo/decisions/ignored_issues", AdvancedSitesSite_idSeoDecisionsIgnored_issuesCall, "Function", "Function", true }, 
{ "Get ignored issue's pages from decisions", "/sites/{site_id}/seo/decisions/ignored_issues/pages", AdvancedSitesSite_idSeoDecisionsIgnored_issuesPagesCall, "Function", "Function", true }, 
{ "Get ignored pages from decisions", "/sites/{site_id}/seo/decisions/ignored_pages", AdvancedSitesSite_idSeoDecisionsIgnored_pagesCall, "Function", "Function", true }, 
{ "Get issues", "/sites/{site_id}/seo/issues", AdvancedSitesSite_idSeoIssuesCall, "Function", "Function", true }, 
{ "Get ""duplicate H1 headings"" from issues", "/sites/{site_id}/seo/issues/duplicate_h1_headings/h1_headings", AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsCall, "Function", "Function", true }, 
{ "Get pages for ""duplicate H1 headings"" from issues", "/sites/{site_id}/seo/issues/duplicate_h1_headings/h1_headings/{h1heading_id}/pages", AdvancedSitesSite_idSeoIssuesDuplicate_h1_headingsH1_headingsH1heading_idPagesCall, "Function", "Function", true }, 
{ "Get ""duplicate meta descriptions"" from issues", "/sites/{site_id}/seo/issues/duplicate_meta_descriptions/meta_descriptions", AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsCall, "Function", "Function", true }, 
{ "Get pages with ""duplicate meta descriptions"" from issues", "/sites/{site_id}/seo/issues/duplicate_meta_descriptions/meta_descriptions/{meta_name_id}/{meta_content_id}/pages", AdvancedSitesSite_idSeoIssuesDuplicate_meta_descriptionsMeta_descriptionsMeta_name_idMeta_content_idPagesCall, "Function", "Function", true }, 
{ "Get ""duplicate page titles"" from issues", "/sites/{site_id}/seo/issues/duplicate_page_title/titles", AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesCall, "Function", "Function", true }, 
{ "Get pages for ""duplicate page titles"" from issues", "/sites/{site_id}/seo/issues/duplicate_page_title/titles/pages", AdvancedSitesSite_idSeoIssuesDuplicate_page_titleTitlesPagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in h1"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_h1_heading/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_h1_headingPagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in image alt text"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_image_alt_text/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_image_alt_textPagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in internal link text"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesCall, "Function", "Function", true }, 
{ "Get link texts for ""keyword not included in internal link text"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages/{page_id}/link_texts", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsCall, "Function", "Function", true }, 
{ "Get referring pages to link text for ""keyword not included in internal link text"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_internal_link_text/pages/{page_id}/link_texts/{link_text_id}/referring_pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_internal_link_textPagesPage_idLink_textsLink_text_idReferring_pagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in meta description"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_meta_description/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_meta_descriptionPagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in page title"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_page_title/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_page_titlePagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in sub headings"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_sub_headings/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_sub_headingsPagesCall, "Function", "Function", true }, 
{ "Get pages for ""keyword not included in url"" from issues", "/sites/{site_id}/seo/issues/keyword_not_included_in_url/pages", AdvancedSitesSite_idSeoIssuesKeyword_not_included_in_urlPagesCall, "Function", "Function", true }, 
{ "Get pages for ""pages excluded by noindex/nofollow"" from issues", "/sites/{site_id}/seo/issues/page_excluded_by_noindex_nofollow/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesCall, "Function", "Function", true }, 
{ "Get referring pages for ""pages excluded by noindex/nofollow"" from issues", "/sites/{site_id}/seo/issues/page_excluded_by_noindex_nofollow/pages/{page_id}/referring_pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_noindex_nofollowPagesPage_idReferring_pagesCall, "Function", "Function", true }, 
{ "Get pages for ""page excluded by rel=canonical"" from issues", "/sites/{site_id}/seo/issues/page_excluded_by_rel_canonical/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_rel_canonicalPagesCall, "Function", "Function", true }, 
{ "Get pages for ""pages excluded by robots.txt"" from issues", "/sites/{site_id}/seo/issues/page_excluded_by_robots/pages", AdvancedSitesSite_idSeoIssuesPage_excluded_by_robotsPagesCall, "Function", "Function", true }, 
{ "Get pages for ""page not included in xml sitemap"" from issues", "/sites/{site_id}/seo/issues/page_not_included_in_xml_sitemap/pages", AdvancedSitesSite_idSeoIssuesPage_not_included_in_xml_sitemapPagesCall, "Function", "Function", true }, 
{ "Get pages for ""pages without h1 headings"" from issues", "/sites/{site_id}/seo/issues/pages_without_h1_heading/pages", AdvancedSitesSite_idSeoIssuesPages_without_h1_headingPagesCall, "Function", "Function", true }, 
{ "Get pages for ""pages without meta descriptions"" from issues", "/sites/{site_id}/seo/issues/pages_without_meta_description/pages", AdvancedSitesSite_idSeoIssuesPages_without_meta_descriptionPagesCall, "Function", "Function", true }, 
{ "Get pages for ""pages without page title"" from issues", "/sites/{site_id}/seo/issues/pages_without_page_title/pages", AdvancedSitesSite_idSeoIssuesPages_without_page_titlePagesCall, "Function", "Function", true }, 
{ "Get redirect links from issues", "/sites/{site_id}/seo/issues/redirect/links", AdvancedSitesSite_idSeoIssuesRedirectLinksCall, "Function", "Function", true }, 
{ "Get redirection steps in redirect links from issues", "/sites/{site_id}/seo/issues/redirect/links/{link_id}/steps", AdvancedSitesSite_idSeoIssuesRedirectLinksLink_idStepsCall, "Function", "Function", true }, 
{ "Get SEO groups", "/sites/{site_id}/seo/overview/groups", AdvancedSitesSite_idSeoOverviewGroupsCall, "Function", "Function", true }, 
{ "Get SEO policies", "/sites/{site_id}/seo/overview/policies", AdvancedSitesSite_idSeoOverviewPoliciesCall, "Function", "Function", true }, 
{ "Get summary for SEO", "/sites/{site_id}/seo/overview/summary", AdvancedSitesSite_idSeoOverviewSummaryCall, "Function", "Function", true }, 
{ "Get pages", "/sites/{site_id}/seo/pages", AdvancedSitesSite_idSeoPagesCall, "Function", "Function", true }, 
{ "Get issues for page", "/sites/{site_id}/seo/pages/{page_id}/issues", AdvancedSitesSite_idSeoPagesPage_idIssuesCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;



AdvancedSitesSite_idSeov2Activity_plansResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get activity plans"
    ];

AdvancedSitesSite_idSeov2Activity_plansResultType = type table [
	id = number, activity_plan_name = text, default_database = text, description = text, keywords = number, search_engine_visibility = number
];
  
AdvancedSitesSite_idSeov2Activity_plansResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "default_database", "keywords"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansResultTable, AdvancedSitesSite_idSeov2Activity_plansParamsType);


AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultTable = (
		site_id as number, activity_plan_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/plans/" & Text.From(activity_plan_id) & "/competitors?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]))
    as table meta [
        Documentation.Name = "Get competitors for the specific activity plan"
    ];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultType = type table [
	name = text, search_engine_visibility = record
];
  
AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultType)
		
    in
		appliedSchema meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsResultTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsParamsType);


AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultTable = (
		site_id as number, activity_plan_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/plans/" & Text.From(activity_plan_id) & "/competitors/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get competitors search engine visibility historically"
    ];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultType = type table [
	name = text, data = record, search_engine_visibility = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"search_engine_visibility", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryResultTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryParamsType);


AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultTable = (
		site_id as number, activity_plan_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/plans/" & Text.From(activity_plan_id) & "/competitors/positions?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]))
    as table meta [
        Documentation.Name = "Get the position distribution of competitors"
    ];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultType = type table [
	name = text, keywords = number, range = text
];
  
AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"keywords"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsResultTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsParamsType);


AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultTable = (
		site_id as number, activity_plan_id as number, optional range as text) =>
    let
        range = if range = null then "" else "&range=" & Uri.EscapeDataString(range),
parameters = Text.TrimStart(Text.Combine({ range, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/plans/" & Text.From(activity_plan_id) & "/competitors/positions/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]), 
optional range as (type text meta [
        Documentation.FieldCaption = "range",
        Documentation.FieldDescription = "The range of the keywords"
    ]))
    as table meta [
        Documentation.Name = "Get the position distribution for your competitors historically"
    ];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultType = type table [
	data = record, timestamp = text
];
  
AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryResultTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryParamsType);


AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultTable = (
		site_id as number, activity_plan_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/plans/" & Text.From(activity_plan_id) & "/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get historical metrics for the activity plan"
    ];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultType = type table [
	average_keyword_position = number, estimated_traffic = number, keywords = number, search_engine_visibility = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"average_keyword_position", "estimated_traffic", "keywords", "search_engine_visibility", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryResultTable, AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryParamsType);


AdvancedSitesSite_idSeov2Activity_plansSummaryResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/activity_plans/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2Activity_plansSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get overall statistics for all activity plans"
    ];

AdvancedSitesSite_idSeov2Activity_plansSummaryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Activity_plansSummaryResultTable, AdvancedSitesSite_idSeov2Activity_plansSummaryParamsType);


AdvancedSitesSite_idSeov2Content_optimization_keywordsResultTable = (
		site_id as number, optional activity_plan_id as number, optional ids as text, optional query as text) =>
    let
        activity_plan_id = if activity_plan_id = null then "" else "&activity_plan_id=" & Uri.EscapeDataString(Text.From(activity_plan_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ activity_plan_id, ids, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/content_optimization_keywords?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Content_optimization_keywordsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Content_optimization_keywordsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get content optimization keywords"
    ];

AdvancedSitesSite_idSeov2Content_optimization_keywordsResultType = type table [
	id = number, title = text, checking_now = logical, content_issues = number, database = text, issue_progress = number, keyword_issues = number, page_id = number, search_volume = record, target_url = text
];
  
AdvancedSitesSite_idSeov2Content_optimization_keywordsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Content_optimization_keywordsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Content_optimization_keywordsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "content_issues", "database", "keyword_issues"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Content_optimization_keywordsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Content_optimization_keywordsResultTable, AdvancedSitesSite_idSeov2Content_optimization_keywordsParamsType);


AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryResultTable = (
		site_id as number, optional activity_plan_id as number) =>
    let
        activity_plan_id = if activity_plan_id = null then "" else "&activity_plan_id=" & Uri.EscapeDataString(Text.From(activity_plan_id)),
parameters = Text.TrimStart(Text.Combine({ activity_plan_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/content_optimization_keywords/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]))
    as table meta [
        Documentation.Name = "Get overall statistics for content optimization keywords"
    ];

AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryResultTable, AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryParamsType);


AdvancedSitesSite_idSeov2IssuesResultTable = (
		site_id as number, optional category as text, optional complexity as text, optional fixed as logical, optional group_id as number, optional page_id as number) =>
    let
        category = if category = null then "" else "&category=" & Uri.EscapeDataString(category),
complexity = if complexity = null then "" else "&complexity=" & Uri.EscapeDataString(complexity),
fixed = if fixed = null then "" else "&fixed=" & Uri.EscapeDataString(Text.From(fixed)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ category, complexity, fixed, group_id, page_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional category as (type text meta [
        Documentation.FieldCaption = "category",
        Documentation.FieldDescription = "The category filter"
    ]), 
optional complexity as (type text meta [
        Documentation.FieldCaption = "complexity",
        Documentation.FieldDescription = "The complexity filter"
    ]), 
optional fixed as (type logical meta [
        Documentation.FieldCaption = "fixed",
        Documentation.FieldDescription = "The fixed filter"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get issues"
    ];

AdvancedSitesSite_idSeov2IssuesResultType = type table [
	complexity = text, issue_name = text, issue_type = text, occurrences = number, seo_points_gained = number, seo_points_to_gain = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"complexity", "issue_type", "occurrences", "seo_points_gained", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesResultTable, AdvancedSitesSite_idSeov2IssuesParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_linksResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesBroken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesBroken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get broken links"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_linksResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesBroken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesBroken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesBroken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesBroken_linksCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_linksResultTable, AdvancedSitesSite_idSeov2IssuesBroken_linksParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall broken links stats"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsResultTable, AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get the occurrences of broken links historically"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryResultTable, AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links_entry_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get broken links on entry pages"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesResultTable, AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links_entry_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall broken links stats for entry pages"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/broken_links_entry_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get the occurrences of broken links on entry pages historically"
    ];

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/canonical_urls?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCanonical_urlsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages not linking to the canonical page"
    ];

AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultType = type table [
	id = number, title = text, url = text, canonical_url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCanonical_urlsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCanonical_urlsResultTable, AdvancedSitesSite_idSeov2IssuesCanonical_urlsParamsType);


AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/canonical_urls/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for canonical issue"
    ];

AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/canonical_urls/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of canonical issue"
    ];

AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/code_text_ratio?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCode_text_ratioParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages for code to text ratio issue"
    ];

AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, code_text_ratio = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "code_text_ratio"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCode_text_ratioCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCode_text_ratioResultTable, AdvancedSitesSite_idSeov2IssuesCode_text_ratioParamsType);


AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/code_text_ratio/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats of code to text ratio issue"
    ];

AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsResultTable, AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/code_text_ratio/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of code to text ratio issue"
    ];

AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryResultTable, AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/compression_used/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get compression used issue"
    ];

AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsResultTable, AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesCorrect_404sResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/correct_404s?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCorrect_404sResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCorrect_404sParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get links for the correct 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesCorrect_404sResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesCorrect_404sResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCorrect_404sResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCorrect_404sResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCorrect_404sCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCorrect_404sResultTable, AdvancedSitesSite_idSeov2IssuesCorrect_404sParamsType);


AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/correct_404s/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for the correct 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsResultTable, AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/correct_404s/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of correct 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryResultTable, AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesCss_validationResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/css_validation?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCss_validationResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCss_validationParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get stylesheets for the css validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesCss_validationResultType = type table [
	id = number, url = text, checking_now = logical, errors = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesCss_validationResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCss_validationResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCss_validationResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCss_validationCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCss_validationResultTable, AdvancedSitesSite_idSeov2IssuesCss_validationParamsType);


AdvancedSitesSite_idSeov2IssuesCss_validationDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/css_validation/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesCss_validationDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for the css validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesCss_validationDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCss_validationDetailsResultTable, AdvancedSitesSite_idSeov2IssuesCss_validationDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/css_validation/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesCss_validationHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of css validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesCss_validationHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesCss_validationHistoryResultTable, AdvancedSitesSite_idSeov2IssuesCss_validationHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/dead_end_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDead_end_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get dead end pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, external_links = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "external_links"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDead_end_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDead_end_pagesResultTable, AdvancedSitesSite_idSeov2IssuesDead_end_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/dead_end_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for the dead end pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/dead_end_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of dead end pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/desktop_speed/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get desktop speed issue"
    ];

AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsResultTable, AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/desktop_speed/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get the desktop speed score historically"
    ];

AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultType = type table [
	speed = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"speed", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryResultTable, AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_description?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get duplicate description issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultType = type table [
	id = number, characters = number, meta_description = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "characters", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_description/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for duplicate meta description issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_description/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of duplicate description issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_page_title?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get duplicate page title issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultType = type table [
	meta_title = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultType)
		, addedKey = Table.AddKey(appliedSchema, {"pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_page_title/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for duplicate page title issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/duplicate_page_title/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of duplicate page title issue"
    ];

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryResultTable, AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/empty_h1?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesEmpty_h1ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get empty H1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, empty_h1s = number, page_level = number, page_views = number, total_h1s = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "empty_h1s", "total_h1s"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesEmpty_h1Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesEmpty_h1ResultTable, AdvancedSitesSite_idSeov2IssuesEmpty_h1ParamsType);


AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/empty_h1/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for empty H1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsResultTable, AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/empty_h1/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of empty H1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryResultTable, AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/fontsize_legibility/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get font size legibility issue"
    ];

AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsResultTable, AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesHtml_validationResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/html_validation?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesHtml_validationResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesHtml_validationParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get html validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesHtml_validationResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, pending = logical, validated_date = text, w3_errors = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesHtml_validationResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesHtml_validationResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesHtml_validationResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "pending"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesHtml_validationCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesHtml_validationResultTable, AdvancedSitesSite_idSeov2IssuesHtml_validationParamsType);


AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/html_validation/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for html validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsResultTable, AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/html_validation/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of html validation issue"
    ];

AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryResultTable, AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_alt_attribute?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get image alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, images = number, images_missing_alt_attribute = number, images_with_alt_attribute = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "images", "images_missing_alt_attribute", "images_with_alt_attribute"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_alt_attributeResultTable, AdvancedSitesSite_idSeov2IssuesImage_alt_attributeParamsType);


AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_alt_attribute/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for image alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsResultTable, AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_alt_attribute/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of image alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryResultTable, AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_empty_alt_attribute?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get image empty alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, images = number, images_with_empty_alt_attribute = number, images_with_filled_alt_attribute = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "images", "images_with_empty_alt_attribute", "images_with_filled_alt_attribute"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeResultTable, AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeParamsType);


AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_empty_alt_attribute/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for image empty alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsResultTable, AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_empty_alt_attribute/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of image empty alt attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryResultTable, AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_width_height_attribute?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get image with height attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, images = number, images_missing_width_height_attributes = number, images_with_width_height_attributes = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "images", "images_missing_width_height_attributes", "images_with_width_height_attributes"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeResultTable, AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeParamsType);


AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_width_height_attribute/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for image width height attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsResultTable, AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/image_width_height_attribute/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of image width height attribute issue"
    ];

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryResultTable, AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesImages_1mbResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/images_1mb?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImages_1mbResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImages_1mbParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesImages_1mbResultType = type table [
	id = number, file_size = number, last_modified = text, referring_pages = number
];
  
AdvancedSitesSite_idSeov2IssuesImages_1mbResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImages_1mbResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImages_1mbResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "file_size", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImages_1mbCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImages_1mbResultTable, AdvancedSitesSite_idSeov2IssuesImages_1mbParamsType);


AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/images_1mb/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsResultTable, AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/images_1mb/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryResultTable, AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/links_to_unsafe_domains?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get links to unsafe domains issue"
    ];

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultType = type table [
	id = number, url = text, pages = number, unsuccessful_clicks = number
];
  
AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsResultTable, AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsParamsType);


AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/links_to_unsafe_domains/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for links to unsafe domains issue"
    ];

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/links_to_unsafe_domains/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of unsafe domains issue"
    ];

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesLoad_timeResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/load_time?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLoad_timeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLoad_timeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get load time issue"
    ];

AdvancedSitesSite_idSeov2IssuesLoad_timeResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesLoad_timeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLoad_timeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLoad_timeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLoad_timeCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLoad_timeResultTable, AdvancedSitesSite_idSeov2IssuesLoad_timeParamsType);


AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/load_time/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for load time issue"
    ];

AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsResultTable, AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/load_time/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of load time issue"
    ];

AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryResultTable, AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesLong_sentencesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_sentences?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLong_sentencesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLong_sentencesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get long sentences issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_sentencesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, long_sentences = number, long_words = number, page_level = number, page_views = number, readability_score = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesLong_sentencesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLong_sentencesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLong_sentencesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences", "long_words", "readability_score", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLong_sentencesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_sentencesResultTable, AdvancedSitesSite_idSeov2IssuesLong_sentencesParamsType);


AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_sentences/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for the long sentences issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_sentences/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of long sentences issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesLong_urlsResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_urls?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLong_urlsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLong_urlsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get long urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_urlsResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, url_length = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesLong_urlsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLong_urlsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLong_urlsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "url_length"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLong_urlsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_urlsResultTable, AdvancedSitesSite_idSeov2IssuesLong_urlsParamsType);


AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_urls/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for long urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/long_urls/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of long urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/many_internal_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMany_internal_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get many internal links issue"
    ];

AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, links = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "links"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMany_internal_linksCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMany_internal_linksResultTable, AdvancedSitesSite_idSeov2IssuesMany_internal_linksParamsType);


AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/many_internal_links/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for the many internal links issue"
    ];

AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/many_internal_links/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of many internal links issue"
    ];

AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_empty?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get meta description empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_description = text, meta_description_length = number, meta_description_missing = logical, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_description_length", "meta_description_missing"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_empty/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta description empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_empty/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta description empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_long?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_longParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta description too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultType = type table [
	id = number, characters = number, meta_description = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "characters", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_longCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_longResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_longParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_long/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta description too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_long/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta description too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_missing?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get meta description empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_description = text, meta_description_length = number, meta_description_missing = logical, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_description_length", "meta_description_missing"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_missingResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_missingParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_missing/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta description missing issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_missing/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta description missing issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_multiple?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get multiple meta description issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_descriptions = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_descriptions"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_multiple/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for multiple meta description issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_multiple/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of multiple meta description issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_short?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta description too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultType = type table [
	id = number, characters = number, meta_description = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "characters", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_shortResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_shortParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_short/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta description too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_desc_short/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta description too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_empty?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta title empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_title = text, meta_title_length = number, meta_title_missing = logical, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_title_length", "meta_title_missing"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_emptyResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_emptyParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_empty/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta title empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_empty/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta title empty issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_longResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_long?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_longResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_longParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta title too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_longResultType = type table [
	characters = number, meta_title = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_longResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_longResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_longResultType)
		, addedKey = Table.AddKey(appliedSchema, {"characters", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_longCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_longResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_longParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_long/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta title too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_long/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta title too long issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_missing?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_missingParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta title missing issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_title = text, meta_title_length = number, meta_title_missing = logical, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_title_length", "meta_title_missing"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_missingCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_missingResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_missingParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_missing/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta title missing issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_missing/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta title missing issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_multiple?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get multiple meta title issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, meta_titles = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "meta_titles"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_multipleResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_multipleParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_multiple/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for multiple meta title issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_multiple/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences for multiple meta title issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_short?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_shortParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get meta title too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultType = type table [
	characters = number, meta_title = text, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultType)
		, addedKey = Table.AddKey(appliedSchema, {"characters", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_shortCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_shortResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_shortParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_short/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for meta title too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/meta_title_short/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of meta title too short issue"
    ];

AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMissing_h1ResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/missing_h1?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMissing_h1ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMissing_h1ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get missing h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMissing_h1ResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, empty_h1s = number, page_level = number, page_views = number, total_h1s = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMissing_h1ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMissing_h1ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMissing_h1ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "empty_h1s", "total_h1s"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMissing_h1Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMissing_h1ResultTable, AdvancedSitesSite_idSeov2IssuesMissing_h1ParamsType);


AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/missing_h1/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for missing h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsResultTable, AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/missing_h1/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of missing h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryResultTable, AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/missing_robots/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get missing robots issue"
    ];

AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/missing_sitemap/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get missing sitemap issue"
    ];

AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspelling_entry_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get misspellings on entry pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultType = type table [
	id = number, pages = number, suggestions = list, word = text
];
  
AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesResultTable, AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspelling_entry_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for misspellings on entry pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspelling_entry_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of misspelling on entry pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMisspellingsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMisspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMisspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get misspellings issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspellingsResultType = type table [
	id = number, pages = number, suggestions = list, word = text
];
  
AdvancedSitesSite_idSeov2IssuesMisspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMisspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMisspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMisspellingsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspellingsResultTable, AdvancedSitesSite_idSeov2IssuesMisspellingsParamsType);


AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspellings/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for misspellings issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/misspellings/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of misspelling issue"
    ];

AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/mobile_friendly/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get mobile friendly issue"
    ];

AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/mobile_speed/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get mobile speed issue"
    ];

AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/mobile_speed/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get the mobile speed score historically"
    ];

AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultType = type table [
	speed = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"speed", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryResultTable, AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/mobile_viewport/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get mobile viewport issue"
    ];

AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsResultTable, AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/multiple_h1?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMultiple_h1ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get multiple h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, empty_h1s = number, page_level = number, page_views = number, total_h1s = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "empty_h1s", "total_h1s"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMultiple_h1Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMultiple_h1ResultTable, AdvancedSitesSite_idSeov2IssuesMultiple_h1ParamsType);


AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/multiple_h1/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for multiple h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsResultTable, AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/multiple_h1/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences for multiple h1 issue"
    ];

AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryResultTable, AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesNavigation_depthResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/navigation_depth?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNavigation_depthResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNavigation_depthParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get navigation depth issue"
    ];

AdvancedSitesSite_idSeov2IssuesNavigation_depthResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesNavigation_depthResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNavigation_depthResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNavigation_depthResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNavigation_depthCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNavigation_depthResultTable, AdvancedSitesSite_idSeov2IssuesNavigation_depthParamsType);


AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/navigation_depth/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for navigation depth issue"
    ];

AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsResultTable, AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/navigation_depth/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of navigation depth issue"
    ];

AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryResultTable, AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/new_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get new pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/new_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of new pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/nofollow_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNofollow_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get nofollow pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, robot_tag = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNofollow_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNofollow_pagesResultTable, AdvancedSitesSite_idSeov2IssuesNofollow_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/nofollow_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for nofollow pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/nofollow_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of nofollow pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/noindex_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNoindex_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get noindex pages"
    ];

AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, robot_tag = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNoindex_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNoindex_pagesResultTable, AdvancedSitesSite_idSeov2IssuesNoindex_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/noindex_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for noindex pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/noindex_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of noindex pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/open_graph_tag_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get open graph tag pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, tags_on_page = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "tags_on_page"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesResultTable, AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/open_graph_tag_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for open graph tag pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/open_graph_tag_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of open graph tag pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesPage_sizeResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/page_size?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPage_sizeResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPage_sizeParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get page size issue"
    ];

AdvancedSitesSite_idSeov2IssuesPage_sizeResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, size_in_mb = number, size_in_mb_exact = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesPage_sizeResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPage_sizeResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPage_sizeResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "size_in_mb", "size_in_mb_exact"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPage_sizeCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPage_sizeResultTable, AdvancedSitesSite_idSeov2IssuesPage_sizeParamsType);


AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/page_size/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for page size issue"
    ];

AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsResultTable, AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/page_size/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of page size issue"
    ];

AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryResultTable, AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_broken_links?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with broken links issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, unsuccessful_clicks = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_broken_links/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for pages with broken links issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_broken_links/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of page with broken links issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_framesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_frames?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_framesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_framesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with frames issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_framesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, frames = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_framesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_framesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_framesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "frames"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_framesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_framesResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_framesParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_frames/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for pages with frames issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_frames/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of page with frames issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_images_1mb?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, images = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "images"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_images_1mb/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for pages with images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_images_1mb/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of page with images over 1mb issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_misspellings?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with misspellings issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, misspellings = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "misspellings"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_misspellings/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for pages with misspellings issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/pages_with_misspellings/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of page with misspellings issue"
    ];

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/parameterized_urls?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesParameterized_urlsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get parameterized urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, parameters = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "parameters", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesParameterized_urlsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesParameterized_urlsResultTable, AdvancedSitesSite_idSeov2IssuesParameterized_urlsParamsType);


AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/parameterized_urls/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for parameterized urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/parameterized_urls/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of parameterized urls issue"
    ];

AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/readability_pages_score?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get readability pages score issue"
    ];

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, long_sentences = number, long_words = number, page_level = number, page_views = number, readability_score = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "long_sentences", "long_words", "readability_score", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreResultTable, AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreParamsType);


AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/readability_pages_score/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for readability page score issue"
    ];

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsResultTable, AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/readability_pages_score/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of readability pages score issue"
    ];

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryResultTable, AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_301ResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_301?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_301ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_301ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get redirect 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_301ResultType = type table [
	id = number, title = text, url = text, cms_url = text, days_since_found = number, origin_http_status = number, origin_url = text, page_level = number, page_views = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_301ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_301ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_301ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_301Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_301ResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_301ParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_301/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for redirect 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_301/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of redirect 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_chainResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_chain?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_chainResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_chainParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get redirect chain issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_chainResultType = type table [
	id = number, title = text, url = text, cms_url = text, days_since_found = number, origin_http_status = number, origin_url = text, page_level = number, page_views = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_chainResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_chainResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_chainResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_chainCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_chainResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_chainParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_chain/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for redirect chain issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_chain/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of redirect chain issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_mixed?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_mixedParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get redirect mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultType = type table [
	id = number, title = text, url = text, cms_url = text, days_since_found = number, origin_http_status = number, origin_url = text, page_level = number, page_views = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_mixedCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_mixedResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_mixedParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_mixed/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for redirect mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_mixed/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of redirect mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_not_301?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_not_301ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get redirect not 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultType = type table [
	id = number, title = text, url = text, cms_url = text, days_since_found = number, origin_http_status = number, origin_url = text, page_level = number, page_views = number, referring_pages = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_not_301Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_not_301ResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_not_301ParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_not_301/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for redirect not 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/redirect_not_301/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of redirect not 301 issue"
    ];

AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryResultTable, AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/sitemap_excluded_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get sitemap excluded pages issue
"
    ];

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesResultTable, AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/sitemap_excluded_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for sitemap excluded pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/sitemap_excluded_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of sitemap excluded pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_enabledResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_enabled?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSsl_enabledResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSsl_enabledParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get ssl enabled issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_enabledResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesSsl_enabledResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSsl_enabledResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSsl_enabledResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSsl_enabledCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_enabledResultTable, AdvancedSitesSite_idSeov2IssuesSsl_enabledParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_enabled/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for ssl enabled issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsResultTable, AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_enabled/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of ssl enabled issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryResultTable, AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_mixedResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_mixed?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSsl_mixedResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSsl_mixedParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get ssl mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_mixedResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, http_links = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesSsl_mixedResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSsl_mixedResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSsl_mixedResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "http_links"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSsl_mixedCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_mixedResultTable, AdvancedSitesSite_idSeov2IssuesSsl_mixedParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_mixed/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for ssl mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsResultTable, AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/ssl_mixed/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of ssl mixed issue"
    ];

AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryResultTable, AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_404?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_404ParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get status code 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_404Call = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_404ResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_404ParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_404/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for status code 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_404/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of status code 404 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_4xxs?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get status code 4xx issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_4xxs/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for status code 4xx issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_4xxs/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of status code 4xx issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultTable = (
		site_id as number, optional group_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_500s?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_500sParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get status code 500 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultType = type table [
	id = number, url = text, days_since_found = number, http_status = number, pages = number
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "days_since_found", "pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_500sCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_500sResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_500sParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_500s/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for status code 500 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/status_code_500s/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of status code 500 issue"
    ];

AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryResultTable, AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/structured_markup_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get structured markup pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, elements_with_schema = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "elements_with_schema"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesResultTable, AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/structured_markup_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for structured markup pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/structured_markup_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of structured markup pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/touchscreen_ready/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get touchscreen ready issue"
    ];

AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsResultTable, AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsResultTable = (
		site_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({  }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/unsafe_domain/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]))
    as table meta [
        Documentation.Name = "Get unsafe domain issue"
    ];

AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsResultTable, AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultTable = (
		site_id as number, optional group_id as number, optional page_id as number, optional query as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id, query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_media?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUpdated_mediaParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get updated media issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultType = type table [
	id = number, file_size = number, last_modified = text, referring_pages = number
];
  
AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "file_size", "referring_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUpdated_mediaCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_mediaResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_mediaParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_media/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for updated media issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_media/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of updated media issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUpdated_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get updated pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, updated_at = text, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "updated_at"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUpdated_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_pagesResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_pagesParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_pages/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for updated pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/updated_pages/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of updated pages issue"
    ];

AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryResultTable, AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/urls_with_underscore?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get urls with underscore issue"
    ];

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreResultTable, AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreParamsType);


AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/urls_with_underscore/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for urls with underscore issue"
    ];

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsResultTable, AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/urls_with_underscore/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of urls with underscore issue"
    ];

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryResultTable, AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryParamsType);


AdvancedSitesSite_idSeov2IssuesWords_per_pageResultTable = (
		site_id as number, optional group_id as number, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/words_per_page?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesWords_per_pageResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesWords_per_pageParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get words per page issue"
    ];

AdvancedSitesSite_idSeov2IssuesWords_per_pageResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, page_level = number, page_views = number, words = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2IssuesWords_per_pageResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesWords_per_pageResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesWords_per_pageResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "words"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesWords_per_pageCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesWords_per_pageResultTable, AdvancedSitesSite_idSeov2IssuesWords_per_pageParamsType);


AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/words_per_page/details?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get overall stats for words per page issue"
    ];

AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsResultTable, AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsParamsType);


AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultTable = (
		site_id as number, optional group_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/issues/words_per_page/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get historical occurrences of words per page issue"
    ];

AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultType = type table [
	occurrences = number, timestamp = text
];
  
AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"occurrences", "timestamp"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryResultTable, AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryParamsType);


AdvancedSitesSite_idSeov2KeywordsResultTable = (
		site_id as number, optional activity_plan_id as number, optional ids as text) =>
    let
        activity_plan_id = if activity_plan_id = null then "" else "&activity_plan_id=" & Uri.EscapeDataString(Text.From(activity_plan_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
parameters = Text.TrimStart(Text.Combine({ activity_plan_id, ids, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/keywords?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2KeywordsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2KeywordsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]))
    as table meta [
        Documentation.Name = "Get monitored keywords"
    ];

AdvancedSitesSite_idSeov2KeywordsResultType = type table [
	id = number, database = text, estimated_traffic = number, keyword = text, organic_competition = text, page_id = number, page_views = number, position = number, ranking_pages = number, search_volume = record, seo_page_score = number, target_url = text
];
  
AdvancedSitesSite_idSeov2KeywordsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2KeywordsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2KeywordsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "database", "estimated_traffic", "organic_competition", "ranking_pages"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2KeywordsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2KeywordsResultTable, AdvancedSitesSite_idSeov2KeywordsParamsType);


AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultTable = (
		site_id as number, keyword_id as number, optional activity_plan_id as number) =>
    let
        activity_plan_id = if activity_plan_id = null then "" else "&activity_plan_id=" & Uri.EscapeDataString(Text.From(activity_plan_id)),
parameters = Text.TrimStart(Text.Combine({ activity_plan_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/keywords/" & Text.From(keyword_id) & "/ranking_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
keyword_id as (type number meta [
        Documentation.FieldCaption = "keyword_id",
        Documentation.FieldDescription = "Id for specific keyword"
    ]), 
optional activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]))
    as table meta [
        Documentation.Name = "Get ranking pages for the keyword"
    ];

AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultType = type table [
	title = text, url = text, cms_url = text, page_id = number, page_views = number, position = number, seo_page_score = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"position"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesResultTable, AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesParamsType);


AdvancedSitesSite_idSeov2OverviewGroupsResultTable = (
		site_id as number, optional query as text) =>
    let
        query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
parameters = Text.TrimStart(Text.Combine({ query, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/overview/groups?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2OverviewGroupsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2OverviewGroupsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]))
    as table meta [
        Documentation.Name = "Get SEO groups"
    ];

AdvancedSitesSite_idSeov2OverviewGroupsResultType = type table [
	id = number, group_name = text, issues = number, seo_group_score = record, seo_points_to_gain = number
];
  
AdvancedSitesSite_idSeov2OverviewGroupsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2OverviewGroupsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2OverviewGroupsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "issues", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2OverviewGroupsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2OverviewGroupsResultTable, AdvancedSitesSite_idSeov2OverviewGroupsParamsType);


AdvancedSitesSite_idSeov2OverviewScoreResultTable = (
		site_id as number, optional group_id as number, optional page_id as number) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
page_id = if page_id = null then "" else "&page_id=" & Uri.EscapeDataString(Text.From(page_id)),
parameters = Text.TrimStart(Text.Combine({ group_id, page_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/overview/score?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2OverviewScoreParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get the SEO scores"
    ];

AdvancedSitesSite_idSeov2OverviewScoreCall = Value.ReplaceType(AdvancedSitesSite_idSeov2OverviewScoreResultTable, AdvancedSitesSite_idSeov2OverviewScoreParamsType);


AdvancedSitesSite_idSeov2OverviewScoreHistoryResultTable = (
		site_id as number, optional group_id as number, optional periodStartDate as date, optional periodEndDate as date, optional periodInterval as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
period = PeriodFromParameters(periodStartDate, periodEndDate, periodInterval),
parameters = Text.TrimStart(Text.Combine({ group_id, period, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/overview/score/history?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2OverviewScoreHistoryResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2OverviewScoreHistoryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional periodStartDate as (type date meta [ 
                            Documentation.FieldCaption = "period Start Date"
                        ]), 
optional periodEndDate as (type date meta [ 
                            Documentation.FieldCaption = "period End Date"
                        ]), 
optional periodInterval as (type text meta [
                            Documentation.FieldCaption = "period Predefined Interval",
                            Documentation.SampleValues = { "now, today, yesterday, last_seven_days, last_week, last_month, this_month, this_year" }
                        ]))
    as table meta [
        Documentation.Name = "Get the SEO scores historically"
    ];

AdvancedSitesSite_idSeov2OverviewScoreHistoryResultType = type table [
	content_score = number, mobile_score = number, seo_score = number, technical_score = number, timestamp = text, ux_score = number
];
  
AdvancedSitesSite_idSeov2OverviewScoreHistoryResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2OverviewScoreHistoryResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2OverviewScoreHistoryResultType)
		, addedKey = Table.AddKey(appliedSchema, {"content_score", "mobile_score", "seo_score", "technical_score", "timestamp", "ux_score"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2OverviewScoreHistoryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2OverviewScoreHistoryResultTable, AdvancedSitesSite_idSeov2OverviewScoreHistoryParamsType);


AdvancedSitesSite_idSeov2PagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2PagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2PagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get pages with issues"
    ];

AdvancedSitesSite_idSeov2PagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, issues = number, page_level = number, page_views = number, seo_page_score = number, seo_points_to_gain = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2PagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2PagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2PagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "issues", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2PagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2PagesResultTable, AdvancedSitesSite_idSeov2PagesParamsType);


AdvancedSitesSite_idSeov2PagesPage_idIssuesResultTable = (
		site_id as number, page_id as number, optional category as text, optional complexity as text, optional fixed as logical, optional group_id as number) =>
    let
        category = if category = null then "" else "&category=" & Uri.EscapeDataString(category),
complexity = if complexity = null then "" else "&complexity=" & Uri.EscapeDataString(complexity),
fixed = if fixed = null then "" else "&fixed=" & Uri.EscapeDataString(Text.From(fixed)),
group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
parameters = Text.TrimStart(Text.Combine({ category, complexity, fixed, group_id, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/pages/" & Text.From(page_id) & "/issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2PagesPage_idIssuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2PagesPage_idIssuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
optional category as (type text meta [
        Documentation.FieldCaption = "category",
        Documentation.FieldDescription = "The category filter"
    ]), 
optional complexity as (type text meta [
        Documentation.FieldCaption = "complexity",
        Documentation.FieldDescription = "The complexity filter"
    ]), 
optional fixed as (type logical meta [
        Documentation.FieldCaption = "fixed",
        Documentation.FieldDescription = "The fixed filter"
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]))
    as table meta [
        Documentation.Name = "Get issues for specific page"
    ];

AdvancedSitesSite_idSeov2PagesPage_idIssuesResultType = type table [
	complexity = text, issue_name = text, issue_type = text, occurrences = number, seo_points_gained = number, seo_points_to_gain = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2PagesPage_idIssuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2PagesPage_idIssuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2PagesPage_idIssuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"complexity", "issue_type", "occurrences", "seo_points_gained", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2PagesPage_idIssuesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2PagesPage_idIssuesResultTable, AdvancedSitesSite_idSeov2PagesPage_idIssuesParamsType);


AdvancedSitesSite_idSeov2Target_pagesResultTable = (
		site_id as number, optional group_id as number, optional ids as text, optional query as text, optional search_in as text) =>
    let
        group_id = if group_id = null then "" else "&group_id=" & Uri.EscapeDataString(Text.From(group_id)),
ids = if ids = null then "" else "&ids=" & Uri.EscapeDataString(ids),
query = if query = null then "" else "&query=" & Uri.EscapeDataString(query),
search_in = if search_in = null then "" else "&search_in=" & Uri.EscapeDataString(search_in),
parameters = Text.TrimStart(Text.Combine({ group_id, ids, query, search_in, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional group_id as (type number meta [
        Documentation.FieldCaption = "group_id",
        Documentation.FieldDescription = "Id for specific group."
    ]), 
optional ids as (type text meta [
        Documentation.FieldCaption = "ids",
        Documentation.FieldDescription = "Return all items that is one of the listed identifiers.

Values are separated by comma, as in ids=1,2,3."
    ]), 
optional query as (type text meta [
        Documentation.FieldCaption = "query",
        Documentation.FieldDescription = "Return all items that matches the specified plain text query."
    ]), 
optional search_in as (type text meta [
        Documentation.FieldCaption = "search_in",
        Documentation.FieldDescription = "Specified query must match either url or title."
    ]))
    as table meta [
        Documentation.Name = "Get target pages for keywords"
    ];

AdvancedSitesSite_idSeov2Target_pagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, issues = number, page_level = number, page_views = number, seo_page_score = number, seo_points_to_gain = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2Target_pagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "issues", "seo_points_to_gain"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesResultTable, AdvancedSitesSite_idSeov2Target_pagesParamsType);


AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/pages/" & Text.From(page_id) & "/competing_content_issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get competing content issues for the target page"
    ];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultType = type table [
	competing_content_type = text, keyword = text, occurrences = number
];
  
AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"competing_content_type", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesResultTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesParamsType);


AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultTable = (
		site_id as number, page_id as number, type_ as text, optional keyword as text) =>
    let
        keyword = if keyword = null then "" else "&keyword=" & Uri.EscapeDataString(keyword),
parameters = Text.TrimStart(Text.Combine({ keyword, "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/pages/" & Text.From(page_id) & "/competing_content_issues/{type}/pages?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]), 
type_ as (type text meta [
        Documentation.FieldCaption = "type_",
        Documentation.FieldDescription = "The competing content type"
    ]), 
optional keyword as (type text meta [
        Documentation.FieldCaption = "keyword",
        Documentation.FieldDescription = "The keyword"
    ]))
    as table meta [
        Documentation.Name = "Get the competing content issue type for the page"
    ];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultType = type table [
	id = number, title = text, url = text, checking_now = logical, cms_url = text, occurrences = number, page_level = number, page_views = number, _siteimprove = record
];
  
AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "checking_now", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesResultTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesParamsType);


AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/pages/" & Text.From(page_id) & "/keyword_issues?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get keyword issues for the page"
    ];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultType = type table [
	database = text, expected_in_element = logical, issue_type = text, keyword = text, occurrences = number
];
  
AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"database", "expected_in_element", "occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesResultTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesParamsType);


AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/pages/" & Text.From(page_id) & "/keyword_occurrences?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get keyword occurrences for the page"
    ];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultType = type table [
	database = text, h1_occurrences = number, h2_occurrences = number, h3_occurrences = number, keyword = text, meta_description_occurrences = number, search_volume = number, title_occurrences = number
];
  
AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultType)
		, addedKey = Table.AddKey(appliedSchema, {"database", "h1_occurrences", "h2_occurrences", "h3_occurrences", "meta_description_occurrences", "search_volume", "title_occurrences"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesResultTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesParamsType);


AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultTable = (
		site_id as number, page_id as number) =>
    let
        parameters = Text.TrimStart(Text.Combine({ "&page_size=100" }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/pages/" & Text.From(page_id) & "/keywords?" & parameters
    in
        Table.GenerateByPage((previous) => 
            let
                nextLink = if (previous = null) then requestUrl else Value.Metadata(previous)[NextLink]?,
                page = if (nextLink <> null) then AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultTablePage(nextLink) else null
            in
                page
        );

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
page_id as (type number meta [
        Documentation.FieldCaption = "page_id",
        Documentation.FieldDescription = "Id for specific page."
    ]))
    as table meta [
        Documentation.Name = "Get the keywords targeting the page"
    ];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultType = type table [
	id = number, database = text, organic_competition = text, position = number, search_volume = record
];
  
AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultTablePage = (url as text) as table =>
    let
        json = Json.Document(Web.Contents(url, SiteimproveRequestOptions)),
        nextLink = GetNextLink(json),
        itemsTable = JsonToTable(json),
        fields = Record.FieldNames(Type.RecordFields(Type.TableRow(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultType))),
        expandedItemsTable = Table.ExpandRecordColumn(itemsTable, "Column1", fields),
        appliedSchema = Table.ChangeType(expandedItemsTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultType)
		, addedKey = Table.AddKey(appliedSchema, {"id", "database", "organic_competition"}, true)
    in
		addedKey meta [NextLink = nextLink];

AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsResultTable, AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsParamsType);


AdvancedSitesSite_idSeov2Target_pagesSummaryResultTable = (
		site_id as number, optional activity_plan_id as number) =>
    let
        activity_plan_id = if activity_plan_id = null then "" else "&activity_plan_id=" & Uri.EscapeDataString(Text.From(activity_plan_id)),
parameters = Text.TrimStart(Text.Combine({ activity_plan_id }), {"&"}),
        requestUrl = "https://api.siteimprove.com/v2/sites/" & Text.From(site_id) & "/seov2/target_pages/summary?" & parameters,
		json = Json.Document(Web.Contents(requestUrl, SiteimproveRequestOptions))
    in
        json;

AdvancedSitesSite_idSeov2Target_pagesSummaryParamsType = type function (
	site_id as (type number meta [
        Documentation.FieldCaption = "site_id",
        Documentation.FieldDescription = "Id for specific site."
    ]), 
optional activity_plan_id as (type number meta [
        Documentation.FieldCaption = "activity_plan_id",
        Documentation.FieldDescription = "Id for specific activity plan"
    ]))
    as table meta [
        Documentation.Name = "Get overall statistics for target pages"
    ];

AdvancedSitesSite_idSeov2Target_pagesSummaryCall = Value.ReplaceType(AdvancedSitesSite_idSeov2Target_pagesSummaryResultTable, AdvancedSitesSite_idSeov2Target_pagesSummaryParamsType);


GetAdvancedSeoV2NavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Get activity plans", "/sites/{site_id}/seov2/activity_plans", AdvancedSitesSite_idSeov2Activity_plansCall, "Function", "Function", true }, 
{ "Get competitors for the specific activity plan", "/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors", AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsCall, "Function", "Function", true }, 
{ "Get competitors search engine visibility historically", "/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/history", AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsHistoryCall, "Function", "Function", true }, 
{ "Get the position distribution of competitors", "/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/positions", AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsCall, "Function", "Function", true }, 
{ "Get the position distribution for your competitors historically", "/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/competitors/positions/history", AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idCompetitorsPositionsHistoryCall, "Function", "Function", true }, 
{ "Get historical metrics for the activity plan", "/sites/{site_id}/seov2/activity_plans/plans/{activity_plan_id}/history", AdvancedSitesSite_idSeov2Activity_plansPlansActivity_plan_idHistoryCall, "Function", "Function", true }, 
{ "Get overall statistics for all activity plans", "/sites/{site_id}/seov2/activity_plans/summary", AdvancedSitesSite_idSeov2Activity_plansSummaryCall, "Function", "Function", true }, 
{ "Get content optimization keywords", "/sites/{site_id}/seov2/content_optimization_keywords", AdvancedSitesSite_idSeov2Content_optimization_keywordsCall, "Function", "Function", true }, 
{ "Get overall statistics for content optimization keywords", "/sites/{site_id}/seov2/content_optimization_keywords/summary", AdvancedSitesSite_idSeov2Content_optimization_keywordsSummaryCall, "Function", "Function", true }, 
{ "Get issues", "/sites/{site_id}/seov2/issues", AdvancedSitesSite_idSeov2IssuesCall, "Function", "Function", true }, 
{ "Get broken links", "/sites/{site_id}/seov2/issues/broken_links", AdvancedSitesSite_idSeov2IssuesBroken_linksCall, "Function", "Function", true }, 
{ "Get overall broken links stats", "/sites/{site_id}/seov2/issues/broken_links/details", AdvancedSitesSite_idSeov2IssuesBroken_linksDetailsCall, "Function", "Function", true }, 
{ "Get the occurrences of broken links historically", "/sites/{site_id}/seov2/issues/broken_links/history", AdvancedSitesSite_idSeov2IssuesBroken_linksHistoryCall, "Function", "Function", true }, 
{ "Get broken links on entry pages", "/sites/{site_id}/seov2/issues/broken_links_entry_pages", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesCall, "Function", "Function", true }, 
{ "Get overall broken links stats for entry pages", "/sites/{site_id}/seov2/issues/broken_links_entry_pages/details", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesDetailsCall, "Function", "Function", true }, 
{ "Get the occurrences of broken links on entry pages historically", "/sites/{site_id}/seov2/issues/broken_links_entry_pages/history", AdvancedSitesSite_idSeov2IssuesBroken_links_entry_pagesHistoryCall, "Function", "Function", true }, 
{ "Get pages not linking to the canonical page", "/sites/{site_id}/seov2/issues/canonical_urls", AdvancedSitesSite_idSeov2IssuesCanonical_urlsCall, "Function", "Function", true }, 
{ "Get overall stats for canonical issue", "/sites/{site_id}/seov2/issues/canonical_urls/details", AdvancedSitesSite_idSeov2IssuesCanonical_urlsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of canonical issue", "/sites/{site_id}/seov2/issues/canonical_urls/history", AdvancedSitesSite_idSeov2IssuesCanonical_urlsHistoryCall, "Function", "Function", true }, 
{ "Get pages for code to text ratio issue", "/sites/{site_id}/seov2/issues/code_text_ratio", AdvancedSitesSite_idSeov2IssuesCode_text_ratioCall, "Function", "Function", true }, 
{ "Get overall stats of code to text ratio issue", "/sites/{site_id}/seov2/issues/code_text_ratio/details", AdvancedSitesSite_idSeov2IssuesCode_text_ratioDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of code to text ratio issue", "/sites/{site_id}/seov2/issues/code_text_ratio/history", AdvancedSitesSite_idSeov2IssuesCode_text_ratioHistoryCall, "Function", "Function", true }, 
{ "Get compression used issue", "/sites/{site_id}/seov2/issues/compression_used/details", AdvancedSitesSite_idSeov2IssuesCompression_usedDetailsCall, "Function", "Function", true }, 
{ "Get links for the correct 404 issue", "/sites/{site_id}/seov2/issues/correct_404s", AdvancedSitesSite_idSeov2IssuesCorrect_404sCall, "Function", "Function", true }, 
{ "Get overall stats for the correct 404 issue", "/sites/{site_id}/seov2/issues/correct_404s/details", AdvancedSitesSite_idSeov2IssuesCorrect_404sDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of correct 404 issue", "/sites/{site_id}/seov2/issues/correct_404s/history", AdvancedSitesSite_idSeov2IssuesCorrect_404sHistoryCall, "Function", "Function", true }, 
{ "Get stylesheets for the css validation issue", "/sites/{site_id}/seov2/issues/css_validation", AdvancedSitesSite_idSeov2IssuesCss_validationCall, "Function", "Function", true }, 
{ "Get overall stats for the css validation issue", "/sites/{site_id}/seov2/issues/css_validation/details", AdvancedSitesSite_idSeov2IssuesCss_validationDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of css validation issue", "/sites/{site_id}/seov2/issues/css_validation/history", AdvancedSitesSite_idSeov2IssuesCss_validationHistoryCall, "Function", "Function", true }, 
{ "Get dead end pages issue", "/sites/{site_id}/seov2/issues/dead_end_pages", AdvancedSitesSite_idSeov2IssuesDead_end_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for the dead end pages issue", "/sites/{site_id}/seov2/issues/dead_end_pages/details", AdvancedSitesSite_idSeov2IssuesDead_end_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of dead end pages issue", "/sites/{site_id}/seov2/issues/dead_end_pages/history", AdvancedSitesSite_idSeov2IssuesDead_end_pagesHistoryCall, "Function", "Function", true }, 
{ "Get desktop speed issue", "/sites/{site_id}/seov2/issues/desktop_speed/details", AdvancedSitesSite_idSeov2IssuesDesktop_speedDetailsCall, "Function", "Function", true }, 
{ "Get the desktop speed score historically", "/sites/{site_id}/seov2/issues/desktop_speed/history", AdvancedSitesSite_idSeov2IssuesDesktop_speedHistoryCall, "Function", "Function", true }, 
{ "Get duplicate description issue", "/sites/{site_id}/seov2/issues/duplicate_description", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionCall, "Function", "Function", true }, 
{ "Get overall stats for duplicate meta description issue", "/sites/{site_id}/seov2/issues/duplicate_description/details", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of duplicate description issue", "/sites/{site_id}/seov2/issues/duplicate_description/history", AdvancedSitesSite_idSeov2IssuesDuplicate_descriptionHistoryCall, "Function", "Function", true }, 
{ "Get duplicate page title issue", "/sites/{site_id}/seov2/issues/duplicate_page_title", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleCall, "Function", "Function", true }, 
{ "Get overall stats for duplicate page title issue", "/sites/{site_id}/seov2/issues/duplicate_page_title/details", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of duplicate page title issue", "/sites/{site_id}/seov2/issues/duplicate_page_title/history", AdvancedSitesSite_idSeov2IssuesDuplicate_page_titleHistoryCall, "Function", "Function", true }, 
{ "Get empty H1 issue", "/sites/{site_id}/seov2/issues/empty_h1", AdvancedSitesSite_idSeov2IssuesEmpty_h1Call, "Function", "Function", true }, 
{ "Get overall stats for empty H1 issue", "/sites/{site_id}/seov2/issues/empty_h1/details", AdvancedSitesSite_idSeov2IssuesEmpty_h1DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of empty H1 issue", "/sites/{site_id}/seov2/issues/empty_h1/history", AdvancedSitesSite_idSeov2IssuesEmpty_h1HistoryCall, "Function", "Function", true }, 
{ "Get font size legibility issue", "/sites/{site_id}/seov2/issues/fontsize_legibility/details", AdvancedSitesSite_idSeov2IssuesFontsize_legibilityDetailsCall, "Function", "Function", true }, 
{ "Get html validation issue", "/sites/{site_id}/seov2/issues/html_validation", AdvancedSitesSite_idSeov2IssuesHtml_validationCall, "Function", "Function", true }, 
{ "Get overall stats for html validation issue", "/sites/{site_id}/seov2/issues/html_validation/details", AdvancedSitesSite_idSeov2IssuesHtml_validationDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of html validation issue", "/sites/{site_id}/seov2/issues/html_validation/history", AdvancedSitesSite_idSeov2IssuesHtml_validationHistoryCall, "Function", "Function", true }, 
{ "Get image alt attribute issue", "/sites/{site_id}/seov2/issues/image_alt_attribute", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeCall, "Function", "Function", true }, 
{ "Get overall stats for image alt attribute issue", "/sites/{site_id}/seov2/issues/image_alt_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of image alt attribute issue", "/sites/{site_id}/seov2/issues/image_alt_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_alt_attributeHistoryCall, "Function", "Function", true }, 
{ "Get image empty alt attribute issue", "/sites/{site_id}/seov2/issues/image_empty_alt_attribute", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeCall, "Function", "Function", true }, 
{ "Get overall stats for image empty alt attribute issue", "/sites/{site_id}/seov2/issues/image_empty_alt_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of image empty alt attribute issue", "/sites/{site_id}/seov2/issues/image_empty_alt_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_empty_alt_attributeHistoryCall, "Function", "Function", true }, 
{ "Get image with height attribute issue", "/sites/{site_id}/seov2/issues/image_width_height_attribute", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeCall, "Function", "Function", true }, 
{ "Get overall stats for image width height attribute issue", "/sites/{site_id}/seov2/issues/image_width_height_attribute/details", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of image width height attribute issue", "/sites/{site_id}/seov2/issues/image_width_height_attribute/history", AdvancedSitesSite_idSeov2IssuesImage_width_height_attributeHistoryCall, "Function", "Function", true }, 
{ "Get images over 1mb issue", "/sites/{site_id}/seov2/issues/images_1mb", AdvancedSitesSite_idSeov2IssuesImages_1mbCall, "Function", "Function", true }, 
{ "Get overall stats for images over 1mb issue", "/sites/{site_id}/seov2/issues/images_1mb/details", AdvancedSitesSite_idSeov2IssuesImages_1mbDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of images over 1mb issue", "/sites/{site_id}/seov2/issues/images_1mb/history", AdvancedSitesSite_idSeov2IssuesImages_1mbHistoryCall, "Function", "Function", true }, 
{ "Get links to unsafe domains issue", "/sites/{site_id}/seov2/issues/links_to_unsafe_domains", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsCall, "Function", "Function", true }, 
{ "Get overall stats for links to unsafe domains issue", "/sites/{site_id}/seov2/issues/links_to_unsafe_domains/details", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of unsafe domains issue", "/sites/{site_id}/seov2/issues/links_to_unsafe_domains/history", AdvancedSitesSite_idSeov2IssuesLinks_to_unsafe_domainsHistoryCall, "Function", "Function", true }, 
{ "Get load time issue", "/sites/{site_id}/seov2/issues/load_time", AdvancedSitesSite_idSeov2IssuesLoad_timeCall, "Function", "Function", true }, 
{ "Get overall stats for load time issue", "/sites/{site_id}/seov2/issues/load_time/details", AdvancedSitesSite_idSeov2IssuesLoad_timeDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of load time issue", "/sites/{site_id}/seov2/issues/load_time/history", AdvancedSitesSite_idSeov2IssuesLoad_timeHistoryCall, "Function", "Function", true }, 
{ "Get long sentences issue", "/sites/{site_id}/seov2/issues/long_sentences", AdvancedSitesSite_idSeov2IssuesLong_sentencesCall, "Function", "Function", true }, 
{ "Get overall stats for the long sentences issue", "/sites/{site_id}/seov2/issues/long_sentences/details", AdvancedSitesSite_idSeov2IssuesLong_sentencesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of long sentences issue", "/sites/{site_id}/seov2/issues/long_sentences/history", AdvancedSitesSite_idSeov2IssuesLong_sentencesHistoryCall, "Function", "Function", true }, 
{ "Get long urls issue", "/sites/{site_id}/seov2/issues/long_urls", AdvancedSitesSite_idSeov2IssuesLong_urlsCall, "Function", "Function", true }, 
{ "Get overall stats for long urls issue", "/sites/{site_id}/seov2/issues/long_urls/details", AdvancedSitesSite_idSeov2IssuesLong_urlsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of long urls issue", "/sites/{site_id}/seov2/issues/long_urls/history", AdvancedSitesSite_idSeov2IssuesLong_urlsHistoryCall, "Function", "Function", true }, 
{ "Get many internal links issue", "/sites/{site_id}/seov2/issues/many_internal_links", AdvancedSitesSite_idSeov2IssuesMany_internal_linksCall, "Function", "Function", true }, 
{ "Get overall stats for the many internal links issue", "/sites/{site_id}/seov2/issues/many_internal_links/details", AdvancedSitesSite_idSeov2IssuesMany_internal_linksDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of many internal links issue", "/sites/{site_id}/seov2/issues/many_internal_links/history", AdvancedSitesSite_idSeov2IssuesMany_internal_linksHistoryCall, "Function", "Function", true }, 
{ "Get meta description empty issue", "/sites/{site_id}/seov2/issues/meta_desc_empty", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyCall, "Function", "Function", true }, 
{ "Get overall stats for meta description empty issue", "/sites/{site_id}/seov2/issues/meta_desc_empty/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta description empty issue", "/sites/{site_id}/seov2/issues/meta_desc_empty/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_emptyHistoryCall, "Function", "Function", true }, 
{ "Get meta description too long issue", "/sites/{site_id}/seov2/issues/meta_desc_long", AdvancedSitesSite_idSeov2IssuesMeta_desc_longCall, "Function", "Function", true }, 
{ "Get overall stats for meta description too long issue", "/sites/{site_id}/seov2/issues/meta_desc_long/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_longDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta description too long issue", "/sites/{site_id}/seov2/issues/meta_desc_long/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_longHistoryCall, "Function", "Function", true }, 
{ "Get meta description empty issue", "/sites/{site_id}/seov2/issues/meta_desc_missing", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingCall, "Function", "Function", true }, 
{ "Get overall stats for meta description missing issue", "/sites/{site_id}/seov2/issues/meta_desc_missing/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta description missing issue", "/sites/{site_id}/seov2/issues/meta_desc_missing/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_missingHistoryCall, "Function", "Function", true }, 
{ "Get multiple meta description issue", "/sites/{site_id}/seov2/issues/meta_desc_multiple", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleCall, "Function", "Function", true }, 
{ "Get overall stats for multiple meta description issue", "/sites/{site_id}/seov2/issues/meta_desc_multiple/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of multiple meta description issue", "/sites/{site_id}/seov2/issues/meta_desc_multiple/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_multipleHistoryCall, "Function", "Function", true }, 
{ "Get meta description too short issue", "/sites/{site_id}/seov2/issues/meta_desc_short", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortCall, "Function", "Function", true }, 
{ "Get overall stats for meta description too short issue", "/sites/{site_id}/seov2/issues/meta_desc_short/details", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta description too short issue", "/sites/{site_id}/seov2/issues/meta_desc_short/history", AdvancedSitesSite_idSeov2IssuesMeta_desc_shortHistoryCall, "Function", "Function", true }, 
{ "Get meta title empty issue", "/sites/{site_id}/seov2/issues/meta_title_empty", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyCall, "Function", "Function", true }, 
{ "Get overall stats for meta title empty issue", "/sites/{site_id}/seov2/issues/meta_title_empty/details", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta title empty issue", "/sites/{site_id}/seov2/issues/meta_title_empty/history", AdvancedSitesSite_idSeov2IssuesMeta_title_emptyHistoryCall, "Function", "Function", true }, 
{ "Get meta title too long issue", "/sites/{site_id}/seov2/issues/meta_title_long", AdvancedSitesSite_idSeov2IssuesMeta_title_longCall, "Function", "Function", true }, 
{ "Get overall stats for meta title too long issue", "/sites/{site_id}/seov2/issues/meta_title_long/details", AdvancedSitesSite_idSeov2IssuesMeta_title_longDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta title too long issue", "/sites/{site_id}/seov2/issues/meta_title_long/history", AdvancedSitesSite_idSeov2IssuesMeta_title_longHistoryCall, "Function", "Function", true }, 
{ "Get meta title missing issue", "/sites/{site_id}/seov2/issues/meta_title_missing", AdvancedSitesSite_idSeov2IssuesMeta_title_missingCall, "Function", "Function", true }, 
{ "Get overall stats for meta title missing issue", "/sites/{site_id}/seov2/issues/meta_title_missing/details", AdvancedSitesSite_idSeov2IssuesMeta_title_missingDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta title missing issue", "/sites/{site_id}/seov2/issues/meta_title_missing/history", AdvancedSitesSite_idSeov2IssuesMeta_title_missingHistoryCall, "Function", "Function", true }, 
{ "Get multiple meta title issue", "/sites/{site_id}/seov2/issues/meta_title_multiple", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleCall, "Function", "Function", true }, 
{ "Get overall stats for multiple meta title issue", "/sites/{site_id}/seov2/issues/meta_title_multiple/details", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences for multiple meta title issue", "/sites/{site_id}/seov2/issues/meta_title_multiple/history", AdvancedSitesSite_idSeov2IssuesMeta_title_multipleHistoryCall, "Function", "Function", true }, 
{ "Get meta title too short issue", "/sites/{site_id}/seov2/issues/meta_title_short", AdvancedSitesSite_idSeov2IssuesMeta_title_shortCall, "Function", "Function", true }, 
{ "Get overall stats for meta title too short issue", "/sites/{site_id}/seov2/issues/meta_title_short/details", AdvancedSitesSite_idSeov2IssuesMeta_title_shortDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of meta title too short issue", "/sites/{site_id}/seov2/issues/meta_title_short/history", AdvancedSitesSite_idSeov2IssuesMeta_title_shortHistoryCall, "Function", "Function", true }, 
{ "Get missing h1 issue", "/sites/{site_id}/seov2/issues/missing_h1", AdvancedSitesSite_idSeov2IssuesMissing_h1Call, "Function", "Function", true }, 
{ "Get overall stats for missing h1 issue", "/sites/{site_id}/seov2/issues/missing_h1/details", AdvancedSitesSite_idSeov2IssuesMissing_h1DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of missing h1 issue", "/sites/{site_id}/seov2/issues/missing_h1/history", AdvancedSitesSite_idSeov2IssuesMissing_h1HistoryCall, "Function", "Function", true }, 
{ "Get missing robots issue", "/sites/{site_id}/seov2/issues/missing_robots/details", AdvancedSitesSite_idSeov2IssuesMissing_robotsDetailsCall, "Function", "Function", true }, 
{ "Get missing sitemap issue", "/sites/{site_id}/seov2/issues/missing_sitemap/details", AdvancedSitesSite_idSeov2IssuesMissing_sitemapDetailsCall, "Function", "Function", true }, 
{ "Get misspellings on entry pages issue", "/sites/{site_id}/seov2/issues/misspelling_entry_pages", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for misspellings on entry pages issue", "/sites/{site_id}/seov2/issues/misspelling_entry_pages/details", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of misspelling on entry pages issue", "/sites/{site_id}/seov2/issues/misspelling_entry_pages/history", AdvancedSitesSite_idSeov2IssuesMisspelling_entry_pagesHistoryCall, "Function", "Function", true }, 
{ "Get misspellings issue", "/sites/{site_id}/seov2/issues/misspellings", AdvancedSitesSite_idSeov2IssuesMisspellingsCall, "Function", "Function", true }, 
{ "Get overall stats for misspellings issue", "/sites/{site_id}/seov2/issues/misspellings/details", AdvancedSitesSite_idSeov2IssuesMisspellingsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of misspelling issue", "/sites/{site_id}/seov2/issues/misspellings/history", AdvancedSitesSite_idSeov2IssuesMisspellingsHistoryCall, "Function", "Function", true }, 
{ "Get mobile friendly issue", "/sites/{site_id}/seov2/issues/mobile_friendly/details", AdvancedSitesSite_idSeov2IssuesMobile_friendlyDetailsCall, "Function", "Function", true }, 
{ "Get mobile speed issue", "/sites/{site_id}/seov2/issues/mobile_speed/details", AdvancedSitesSite_idSeov2IssuesMobile_speedDetailsCall, "Function", "Function", true }, 
{ "Get the mobile speed score historically", "/sites/{site_id}/seov2/issues/mobile_speed/history", AdvancedSitesSite_idSeov2IssuesMobile_speedHistoryCall, "Function", "Function", true }, 
{ "Get mobile viewport issue", "/sites/{site_id}/seov2/issues/mobile_viewport/details", AdvancedSitesSite_idSeov2IssuesMobile_viewportDetailsCall, "Function", "Function", true }, 
{ "Get multiple h1 issue", "/sites/{site_id}/seov2/issues/multiple_h1", AdvancedSitesSite_idSeov2IssuesMultiple_h1Call, "Function", "Function", true }, 
{ "Get overall stats for multiple h1 issue", "/sites/{site_id}/seov2/issues/multiple_h1/details", AdvancedSitesSite_idSeov2IssuesMultiple_h1DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences for multiple h1 issue", "/sites/{site_id}/seov2/issues/multiple_h1/history", AdvancedSitesSite_idSeov2IssuesMultiple_h1HistoryCall, "Function", "Function", true }, 
{ "Get navigation depth issue", "/sites/{site_id}/seov2/issues/navigation_depth", AdvancedSitesSite_idSeov2IssuesNavigation_depthCall, "Function", "Function", true }, 
{ "Get overall stats for navigation depth issue", "/sites/{site_id}/seov2/issues/navigation_depth/details", AdvancedSitesSite_idSeov2IssuesNavigation_depthDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of navigation depth issue", "/sites/{site_id}/seov2/issues/navigation_depth/history", AdvancedSitesSite_idSeov2IssuesNavigation_depthHistoryCall, "Function", "Function", true }, 
{ "Get new pages issue", "/sites/{site_id}/seov2/issues/new_pages/details", AdvancedSitesSite_idSeov2IssuesNew_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of new pages issue", "/sites/{site_id}/seov2/issues/new_pages/history", AdvancedSitesSite_idSeov2IssuesNew_pagesHistoryCall, "Function", "Function", true }, 
{ "Get nofollow pages issue", "/sites/{site_id}/seov2/issues/nofollow_pages", AdvancedSitesSite_idSeov2IssuesNofollow_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for nofollow pages issue", "/sites/{site_id}/seov2/issues/nofollow_pages/details", AdvancedSitesSite_idSeov2IssuesNofollow_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of nofollow pages issue", "/sites/{site_id}/seov2/issues/nofollow_pages/history", AdvancedSitesSite_idSeov2IssuesNofollow_pagesHistoryCall, "Function", "Function", true }, 
{ "Get noindex pages", "/sites/{site_id}/seov2/issues/noindex_pages", AdvancedSitesSite_idSeov2IssuesNoindex_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for noindex pages issue", "/sites/{site_id}/seov2/issues/noindex_pages/details", AdvancedSitesSite_idSeov2IssuesNoindex_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of noindex pages issue", "/sites/{site_id}/seov2/issues/noindex_pages/history", AdvancedSitesSite_idSeov2IssuesNoindex_pagesHistoryCall, "Function", "Function", true }, 
{ "Get open graph tag pages issue", "/sites/{site_id}/seov2/issues/open_graph_tag_pages", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for open graph tag pages issue", "/sites/{site_id}/seov2/issues/open_graph_tag_pages/details", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of open graph tag pages issue", "/sites/{site_id}/seov2/issues/open_graph_tag_pages/history", AdvancedSitesSite_idSeov2IssuesOpen_graph_tag_pagesHistoryCall, "Function", "Function", true }, 
{ "Get page size issue", "/sites/{site_id}/seov2/issues/page_size", AdvancedSitesSite_idSeov2IssuesPage_sizeCall, "Function", "Function", true }, 
{ "Get overall stats for page size issue", "/sites/{site_id}/seov2/issues/page_size/details", AdvancedSitesSite_idSeov2IssuesPage_sizeDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of page size issue", "/sites/{site_id}/seov2/issues/page_size/history", AdvancedSitesSite_idSeov2IssuesPage_sizeHistoryCall, "Function", "Function", true }, 
{ "Get pages with broken links issue", "/sites/{site_id}/seov2/issues/pages_with_broken_links", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksCall, "Function", "Function", true }, 
{ "Get overall stats for pages with broken links issue", "/sites/{site_id}/seov2/issues/pages_with_broken_links/details", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of page with broken links issue", "/sites/{site_id}/seov2/issues/pages_with_broken_links/history", AdvancedSitesSite_idSeov2IssuesPages_with_broken_linksHistoryCall, "Function", "Function", true }, 
{ "Get pages with frames issue", "/sites/{site_id}/seov2/issues/pages_with_frames", AdvancedSitesSite_idSeov2IssuesPages_with_framesCall, "Function", "Function", true }, 
{ "Get overall stats for pages with frames issue", "/sites/{site_id}/seov2/issues/pages_with_frames/details", AdvancedSitesSite_idSeov2IssuesPages_with_framesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of page with frames issue", "/sites/{site_id}/seov2/issues/pages_with_frames/history", AdvancedSitesSite_idSeov2IssuesPages_with_framesHistoryCall, "Function", "Function", true }, 
{ "Get pages with images over 1mb issue", "/sites/{site_id}/seov2/issues/pages_with_images_1mb", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbCall, "Function", "Function", true }, 
{ "Get overall stats for pages with images over 1mb issue", "/sites/{site_id}/seov2/issues/pages_with_images_1mb/details", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of page with images over 1mb issue", "/sites/{site_id}/seov2/issues/pages_with_images_1mb/history", AdvancedSitesSite_idSeov2IssuesPages_with_images_1mbHistoryCall, "Function", "Function", true }, 
{ "Get pages with misspellings issue", "/sites/{site_id}/seov2/issues/pages_with_misspellings", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsCall, "Function", "Function", true }, 
{ "Get overall stats for pages with misspellings issue", "/sites/{site_id}/seov2/issues/pages_with_misspellings/details", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of page with misspellings issue", "/sites/{site_id}/seov2/issues/pages_with_misspellings/history", AdvancedSitesSite_idSeov2IssuesPages_with_misspellingsHistoryCall, "Function", "Function", true }, 
{ "Get parameterized urls issue", "/sites/{site_id}/seov2/issues/parameterized_urls", AdvancedSitesSite_idSeov2IssuesParameterized_urlsCall, "Function", "Function", true }, 
{ "Get overall stats for parameterized urls issue", "/sites/{site_id}/seov2/issues/parameterized_urls/details", AdvancedSitesSite_idSeov2IssuesParameterized_urlsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of parameterized urls issue", "/sites/{site_id}/seov2/issues/parameterized_urls/history", AdvancedSitesSite_idSeov2IssuesParameterized_urlsHistoryCall, "Function", "Function", true }, 
{ "Get readability pages score issue", "/sites/{site_id}/seov2/issues/readability_pages_score", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreCall, "Function", "Function", true }, 
{ "Get overall stats for readability page score issue", "/sites/{site_id}/seov2/issues/readability_pages_score/details", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of readability pages score issue", "/sites/{site_id}/seov2/issues/readability_pages_score/history", AdvancedSitesSite_idSeov2IssuesReadability_pages_scoreHistoryCall, "Function", "Function", true }, 
{ "Get redirect 301 issue", "/sites/{site_id}/seov2/issues/redirect_301", AdvancedSitesSite_idSeov2IssuesRedirect_301Call, "Function", "Function", true }, 
{ "Get overall stats for redirect 301 issue", "/sites/{site_id}/seov2/issues/redirect_301/details", AdvancedSitesSite_idSeov2IssuesRedirect_301DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of redirect 301 issue", "/sites/{site_id}/seov2/issues/redirect_301/history", AdvancedSitesSite_idSeov2IssuesRedirect_301HistoryCall, "Function", "Function", true }, 
{ "Get redirect chain issue", "/sites/{site_id}/seov2/issues/redirect_chain", AdvancedSitesSite_idSeov2IssuesRedirect_chainCall, "Function", "Function", true }, 
{ "Get overall stats for redirect chain issue", "/sites/{site_id}/seov2/issues/redirect_chain/details", AdvancedSitesSite_idSeov2IssuesRedirect_chainDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of redirect chain issue", "/sites/{site_id}/seov2/issues/redirect_chain/history", AdvancedSitesSite_idSeov2IssuesRedirect_chainHistoryCall, "Function", "Function", true }, 
{ "Get redirect mixed issue", "/sites/{site_id}/seov2/issues/redirect_mixed", AdvancedSitesSite_idSeov2IssuesRedirect_mixedCall, "Function", "Function", true }, 
{ "Get overall stats for redirect mixed issue", "/sites/{site_id}/seov2/issues/redirect_mixed/details", AdvancedSitesSite_idSeov2IssuesRedirect_mixedDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of redirect mixed issue", "/sites/{site_id}/seov2/issues/redirect_mixed/history", AdvancedSitesSite_idSeov2IssuesRedirect_mixedHistoryCall, "Function", "Function", true }, 
{ "Get redirect not 301 issue", "/sites/{site_id}/seov2/issues/redirect_not_301", AdvancedSitesSite_idSeov2IssuesRedirect_not_301Call, "Function", "Function", true }, 
{ "Get overall stats for redirect not 301 issue", "/sites/{site_id}/seov2/issues/redirect_not_301/details", AdvancedSitesSite_idSeov2IssuesRedirect_not_301DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of redirect not 301 issue", "/sites/{site_id}/seov2/issues/redirect_not_301/history", AdvancedSitesSite_idSeov2IssuesRedirect_not_301HistoryCall, "Function", "Function", true }, 
{ "Get sitemap excluded pages issue
", "/sites/{site_id}/seov2/issues/sitemap_excluded_pages", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for sitemap excluded pages issue", "/sites/{site_id}/seov2/issues/sitemap_excluded_pages/details", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of sitemap excluded pages issue", "/sites/{site_id}/seov2/issues/sitemap_excluded_pages/history", AdvancedSitesSite_idSeov2IssuesSitemap_excluded_pagesHistoryCall, "Function", "Function", true }, 
{ "Get ssl enabled issue", "/sites/{site_id}/seov2/issues/ssl_enabled", AdvancedSitesSite_idSeov2IssuesSsl_enabledCall, "Function", "Function", true }, 
{ "Get overall stats for ssl enabled issue", "/sites/{site_id}/seov2/issues/ssl_enabled/details", AdvancedSitesSite_idSeov2IssuesSsl_enabledDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of ssl enabled issue", "/sites/{site_id}/seov2/issues/ssl_enabled/history", AdvancedSitesSite_idSeov2IssuesSsl_enabledHistoryCall, "Function", "Function", true }, 
{ "Get ssl mixed issue", "/sites/{site_id}/seov2/issues/ssl_mixed", AdvancedSitesSite_idSeov2IssuesSsl_mixedCall, "Function", "Function", true }, 
{ "Get overall stats for ssl mixed issue", "/sites/{site_id}/seov2/issues/ssl_mixed/details", AdvancedSitesSite_idSeov2IssuesSsl_mixedDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of ssl mixed issue", "/sites/{site_id}/seov2/issues/ssl_mixed/history", AdvancedSitesSite_idSeov2IssuesSsl_mixedHistoryCall, "Function", "Function", true }, 
{ "Get status code 404 issue", "/sites/{site_id}/seov2/issues/status_code_404", AdvancedSitesSite_idSeov2IssuesStatus_code_404Call, "Function", "Function", true }, 
{ "Get overall stats for status code 404 issue", "/sites/{site_id}/seov2/issues/status_code_404/details", AdvancedSitesSite_idSeov2IssuesStatus_code_404DetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of status code 404 issue", "/sites/{site_id}/seov2/issues/status_code_404/history", AdvancedSitesSite_idSeov2IssuesStatus_code_404HistoryCall, "Function", "Function", true }, 
{ "Get status code 4xx issue", "/sites/{site_id}/seov2/issues/status_code_4xxs", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsCall, "Function", "Function", true }, 
{ "Get overall stats for status code 4xx issue", "/sites/{site_id}/seov2/issues/status_code_4xxs/details", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of status code 4xx issue", "/sites/{site_id}/seov2/issues/status_code_4xxs/history", AdvancedSitesSite_idSeov2IssuesStatus_code_4xxsHistoryCall, "Function", "Function", true }, 
{ "Get status code 500 issue", "/sites/{site_id}/seov2/issues/status_code_500s", AdvancedSitesSite_idSeov2IssuesStatus_code_500sCall, "Function", "Function", true }, 
{ "Get overall stats for status code 500 issue", "/sites/{site_id}/seov2/issues/status_code_500s/details", AdvancedSitesSite_idSeov2IssuesStatus_code_500sDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of status code 500 issue", "/sites/{site_id}/seov2/issues/status_code_500s/history", AdvancedSitesSite_idSeov2IssuesStatus_code_500sHistoryCall, "Function", "Function", true }, 
{ "Get structured markup pages issue", "/sites/{site_id}/seov2/issues/structured_markup_pages", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for structured markup pages issue", "/sites/{site_id}/seov2/issues/structured_markup_pages/details", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of structured markup pages issue", "/sites/{site_id}/seov2/issues/structured_markup_pages/history", AdvancedSitesSite_idSeov2IssuesStructured_markup_pagesHistoryCall, "Function", "Function", true }, 
{ "Get touchscreen ready issue", "/sites/{site_id}/seov2/issues/touchscreen_ready/details", AdvancedSitesSite_idSeov2IssuesTouchscreen_readyDetailsCall, "Function", "Function", true }, 
{ "Get unsafe domain issue", "/sites/{site_id}/seov2/issues/unsafe_domain/details", AdvancedSitesSite_idSeov2IssuesUnsafe_domainDetailsCall, "Function", "Function", true }, 
{ "Get updated media issue", "/sites/{site_id}/seov2/issues/updated_media", AdvancedSitesSite_idSeov2IssuesUpdated_mediaCall, "Function", "Function", true }, 
{ "Get overall stats for updated media issue", "/sites/{site_id}/seov2/issues/updated_media/details", AdvancedSitesSite_idSeov2IssuesUpdated_mediaDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of updated media issue", "/sites/{site_id}/seov2/issues/updated_media/history", AdvancedSitesSite_idSeov2IssuesUpdated_mediaHistoryCall, "Function", "Function", true }, 
{ "Get updated pages issue", "/sites/{site_id}/seov2/issues/updated_pages", AdvancedSitesSite_idSeov2IssuesUpdated_pagesCall, "Function", "Function", true }, 
{ "Get overall stats for updated pages issue", "/sites/{site_id}/seov2/issues/updated_pages/details", AdvancedSitesSite_idSeov2IssuesUpdated_pagesDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of updated pages issue", "/sites/{site_id}/seov2/issues/updated_pages/history", AdvancedSitesSite_idSeov2IssuesUpdated_pagesHistoryCall, "Function", "Function", true }, 
{ "Get urls with underscore issue", "/sites/{site_id}/seov2/issues/urls_with_underscore", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreCall, "Function", "Function", true }, 
{ "Get overall stats for urls with underscore issue", "/sites/{site_id}/seov2/issues/urls_with_underscore/details", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of urls with underscore issue", "/sites/{site_id}/seov2/issues/urls_with_underscore/history", AdvancedSitesSite_idSeov2IssuesUrls_with_underscoreHistoryCall, "Function", "Function", true }, 
{ "Get words per page issue", "/sites/{site_id}/seov2/issues/words_per_page", AdvancedSitesSite_idSeov2IssuesWords_per_pageCall, "Function", "Function", true }, 
{ "Get overall stats for words per page issue", "/sites/{site_id}/seov2/issues/words_per_page/details", AdvancedSitesSite_idSeov2IssuesWords_per_pageDetailsCall, "Function", "Function", true }, 
{ "Get historical occurrences of words per page issue", "/sites/{site_id}/seov2/issues/words_per_page/history", AdvancedSitesSite_idSeov2IssuesWords_per_pageHistoryCall, "Function", "Function", true }, 
{ "Get monitored keywords", "/sites/{site_id}/seov2/keywords", AdvancedSitesSite_idSeov2KeywordsCall, "Function", "Function", true }, 
{ "Get ranking pages for the keyword", "/sites/{site_id}/seov2/keywords/{keyword_id}/ranking_pages", AdvancedSitesSite_idSeov2KeywordsKeyword_idRanking_pagesCall, "Function", "Function", true }, 
{ "Get SEO groups", "/sites/{site_id}/seov2/overview/groups", AdvancedSitesSite_idSeov2OverviewGroupsCall, "Function", "Function", true }, 
{ "Get the SEO scores", "/sites/{site_id}/seov2/overview/score", AdvancedSitesSite_idSeov2OverviewScoreCall, "Function", "Function", true }, 
{ "Get the SEO scores historically", "/sites/{site_id}/seov2/overview/score/history", AdvancedSitesSite_idSeov2OverviewScoreHistoryCall, "Function", "Function", true }, 
{ "Get pages with issues", "/sites/{site_id}/seov2/pages", AdvancedSitesSite_idSeov2PagesCall, "Function", "Function", true }, 
{ "Get issues for specific page", "/sites/{site_id}/seov2/pages/{page_id}/issues", AdvancedSitesSite_idSeov2PagesPage_idIssuesCall, "Function", "Function", true }, 
{ "Get target pages for keywords", "/sites/{site_id}/seov2/target_pages", AdvancedSitesSite_idSeov2Target_pagesCall, "Function", "Function", true }, 
{ "Get competing content issues for the target page", "/sites/{site_id}/seov2/target_pages/pages/{page_id}/competing_content_issues", AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesCall, "Function", "Function", true }, 
{ "Get the competing content issue type for the page", "/sites/{site_id}/seov2/target_pages/pages/{page_id}/competing_content_issues/{type}/pages", AdvancedSitesSite_idSeov2Target_pagesPagesPage_idCompeting_content_issuesTypePagesCall, "Function", "Function", true }, 
{ "Get keyword issues for the page", "/sites/{site_id}/seov2/target_pages/pages/{page_id}/keyword_issues", AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_issuesCall, "Function", "Function", true }, 
{ "Get keyword occurrences for the page", "/sites/{site_id}/seov2/target_pages/pages/{page_id}/keyword_occurrences", AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeyword_occurrencesCall, "Function", "Function", true }, 
{ "Get the keywords targeting the page", "/sites/{site_id}/seov2/target_pages/pages/{page_id}/keywords", AdvancedSitesSite_idSeov2Target_pagesPagesPage_idKeywordsCall, "Function", "Function", true }, 
{ "Get overall statistics for target pages", "/sites/{site_id}/seov2/target_pages/summary", AdvancedSitesSite_idSeov2Target_pagesSummaryCall, "Function", "Function", true }
        }),
        navTable = Table.ToFunctionsTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;


GetAdvancedNavTable = () as table =>
    let
        objects = #table(
            {"Name", "Key", "Data", "ItemKind", "ItemName", "IsLeaf"}, {
            { "Content", "adv_content", GetAdvancedContentNavTable(), "Feed", "Feed", false }, 
{ "GDPR", "adv_gdpr", GetAdvancedGDPRNavTable(), "Feed", "Feed", false }, 
{ "Integrations", "adv_integrations", GetAdvancedIntegrationsNavTable(), "Feed", "Feed", false }, 
{ "General", "adv_general", GetAdvancedGeneralNavTable(), "Feed", "Feed", false }, 
{ "Analytics", "adv_analytics", GetAdvancedAnalyticsNavTable(), "Feed", "Feed", false }, 
{ "Accessibility", "adv_accessibility", GetAdvancedAccessibilityNavTable(), "Feed", "Feed", false }, 
{ "Policy", "adv_policy", GetAdvancedPolicyNavTable(), "Feed", "Feed", false }, 
{ "Quality Assurance", "adv_quality_assurance", GetAdvancedQualityAssuranceNavTable(), "Feed", "Feed", false }, 
{ "SEO", "adv_seo", GetAdvancedSEONavTable(), "Feed", "Feed", false }, 
{ "SeoV2", "adv_seov2", GetAdvancedSeoV2NavTable(), "Feed", "Feed", false }
        }),
        navTable = Table.ToNavigationTable(objects, {"Key"}, "Name", "Data", "ItemKind", "ItemName", "IsLeaf")
    in
        navTable;
