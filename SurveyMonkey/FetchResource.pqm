let 
    GetNextLink = (response) as nullable text => Record.FieldOrDefault(Record.FieldOrDefault(response, "links"), "next"),

    // The getNextPage function takes a single argument and is expected to return a nullable table
    Table.GenerateByPage = (getNextPage as function) as table =>
        let        
            listOfPages = List.Generate(
                () => getNextPage(null),            // get the first page of data
                (lastPage) => lastPage <> null,     // stop when the function returns null
                (lastPage) => getNextPage(lastPage) // pass the previous page to the next function call
            ),
            // concatenate the pages together
            tableOfPages = Table.FromList(listOfPages, Splitter.SplitByNothing(), {"Column1"}),
            firstRow = tableOfPages{0}?
        in
            // if we didn't get back any pages of data, return an empty table
            // otherwise set the table type based on the columns of the first page
            if (firstRow = null) then
                Table.FromRows({})
            else        
                Value.ReplaceType(
                    Table.ExpandTableColumn(tableOfPages, "Column1", Table.ColumnNames(firstRow[Column1])),
                    Value.Type(firstRow[Column1])
                ),

    GetAllPagesByNextLink = (url as text, access_token as text) as table =>
        Table.GenerateByPage((previous) => 
            let
                // if previous is null, then this is our first page of data
                nextLink = if (previous = null) then url else Value.Metadata(previous)[NextLink]?,
                // if NextLink was set to null by the previous call, we know we have no more data
                page = if (nextLink <> null) then GetPage(nextLink, access_token) else null
            in
                page
        ),

    GetPage = (url as text, access_token as text) as table =>
        let
            response = Web.Contents(url,
            [Headers=[#"Authorization" = "bearer "& access_token]]),  
            body = Json.Document(response),
            nextLink = GetNextLink(body),
            data = Table.FromRecords(body[data])
        in
            data meta [NextLink = nextLink],

    SurveyMonkey.GetSurveys = (api_url as text, access_token as text) as table =>
        let
            #"Converted to Table" = GetAllPagesByNextLink(api_url & "/v3/surveys", access_token)
        in
            #"Converted to Table",

    SurveyMonkey.GetSurveyResponses = (api_url as text, surveyId as text, access_token as text) =>
        let
            responses = GetAllPagesByNextLink(api_url & "/v3/surveys/" & surveyId & "/responses/bulk?per_page=100", access_token),
            responseList = Table.ToRecords(responses)
        in
            responseList

in
     [
        GetSurveys = SurveyMonkey.GetSurveys,
        GetSurveyResponses = SurveyMonkey.GetSurveyResponses
     ]