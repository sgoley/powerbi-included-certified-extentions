<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthKeyLabel" xml:space="preserve">
    <value>API Token</value>
  </data>
  <data name="AuthKeyName" xml:space="preserve">
    <value>Token</value>
  </data>
  <data name="AuthUserNameLabel" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="DataSourceHelp" xml:space="preserve">
    <value>Retrieve the data from your TeamDesk database</value>
  </data>
  <data name="DataSourceName" xml:space="preserve">
    <value>TeamDesk</value>
  </data>
  <data name="ErrBadColumns" xml:space="preserve">
    <value>Columns: Expected list of text or semicolon-separated text</value>
  </data>
  <data name="ErrBadOrder" xml:space="preserve">
    <value>Order by: Expected list of text or semicolon-separated text</value>
  </data>
  <data name="ErrBadViewType" xml:space="preserve">
    <value>Views of type "#{0}" are not supported</value>
  </data>
  <data name="ErrInvalidURL" xml:space="preserve">
    <value>URL is invalid</value>
  </data>
  <data name="ErrNoColumnName" xml:space="preserve">
    <value>Column "#{0}" not found</value>
  </data>
  <data name="ErrNoColumns" xml:space="preserve">
    <value>At least one column is required</value>
  </data>
  <data name="ErrNoStarColumn" xml:space="preserve">
    <value>Star specifier is not allowed</value>
  </data>
  <data name="ErrNoTableName" xml:space="preserve">
    <value>Table name is required</value>
  </data>
  <data name="ErrNoView" xml:space="preserve">
    <value>View not found</value>
  </data>
  <data name="ErrNoViewName" xml:space="preserve">
    <value>View name is required</value>
  </data>
  <data name="ErrUnexpectedResult" xml:space="preserve">
    <value>Unexpected response. Please check URL parameter</value>
  </data>
  <data name="FnDatabaseDescription" xml:space="preserve">
    <value>Connects to TeamDesk database and let you select a table and a view to retrieve the data from.</value>
  </data>
  <data name="FnDatabaseExample1" xml:space="preserve">
    <value>Connect to sample TeamDesk database</value>
  </data>
  <data name="FnDatabaseName" xml:space="preserve">
    <value>TeamDesk.Database</value>
  </data>
  <data name="FnSelectDescription" xml:space="preserve">
    <value>Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.</value>
  </data>
  <data name="FnSelectExample1" xml:space="preserve">
    <value>Selects text and date columns</value>
  </data>
  <data name="FnSelectExample1Result" xml:space="preserve">
    <value>#table(
	{ "Starter", "Start Date", "Participants" },
	{
		{ ""Joe"", #date(2018, 10, 12), 10 },
		// ...
	}
)</value>
  </data>
  <data name="FnSelectName" xml:space="preserve">
    <value>TeamDesk.Select</value>
  </data>
  <data name="FnSelectViewDescription" xml:space="preserve">
    <value>Retrieves the data from provided table and view. You can also apply an additional filter for results.</value>
  </data>
  <data name="FnSelectViewExample1" xml:space="preserve">
    <value>Retrieve all meetings from List All view</value>
  </data>
  <data name="FnSelectViewExample2" xml:space="preserve">
    <value>Retrieve today's meetings from List All view</value>
  </data>
  <data name="FnSelectViewName" xml:space="preserve">
    <value>TeamDesk.SelectView</value>
  </data>
  <data name="ParamColumnsCaption" xml:space="preserve">
    <value>Columns</value>
  </data>
  <data name="ParamColumnsDescription" xml:space="preserve">
    <value>Semicolon-separated string or a list of column names to retrieve</value>
  </data>
  <data name="ParamColumnsExample" xml:space="preserve">
    <value>Starter; Start Date; Participants</value>
  </data>
  <data name="ParamFilterCaption" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="ParamFilterDescription" xml:space="preserve">
    <value>Filter expression in TeamDesk formula syntax</value>
  </data>
  <data name="ParamFilterExample" xml:space="preserve">
    <value>[Start Date] = Today()</value>
  </data>
  <data name="ParamOrderByCaption" xml:space="preserve">
    <value>Order by</value>
  </data>
  <data name="ParamOrderByDescription" xml:space="preserve">
    <value>Semicolon-separated list of column names to order by. Add //DESC suffix to reverse the order.</value>
  </data>
  <data name="ParamOrderByExample" xml:space="preserve">
    <value>Start Date//DESC; Start Time</value>
  </data>
  <data name="ParamTableCaption" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="ParamTableDescription" xml:space="preserve">
    <value>The name of the table in singular form</value>
  </data>
  <data name="ParamTableExample" xml:space="preserve">
    <value>Meeting</value>
  </data>
  <data name="ParamUrlCaption" xml:space="preserve">
    <value>Database URL</value>
  </data>
  <data name="ParamUrlDescription" xml:space="preserve">
    <value>Any URL to your TeamDesk database</value>
  </data>
  <data name="ParamUrlExample" xml:space="preserve">
    <value>https://www.teamdesk.net/secure/db/57692</value>
  </data>
  <data name="ParamViewCaption" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="ParamViewDescription" xml:space="preserve">
    <value>The name of the view</value>
  </data>
  <data name="ParamViewExample" xml:space="preserve">
    <value>List All</value>
  </data>
</root>